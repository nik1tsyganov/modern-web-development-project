{"ast":null,"code":"import _toConsumableArray from \"/Users/NikitaMac/Desktop/Modern Web Development/Homework/modern-web-development-project/html/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"/Users/NikitaMac/Desktop/Modern Web Development/Homework/modern-web-development-project/html/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/NikitaMac/Desktop/Modern Web Development/Homework/modern-web-development-project/html/src/Components/Comments/CommentList.js\";\n\nimport React, { useState, useEffect } from \"react\";\nimport CommentForm from \"./CommentForm\";\nimport Comment from \"./Comment\";\nimport SearchForm from \"./SearchForm\";\nimport { getComments as getCommentsService, createComment as createCommentService, updateComment as updateCommentService, deleteComment as deleteCommentService } from \"./../../Common/Services/CommentService\";\nimport { getUsername } from \"./../../Common/Services/MentionService\";\nimport { containsWord } from \"./../../Common/Services/SearchService\";\nimport Parse from \"parse\";\n\nvar Comments = function Comments() {\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      backendComments = _useState2[0],\n      setBackendComments = _useState2[1];\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      activeComment = _useState4[0],\n      setActiveComment = _useState4[1];\n\n  var rootComments = backendComments.filter(function (backendComment) {\n    if (backendComment.attributes !== undefined) {\n      if (backendComment.attributes.parentId === null) return backendComment;\n    }\n  });\n\n  var _useState5 = useState([]),\n      _useState6 = _slicedToArray(_useState5, 2),\n      usersForMention = _useState6[0],\n      setUsersForMention = _useState6[1];\n\n  var _useState7 = useState(\"\"),\n      _useState8 = _slicedToArray(_useState7, 2),\n      reduxWord = _useState8[0],\n      setReduxWord = _useState8[1];\n\n  var _useState9 = useState(false),\n      _useState10 = _slicedToArray(_useState9, 2),\n      searchFlag = _useState10[0],\n      setSearchFlag = _useState10[1];\n\n  var _useState11 = useState([]),\n      _useState12 = _slicedToArray(_useState11, 2),\n      filteredIds = _useState12[0],\n      setFilteredIds = _useState12[1];\n\n  var currentUser;\n\n  if (Parse.User.current() !== null) {\n    currentUser = Parse.User.current();\n  } else {\n    currentUser = {\n      id: \"0\",\n      attributes: {\n        username: \"Guest\"\n      }\n    };\n  }\n\n  var getReplies = function getReplies(commentId) {\n    return backendComments.filter(function (backendComment) {\n      if (backendComment.attributes !== undefined) {\n        if (backendComment.attributes.parentId === commentId) {\n          return backendComment;\n        }\n      }\n    }).sort(function (a, b) {\n      return new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime();\n    });\n  };\n\n  var addComment = function addComment(text, userId, parentId, username) {\n    createCommentService(text, userId, parentId, username).then(function (comment) {\n      setBackendComments([comment].concat(_toConsumableArray(backendComments)));\n      setActiveComment(null);\n    });\n  };\n\n  var updateComment = function updateComment(commentId, text) {\n    updateCommentService(commentId, text).then(function (comment) {\n      var updatedBackendComments = backendComments.filter(function (backendComment) {\n        return backendComment.id !== comment.id;\n      });\n      setBackendComments([comment].concat(_toConsumableArray(updatedBackendComments)));\n      setActiveComment(null);\n    });\n  };\n\n  var deleteComment = function deleteComment(commentId) {\n    if (window.confirm(\"Are you sure you want to remove comment?\")) {\n      deleteCommentService(commentId).then(function (result) {\n        var updatedBackendComments = backendComments.filter(function (backendComment) {\n          return backendComment.id !== result.id;\n        });\n        setBackendComments(updatedBackendComments);\n        setActiveComment(null);\n      });\n    }\n  };\n\n  var reduxCommentSearch = function reduxCommentSearch(word) {\n    var filteredCommentsIds = backendComments.filter(function (backendComment) {\n      if (backendComment.attributes !== undefined) {\n        if (containsWord(backendComment.attributes.body, word) === true) {\n          console.log(backendComment.id);\n          return backendComment.id;\n        }\n      }\n    });\n    console.log(filteredCommentsIds);\n    setFilteredIds(filteredCommentsIds);\n  };\n\n  var onClickHandler = function onClickHandler(e) {\n    e.preventDefault();\n    setSearchFlag(true);\n    if (searchFlag === true) reduxCommentSearch(reduxWord);\n  };\n\n  var onChangeHandler = function onChangeHandler(e) {\n    e.preventDefault();\n    setReduxWord(e.target.value);\n  };\n\n  useEffect(function () {\n    getCommentsService().then(function (data) {\n      setBackendComments(data);\n    });\n    getUsername().then(function (results) {\n      var users = [];\n\n      for (var i = 0; i < results.length; i++) {\n        var dict = {};\n        dict[\"id\"] = results[i].attributes.username;\n        dict[\"display\"] = results[i].attributes.firstName;\n        users.push(dict);\n      }\n\n      setUsersForMention(users);\n    });\n  }, []);\n  console.log(filteredIds);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"comments\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    className: \"comments-space-title\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 13\n    }\n  }, \"Search the comment space\"), /*#__PURE__*/React.createElement(SearchForm, {\n    onSubmitForm: onClickHandler,\n    onChangeForm: onChangeHandler,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"h3\", {\n    className: \"comments-title\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 13\n    }\n  }, \"Comments\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"comment-form-title\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 13\n    }\n  }, \"Write comment\"), /*#__PURE__*/React.createElement(CommentForm, {\n    submitLabel: \"Write\",\n    usersForMention: usersForMention,\n    currentUser: currentUser,\n    handleSubmit: addComment,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"comments-container\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 13\n    }\n  }, rootComments.map(function (rootComment) {\n    return filteredIds.includes(rootComment.id) === true ? console.log(rootComment.id) : /*#__PURE__*/React.createElement(\"p\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 55\n      }\n    }, \"No comments\");\n  })));\n};\n\nexport default Comments;","map":{"version":3,"names":["React","useState","useEffect","CommentForm","Comment","SearchForm","getComments","getCommentsService","createComment","createCommentService","updateComment","updateCommentService","deleteComment","deleteCommentService","getUsername","containsWord","Parse","Comments","backendComments","setBackendComments","activeComment","setActiveComment","rootComments","filter","backendComment","attributes","undefined","parentId","usersForMention","setUsersForMention","reduxWord","setReduxWord","searchFlag","setSearchFlag","filteredIds","setFilteredIds","currentUser","User","current","id","username","getReplies","commentId","sort","a","b","Date","createdAt","getTime","addComment","text","userId","then","comment","updatedBackendComments","window","confirm","result","reduxCommentSearch","word","filteredCommentsIds","body","console","log","onClickHandler","e","preventDefault","onChangeHandler","target","value","data","results","users","i","length","dict","firstName","push","map","rootComment","includes"],"sources":["/Users/NikitaMac/Desktop/Modern Web Development/Homework/modern-web-development-project/html/src/Components/Comments/CommentList.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport CommentForm from \"./CommentForm\";\nimport Comment from \"./Comment\";\nimport SearchForm from \"./SearchForm\";\nimport {\n  getComments as getCommentsService,\n  createComment as createCommentService,\n  updateComment as updateCommentService,\n  deleteComment as deleteCommentService,\n} from \"./../../Common/Services/CommentService\";\nimport { getUsername } from \"./../../Common/Services/MentionService\";\nimport { containsWord } from \"./../../Common/Services/SearchService\";\nimport Parse from \"parse\";\n\nconst Comments = () => {\n\n    const [backendComments, setBackendComments] = useState([]);\n    const [activeComment, setActiveComment] = useState(null);\n    const rootComments = backendComments.filter(\n        (backendComment) => {\n            if (backendComment.attributes  !== undefined) {\n                if (backendComment.attributes.parentId === null)\n                    return backendComment;\n            }\n        });\n    const [usersForMention, setUsersForMention] = useState([]);\n    const [reduxWord, setReduxWord] = useState(\"\");\n    const [searchFlag, setSearchFlag] = useState(false);\n    const [filteredIds, setFilteredIds] = useState([]);\n\n    var currentUser;\n    if (Parse.User.current() !== null) {\n        currentUser = Parse.User.current();\n    } else {\n        currentUser = {id: \"0\", attributes: {username: \"Guest\"}};\n    }\n\n    const getReplies = (commentId) =>\n        backendComments\n        .filter((backendComment) =>  {\n            if (backendComment.attributes !== undefined) {\n                if (backendComment.attributes.parentId === commentId) {\n                    return backendComment;\n                }\n            }\n        })\n        .sort(\n            (a, b) =>\n            new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime()\n        );\n\n    const addComment = (text, userId, parentId, username) => {\n        createCommentService(text, userId, parentId, username).then((comment) => {\n        setBackendComments([comment, ...backendComments]);\n        setActiveComment(null);\n        });\n    };\n\n    const updateComment = (commentId, text) => {\n        updateCommentService(commentId, text).then((comment) => {\n            const updatedBackendComments = backendComments.filter(\n                (backendComment) => backendComment.id !== comment.id\n            );\n            setBackendComments([comment, ...updatedBackendComments]);\n            setActiveComment(null);\n        });\n    };\n\n    const deleteComment = (commentId) => {\n        if (window.confirm(\"Are you sure you want to remove comment?\")) {\n            deleteCommentService(commentId).then((result) => {\n                const updatedBackendComments = backendComments.filter(\n                (backendComment) => backendComment.id !== result.id\n                );\n                setBackendComments(updatedBackendComments);\n                setActiveComment(null);\n            });\n        }\n    };\n\n    const reduxCommentSearch = (word) => {\n        const filteredCommentsIds = backendComments\n        .filter((backendComment) =>  {\n            if (backendComment.attributes !== undefined) {\n                if (containsWord(backendComment.attributes.body, word) === true) {\n                    console.log(backendComment.id);\n                    return backendComment.id;\n                }\n            }\n        })\n        console.log(filteredCommentsIds);\n        setFilteredIds(filteredCommentsIds);\n    }\n\n    const onClickHandler = (e) => {\n        e.preventDefault();\n        setSearchFlag(true);\n        if (searchFlag === true) reduxCommentSearch(reduxWord);\n      };\n  \n    const onChangeHandler = (e) => {\n        e.preventDefault();\n        setReduxWord(e.target.value);\n    };\n\n    useEffect(() => {\n        getCommentsService().then((data) => {\n            setBackendComments(data);\n        });\n        getUsername().then((results) => {\n            var users = [];\n            for (let i = 0; i < results.length; i++) {\n                var dict = {};\n                dict[\"id\"] = results[i].attributes.username;\n                dict[\"display\"] = results[i].attributes.firstName;\n                users.push(dict);\n            }\n            setUsersForMention(users);\n        })\n    }, []);\n\n    console.log(filteredIds);\n\n    return (\n        <div className=\"comments\">\n            <h3 className=\"comments-space-title\">Search the comment space</h3>\n            <SearchForm onSubmitForm={onClickHandler} onChangeForm={onChangeHandler}/>\n            <br />\n            <h3 className=\"comments-title\">Comments</h3>\n            <div className=\"comment-form-title\">Write comment</div>\n            <CommentForm submitLabel=\"Write\" usersForMention={usersForMention} currentUser={currentUser} handleSubmit={addComment} />\n            <div className=\"comments-container\">\n                {rootComments.map((rootComment) => (\n                    (filteredIds.includes(rootComment.id) === true) ? \n                        console.log(rootComment.id) : <p>No comments</p>\n                ))}\n            </div>\n        </div>\n    );\n};\n\nexport default Comments;"],"mappings":"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"},"metadata":{},"sourceType":"module"}