{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs3/helpers/interopRequireDefault\");\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs3/core-js-stable/object/define-property\");\n\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = void 0;\n\nvar _entries = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/object/entries\"));\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/slicedToArray\"));\n\nvar _isArray = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/array/is-array\"));\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/toConsumableArray\"));\n\nvar _find = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/find\"));\n\nvar _promise = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/promise\"));\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime-corejs3/regenerator\"));\n\nvar _splice = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/splice\"));\n\nvar _sort = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/sort\"));\n\nvar _includes = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/includes\"));\n\nvar _concat = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/concat\"));\n\nvar _keys = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/keys\"));\n\nvar _filter2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/filter\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/asyncToGenerator\"));\n\nvar _map2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/map\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/createClass\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/defineProperty\"));\n\nvar _slice = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/slice\"));\n\nvar _keys2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/object/keys\"));\n\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/typeof\"));\n\nvar _indexOf = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/index-of\"));\n\nvar _forEach = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/for-each\"));\n\nvar _CoreManager = _interopRequireDefault(require(\"./CoreManager\"));\n\nvar _encode = _interopRequireDefault(require(\"./encode\"));\n\nvar _promiseUtils = require(\"./promiseUtils\");\n\nvar _ParseError = _interopRequireDefault(require(\"./ParseError\"));\n\nvar _ParseGeoPoint = _interopRequireDefault(require(\"./ParseGeoPoint\"));\n\nvar _ParseObject = _interopRequireDefault(require(\"./ParseObject\"));\n\nvar _OfflineQuery = _interopRequireDefault(require(\"./OfflineQuery\"));\n\nvar _LocalDatastoreUtils = require(\"./LocalDatastoreUtils\");\n/*\r\n * Copyright (c) 2015-present, Parse, LLC.\r\n * All rights reserved.\r\n *\r\n * This source code is licensed under the BSD-style license found in the\r\n * LICENSE file in the root directory of this source tree. An additional grant\r\n * of patent rights can be found in the PATENTS file in the same directory.\r\n *\r\n * @flow\r\n */\n\n/**\r\n * Converts a string into a regex that matches it.\r\n * Surrounding with \\Q .. \\E does this, we just need to escape any \\E's in\r\n * the text separately.\r\n *\r\n * @param s\r\n * @private\r\n * @returns {string}\r\n */\n\n\nfunction quote(s\n/*: string*/\n)\n/*: string*/\n{\n  return '\\\\Q' + s.replace('\\\\E', '\\\\E\\\\\\\\E\\\\Q') + '\\\\E';\n}\n/**\r\n * Extracts the class name from queries. If not all queries have the same\r\n * class name an error will be thrown.\r\n *\r\n * @param queries\r\n * @private\r\n * @returns {string}\r\n */\n\n\nfunction _getClassNameFromQueries(queries\n/*: Array<ParseQuery>*/\n)\n/*: ?string*/\n{\n  var className = null;\n  (0, _forEach.default)(queries).call(queries, function (q) {\n    if (!className) {\n      className = q.className;\n    }\n\n    if (className !== q.className) {\n      throw new Error('All queries must be for the same class.');\n    }\n  });\n  return className;\n}\n/*\r\n * Handles pre-populating the result data of a query with select fields,\r\n * making sure that the data object contains keys for all objects that have\r\n * been requested with a select, so that our cached state updates correctly.\r\n */\n\n\nfunction handleSelectResult(data\n/*: any*/\n, select\n/*: Array<string>*/\n) {\n  var serverDataMask = {};\n  (0, _forEach.default)(select).call(select, function (field) {\n    var hasSubObjectSelect = (0, _indexOf.default)(field).call(field, '.') !== -1;\n\n    if (!hasSubObjectSelect && !data.hasOwnProperty(field)) {\n      // this field was selected, but is missing from the retrieved data\n      data[field] = undefined;\n    } else if (hasSubObjectSelect) {\n      // this field references a sub-object,\n      // so we need to walk down the path components\n      var pathComponents = field.split('.');\n      var _obj = data;\n      var serverMask = serverDataMask;\n      (0, _forEach.default)(pathComponents).call(pathComponents, function (component, index, arr) {\n        // add keys if the expected data is missing\n        if (_obj && !_obj.hasOwnProperty(component)) {\n          _obj[component] = undefined;\n        }\n\n        if (_obj && (0, _typeof2.default)(_obj) === 'object') {\n          _obj = _obj[component];\n        } //add this path component to the server mask so we can fill it in later if needed\n\n\n        if (index < arr.length - 1) {\n          if (!serverMask[component]) {\n            serverMask[component] = {};\n          }\n\n          serverMask = serverMask[component];\n        }\n      });\n    }\n  });\n\n  if ((0, _keys2.default)(serverDataMask).length > 0) {\n    // When selecting from sub-objects, we don't want to blow away the missing\n    // information that we may have retrieved before. We've already added any\n    // missing selected keys to sub-objects, but we still need to add in the\n    // data for any previously retrieved sub-objects that were not selected.\n    var serverData = _CoreManager.default.getObjectStateController().getServerData({\n      id: data.objectId,\n      className: data.className\n    });\n\n    copyMissingDataWithMask(serverData, data, serverDataMask, false);\n  }\n}\n\nfunction copyMissingDataWithMask(src, dest, mask, copyThisLevel) {\n  //copy missing elements at this level\n  if (copyThisLevel) {\n    for (var _key in src) {\n      if (src.hasOwnProperty(_key) && !dest.hasOwnProperty(_key)) {\n        dest[_key] = src[_key];\n      }\n    }\n  }\n\n  for (var _key2 in mask) {\n    if (dest[_key2] !== undefined && dest[_key2] !== null && src !== undefined && src !== null) {\n      //traverse into objects as needed\n      copyMissingDataWithMask(src[_key2], dest[_key2], mask[_key2], true);\n    }\n  }\n}\n\nfunction handleOfflineSort(a, b, sorts) {\n  var order = sorts[0];\n  var operator = (0, _slice.default)(order).call(order, 0, 1);\n  var isDescending = operator === '-';\n\n  if (isDescending) {\n    order = order.substring(1);\n  }\n\n  if (order === '_created_at') {\n    order = 'createdAt';\n  }\n\n  if (order === '_updated_at') {\n    order = 'updatedAt';\n  }\n\n  if (!/^[A-Za-z][0-9A-Za-z_]*$/.test(order) || order === 'password') {\n    throw new _ParseError.default(_ParseError.default.INVALID_KEY_NAME, \"Invalid Key: \".concat(order));\n  }\n\n  var field1 = a.get(order);\n  var field2 = b.get(order);\n\n  if (field1 < field2) {\n    return isDescending ? 1 : -1;\n  }\n\n  if (field1 > field2) {\n    return isDescending ? -1 : 1;\n  }\n\n  if (sorts.length > 1) {\n    var remainingSorts = (0, _slice.default)(sorts).call(sorts, 1);\n    return handleOfflineSort(a, b, remainingSorts);\n  }\n\n  return 0;\n}\n/**\r\n * Creates a new parse Parse.Query for the given Parse.Object subclass.\r\n *\r\n * <p>Parse.Query defines a query that is used to fetch Parse.Objects. The\r\n * most common use case is finding all objects that match a query through the\r\n * <code>find</code> method. for example, this sample code fetches all objects\r\n * of class <code>myclass</code>. it calls a different function depending on\r\n * whether the fetch succeeded or not.\r\n *\r\n * <pre>\r\n * var query = new Parse.Query(myclass);\r\n * query.find().then((results) => {\r\n *   // results is an array of parse.object.\r\n * }).catch((error) =>  {\r\n *  // error is an instance of parse.error.\r\n * });</pre></p>\r\n *\r\n * <p>a Parse.Query can also be used to retrieve a single object whose id is\r\n * known, through the get method. for example, this sample code fetches an\r\n * object of class <code>myclass</code> and id <code>myid</code>. it calls a\r\n * different function depending on whether the fetch succeeded or not.\r\n *\r\n * <pre>\r\n * var query = new Parse.Query(myclass);\r\n * query.get(myid).then((object) => {\r\n *     // object is an instance of parse.object.\r\n * }).catch((error) =>  {\r\n *  // error is an instance of parse.error.\r\n * });</pre></p>\r\n *\r\n * <p>a Parse.Query can also be used to count the number of objects that match\r\n * the query without retrieving all of those objects. for example, this\r\n * sample code counts the number of objects of the class <code>myclass</code>\r\n * <pre>\r\n * var query = new Parse.Query(myclass);\r\n * query.count().then((number) => {\r\n *     // there are number instances of myclass.\r\n * }).catch((error) => {\r\n *     // error is an instance of Parse.Error.\r\n * });</pre></p>\r\n *\r\n * @alias Parse.Query\r\n */\n\n\nvar ParseQuery = /*#__PURE__*/function () {\n  /**\r\n   * @property {string} className\r\n   */\n\n  /**\r\n   * @param {(string | Parse.Object)} objectClass An instance of a subclass of Parse.Object, or a Parse className string.\r\n   */\n  function ParseQuery(objectClass\n  /*: string | ParseObject*/\n  ) {\n    (0, _classCallCheck2.default)(this, ParseQuery);\n    (0, _defineProperty2.default)(this, \"className\", void 0);\n    (0, _defineProperty2.default)(this, \"_where\", void 0);\n    (0, _defineProperty2.default)(this, \"_include\", void 0);\n    (0, _defineProperty2.default)(this, \"_exclude\", void 0);\n    (0, _defineProperty2.default)(this, \"_select\", void 0);\n    (0, _defineProperty2.default)(this, \"_limit\", void 0);\n    (0, _defineProperty2.default)(this, \"_skip\", void 0);\n    (0, _defineProperty2.default)(this, \"_count\", void 0);\n    (0, _defineProperty2.default)(this, \"_order\", void 0);\n    (0, _defineProperty2.default)(this, \"_readPreference\", void 0);\n    (0, _defineProperty2.default)(this, \"_includeReadPreference\", void 0);\n    (0, _defineProperty2.default)(this, \"_subqueryReadPreference\", void 0);\n    (0, _defineProperty2.default)(this, \"_queriesLocalDatastore\", void 0);\n    (0, _defineProperty2.default)(this, \"_localDatastorePinName\", void 0);\n    (0, _defineProperty2.default)(this, \"_extraOptions\", void 0);\n    (0, _defineProperty2.default)(this, \"_hint\", void 0);\n    (0, _defineProperty2.default)(this, \"_explain\", void 0);\n    (0, _defineProperty2.default)(this, \"_xhrRequest\", void 0);\n\n    if (typeof objectClass === 'string') {\n      if (objectClass === 'User' && _CoreManager.default.get('PERFORM_USER_REWRITE')) {\n        this.className = '_User';\n      } else {\n        this.className = objectClass;\n      }\n    } else if (objectClass instanceof _ParseObject.default) {\n      this.className = objectClass.className;\n    } else if (typeof objectClass === 'function') {\n      if (typeof objectClass.className === 'string') {\n        this.className = objectClass.className;\n      } else {\n        var _obj2 = new objectClass();\n\n        this.className = _obj2.className;\n      }\n    } else {\n      throw new TypeError('A ParseQuery must be constructed with a ParseObject or class name.');\n    }\n\n    this._where = {};\n    this._include = [];\n    this._exclude = [];\n    this._count = false;\n    this._limit = -1; // negative limit is not sent in the server request\n\n    this._skip = 0;\n    this._readPreference = null;\n    this._includeReadPreference = null;\n    this._subqueryReadPreference = null;\n    this._queriesLocalDatastore = false;\n    this._localDatastorePinName = null;\n    this._extraOptions = {};\n    this._xhrRequest = {\n      task: null,\n      onchange: function onchange() {}\n    };\n  }\n  /**\r\n   * Adds constraint that at least one of the passed in queries matches.\r\n   *\r\n   * @param {Array} queries\r\n   * @returns {Parse.Query} Returns the query, so you can chain this call.\r\n   */\n\n\n  (0, _createClass2.default)(ParseQuery, [{\n    key: \"_orQuery\",\n    value: function value(queries\n    /*: Array<ParseQuery>*/\n    )\n    /*: ParseQuery*/\n    {\n      var queryJSON = (0, _map2.default)(queries).call(queries, function (q) {\n        return q.toJSON().where;\n      });\n      this._where.$or = queryJSON;\n      return this;\n    }\n    /**\r\n     * Adds constraint that all of the passed in queries match.\r\n     *\r\n     * @param {Array} queries\r\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\r\n     */\n\n  }, {\n    key: \"_andQuery\",\n    value: function value(queries\n    /*: Array<ParseQuery>*/\n    )\n    /*: ParseQuery*/\n    {\n      var queryJSON = (0, _map2.default)(queries).call(queries, function (q) {\n        return q.toJSON().where;\n      });\n      this._where.$and = queryJSON;\n      return this;\n    }\n    /**\r\n     * Adds constraint that none of the passed in queries match.\r\n     *\r\n     * @param {Array} queries\r\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\r\n     */\n\n  }, {\n    key: \"_norQuery\",\n    value: function value(queries\n    /*: Array<ParseQuery>*/\n    )\n    /*: ParseQuery*/\n    {\n      var queryJSON = (0, _map2.default)(queries).call(queries, function (q) {\n        return q.toJSON().where;\n      });\n      this._where.$nor = queryJSON;\n      return this;\n    }\n    /**\r\n     * Helper for condition queries\r\n     *\r\n     * @param key\r\n     * @param condition\r\n     * @param value\r\n     * @returns {Parse.Query}\r\n     */\n\n  }, {\n    key: \"_addCondition\",\n    value: function value(key\n    /*: string*/\n    , condition\n    /*: string*/\n    , _value\n    /*: mixed*/\n    )\n    /*: ParseQuery*/\n    {\n      if (!this._where[key] || typeof this._where[key] === 'string') {\n        this._where[key] = {};\n      }\n\n      this._where[key][condition] = (0, _encode.default)(_value, false, true);\n      return this;\n    }\n    /**\r\n     * Converts string for regular expression at the beginning\r\n     *\r\n     * @param string\r\n     * @returns {string}\r\n     */\n\n  }, {\n    key: \"_regexStartWith\",\n    value: function value(string\n    /*: string*/\n    )\n    /*: string*/\n    {\n      return '^' + quote(string);\n    }\n  }, {\n    key: \"_handleOfflineQuery\",\n    value: function () {\n      var _handleOfflineQuery2 = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee(params\n      /*: any*/\n      ) {\n        var _context,\n            _this2 = this;\n\n        var localDatastore, objects, results, keys, alwaysSelectedKeys, sorts, count, limit;\n        return _regenerator.default.wrap(function (_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _OfflineQuery.default.validateQuery(this);\n\n                localDatastore = _CoreManager.default.getLocalDatastore();\n                _context3.next = 4;\n                return localDatastore._serializeObjectsFromPinName(this._localDatastorePinName);\n\n              case 4:\n                objects = _context3.sent;\n                results = (0, _filter2.default)(_context = (0, _map2.default)(objects).call(objects, function (json, index, arr) {\n                  var object = _ParseObject.default.fromJSON(json, false);\n\n                  if (json._localId && !json.objectId) {\n                    object._localId = json._localId;\n                  }\n\n                  if (!_OfflineQuery.default.matchesQuery(_this2.className, object, arr, _this2)) {\n                    return null;\n                  }\n\n                  return object;\n                })).call(_context, function (object) {\n                  return object !== null;\n                });\n\n                if ((0, _keys.default)(params)) {\n                  keys = (0, _keys.default)(params).split(',');\n                  alwaysSelectedKeys = ['className', 'objectId', 'createdAt', 'updatedAt', 'ACL'];\n                  keys = (0, _concat.default)(keys).call(keys, alwaysSelectedKeys);\n                  results = (0, _map2.default)(results).call(results, function (object) {\n                    var _context2;\n\n                    var json = object._toFullJSON();\n\n                    (0, _forEach.default)(_context2 = (0, _keys2.default)(json)).call(_context2, function (key) {\n                      if (!(0, _includes.default)(keys).call(keys, key)) {\n                        delete json[key];\n                      }\n                    });\n                    return _ParseObject.default.fromJSON(json, false);\n                  });\n                }\n\n                if (params.order) {\n                  sorts = params.order.split(',');\n                  (0, _sort.default)(results).call(results, function (a, b) {\n                    return handleOfflineSort(a, b, sorts);\n                  });\n                } // count total before applying limit/skip\n\n\n                if (params.count) {\n                  count = results.length; // total count from response\n                }\n\n                if (params.skip) {\n                  if (params.skip >= results.length) {\n                    results = [];\n                  } else {\n                    results = (0, _splice.default)(results).call(results, params.skip, results.length);\n                  }\n                }\n\n                limit = results.length;\n\n                if (params.limit !== 0 && params.limit < results.length) {\n                  limit = params.limit;\n                }\n\n                results = (0, _splice.default)(results).call(results, 0, limit);\n\n                if (!(typeof count === 'number')) {\n                  _context3.next = 15;\n                  break;\n                }\n\n                return _context3.abrupt(\"return\", {\n                  results: results,\n                  count: count\n                });\n\n              case 15:\n                return _context3.abrupt(\"return\", results);\n\n              case 16:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function () {\n        return _handleOfflineQuery2.apply(this, arguments);\n      };\n    }()\n    /**\r\n     * Returns a JSON representation of this query.\r\n     *\r\n     * @returns {object} The JSON representation of the query.\r\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function value()\n    /*: QueryJSON*/\n    {\n      var params\n      /*: QueryJSON*/\n      = {\n        where: this._where\n      };\n\n      if (this._include.length) {\n        params.include = this._include.join(',');\n      }\n\n      if (this._exclude.length) {\n        params.excludeKeys = this._exclude.join(',');\n      }\n\n      if (this._select) {\n        params.keys = this._select.join(',');\n      }\n\n      if (this._count) {\n        params.count = 1;\n      }\n\n      if (this._limit >= 0) {\n        params.limit = this._limit;\n      }\n\n      if (this._skip > 0) {\n        params.skip = this._skip;\n      }\n\n      if (this._order) {\n        params.order = this._order.join(',');\n      }\n\n      if (this._readPreference) {\n        params.readPreference = this._readPreference;\n      }\n\n      if (this._includeReadPreference) {\n        params.includeReadPreference = this._includeReadPreference;\n      }\n\n      if (this._subqueryReadPreference) {\n        params.subqueryReadPreference = this._subqueryReadPreference;\n      }\n\n      if (this._hint) {\n        params.hint = this._hint;\n      }\n\n      if (this._explain) {\n        params.explain = true;\n      }\n\n      for (var _key3 in this._extraOptions) {\n        params[_key3] = this._extraOptions[_key3];\n      }\n\n      return params;\n    }\n    /**\r\n     * Return a query with conditions from json, can be useful to send query from server side to client\r\n     * Not static, all query conditions was set before calling this method will be deleted.\r\n     * For example on the server side we have\r\n     * var query = new Parse.Query(\"className\");\r\n     * query.equalTo(key: value);\r\n     * query.limit(100);\r\n     * ... (others queries)\r\n     * Create JSON representation of Query Object\r\n     * var jsonFromServer = query.fromJSON();\r\n     *\r\n     * On client side getting query:\r\n     * var query = new Parse.Query(\"className\");\r\n     * query.fromJSON(jsonFromServer);\r\n     *\r\n     * and continue to query...\r\n     * query.skip(100).find().then(...);\r\n     *\r\n     * @param {QueryJSON} json from Parse.Query.toJSON() method\r\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\r\n     */\n\n  }, {\n    key: \"withJSON\",\n    value: function value(json\n    /*: QueryJSON*/\n    )\n    /*: ParseQuery*/\n    {\n      if (json.where) {\n        this._where = json.where;\n      }\n\n      if (json.include) {\n        this._include = json.include.split(',');\n      }\n\n      if ((0, _keys.default)(json)) {\n        this._select = (0, _keys.default)(json).split(',');\n      }\n\n      if (json.excludeKeys) {\n        this._exclude = json.excludeKeys.split(',');\n      }\n\n      if (json.count) {\n        this._count = json.count === 1;\n      }\n\n      if (json.limit) {\n        this._limit = json.limit;\n      }\n\n      if (json.skip) {\n        this._skip = json.skip;\n      }\n\n      if (json.order) {\n        this._order = json.order.split(',');\n      }\n\n      if (json.readPreference) {\n        this._readPreference = json.readPreference;\n      }\n\n      if (json.includeReadPreference) {\n        this._includeReadPreference = json.includeReadPreference;\n      }\n\n      if (json.subqueryReadPreference) {\n        this._subqueryReadPreference = json.subqueryReadPreference;\n      }\n\n      if (json.hint) {\n        this._hint = json.hint;\n      }\n\n      if (json.explain) {\n        this._explain = !!json.explain;\n      }\n\n      for (var _key4 in json) {\n        if (json.hasOwnProperty(_key4)) {\n          var _context4;\n\n          if ((0, _indexOf.default)(_context4 = ['where', 'include', 'keys', 'count', 'limit', 'skip', 'order', 'readPreference', 'includeReadPreference', 'subqueryReadPreference', 'hint', 'explain']).call(_context4, _key4) === -1) {\n            this._extraOptions[_key4] = json[_key4];\n          }\n        }\n      }\n\n      return this;\n    }\n    /**\r\n     * Static method to restore Parse.Query by json representation\r\n     * Internally calling Parse.Query.withJSON\r\n     *\r\n     * @param {string} className\r\n     * @param {QueryJSON} json from Parse.Query.toJSON() method\r\n     * @returns {Parse.Query} new created query\r\n     */\n\n  }, {\n    key: \"get\",\n    value:\n    /**\r\n     * Constructs a Parse.Object whose id is already known by fetching data from\r\n     * the server. Unlike the <code>first</code> method, it never returns undefined.\r\n     *\r\n     * @param {string} objectId The id of the object to be fetched.\r\n     * @param {object} options\r\n     * Valid options are:<ul>\r\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\r\n     *     be used for this request.\r\n     *   <li>sessionToken: A valid session token, used for making a request on\r\n     *       behalf of a specific user.\r\n     *   <li>context: A dictionary that is accessible in Cloud Code `beforeFind` trigger.\r\n     *   <li>json: Return raw json without converting to Parse.Object\r\n     * </ul>\r\n     *\r\n     * @returns {Promise} A promise that is resolved with the result when\r\n     * the query completes.\r\n     */\n    function value(objectId\n    /*: string*/\n    , options\n    /*:: ?: FullOptions*/\n    )\n    /*: Promise<ParseObject>*/\n    {\n      this.equalTo('objectId', objectId);\n      var firstOptions = {};\n\n      if (options && options.hasOwnProperty('useMasterKey')) {\n        firstOptions.useMasterKey = options.useMasterKey;\n      }\n\n      if (options && options.hasOwnProperty('sessionToken')) {\n        firstOptions.sessionToken = options.sessionToken;\n      }\n\n      if (options && options.hasOwnProperty('context') && (0, _typeof2.default)(options.context) === 'object') {\n        firstOptions.context = options.context;\n      }\n\n      if (options && options.hasOwnProperty('json')) {\n        firstOptions.json = options.json;\n      }\n\n      return this.first(firstOptions).then(function (response) {\n        if (response) {\n          return response;\n        }\n\n        var errorObject = new _ParseError.default(_ParseError.default.OBJECT_NOT_FOUND, 'Object not found.');\n        return _promise.default.reject(errorObject);\n      });\n    }\n    /**\r\n     * Retrieves a list of ParseObjects that satisfy this query.\r\n     *\r\n     * @param {object} options Valid options\r\n     * are:<ul>\r\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\r\n     *     be used for this request.\r\n     *   <li>sessionToken: A valid session token, used for making a request on\r\n     *       behalf of a specific user.\r\n     *   <li>context: A dictionary that is accessible in Cloud Code `beforeFind` trigger.\r\n     *   <li>json: Return raw json without converting to Parse.Object\r\n     * </ul>\r\n     *\r\n     * @returns {Promise} A promise that is resolved with the results when\r\n     * the query completes.\r\n     */\n\n  }, {\n    key: \"find\",\n    value: function value(options\n    /*:: ?: FullOptions*/\n    )\n    /*: Promise<Array<ParseObject>>*/\n    {\n      var _this3 = this;\n\n      options = options || {};\n      var findOptions = {};\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        findOptions.useMasterKey = options.useMasterKey;\n      }\n\n      if (options.hasOwnProperty('sessionToken')) {\n        findOptions.sessionToken = options.sessionToken;\n      }\n\n      if (options.hasOwnProperty('context') && (0, _typeof2.default)(options.context) === 'object') {\n        findOptions.context = options.context;\n      }\n\n      this._setRequestTask(findOptions);\n\n      var controller = _CoreManager.default.getQueryController();\n\n      var select = this._select;\n\n      if (this._queriesLocalDatastore) {\n        return this._handleOfflineQuery(this.toJSON());\n      }\n\n      return (0, _find.default)(controller).call(controller, this.className, this.toJSON(), findOptions).then(function (response) {\n        var _context5; // Return generic object when explain is used\n\n\n        if (_this3._explain) {\n          return response.results;\n        }\n\n        var results = (0, _map2.default)(_context5 = response.results).call(_context5, function (data) {\n          // In cases of relations, the server may send back a className\n          // on the top level of the payload\n          var override = response.className || _this3.className;\n\n          if (!data.className) {\n            data.className = override;\n          } // Make sure the data object contains keys for all objects that\n          // have been requested with a select, so that our cached state\n          // updates correctly.\n\n\n          if (select) {\n            handleSelectResult(data, select);\n          }\n\n          if (options.json) {\n            return data;\n          } else {\n            return _ParseObject.default.fromJSON(data, !select);\n          }\n        });\n        var count = response.count;\n\n        if (typeof count === 'number') {\n          return {\n            results: results,\n            count: count\n          };\n        } else {\n          return results;\n        }\n      });\n    }\n    /**\r\n     * Retrieves a complete list of ParseObjects that satisfy this query.\r\n     * Using `eachBatch` under the hood to fetch all the valid objects.\r\n     *\r\n     * @param {object} options Valid options are:<ul>\r\n     *   <li>batchSize: How many objects to yield in each batch (default: 100)\r\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\r\n     *     be used for this request.\r\n     *   <li>sessionToken: A valid session token, used for making a request on\r\n     *       behalf of a specific user.\r\n     * </ul>\r\n     * @returns {Promise} A promise that is resolved with the results when\r\n     * the query completes.\r\n     */\n\n  }, {\n    key: \"findAll\",\n    value: function () {\n      var _findAll = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee2(options\n      /*:: ?: BatchOptions*/\n      ) {\n        var result;\n        return _regenerator.default.wrap(function (_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                result\n                /*: ParseObject[]*/\n                = [];\n                _context7.next = 3;\n                return this.eachBatch(function (objects\n                /*: ParseObject[]*/\n                ) {\n                  var _context6;\n\n                  result = (0, _concat.default)(_context6 = []).call(_context6, (0, _toConsumableArray2.default)(result), (0, _toConsumableArray2.default)(objects));\n                }, options);\n\n              case 3:\n                return _context7.abrupt(\"return\", result);\n\n              case 4:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function () {\n        return _findAll.apply(this, arguments);\n      };\n    }()\n    /**\r\n     * Counts the number of objects that match this query.\r\n     *\r\n     * @param {object} options\r\n     * Valid options are:<ul>\r\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\r\n     *     be used for this request.\r\n     *   <li>sessionToken: A valid session token, used for making a request on\r\n     *       behalf of a specific user.\r\n     * </ul>\r\n     *\r\n     * @returns {Promise} A promise that is resolved with the count when\r\n     * the query completes.\r\n     */\n\n  }, {\n    key: \"count\",\n    value: function value(options\n    /*:: ?: FullOptions*/\n    )\n    /*: Promise<number>*/\n    {\n      options = options || {};\n      var findOptions = {};\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        findOptions.useMasterKey = options.useMasterKey;\n      }\n\n      if (options.hasOwnProperty('sessionToken')) {\n        findOptions.sessionToken = options.sessionToken;\n      }\n\n      this._setRequestTask(findOptions);\n\n      var controller = _CoreManager.default.getQueryController();\n\n      var params = this.toJSON();\n      params.limit = 0;\n      params.count = 1;\n      return (0, _find.default)(controller).call(controller, this.className, params, findOptions).then(function (result) {\n        return result.count;\n      });\n    }\n    /**\r\n     * Executes a distinct query and returns unique values\r\n     *\r\n     * @param {string} key A field to find distinct values\r\n     * @param {object} options\r\n     * Valid options are:<ul>\r\n     *   <li>sessionToken: A valid session token, used for making a request on\r\n     *       behalf of a specific user.\r\n     * </ul>\r\n     *\r\n     * @returns {Promise} A promise that is resolved with the query completes.\r\n     */\n\n  }, {\n    key: \"distinct\",\n    value: function value(key\n    /*: string*/\n    , options\n    /*:: ?: FullOptions*/\n    )\n    /*: Promise<Array<mixed>>*/\n    {\n      options = options || {};\n      var distinctOptions = {};\n      distinctOptions.useMasterKey = true;\n\n      if (options.hasOwnProperty('sessionToken')) {\n        distinctOptions.sessionToken = options.sessionToken;\n      }\n\n      this._setRequestTask(distinctOptions);\n\n      var controller = _CoreManager.default.getQueryController();\n\n      var params = {\n        distinct: key,\n        where: this._where,\n        hint: this._hint\n      };\n      return controller.aggregate(this.className, params, distinctOptions).then(function (results) {\n        return results.results;\n      });\n    }\n    /**\r\n     * Executes an aggregate query and returns aggregate results\r\n     *\r\n     * @param {(Array|object)} pipeline Array or Object of stages to process query\r\n     * @param {object} options Valid options are:<ul>\r\n     *   <li>sessionToken: A valid session token, used for making a request on\r\n     *       behalf of a specific user.\r\n     * </ul>\r\n     *\r\n     * @returns {Promise} A promise that is resolved with the query completes.\r\n     */\n\n  }, {\n    key: \"aggregate\",\n    value: function value(pipeline\n    /*: mixed*/\n    , options\n    /*:: ?: FullOptions*/\n    )\n    /*: Promise<Array<mixed>>*/\n    {\n      options = options || {};\n      var aggregateOptions = {};\n      aggregateOptions.useMasterKey = true;\n\n      if (options.hasOwnProperty('sessionToken')) {\n        aggregateOptions.sessionToken = options.sessionToken;\n      }\n\n      this._setRequestTask(aggregateOptions);\n\n      var controller = _CoreManager.default.getQueryController();\n\n      if (!(0, _isArray.default)(pipeline) && (0, _typeof2.default)(pipeline) !== 'object') {\n        throw new Error('Invalid pipeline must be Array or Object');\n      }\n\n      if ((0, _keys2.default)(this._where || {}).length) {\n        if (!(0, _isArray.default)(pipeline)) {\n          pipeline = [pipeline];\n        }\n\n        pipeline.unshift({\n          match: this._where\n        });\n      }\n\n      var params = {\n        pipeline: pipeline,\n        hint: this._hint,\n        explain: this._explain,\n        readPreference: this._readPreference\n      };\n      return controller.aggregate(this.className, params, aggregateOptions).then(function (results) {\n        return results.results;\n      });\n    }\n    /**\r\n     * Retrieves at most one Parse.Object that satisfies this query.\r\n     *\r\n     * Returns the object if there is one, otherwise undefined.\r\n     *\r\n     * @param {object} options Valid options are:<ul>\r\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\r\n     *     be used for this request.\r\n     *   <li>sessionToken: A valid session token, used for making a request on\r\n     *       behalf of a specific user.\r\n     *   <li>context: A dictionary that is accessible in Cloud Code `beforeFind` trigger.\r\n     *   <li>json: Return raw json without converting to Parse.Object\r\n     * </ul>\r\n     *\r\n     * @returns {Promise} A promise that is resolved with the object when\r\n     * the query completes.\r\n     */\n\n  }, {\n    key: \"first\",\n    value: function value(options\n    /*:: ?: FullOptions*/\n    )\n    /*: Promise<ParseObject | void>*/\n    {\n      var _this4 = this;\n\n      options = options || {};\n      var findOptions = {};\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        findOptions.useMasterKey = options.useMasterKey;\n      }\n\n      if (options.hasOwnProperty('sessionToken')) {\n        findOptions.sessionToken = options.sessionToken;\n      }\n\n      if (options.hasOwnProperty('context') && (0, _typeof2.default)(options.context) === 'object') {\n        findOptions.context = options.context;\n      }\n\n      this._setRequestTask(findOptions);\n\n      var controller = _CoreManager.default.getQueryController();\n\n      var params = this.toJSON();\n      params.limit = 1;\n      var select = this._select;\n\n      if (this._queriesLocalDatastore) {\n        return this._handleOfflineQuery(params).then(function (objects) {\n          if (!objects[0]) {\n            return undefined;\n          }\n\n          return objects[0];\n        });\n      }\n\n      return (0, _find.default)(controller).call(controller, this.className, params, findOptions).then(function (response) {\n        var objects = response.results;\n\n        if (!objects[0]) {\n          return undefined;\n        }\n\n        if (!objects[0].className) {\n          objects[0].className = _this4.className;\n        } // Make sure the data object contains keys for all objects that\n        // have been requested with a select, so that our cached state\n        // updates correctly.\n\n\n        if (select) {\n          handleSelectResult(objects[0], select);\n        }\n\n        if (options.json) {\n          return objects[0];\n        } else {\n          return _ParseObject.default.fromJSON(objects[0], !select);\n        }\n      });\n    }\n    /**\r\n     * Iterates over objects matching a query, calling a callback for each batch.\r\n     * If the callback returns a promise, the iteration will not continue until\r\n     * that promise has been fulfilled. If the callback returns a rejected\r\n     * promise, then iteration will stop with that error. The items are processed\r\n     * in an unspecified order. The query may not have any sort order, and may\r\n     * not use limit or skip.\r\n     *\r\n     * @param {Function} callback Callback that will be called with each result\r\n     *     of the query.\r\n     * @param {object} options Valid options are:<ul>\r\n     *   <li>batchSize: How many objects to yield in each batch (default: 100)\r\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\r\n     *     be used for this request.\r\n     *   <li>sessionToken: A valid session token, used for making a request on\r\n     *       behalf of a specific user.\r\n     *   <li>context: A dictionary that is accessible in Cloud Code `beforeFind` trigger.\r\n     * </ul>\r\n     * @returns {Promise} A promise that will be fulfilled once the\r\n     *     iteration has completed.\r\n     */\n\n  }, {\n    key: \"eachBatch\",\n    value: function value(callback\n    /*: (objs: Array<ParseObject>) => Promise<*>*/\n    , options\n    /*:: ?: BatchOptions*/\n    )\n    /*: Promise<void>*/\n    {\n      var _context8;\n\n      options = options || {};\n\n      if (this._order || this._skip || this._limit >= 0) {\n        return _promise.default.reject('Cannot iterate on a query with sort, skip, or limit.');\n      }\n\n      var query = new ParseQuery(this.className);\n      query._limit = options.batchSize || 100;\n      query._include = (0, _map2.default)(_context8 = this._include).call(_context8, function (i) {\n        return i;\n      });\n\n      if (this._select) {\n        var _context9;\n\n        query._select = (0, _map2.default)(_context9 = this._select).call(_context9, function (s) {\n          return s;\n        });\n      }\n\n      query._hint = this._hint;\n      query._where = {};\n\n      for (var _attr in this._where) {\n        var val = this._where[_attr];\n\n        if ((0, _isArray.default)(val)) {\n          query._where[_attr] = (0, _map2.default)(val).call(val, function (v) {\n            return v;\n          });\n        } else if (val && (0, _typeof2.default)(val) === 'object') {\n          var conditionMap = {};\n          query._where[_attr] = conditionMap;\n\n          for (var cond in val) {\n            conditionMap[cond] = val[cond];\n          }\n        } else {\n          query._where[_attr] = val;\n        }\n      }\n\n      query.ascending('objectId');\n      var findOptions = {};\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        findOptions.useMasterKey = options.useMasterKey;\n      }\n\n      if (options.hasOwnProperty('sessionToken')) {\n        findOptions.sessionToken = options.sessionToken;\n      }\n\n      if (options.hasOwnProperty('context') && (0, _typeof2.default)(options.context) === 'object') {\n        findOptions.context = options.context;\n      }\n\n      var finished = false;\n      var previousResults = [];\n      return (0, _promiseUtils.continueWhile)(function () {\n        return !finished;\n      }, /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee3() {\n        var _yield$Promise$all, _yield$Promise$all2, results;\n\n        return _regenerator.default.wrap(function (_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                _context10.next = 2;\n                return _promise.default.all([(0, _find.default)(query).call(query, findOptions), _promise.default.resolve(previousResults.length > 0 && callback(previousResults))]);\n\n              case 2:\n                _yield$Promise$all = _context10.sent;\n                _yield$Promise$all2 = (0, _slicedToArray2.default)(_yield$Promise$all, 1);\n                results = _yield$Promise$all2[0];\n\n                if (!(results.length >= query._limit)) {\n                  _context10.next = 10;\n                  break;\n                }\n\n                query.greaterThan('objectId', results[results.length - 1].id);\n                previousResults = results;\n                _context10.next = 17;\n                break;\n\n              case 10:\n                if (!(results.length > 0)) {\n                  _context10.next = 16;\n                  break;\n                }\n\n                _context10.next = 13;\n                return _promise.default.resolve(callback(results));\n\n              case 13:\n                finished = true;\n                _context10.next = 17;\n                break;\n\n              case 16:\n                finished = true;\n\n              case 17:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee3);\n      })));\n    }\n    /**\r\n     * Iterates over each result of a query, calling a callback for each one. If\r\n     * the callback returns a promise, the iteration will not continue until\r\n     * that promise has been fulfilled. If the callback returns a rejected\r\n     * promise, then iteration will stop with that error. The items are\r\n     * processed in an unspecified order. The query may not have any sort order,\r\n     * and may not use limit or skip.\r\n     *\r\n     * @param {Function} callback Callback that will be called with each result\r\n     *     of the query.\r\n     * @param {object} options Valid options are:<ul>\r\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\r\n     *     be used for this request.\r\n     *   <li>sessionToken: A valid session token, used for making a request on\r\n     *       behalf of a specific user.\r\n     * </ul>\r\n     * @returns {Promise} A promise that will be fulfilled once the\r\n     *     iteration has completed.\r\n     */\n\n  }, {\n    key: \"each\",\n    value: function value(callback\n    /*: (obj: ParseObject) => any*/\n    , options\n    /*:: ?: BatchOptions*/\n    )\n    /*: Promise<void>*/\n    {\n      return this.eachBatch(function (results) {\n        var callbacksDone = _promise.default.resolve();\n\n        (0, _forEach.default)(results).call(results, function (result) {\n          callbacksDone = callbacksDone.then(function () {\n            return callback(result);\n          });\n        });\n        return callbacksDone;\n      }, options);\n    }\n    /**\r\n     * Adds a hint to force index selection. (https://docs.mongodb.com/manual/reference/operator/meta/hint/)\r\n     *\r\n     * @param {(string|object)} value String or Object of index that should be used when executing query\r\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\r\n     */\n\n  }, {\n    key: \"hint\",\n    value: function value(_value2\n    /*: mixed*/\n    )\n    /*: ParseQuery*/\n    {\n      if (typeof _value2 === 'undefined') {\n        delete this._hint;\n      }\n\n      this._hint = _value2;\n      return this;\n    }\n    /**\r\n     * Investigates the query execution plan. Useful for optimizing queries. (https://docs.mongodb.com/manual/reference/operator/meta/explain/)\r\n     *\r\n     * @param {boolean} explain Used to toggle the information on the query plan.\r\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\r\n     */\n\n  }, {\n    key: \"explain\",\n    value: function value()\n    /*: ParseQuery*/\n    {\n      var _explain\n      /*: boolean*/\n      = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n\n      if (typeof _explain !== 'boolean') {\n        throw new Error('You can only set explain to a boolean value');\n      }\n\n      this._explain = _explain;\n      return this;\n    }\n    /**\r\n     * Iterates over each result of a query, calling a callback for each one. If\r\n     * the callback returns a promise, the iteration will not continue until\r\n     * that promise has been fulfilled. If the callback returns a rejected\r\n     * promise, then iteration will stop with that error. The items are\r\n     * processed in an unspecified order. The query may not have any sort order,\r\n     * and may not use limit or skip.\r\n     *\r\n     * @param {Function} callback Callback <ul>\r\n     *   <li>currentObject: The current Parse.Object being processed in the array.</li>\r\n     *   <li>index: The index of the current Parse.Object being processed in the array.</li>\r\n     *   <li>query: The query map was called upon.</li>\r\n     * </ul>\r\n     *\r\n     * @param {object} options Valid options are:<ul>\r\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\r\n     *     be used for this request.\r\n     *   <li>sessionToken: A valid session token, used for making a request on\r\n     *       behalf of a specific user.\r\n     * </ul>\r\n     * @returns {Promise} A promise that will be fulfilled once the\r\n     *     iteration has completed.\r\n     */\n\n  }, {\n    key: \"map\",\n    value: function () {\n      var _map = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee4(callback\n      /*: (currentObject: ParseObject, index: number, query: ParseQuery) => any*/\n      , options\n      /*:: ?: BatchOptions*/\n      ) {\n        var _this5 = this;\n\n        var array, index;\n        return _regenerator.default.wrap(function (_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                array = [];\n                index = 0;\n                _context11.next = 4;\n                return this.each(function (object) {\n                  return _promise.default.resolve(callback(object, index, _this5)).then(function (result) {\n                    array.push(result);\n                    index += 1;\n                  });\n                }, options);\n\n              case 4:\n                return _context11.abrupt(\"return\", array);\n\n              case 5:\n              case \"end\":\n                return _context11.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      return function () {\n        return _map.apply(this, arguments);\n      };\n    }()\n    /**\r\n     * Iterates over each result of a query, calling a callback for each one. If\r\n     * the callback returns a promise, the iteration will not continue until\r\n     * that promise has been fulfilled. If the callback returns a rejected\r\n     * promise, then iteration will stop with that error. The items are\r\n     * processed in an unspecified order. The query may not have any sort order,\r\n     * and may not use limit or skip.\r\n     *\r\n     * @param {Function} callback Callback <ul>\r\n     *   <li>accumulator: The accumulator accumulates the callback's return values. It is the accumulated value previously returned in the last invocation of the callback.</li>\r\n     *   <li>currentObject: The current Parse.Object being processed in the array.</li>\r\n     *   <li>index: The index of the current Parse.Object being processed in the array.</li>\r\n     * </ul>\r\n     * @param {*} initialValue A value to use as the first argument to the first call of the callback. If no initialValue is supplied, the first object in the query will be used and skipped.\r\n     * @param {object} options Valid options are:<ul>\r\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\r\n     *     be used for this request.\r\n     *   <li>sessionToken: A valid session token, used for making a request on\r\n     *       behalf of a specific user.\r\n     * </ul>\r\n     * @returns {Promise} A promise that will be fulfilled once the\r\n     *     iteration has completed.\r\n     */\n\n  }, {\n    key: \"reduce\",\n    value: function () {\n      var _reduce = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee5(callback\n      /*: (accumulator: any, currentObject: ParseObject, index: number) => any*/\n      , initialValue\n      /*: any*/\n      , options\n      /*:: ?: BatchOptions*/\n      ) {\n        var accumulator, index;\n        return _regenerator.default.wrap(function (_context12) {\n          while (1) {\n            switch (_context12.prev = _context12.next) {\n              case 0:\n                accumulator = initialValue;\n                index = 0;\n                _context12.next = 4;\n                return this.each(function (object) {\n                  // If no initial value was given, we take the first object from the query\n                  // as the initial value and don't call the callback with it.\n                  if (index === 0 && initialValue === undefined) {\n                    accumulator = object;\n                    index += 1;\n                    return;\n                  }\n\n                  return _promise.default.resolve(callback(accumulator, object, index)).then(function (result) {\n                    accumulator = result;\n                    index += 1;\n                  });\n                }, options);\n\n              case 4:\n                if (!(index === 0 && initialValue === undefined)) {\n                  _context12.next = 6;\n                  break;\n                }\n\n                throw new TypeError('Reducing empty query result set with no initial value');\n\n              case 6:\n                return _context12.abrupt(\"return\", accumulator);\n\n              case 7:\n              case \"end\":\n                return _context12.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      return function () {\n        return _reduce.apply(this, arguments);\n      };\n    }()\n    /**\r\n     * Iterates over each result of a query, calling a callback for each one. If\r\n     * the callback returns a promise, the iteration will not continue until\r\n     * that promise has been fulfilled. If the callback returns a rejected\r\n     * promise, then iteration will stop with that error. The items are\r\n     * processed in an unspecified order. The query may not have any sort order,\r\n     * and may not use limit or skip.\r\n     *\r\n     * @param {Function} callback Callback <ul>\r\n     *   <li>currentObject: The current Parse.Object being processed in the array.</li>\r\n     *   <li>index: The index of the current Parse.Object being processed in the array.</li>\r\n     *   <li>query: The query filter was called upon.</li>\r\n     * </ul>\r\n     *\r\n     * @param {object} options Valid options are:<ul>\r\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\r\n     *     be used for this request.\r\n     *   <li>sessionToken: A valid session token, used for making a request on\r\n     *       behalf of a specific user.\r\n     * </ul>\r\n     * @returns {Promise} A promise that will be fulfilled once the\r\n     *     iteration has completed.\r\n     */\n\n  }, {\n    key: \"filter\",\n    value: function () {\n      var _filter = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee6(callback\n      /*: (currentObject: ParseObject, index: number, query: ParseQuery) => boolean*/\n      , options\n      /*:: ?: BatchOptions*/\n      ) {\n        var _this6 = this;\n\n        var array, index;\n        return _regenerator.default.wrap(function (_context13) {\n          while (1) {\n            switch (_context13.prev = _context13.next) {\n              case 0:\n                array = [];\n                index = 0;\n                _context13.next = 4;\n                return this.each(function (object) {\n                  return _promise.default.resolve(callback(object, index, _this6)).then(function (flag) {\n                    if (flag) {\n                      array.push(object);\n                    }\n\n                    index += 1;\n                  });\n                }, options);\n\n              case 4:\n                return _context13.abrupt(\"return\", array);\n\n              case 5:\n              case \"end\":\n                return _context13.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      return function () {\n        return _filter.apply(this, arguments);\n      };\n    }()\n    /** Query Conditions **/\n\n    /**\r\n     * Adds a constraint to the query that requires a particular key's value to\r\n     * be equal to the provided value.\r\n     *\r\n     * @param {string} key The key to check.\r\n     * @param value The value that the Parse.Object must contain.\r\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\r\n     */\n\n  }, {\n    key: \"equalTo\",\n    value: function value(key\n    /*: string | { [key: string]: any }*/\n    , _value3\n    /*: ?mixed*/\n    )\n    /*: ParseQuery*/\n    {\n      var _this7 = this;\n\n      if (key && (0, _typeof2.default)(key) === 'object') {\n        var _context14;\n\n        (0, _forEach.default)(_context14 = (0, _entries.default)(key)).call(_context14, function (_ref2) {\n          var _ref3 = (0, _slicedToArray2.default)(_ref2, 2),\n              k = _ref3[0],\n              val = _ref3[1];\n\n          return _this7.equalTo(k, val);\n        });\n        return this;\n      }\n\n      if (typeof _value3 === 'undefined') {\n        return this.doesNotExist(key);\n      }\n\n      this._where[key] = (0, _encode.default)(_value3, false, true);\n      return this;\n    }\n    /**\r\n     * Adds a constraint to the query that requires a particular key's value to\r\n     * be not equal to the provided value.\r\n     *\r\n     * @param {string} key The key to check.\r\n     * @param value The value that must not be equalled.\r\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\r\n     */\n\n  }, {\n    key: \"notEqualTo\",\n    value: function value(key\n    /*: string | { [key: string]: any }*/\n    , _value4\n    /*: ?mixed*/\n    )\n    /*: ParseQuery*/\n    {\n      var _this8 = this;\n\n      if (key && (0, _typeof2.default)(key) === 'object') {\n        var _context15;\n\n        (0, _forEach.default)(_context15 = (0, _entries.default)(key)).call(_context15, function (_ref4) {\n          var _ref5 = (0, _slicedToArray2.default)(_ref4, 2),\n              k = _ref5[0],\n              val = _ref5[1];\n\n          return _this8.notEqualTo(k, val);\n        });\n        return this;\n      }\n\n      return this._addCondition(key, '$ne', _value4);\n    }\n    /**\r\n     * Adds a constraint to the query that requires a particular key's value to\r\n     * be less than the provided value.\r\n     *\r\n     * @param {string} key The key to check.\r\n     * @param value The value that provides an upper bound.\r\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\r\n     */\n\n  }, {\n    key: \"lessThan\",\n    value: function value(key\n    /*: string*/\n    , _value5\n    /*: mixed*/\n    )\n    /*: ParseQuery*/\n    {\n      return this._addCondition(key, '$lt', _value5);\n    }\n    /**\r\n     * Adds a constraint to the query that requires a particular key's value to\r\n     * be greater than the provided value.\r\n     *\r\n     * @param {string} key The key to check.\r\n     * @param value The value that provides an lower bound.\r\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\r\n     */\n\n  }, {\n    key: \"greaterThan\",\n    value: function value(key\n    /*: string*/\n    , _value6\n    /*: mixed*/\n    )\n    /*: ParseQuery*/\n    {\n      return this._addCondition(key, '$gt', _value6);\n    }\n    /**\r\n     * Adds a constraint to the query that requires a particular key's value to\r\n     * be less than or equal to the provided value.\r\n     *\r\n     * @param {string} key The key to check.\r\n     * @param value The value that provides an upper bound.\r\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\r\n     */\n\n  }, {\n    key: \"lessThanOrEqualTo\",\n    value: function value(key\n    /*: string*/\n    , _value7\n    /*: mixed*/\n    )\n    /*: ParseQuery*/\n    {\n      return this._addCondition(key, '$lte', _value7);\n    }\n    /**\r\n     * Adds a constraint to the query that requires a particular key's value to\r\n     * be greater than or equal to the provided value.\r\n     *\r\n     * @param {string} key The key to check.\r\n     * @param {*} value The value that provides an lower bound.\r\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\r\n     */\n\n  }, {\n    key: \"greaterThanOrEqualTo\",\n    value: function value(key\n    /*: string*/\n    , _value8\n    /*: mixed*/\n    )\n    /*: ParseQuery*/\n    {\n      return this._addCondition(key, '$gte', _value8);\n    }\n    /**\r\n     * Adds a constraint to the query that requires a particular key's value to\r\n     * be contained in the provided list of values.\r\n     *\r\n     * @param {string} key The key to check.\r\n     * @param {*} value The values that will match.\r\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\r\n     */\n\n  }, {\n    key: \"containedIn\",\n    value: function value(key\n    /*: string*/\n    , _value9\n    /*: mixed*/\n    )\n    /*: ParseQuery*/\n    {\n      return this._addCondition(key, '$in', _value9);\n    }\n    /**\r\n     * Adds a constraint to the query that requires a particular key's value to\r\n     * not be contained in the provided list of values.\r\n     *\r\n     * @param {string} key The key to check.\r\n     * @param {*} value The values that will not match.\r\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\r\n     */\n\n  }, {\n    key: \"notContainedIn\",\n    value: function value(key\n    /*: string*/\n    , _value10\n    /*: mixed*/\n    )\n    /*: ParseQuery*/\n    {\n      return this._addCondition(key, '$nin', _value10);\n    }\n    /**\r\n     * Adds a constraint to the query that requires a particular key's value to\r\n     * be contained by the provided list of values. Get objects where all array elements match.\r\n     *\r\n     * @param {string} key The key to check.\r\n     * @param {Array} values The values that will match.\r\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\r\n     */\n\n  }, {\n    key: \"containedBy\",\n    value: function value(key\n    /*: string*/\n    , values\n    /*: Array<mixed>*/\n    )\n    /*: ParseQuery*/\n    {\n      return this._addCondition(key, '$containedBy', values);\n    }\n    /**\r\n     * Adds a constraint to the query that requires a particular key's value to\r\n     * contain each one of the provided list of values.\r\n     *\r\n     * @param {string} key The key to check.  This key's value must be an array.\r\n     * @param {Array} values The values that will match.\r\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\r\n     */\n\n  }, {\n    key: \"containsAll\",\n    value: function value(key\n    /*: string*/\n    , values\n    /*: Array<mixed>*/\n    )\n    /*: ParseQuery*/\n    {\n      return this._addCondition(key, '$all', values);\n    }\n    /**\r\n     * Adds a constraint to the query that requires a particular key's value to\r\n     * contain each one of the provided list of values starting with given strings.\r\n     *\r\n     * @param {string} key The key to check.  This key's value must be an array.\r\n     * @param {Array<string>} values The string values that will match as starting string.\r\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\r\n     */\n\n  }, {\n    key: \"containsAllStartingWith\",\n    value: function value(key\n    /*: string*/\n    , values\n    /*: Array<string>*/\n    )\n    /*: ParseQuery*/\n    {\n      var _this = this;\n\n      if (!(0, _isArray.default)(values)) {\n        values = [values];\n      }\n\n      var regexObject = (0, _map2.default)(values).call(values, function (value) {\n        return {\n          $regex: _this._regexStartWith(value)\n        };\n      });\n      return this.containsAll(key, regexObject);\n    }\n    /**\r\n     * Adds a constraint for finding objects that contain the given key.\r\n     *\r\n     * @param {string} key The key that should exist.\r\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\r\n     */\n\n  }, {\n    key: \"exists\",\n    value: function value(key\n    /*: string*/\n    )\n    /*: ParseQuery*/\n    {\n      return this._addCondition(key, '$exists', true);\n    }\n    /**\r\n     * Adds a constraint for finding objects that do not contain a given key.\r\n     *\r\n     * @param {string} key The key that should not exist\r\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\r\n     */\n\n  }, {\n    key: \"doesNotExist\",\n    value: function value(key\n    /*: string*/\n    )\n    /*: ParseQuery*/\n    {\n      return this._addCondition(key, '$exists', false);\n    }\n    /**\r\n     * Adds a regular expression constraint for finding string values that match\r\n     * the provided regular expression.\r\n     * This may be slow for large datasets.\r\n     *\r\n     * @param {string} key The key that the string to match is stored in.\r\n     * @param {RegExp} regex The regular expression pattern to match.\r\n     * @param {string} modifiers The regular expression mode.\r\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\r\n     */\n\n  }, {\n    key: \"matches\",\n    value: function value(key\n    /*: string*/\n    , regex\n    /*: RegExp*/\n    , modifiers\n    /*: string*/\n    )\n    /*: ParseQuery*/\n    {\n      this._addCondition(key, '$regex', regex);\n\n      if (!modifiers) {\n        modifiers = '';\n      }\n\n      if (regex.ignoreCase) {\n        modifiers += 'i';\n      }\n\n      if (regex.multiline) {\n        modifiers += 'm';\n      }\n\n      if (modifiers.length) {\n        this._addCondition(key, '$options', modifiers);\n      }\n\n      return this;\n    }\n    /**\r\n     * Adds a constraint that requires that a key's value matches a Parse.Query\r\n     * constraint.\r\n     *\r\n     * @param {string} key The key that the contains the object to match the\r\n     *                     query.\r\n     * @param {Parse.Query} query The query that should match.\r\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\r\n     */\n\n  }, {\n    key: \"matchesQuery\",\n    value: function value(key\n    /*: string*/\n    , query\n    /*: ParseQuery*/\n    )\n    /*: ParseQuery*/\n    {\n      var queryJSON = query.toJSON();\n      queryJSON.className = query.className;\n      return this._addCondition(key, '$inQuery', queryJSON);\n    }\n    /**\r\n     * Adds a constraint that requires that a key's value not matches a\r\n     * Parse.Query constraint.\r\n     *\r\n     * @param {string} key The key that the contains the object to match the\r\n     *                     query.\r\n     * @param {Parse.Query} query The query that should not match.\r\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\r\n     */\n\n  }, {\n    key: \"doesNotMatchQuery\",\n    value: function value(key\n    /*: string*/\n    , query\n    /*: ParseQuery*/\n    )\n    /*: ParseQuery*/\n    {\n      var queryJSON = query.toJSON();\n      queryJSON.className = query.className;\n      return this._addCondition(key, '$notInQuery', queryJSON);\n    }\n    /**\r\n     * Adds a constraint that requires that a key's value matches a value in\r\n     * an object returned by a different Parse.Query.\r\n     *\r\n     * @param {string} key The key that contains the value that is being\r\n     *                     matched.\r\n     * @param {string} queryKey The key in the objects returned by the query to\r\n     *                          match against.\r\n     * @param {Parse.Query} query The query to run.\r\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\r\n     */\n\n  }, {\n    key: \"matchesKeyInQuery\",\n    value: function value(key\n    /*: string*/\n    , queryKey\n    /*: string*/\n    , query\n    /*: ParseQuery*/\n    )\n    /*: ParseQuery*/\n    {\n      var queryJSON = query.toJSON();\n      queryJSON.className = query.className;\n      return this._addCondition(key, '$select', {\n        key: queryKey,\n        query: queryJSON\n      });\n    }\n    /**\r\n     * Adds a constraint that requires that a key's value not match a value in\r\n     * an object returned by a different Parse.Query.\r\n     *\r\n     * @param {string} key The key that contains the value that is being\r\n     *                     excluded.\r\n     * @param {string} queryKey The key in the objects returned by the query to\r\n     *                          match against.\r\n     * @param {Parse.Query} query The query to run.\r\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\r\n     */\n\n  }, {\n    key: \"doesNotMatchKeyInQuery\",\n    value: function value(key\n    /*: string*/\n    , queryKey\n    /*: string*/\n    , query\n    /*: ParseQuery*/\n    )\n    /*: ParseQuery*/\n    {\n      var queryJSON = query.toJSON();\n      queryJSON.className = query.className;\n      return this._addCondition(key, '$dontSelect', {\n        key: queryKey,\n        query: queryJSON\n      });\n    }\n    /**\r\n     * Adds a constraint for finding string values that contain a provided\r\n     * string.  This may be slow for large datasets.\r\n     *\r\n     * @param {string} key The key that the string to match is stored in.\r\n     * @param {string} substring The substring that the value must contain.\r\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\r\n     */\n\n  }, {\n    key: \"contains\",\n    value: function value(key\n    /*: string*/\n    , substring\n    /*: string*/\n    )\n    /*: ParseQuery*/\n    {\n      if (typeof substring !== 'string') {\n        throw new Error('The value being searched for must be a string.');\n      }\n\n      return this._addCondition(key, '$regex', quote(substring));\n    }\n    /**\r\n     * Adds a constraint for finding string values that contain a provided\r\n     * string. This may be slow for large datasets. Requires Parse-Server > 2.5.0\r\n     *\r\n     * In order to sort you must use select and ascending ($score is required)\r\n     *  <pre>\r\n     *   query.fullText('field', 'term');\r\n     *   query.ascending('$score');\r\n     *   query.select('$score');\r\n     *  </pre>\r\n     *\r\n     * To retrieve the weight / rank\r\n     *  <pre>\r\n     *   object->get('score');\r\n     *  </pre>\r\n     *\r\n     * You can define optionals by providing an object as a third parameter\r\n     *  <pre>\r\n     *   query.fullText('field', 'term', { language: 'es', diacriticSensitive: true });\r\n     *  </pre>\r\n     *\r\n     * @param {string} key The key that the string to match is stored in.\r\n     * @param {string} value The string to search\r\n     * @param {object} options (Optional)\r\n     * @param {string} options.language The language that determines the list of stop words for the search and the rules for the stemmer and tokenizer.\r\n     * @param {boolean} options.caseSensitive A boolean flag to enable or disable case sensitive search.\r\n     * @param {boolean} options.diacriticSensitive A boolean flag to enable or disable diacritic sensitive search.\r\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\r\n     */\n\n  }, {\n    key: \"fullText\",\n    value: function value(key\n    /*: string*/\n    , _value11\n    /*: string*/\n    , options\n    /*: ?Object*/\n    )\n    /*: ParseQuery*/\n    {\n      options = options || {};\n\n      if (!key) {\n        throw new Error('A key is required.');\n      }\n\n      if (!_value11) {\n        throw new Error('A search term is required');\n      }\n\n      if (typeof _value11 !== 'string') {\n        throw new Error('The value being searched for must be a string.');\n      }\n\n      var fullOptions = {};\n      fullOptions.$term = _value11;\n\n      for (var option in options) {\n        switch (option) {\n          case 'language':\n            fullOptions.$language = options[option];\n            break;\n\n          case 'caseSensitive':\n            fullOptions.$caseSensitive = options[option];\n            break;\n\n          case 'diacriticSensitive':\n            fullOptions.$diacriticSensitive = options[option];\n            break;\n\n          default:\n            throw new Error(\"Unknown option: \".concat(option));\n        }\n      }\n\n      return this._addCondition(key, '$text', {\n        $search: fullOptions\n      });\n    }\n    /**\r\n     * Method to sort the full text search by text score\r\n     *\r\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\r\n     */\n\n  }, {\n    key: \"sortByTextScore\",\n    value: function value() {\n      this.ascending('$score');\n      this.select(['$score']);\n      return this;\n    }\n    /**\r\n     * Adds a constraint for finding string values that start with a provided\r\n     * string.  This query will use the backend index, so it will be fast even\r\n     * for large datasets.\r\n     *\r\n     * @param {string} key The key that the string to match is stored in.\r\n     * @param {string} prefix The substring that the value must start with.\r\n     * @param {string} modifiers The regular expression mode.\r\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\r\n     */\n\n  }, {\n    key: \"startsWith\",\n    value: function value(key\n    /*: string*/\n    , prefix\n    /*: string*/\n    , modifiers\n    /*: string*/\n    )\n    /*: ParseQuery*/\n    {\n      if (typeof prefix !== 'string') {\n        throw new Error('The value being searched for must be a string.');\n      }\n\n      return this.matches(key, this._regexStartWith(prefix), modifiers);\n    }\n    /**\r\n     * Adds a constraint for finding string values that end with a provided\r\n     * string.  This will be slow for large datasets.\r\n     *\r\n     * @param {string} key The key that the string to match is stored in.\r\n     * @param {string} suffix The substring that the value must end with.\r\n     * @param {string} modifiers The regular expression mode.\r\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\r\n     */\n\n  }, {\n    key: \"endsWith\",\n    value: function value(key\n    /*: string*/\n    , suffix\n    /*: string*/\n    , modifiers\n    /*: string*/\n    )\n    /*: ParseQuery*/\n    {\n      if (typeof suffix !== 'string') {\n        throw new Error('The value being searched for must be a string.');\n      }\n\n      return this.matches(key, quote(suffix) + '$', modifiers);\n    }\n    /**\r\n     * Adds a proximity based constraint for finding objects with key point\r\n     * values near the point given.\r\n     *\r\n     * @param {string} key The key that the Parse.GeoPoint is stored in.\r\n     * @param {Parse.GeoPoint} point The reference Parse.GeoPoint that is used.\r\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\r\n     */\n\n  }, {\n    key: \"near\",\n    value: function value(key\n    /*: string*/\n    , point\n    /*: ParseGeoPoint*/\n    )\n    /*: ParseQuery*/\n    {\n      if (!(point instanceof _ParseGeoPoint.default)) {\n        // Try to cast it as a GeoPoint\n        point = new _ParseGeoPoint.default(point);\n      }\n\n      return this._addCondition(key, '$nearSphere', point);\n    }\n    /**\r\n     * Adds a proximity based constraint for finding objects with key point\r\n     * values near the point given and within the maximum distance given.\r\n     *\r\n     * @param {string} key The key that the Parse.GeoPoint is stored in.\r\n     * @param {Parse.GeoPoint} point The reference Parse.GeoPoint that is used.\r\n     * @param {number} maxDistance Maximum distance (in radians) of results to return.\r\n     * @param {boolean} sorted A Bool value that is true if results should be\r\n     * sorted by distance ascending, false is no sorting is required,\r\n     * defaults to true.\r\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\r\n     */\n\n  }, {\n    key: \"withinRadians\",\n    value: function value(key\n    /*: string*/\n    , point\n    /*: ParseGeoPoint*/\n    , maxDistance\n    /*: number*/\n    , sorted\n    /*: boolean*/\n    )\n    /*: ParseQuery*/\n    {\n      if (sorted || sorted === undefined) {\n        this.near(key, point);\n        return this._addCondition(key, '$maxDistance', maxDistance);\n      } else {\n        return this._addCondition(key, '$geoWithin', {\n          $centerSphere: [[point.longitude, point.latitude], maxDistance]\n        });\n      }\n    }\n    /**\r\n     * Adds a proximity based constraint for finding objects with key point\r\n     * values near the point given and within the maximum distance given.\r\n     * Radius of earth used is 3958.8 miles.\r\n     *\r\n     * @param {string} key The key that the Parse.GeoPoint is stored in.\r\n     * @param {Parse.GeoPoint} point The reference Parse.GeoPoint that is used.\r\n     * @param {number} maxDistance Maximum distance (in miles) of results to return.\r\n     * @param {boolean} sorted A Bool value that is true if results should be\r\n     * sorted by distance ascending, false is no sorting is required,\r\n     * defaults to true.\r\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\r\n     */\n\n  }, {\n    key: \"withinMiles\",\n    value: function value(key\n    /*: string*/\n    , point\n    /*: ParseGeoPoint*/\n    , maxDistance\n    /*: number*/\n    , sorted\n    /*: boolean*/\n    )\n    /*: ParseQuery*/\n    {\n      return this.withinRadians(key, point, maxDistance / 3958.8, sorted);\n    }\n    /**\r\n     * Adds a proximity based constraint for finding objects with key point\r\n     * values near the point given and within the maximum distance given.\r\n     * Radius of earth used is 6371.0 kilometers.\r\n     *\r\n     * @param {string} key The key that the Parse.GeoPoint is stored in.\r\n     * @param {Parse.GeoPoint} point The reference Parse.GeoPoint that is used.\r\n     * @param {number} maxDistance Maximum distance (in kilometers) of results to return.\r\n     * @param {boolean} sorted A Bool value that is true if results should be\r\n     * sorted by distance ascending, false is no sorting is required,\r\n     * defaults to true.\r\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\r\n     */\n\n  }, {\n    key: \"withinKilometers\",\n    value: function value(key\n    /*: string*/\n    , point\n    /*: ParseGeoPoint*/\n    , maxDistance\n    /*: number*/\n    , sorted\n    /*: boolean*/\n    )\n    /*: ParseQuery*/\n    {\n      return this.withinRadians(key, point, maxDistance / 6371.0, sorted);\n    }\n    /**\r\n     * Adds a constraint to the query that requires a particular key's\r\n     * coordinates be contained within a given rectangular geographic bounding\r\n     * box.\r\n     *\r\n     * @param {string} key The key to be constrained.\r\n     * @param {Parse.GeoPoint} southwest\r\n     *     The lower-left inclusive corner of the box.\r\n     * @param {Parse.GeoPoint} northeast\r\n     *     The upper-right inclusive corner of the box.\r\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\r\n     */\n\n  }, {\n    key: \"withinGeoBox\",\n    value: function value(key\n    /*: string*/\n    , southwest\n    /*: ParseGeoPoint*/\n    , northeast\n    /*: ParseGeoPoint*/\n    )\n    /*: ParseQuery*/\n    {\n      if (!(southwest instanceof _ParseGeoPoint.default)) {\n        southwest = new _ParseGeoPoint.default(southwest);\n      }\n\n      if (!(northeast instanceof _ParseGeoPoint.default)) {\n        northeast = new _ParseGeoPoint.default(northeast);\n      }\n\n      this._addCondition(key, '$within', {\n        $box: [southwest, northeast]\n      });\n\n      return this;\n    }\n    /**\r\n     * Adds a constraint to the query that requires a particular key's\r\n     * coordinates be contained within and on the bounds of a given polygon.\r\n     * Supports closed and open (last point is connected to first) paths\r\n     *\r\n     * Polygon must have at least 3 points\r\n     *\r\n     * @param {string} key The key to be constrained.\r\n     * @param {Array} points Array of Coordinates / GeoPoints\r\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\r\n     */\n\n  }, {\n    key: \"withinPolygon\",\n    value: function value(key\n    /*: string*/\n    , points\n    /*: Array<Array<number>>*/\n    )\n    /*: ParseQuery*/\n    {\n      return this._addCondition(key, '$geoWithin', {\n        $polygon: points\n      });\n    }\n    /**\r\n     * Add a constraint to the query that requires a particular key's\r\n     * coordinates that contains a ParseGeoPoint\r\n     *\r\n     * @param {string} key The key to be constrained.\r\n     * @param {Parse.GeoPoint} point\r\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\r\n     */\n\n  }, {\n    key: \"polygonContains\",\n    value: function value(key\n    /*: string*/\n    , point\n    /*: ParseGeoPoint*/\n    )\n    /*: ParseQuery*/\n    {\n      return this._addCondition(key, '$geoIntersects', {\n        $point: point\n      });\n    }\n    /** Query Orderings **/\n\n    /**\r\n     * Sorts the results in ascending order by the given key.\r\n     *\r\n     * @param {(string|string[])} keys The key to order by, which is a\r\n     * string of comma separated values, or an Array of keys, or multiple keys.\r\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\r\n     */\n\n  }, {\n    key: \"ascending\",\n    value: function value()\n    /*: ParseQuery*/\n    {\n      this._order = [];\n\n      for (var _len = arguments.length, keys = new Array(_len), _key5 = 0; _key5 < _len; _key5++) {\n        keys[_key5] = arguments[_key5];\n      }\n\n      return this.addAscending.apply(this, keys);\n    }\n    /**\r\n     * Sorts the results in ascending order by the given key,\r\n     * but can also add secondary sort descriptors without overwriting _order.\r\n     *\r\n     * @param {(string|string[])} keys The key to order by, which is a\r\n     * string of comma separated values, or an Array of keys, or multiple keys.\r\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\r\n     */\n\n  }, {\n    key: \"addAscending\",\n    value: function value()\n    /*: ParseQuery*/\n    {\n      var _this9 = this;\n\n      if (!this._order) {\n        this._order = [];\n      }\n\n      for (var _len2 = arguments.length, keys = new Array(_len2), _key6 = 0; _key6 < _len2; _key6++) {\n        keys[_key6] = arguments[_key6];\n      }\n\n      (0, _forEach.default)(keys).call(keys, function (key) {\n        var _context16;\n\n        if ((0, _isArray.default)(key)) {\n          key = key.join();\n        }\n\n        _this9._order = (0, _concat.default)(_context16 = _this9._order).call(_context16, key.replace(/\\s/g, '').split(','));\n      });\n      return this;\n    }\n    /**\r\n     * Sorts the results in descending order by the given key.\r\n     *\r\n     * @param {(string|string[])} keys The key to order by, which is a\r\n     * string of comma separated values, or an Array of keys, or multiple keys.\r\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\r\n     */\n\n  }, {\n    key: \"descending\",\n    value: function value()\n    /*: ParseQuery*/\n    {\n      this._order = [];\n\n      for (var _len3 = arguments.length, keys = new Array(_len3), _key7 = 0; _key7 < _len3; _key7++) {\n        keys[_key7] = arguments[_key7];\n      }\n\n      return this.addDescending.apply(this, keys);\n    }\n    /**\r\n     * Sorts the results in descending order by the given key,\r\n     * but can also add secondary sort descriptors without overwriting _order.\r\n     *\r\n     * @param {(string|string[])} keys The key to order by, which is a\r\n     * string of comma separated values, or an Array of keys, or multiple keys.\r\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\r\n     */\n\n  }, {\n    key: \"addDescending\",\n    value: function value()\n    /*: ParseQuery*/\n    {\n      var _this10 = this;\n\n      if (!this._order) {\n        this._order = [];\n      }\n\n      for (var _len4 = arguments.length, keys = new Array(_len4), _key8 = 0; _key8 < _len4; _key8++) {\n        keys[_key8] = arguments[_key8];\n      }\n\n      (0, _forEach.default)(keys).call(keys, function (key) {\n        var _context17, _context18;\n\n        if ((0, _isArray.default)(key)) {\n          key = key.join();\n        }\n\n        _this10._order = (0, _concat.default)(_context17 = _this10._order).call(_context17, (0, _map2.default)(_context18 = key.replace(/\\s/g, '').split(',')).call(_context18, function (k) {\n          return '-' + k;\n        }));\n      });\n      return this;\n    }\n    /** Query Options **/\n\n    /**\r\n     * Sets the number of results to skip before returning any results.\r\n     * This is useful for pagination.\r\n     * Default is to skip zero results.\r\n     *\r\n     * @param {number} n the number of results to skip.\r\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\r\n     */\n\n  }, {\n    key: \"skip\",\n    value: function value(n\n    /*: number*/\n    )\n    /*: ParseQuery*/\n    {\n      if (typeof n !== 'number' || n < 0) {\n        throw new Error('You can only skip by a positive number');\n      }\n\n      this._skip = n;\n      return this;\n    }\n    /**\r\n     * Sets the limit of the number of results to return. The default limit is 100.\r\n     *\r\n     * @param {number} n the number of results to limit to.\r\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\r\n     */\n\n  }, {\n    key: \"limit\",\n    value: function value(n\n    /*: number*/\n    )\n    /*: ParseQuery*/\n    {\n      if (typeof n !== 'number') {\n        throw new Error('You can only set the limit to a numeric value');\n      }\n\n      this._limit = n;\n      return this;\n    }\n    /**\r\n     * Sets the flag to include with response the total number of objects satisfying this query,\r\n     * despite limits/skip. Might be useful for pagination.\r\n     * Note that result of this query will be wrapped as an object with\r\n     * `results`: holding {ParseObject} array and `count`: integer holding total number\r\n     *\r\n     * @param {boolean} includeCount false - disable, true - enable.\r\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\r\n     */\n\n  }, {\n    key: \"withCount\",\n    value: function value()\n    /*: ParseQuery*/\n    {\n      var includeCount\n      /*: boolean*/\n      = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n\n      if (typeof includeCount !== 'boolean') {\n        throw new Error('You can only set withCount to a boolean value');\n      }\n\n      this._count = includeCount;\n      return this;\n    }\n    /**\r\n     * Includes nested Parse.Objects for the provided key.  You can use dot\r\n     * notation to specify which fields in the included object are also fetched.\r\n     *\r\n     * You can include all nested Parse.Objects by passing in '*'.\r\n     * Requires Parse Server 3.0.0+\r\n     * <pre>query.include('*');</pre>\r\n     *\r\n     * @param {...string|Array<string>} keys The name(s) of the key(s) to include.\r\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\r\n     */\n\n  }, {\n    key: \"include\",\n    value: function value()\n    /*: ParseQuery*/\n    {\n      var _this11 = this;\n\n      for (var _len5 = arguments.length, keys = new Array(_len5), _key9 = 0; _key9 < _len5; _key9++) {\n        keys[_key9] = arguments[_key9];\n      }\n\n      (0, _forEach.default)(keys).call(keys, function (key) {\n        if ((0, _isArray.default)(key)) {\n          var _context19;\n\n          _this11._include = (0, _concat.default)(_context19 = _this11._include).call(_context19, key);\n        } else {\n          _this11._include.push(key);\n        }\n      });\n      return this;\n    }\n    /**\r\n     * Includes all nested Parse.Objects one level deep.\r\n     *\r\n     * Requires Parse Server 3.0.0+\r\n     *\r\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\r\n     */\n\n  }, {\n    key: \"includeAll\",\n    value: function value()\n    /*: ParseQuery*/\n    {\n      return this.include('*');\n    }\n    /**\r\n     * Restricts the fields of the returned Parse.Objects to include only the\r\n     * provided keys.  If this is called multiple times, then all of the keys\r\n     * specified in each of the calls will be included.\r\n     *\r\n     * @param {...string|Array<string>} keys The name(s) of the key(s) to include.\r\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\r\n     */\n\n  }, {\n    key: \"select\",\n    value: function value()\n    /*: ParseQuery*/\n    {\n      var _this12 = this;\n\n      if (!this._select) {\n        this._select = [];\n      }\n\n      for (var _len6 = arguments.length, keys = new Array(_len6), _key10 = 0; _key10 < _len6; _key10++) {\n        keys[_key10] = arguments[_key10];\n      }\n\n      (0, _forEach.default)(keys).call(keys, function (key) {\n        if ((0, _isArray.default)(key)) {\n          var _context20;\n\n          _this12._select = (0, _concat.default)(_context20 = _this12._select).call(_context20, key);\n        } else {\n          _this12._select.push(key);\n        }\n      });\n      return this;\n    }\n    /**\r\n     * Restricts the fields of the returned Parse.Objects to all keys except the\r\n     * provided keys. Exclude takes precedence over select and include.\r\n     *\r\n     * Requires Parse Server 3.6.0+\r\n     *\r\n     * @param {...string|Array<string>} keys The name(s) of the key(s) to exclude.\r\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\r\n     */\n\n  }, {\n    key: \"exclude\",\n    value: function value()\n    /*: ParseQuery*/\n    {\n      var _this13 = this;\n\n      for (var _len7 = arguments.length, keys = new Array(_len7), _key11 = 0; _key11 < _len7; _key11++) {\n        keys[_key11] = arguments[_key11];\n      }\n\n      (0, _forEach.default)(keys).call(keys, function (key) {\n        if ((0, _isArray.default)(key)) {\n          var _context21;\n\n          _this13._exclude = (0, _concat.default)(_context21 = _this13._exclude).call(_context21, key);\n        } else {\n          _this13._exclude.push(key);\n        }\n      });\n      return this;\n    }\n    /**\r\n     * Changes the read preference that the backend will use when performing the query to the database.\r\n     *\r\n     * @param {string} readPreference The read preference for the main query.\r\n     * @param {string} includeReadPreference The read preference for the queries to include pointers.\r\n     * @param {string} subqueryReadPreference The read preference for the sub queries.\r\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\r\n     */\n\n  }, {\n    key: \"readPreference\",\n    value: function value(_readPreference\n    /*: string*/\n    , includeReadPreference\n    /*:: ?: string*/\n    , subqueryReadPreference\n    /*:: ?: string*/\n    )\n    /*: ParseQuery*/\n    {\n      this._readPreference = _readPreference;\n      this._includeReadPreference = includeReadPreference;\n      this._subqueryReadPreference = subqueryReadPreference;\n      return this;\n    }\n    /**\r\n     * Subscribe this query to get liveQuery updates\r\n     *\r\n     * @param {string} sessionToken (optional) Defaults to the currentUser\r\n     * @returns {Promise<LiveQuerySubscription>} Returns the liveQuerySubscription, it's an event emitter\r\n     * which can be used to get liveQuery updates.\r\n     */\n\n  }, {\n    key: \"subscribe\",\n    value: function () {\n      var _subscribe = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee7(sessionToken\n      /*:: ?: string*/\n      ) {\n        var currentUser, liveQueryClient, subscription;\n        return _regenerator.default.wrap(function (_context22) {\n          while (1) {\n            switch (_context22.prev = _context22.next) {\n              case 0:\n                _context22.next = 2;\n                return _CoreManager.default.getUserController().currentUserAsync();\n\n              case 2:\n                currentUser = _context22.sent;\n\n                if (!sessionToken) {\n                  sessionToken = currentUser ? currentUser.getSessionToken() : undefined;\n                }\n\n                _context22.next = 6;\n                return _CoreManager.default.getLiveQueryController().getDefaultLiveQueryClient();\n\n              case 6:\n                liveQueryClient = _context22.sent;\n\n                if (liveQueryClient.shouldOpen()) {\n                  liveQueryClient.open();\n                }\n\n                subscription = liveQueryClient.subscribe(this, sessionToken);\n                return _context22.abrupt(\"return\", subscription.subscribePromise.then(function () {\n                  return subscription;\n                }));\n\n              case 10:\n              case \"end\":\n                return _context22.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      return function () {\n        return _subscribe.apply(this, arguments);\n      };\n    }()\n    /**\r\n     * Constructs a Parse.Query that is the OR of the passed in queries.  For\r\n     * example:\r\n     * <pre>var compoundQuery = Parse.Query.or(query1, query2, query3);</pre>\r\n     *\r\n     * will create a compoundQuery that is an or of the query1, query2, and\r\n     * query3.\r\n     *\r\n     * @param {...Parse.Query} queries The list of queries to OR.\r\n     * @static\r\n     * @returns {Parse.Query} The query that is the OR of the passed in queries.\r\n     */\n\n  }, {\n    key: \"fromNetwork\",\n    value:\n    /**\r\n     * Change the source of this query to the server.\r\n     *\r\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\r\n     */\n    function value()\n    /*: ParseQuery*/\n    {\n      this._queriesLocalDatastore = false;\n      this._localDatastorePinName = null;\n      return this;\n    }\n    /**\r\n     * Changes the source of this query to all pinned objects.\r\n     *\r\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\r\n     */\n\n  }, {\n    key: \"fromLocalDatastore\",\n    value: function value()\n    /*: ParseQuery*/\n    {\n      return this.fromPinWithName(null);\n    }\n    /**\r\n     * Changes the source of this query to the default group of pinned objects.\r\n     *\r\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\r\n     */\n\n  }, {\n    key: \"fromPin\",\n    value: function value()\n    /*: ParseQuery*/\n    {\n      return this.fromPinWithName(_LocalDatastoreUtils.DEFAULT_PIN);\n    }\n    /**\r\n     * Changes the source of this query to a specific group of pinned objects.\r\n     *\r\n     * @param {string} name The name of query source.\r\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\r\n     */\n\n  }, {\n    key: \"fromPinWithName\",\n    value: function value(name\n    /*:: ?: string*/\n    )\n    /*: ParseQuery*/\n    {\n      var localDatastore = _CoreManager.default.getLocalDatastore();\n\n      if (localDatastore.checkIfEnabled()) {\n        this._queriesLocalDatastore = true;\n        this._localDatastorePinName = name;\n      }\n\n      return this;\n    }\n    /**\r\n     * Cancels the current network request (if any is running).\r\n     *\r\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\r\n     */\n\n  }, {\n    key: \"cancel\",\n    value: function value()\n    /*: ParseQuery*/\n    {\n      var _this14 = this;\n\n      if (this._xhrRequest.task && typeof this._xhrRequest.task.abort === 'function') {\n        this._xhrRequest.task._aborted = true;\n\n        this._xhrRequest.task.abort();\n\n        this._xhrRequest.task = null;\n\n        this._xhrRequest.onchange = function () {};\n\n        return this;\n      }\n\n      return this._xhrRequest.onchange = function () {\n        return _this14.cancel();\n      };\n    }\n  }, {\n    key: \"_setRequestTask\",\n    value: function value(options) {\n      var _this15 = this;\n\n      options.requestTask = function (task) {\n        _this15._xhrRequest.task = task;\n\n        _this15._xhrRequest.onchange();\n      };\n    }\n  }], [{\n    key: \"fromJSON\",\n    value: function value(className\n    /*: string*/\n    , json\n    /*: QueryJSON*/\n    )\n    /*: ParseQuery*/\n    {\n      var query = new ParseQuery(className);\n      return query.withJSON(json);\n    }\n  }, {\n    key: \"or\",\n    value: function value()\n    /*: ParseQuery*/\n    {\n      for (var _len8 = arguments.length, queries = new Array(_len8), _key12 = 0; _key12 < _len8; _key12++) {\n        queries[_key12] = arguments[_key12];\n      }\n\n      var className = _getClassNameFromQueries(queries);\n\n      var query = new ParseQuery(className);\n\n      query._orQuery(queries);\n\n      return query;\n    }\n    /**\r\n     * Constructs a Parse.Query that is the AND of the passed in queries.  For\r\n     * example:\r\n     * <pre>var compoundQuery = Parse.Query.and(query1, query2, query3);</pre>\r\n     *\r\n     * will create a compoundQuery that is an and of the query1, query2, and\r\n     * query3.\r\n     *\r\n     * @param {...Parse.Query} queries The list of queries to AND.\r\n     * @static\r\n     * @returns {Parse.Query} The query that is the AND of the passed in queries.\r\n     */\n\n  }, {\n    key: \"and\",\n    value: function value()\n    /*: ParseQuery*/\n    {\n      for (var _len9 = arguments.length, queries = new Array(_len9), _key13 = 0; _key13 < _len9; _key13++) {\n        queries[_key13] = arguments[_key13];\n      }\n\n      var className = _getClassNameFromQueries(queries);\n\n      var query = new ParseQuery(className);\n\n      query._andQuery(queries);\n\n      return query;\n    }\n    /**\r\n     * Constructs a Parse.Query that is the NOR of the passed in queries.  For\r\n     * example:\r\n     * <pre>const compoundQuery = Parse.Query.nor(query1, query2, query3);</pre>\r\n     *\r\n     * will create a compoundQuery that is a nor of the query1, query2, and\r\n     * query3.\r\n     *\r\n     * @param {...Parse.Query} queries The list of queries to NOR.\r\n     * @static\r\n     * @returns {Parse.Query} The query that is the NOR of the passed in queries.\r\n     */\n\n  }, {\n    key: \"nor\",\n    value: function value()\n    /*: ParseQuery*/\n    {\n      for (var _len10 = arguments.length, queries = new Array(_len10), _key14 = 0; _key14 < _len10; _key14++) {\n        queries[_key14] = arguments[_key14];\n      }\n\n      var className = _getClassNameFromQueries(queries);\n\n      var query = new ParseQuery(className);\n\n      query._norQuery(queries);\n\n      return query;\n    }\n  }]);\n  return ParseQuery;\n}();\n\nvar DefaultController = {\n  find: function find(className\n  /*: string*/\n  , params\n  /*: QueryJSON*/\n  , options\n  /*: RequestOptions*/\n  )\n  /*: Promise<Array<ParseObject>>*/\n  {\n    var RESTController = _CoreManager.default.getRESTController();\n\n    return RESTController.request('GET', 'classes/' + className, params, options);\n  },\n  aggregate: function aggregate(className\n  /*: string*/\n  , params\n  /*: any*/\n  , options\n  /*: RequestOptions*/\n  )\n  /*: Promise<Array<mixed>>*/\n  {\n    var RESTController = _CoreManager.default.getRESTController();\n\n    return RESTController.request('GET', 'aggregate/' + className, params, options);\n  }\n};\n\n_CoreManager.default.setQueryController(DefaultController);\n\nvar _default = ParseQuery;\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}