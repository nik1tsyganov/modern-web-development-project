{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs3/helpers/interopRequireDefault\");\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs3/core-js-stable/object/define-property\");\n\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.getPushStatus = getPushStatus;\nexports.send = send;\n\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/typeof\"));\n\nvar _CoreManager = _interopRequireDefault(require(\"./CoreManager\"));\n\nvar _ParseQuery = _interopRequireDefault(require(\"./ParseQuery\"));\n/**\r\n * Copyright (c) 2015-present, Parse, LLC.\r\n * All rights reserved.\r\n *\r\n * This source code is licensed under the BSD-style license found in the\r\n * LICENSE file in the root directory of this source tree. An additional grant\r\n * of patent rights can be found in the PATENTS file in the same directory.\r\n *\r\n * @flow\r\n */\n\n/**\r\n * Contains functions to deal with Push in Parse.\r\n *\r\n * @class Parse.Push\r\n * @static\r\n * @hideconstructor\r\n */\n\n/**\r\n * Sends a push notification.\r\n * **Available in Cloud Code only.**\r\n *\r\n * See {@link https://docs.parseplatform.org/js/guide/#push-notifications Push Notification Guide}\r\n *\r\n * @function send\r\n * @name Parse.Push.send\r\n * @param {object} data -  The data of the push notification. Valid fields\r\n * are:\r\n *   <ol>\r\n *     <li>channels - An Array of channels to push to.</li>\r\n *     <li>push_time - A Date object for when to send the push.</li>\r\n *     <li>expiration_time -  A Date object for when to expire\r\n *         the push.</li>\r\n *     <li>expiration_interval - The seconds from now to expire the push.</li>\r\n *     <li>where - A Parse.Query over Parse.Installation that is used to match\r\n *         a set of installations to push to.</li>\r\n *     <li>data - The data to send as part of the push.</li>\r\n *   <ol>\r\n * @param {object} options Valid options\r\n * are:<ul>\r\n *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\r\n *     be used for this request.\r\n * </ul>\r\n * @returns {Promise} A promise that is fulfilled when the push request\r\n *     completes.\r\n */\n\n\nfunction send(data\n/*: PushData*/\n)\n/*: Promise*/\n{\n  var options\n  /*:: ?: FullOptions*/\n  = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (data.where && data.where instanceof _ParseQuery.default) {\n    data.where = data.where.toJSON().where;\n  }\n\n  if (data.push_time && (0, _typeof2.default)(data.push_time) === 'object') {\n    data.push_time = data.push_time.toJSON();\n  }\n\n  if (data.expiration_time && (0, _typeof2.default)(data.expiration_time) === 'object') {\n    data.expiration_time = data.expiration_time.toJSON();\n  }\n\n  if (data.expiration_time && data.expiration_interval) {\n    throw new Error('expiration_time and expiration_interval cannot both be set.');\n  }\n\n  var pushOptions = {\n    useMasterKey: true\n  };\n\n  if (options.hasOwnProperty('useMasterKey')) {\n    pushOptions.useMasterKey = options.useMasterKey;\n  }\n\n  return _CoreManager.default.getPushController().send(data, pushOptions);\n}\n/**\r\n * Gets push status by Id\r\n *\r\n * @function getPushStatus\r\n * @name Parse.Push.getPushStatus\r\n * @param {string} pushStatusId The Id of Push Status.\r\n * @param {object} options Valid options\r\n * are:<ul>\r\n *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\r\n *     be used for this request.\r\n * </ul>\r\n * @returns {Parse.Object} Status of Push.\r\n */\n\n\nfunction getPushStatus(pushStatusId\n/*: string*/\n)\n/*: Promise<string>*/\n{\n  var options\n  /*:: ?: FullOptions*/\n  = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var pushOptions = {\n    useMasterKey: true\n  };\n\n  if (options.hasOwnProperty('useMasterKey')) {\n    pushOptions.useMasterKey = options.useMasterKey;\n  }\n\n  var query = new _ParseQuery.default('_PushStatus');\n  return query.get(pushStatusId, pushOptions);\n}\n\nvar DefaultController = {\n  send: function (data\n  /*: PushData*/\n  , options\n  /*:: ?: FullOptions*/\n  ) {\n    return _CoreManager.default.getRESTController().request('POST', 'push', data, options);\n  }\n};\n\n_CoreManager.default.setPushController(DefaultController);","map":{"version":3,"names":["_interopRequireDefault","require","_Object$defineProperty","exports","value","getPushStatus","send","_typeof2","_CoreManager","_ParseQuery","data","options","arguments","length","undefined","where","default","toJSON","push_time","expiration_time","expiration_interval","Error","pushOptions","useMasterKey","hasOwnProperty","getPushController","pushStatusId","query","get","DefaultController","getRESTController","request","setPushController"],"sources":["C:/Users/brosk/Documents/Web Dev/modern-web-development-project/project/node_modules/parse/lib/browser/Push.js"],"sourcesContent":["\"use strict\";\r\n\r\nvar _interopRequireDefault = require(\"@babel/runtime-corejs3/helpers/interopRequireDefault\");\r\n\r\nvar _Object$defineProperty = require(\"@babel/runtime-corejs3/core-js-stable/object/define-property\");\r\n\r\n_Object$defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nexports.getPushStatus = getPushStatus;\r\nexports.send = send;\r\n\r\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/typeof\"));\r\n\r\nvar _CoreManager = _interopRequireDefault(require(\"./CoreManager\"));\r\n\r\nvar _ParseQuery = _interopRequireDefault(require(\"./ParseQuery\"));\r\n/**\r\n * Copyright (c) 2015-present, Parse, LLC.\r\n * All rights reserved.\r\n *\r\n * This source code is licensed under the BSD-style license found in the\r\n * LICENSE file in the root directory of this source tree. An additional grant\r\n * of patent rights can be found in the PATENTS file in the same directory.\r\n *\r\n * @flow\r\n */\r\n\r\n/**\r\n * Contains functions to deal with Push in Parse.\r\n *\r\n * @class Parse.Push\r\n * @static\r\n * @hideconstructor\r\n */\r\n\r\n/**\r\n * Sends a push notification.\r\n * **Available in Cloud Code only.**\r\n *\r\n * See {@link https://docs.parseplatform.org/js/guide/#push-notifications Push Notification Guide}\r\n *\r\n * @function send\r\n * @name Parse.Push.send\r\n * @param {object} data -  The data of the push notification. Valid fields\r\n * are:\r\n *   <ol>\r\n *     <li>channels - An Array of channels to push to.</li>\r\n *     <li>push_time - A Date object for when to send the push.</li>\r\n *     <li>expiration_time -  A Date object for when to expire\r\n *         the push.</li>\r\n *     <li>expiration_interval - The seconds from now to expire the push.</li>\r\n *     <li>where - A Parse.Query over Parse.Installation that is used to match\r\n *         a set of installations to push to.</li>\r\n *     <li>data - The data to send as part of the push.</li>\r\n *   <ol>\r\n * @param {object} options Valid options\r\n * are:<ul>\r\n *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\r\n *     be used for this request.\r\n * </ul>\r\n * @returns {Promise} A promise that is fulfilled when the push request\r\n *     completes.\r\n */\r\n\r\n\r\nfunction send(data\r\n/*: PushData*/\r\n)\r\n/*: Promise*/\r\n{\r\n  var options\r\n  /*:: ?: FullOptions*/\r\n  = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\r\n\r\n  if (data.where && data.where instanceof _ParseQuery.default) {\r\n    data.where = data.where.toJSON().where;\r\n  }\r\n\r\n  if (data.push_time && (0, _typeof2.default)(data.push_time) === 'object') {\r\n    data.push_time = data.push_time.toJSON();\r\n  }\r\n\r\n  if (data.expiration_time && (0, _typeof2.default)(data.expiration_time) === 'object') {\r\n    data.expiration_time = data.expiration_time.toJSON();\r\n  }\r\n\r\n  if (data.expiration_time && data.expiration_interval) {\r\n    throw new Error('expiration_time and expiration_interval cannot both be set.');\r\n  }\r\n\r\n  var pushOptions = {\r\n    useMasterKey: true\r\n  };\r\n\r\n  if (options.hasOwnProperty('useMasterKey')) {\r\n    pushOptions.useMasterKey = options.useMasterKey;\r\n  }\r\n\r\n  return _CoreManager.default.getPushController().send(data, pushOptions);\r\n}\r\n/**\r\n * Gets push status by Id\r\n *\r\n * @function getPushStatus\r\n * @name Parse.Push.getPushStatus\r\n * @param {string} pushStatusId The Id of Push Status.\r\n * @param {object} options Valid options\r\n * are:<ul>\r\n *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\r\n *     be used for this request.\r\n * </ul>\r\n * @returns {Parse.Object} Status of Push.\r\n */\r\n\r\n\r\nfunction getPushStatus(pushStatusId\r\n/*: string*/\r\n)\r\n/*: Promise<string>*/\r\n{\r\n  var options\r\n  /*:: ?: FullOptions*/\r\n  = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\r\n  var pushOptions = {\r\n    useMasterKey: true\r\n  };\r\n\r\n  if (options.hasOwnProperty('useMasterKey')) {\r\n    pushOptions.useMasterKey = options.useMasterKey;\r\n  }\r\n\r\n  var query = new _ParseQuery.default('_PushStatus');\r\n  return query.get(pushStatusId, pushOptions);\r\n}\r\n\r\nvar DefaultController = {\r\n  send: function (data\r\n  /*: PushData*/\r\n  , options\r\n  /*:: ?: FullOptions*/\r\n  ) {\r\n    return _CoreManager.default.getRESTController().request('POST', 'push', data, options);\r\n  }\r\n};\r\n\r\n_CoreManager.default.setPushController(DefaultController);"],"mappings":"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"},"metadata":{},"sourceType":"script"}