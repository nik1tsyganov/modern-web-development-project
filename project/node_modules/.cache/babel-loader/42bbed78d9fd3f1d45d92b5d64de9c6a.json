{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs3/helpers/interopRequireDefault\");\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs3/core-js-stable/object/define-property\");\n\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.getPushStatus = getPushStatus;\nexports.send = send;\n\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/typeof\"));\n\nvar _CoreManager = _interopRequireDefault(require(\"./CoreManager\"));\n\nvar _ParseQuery = _interopRequireDefault(require(\"./ParseQuery\"));\n/**\r\n * Copyright (c) 2015-present, Parse, LLC.\r\n * All rights reserved.\r\n *\r\n * This source code is licensed under the BSD-style license found in the\r\n * LICENSE file in the root directory of this source tree. An additional grant\r\n * of patent rights can be found in the PATENTS file in the same directory.\r\n *\r\n * @flow\r\n */\n\n/**\r\n * Contains functions to deal with Push in Parse.\r\n *\r\n * @class Parse.Push\r\n * @static\r\n * @hideconstructor\r\n */\n\n/**\r\n * Sends a push notification.\r\n * **Available in Cloud Code only.**\r\n *\r\n * See {@link https://docs.parseplatform.org/js/guide/#push-notifications Push Notification Guide}\r\n *\r\n * @function send\r\n * @name Parse.Push.send\r\n * @param {object} data -  The data of the push notification. Valid fields\r\n * are:\r\n *   <ol>\r\n *     <li>channels - An Array of channels to push to.</li>\r\n *     <li>push_time - A Date object for when to send the push.</li>\r\n *     <li>expiration_time -  A Date object for when to expire\r\n *         the push.</li>\r\n *     <li>expiration_interval - The seconds from now to expire the push.</li>\r\n *     <li>where - A Parse.Query over Parse.Installation that is used to match\r\n *         a set of installations to push to.</li>\r\n *     <li>data - The data to send as part of the push.</li>\r\n *   <ol>\r\n * @param {object} options Valid options\r\n * are:<ul>\r\n *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\r\n *     be used for this request.\r\n * </ul>\r\n * @returns {Promise} A promise that is fulfilled when the push request\r\n *     completes.\r\n */\n\n\nfunction send(data\n/*: PushData*/\n)\n/*: Promise*/\n{\n  var options\n  /*:: ?: FullOptions*/\n  = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (data.where && data.where instanceof _ParseQuery.default) {\n    data.where = data.where.toJSON().where;\n  }\n\n  if (data.push_time && (0, _typeof2.default)(data.push_time) === 'object') {\n    data.push_time = data.push_time.toJSON();\n  }\n\n  if (data.expiration_time && (0, _typeof2.default)(data.expiration_time) === 'object') {\n    data.expiration_time = data.expiration_time.toJSON();\n  }\n\n  if (data.expiration_time && data.expiration_interval) {\n    throw new Error('expiration_time and expiration_interval cannot both be set.');\n  }\n\n  var pushOptions = {\n    useMasterKey: true\n  };\n\n  if (options.hasOwnProperty('useMasterKey')) {\n    pushOptions.useMasterKey = options.useMasterKey;\n  }\n\n  return _CoreManager.default.getPushController().send(data, pushOptions);\n}\n/**\r\n * Gets push status by Id\r\n *\r\n * @function getPushStatus\r\n * @name Parse.Push.getPushStatus\r\n * @param {string} pushStatusId The Id of Push Status.\r\n * @param {object} options Valid options\r\n * are:<ul>\r\n *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\r\n *     be used for this request.\r\n * </ul>\r\n * @returns {Parse.Object} Status of Push.\r\n */\n\n\nfunction getPushStatus(pushStatusId\n/*: string*/\n)\n/*: Promise<string>*/\n{\n  var options\n  /*:: ?: FullOptions*/\n  = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var pushOptions = {\n    useMasterKey: true\n  };\n\n  if (options.hasOwnProperty('useMasterKey')) {\n    pushOptions.useMasterKey = options.useMasterKey;\n  }\n\n  var query = new _ParseQuery.default('_PushStatus');\n  return query.get(pushStatusId, pushOptions);\n}\n\nvar DefaultController = {\n  send: function send(data\n  /*: PushData*/\n  , options\n  /*:: ?: FullOptions*/\n  ) {\n    return _CoreManager.default.getRESTController().request('POST', 'push', data, options);\n  }\n};\n\n_CoreManager.default.setPushController(DefaultController);","map":null,"metadata":{},"sourceType":"script"}