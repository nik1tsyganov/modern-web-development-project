{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs3/helpers/interopRequireDefault\");\n\nvar _Array$isArray2 = require(\"@babel/runtime-corejs3/core-js-stable/array/is-array\");\n\nvar _getIteratorMethod = require(\"@babel/runtime-corejs3/core-js/get-iterator-method\");\n\nvar _Symbol = require(\"@babel/runtime-corejs3/core-js-stable/symbol\");\n\nvar _Array$from2 = require(\"@babel/runtime-corejs3/core-js-stable/array/from\");\n\nvar _sliceInstanceProperty = require(\"@babel/runtime-corejs3/core-js-stable/instance/slice\");\n\nvar _find = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/find\"));\n\nvar _from = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/array/from\"));\n\nvar _map = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/map\"));\n\nvar _isArray = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/array/is-array\"));\n\nvar _keys2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/keys\"));\n\nvar _startsWith = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/starts-with\"));\n\nvar _keys3 = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/object/keys\"));\n\nvar _includes = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/includes\"));\n\nvar _filter = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/filter\"));\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime-corejs3/regenerator\"));\n\nvar _concat = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/concat\"));\n\nvar _set = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/set\"));\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/toConsumableArray\"));\n\nvar _promise = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/promise\"));\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/slicedToArray\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/asyncToGenerator\"));\n\nvar _CoreManager = _interopRequireDefault(require(\"./CoreManager\"));\n\nvar _ParseQuery = _interopRequireDefault(require(\"./ParseQuery\"));\n\nvar _LocalDatastoreUtils = require(\"./LocalDatastoreUtils\");\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) {\n  var it = typeof _Symbol !== \"undefined\" && _getIteratorMethod(o) || o[\"@@iterator\"];\n\n  if (!it) {\n    if (_Array$isArray2(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = it.call(o);\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it.return != null) it.return();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  var _context18;\n\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n\n  var n = _sliceInstanceProperty(_context18 = Object.prototype.toString.call(o)).call(_context18, 8, -1);\n\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return _Array$from2(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n/**\r\n * Provides a local datastore which can be used to store and retrieve <code>Parse.Object</code>. <br />\r\n * To enable this functionality, call <code>Parse.enableLocalDatastore()</code>.\r\n *\r\n * Pin object to add to local datastore\r\n *\r\n * <pre>await object.pin();</pre>\r\n * <pre>await object.pinWithName('pinName');</pre>\r\n *\r\n * Query pinned objects\r\n *\r\n * <pre>query.fromLocalDatastore();</pre>\r\n * <pre>query.fromPin();</pre>\r\n * <pre>query.fromPinWithName();</pre>\r\n *\r\n * <pre>const localObjects = await query.find();</pre>\r\n *\r\n * @class Parse.LocalDatastore\r\n * @static\r\n */\n\n\nvar LocalDatastore = {\n  isEnabled: false,\n  isSyncing: false,\n  fromPinWithName: function fromPinWithName(name\n  /*: string*/\n  )\n  /*: Promise<Array<Object>>*/\n  {\n    var controller = _CoreManager.default.getLocalDatastoreController();\n\n    return controller.fromPinWithName(name);\n  },\n  pinWithName: function pinWithName(name\n  /*: string*/\n  , value\n  /*: any*/\n  )\n  /*: Promise<void>*/\n  {\n    var controller = _CoreManager.default.getLocalDatastoreController();\n\n    return controller.pinWithName(name, value);\n  },\n  unPinWithName: function unPinWithName(name\n  /*: string*/\n  )\n  /*: Promise<void>*/\n  {\n    var controller = _CoreManager.default.getLocalDatastoreController();\n\n    return controller.unPinWithName(name);\n  },\n  _getAllContents: function _getAllContents()\n  /*: Promise<Object>*/\n  {\n    var controller = _CoreManager.default.getLocalDatastoreController();\n\n    return controller.getAllContents();\n  },\n  // Use for testing\n  _getRawStorage: function _getRawStorage()\n  /*: Promise<Object>*/\n  {\n    var controller = _CoreManager.default.getLocalDatastoreController();\n\n    return controller.getRawStorage();\n  },\n  _clear: function _clear()\n  /*: Promise<void>*/\n  {\n    var controller = _CoreManager.default.getLocalDatastoreController();\n\n    return controller.clear();\n  },\n  // Pin the object and children recursively\n  // Saves the object and children key to Pin Name\n  _handlePinAllWithName: function _handlePinAllWithName(name\n  /*: string*/\n  , objects\n  /*: Array<ParseObject>*/\n  )\n  /*: Promise<void>*/\n  {\n    var _this = this;\n\n    return (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee() {\n      var _context;\n\n      var pinName, toPinPromises, objectKeys, _iterator, _step, parent, children, parentKey, json, objectKey, fromPinPromise, _yield$Promise$all, _yield$Promise$all2, pinned, toPin;\n\n      return _regenerator.default.wrap(function (_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              pinName = _this.getPinName(name);\n              toPinPromises = [];\n              objectKeys = [];\n              _iterator = _createForOfIteratorHelper(objects);\n\n              try {\n                for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                  parent = _step.value;\n                  children = _this._getChildren(parent);\n                  parentKey = _this.getKeyForObject(parent);\n                  json = parent._toFullJSON(undefined, true);\n\n                  if (parent._localId) {\n                    json._localId = parent._localId;\n                  }\n\n                  children[parentKey] = json;\n\n                  for (objectKey in children) {\n                    objectKeys.push(objectKey);\n                    toPinPromises.push(_this.pinWithName(objectKey, [children[objectKey]]));\n                  }\n                }\n              } catch (err) {\n                _iterator.e(err);\n              } finally {\n                _iterator.f();\n              }\n\n              fromPinPromise = _this.fromPinWithName(pinName);\n              _context2.next = 8;\n              return _promise.default.all([fromPinPromise, toPinPromises]);\n\n            case 8:\n              _yield$Promise$all = _context2.sent;\n              _yield$Promise$all2 = (0, _slicedToArray2.default)(_yield$Promise$all, 1);\n              pinned = _yield$Promise$all2[0];\n              toPin = (0, _toConsumableArray2.default)(new _set.default((0, _concat.default)(_context = []).call(_context, (0, _toConsumableArray2.default)(pinned || []), objectKeys)));\n              return _context2.abrupt(\"return\", _this.pinWithName(pinName, toPin));\n\n            case 13:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee);\n    }))();\n  },\n  // Removes object and children keys from pin name\n  // Keeps the object and children pinned\n  _handleUnPinAllWithName: function _handleUnPinAllWithName(name\n  /*: string*/\n  , objects\n  /*: Array<ParseObject>*/\n  ) {\n    var _this2 = this;\n\n    return (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee2() {\n      var localDatastore, pinName, promises, objectKeys, _iterator2, _step2, _objectKeys, _context3, parent, children, parentKey, pinned, _iterator3, _step3, objectKey, hasReference, key, pinnedObjects;\n\n      return _regenerator.default.wrap(function (_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.next = 2;\n              return _this2._getAllContents();\n\n            case 2:\n              localDatastore = _context4.sent;\n              pinName = _this2.getPinName(name);\n              promises = [];\n              objectKeys = [];\n              _iterator2 = _createForOfIteratorHelper(objects);\n\n              try {\n                for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                  parent = _step2.value;\n                  children = _this2._getChildren(parent);\n                  parentKey = _this2.getKeyForObject(parent);\n\n                  (_objectKeys = objectKeys).push.apply(_objectKeys, (0, _concat.default)(_context3 = [parentKey]).call(_context3, (0, _toConsumableArray2.default)((0, _keys3.default)(children))));\n                }\n              } catch (err) {\n                _iterator2.e(err);\n              } finally {\n                _iterator2.f();\n              }\n\n              objectKeys = (0, _toConsumableArray2.default)(new _set.default(objectKeys));\n              pinned = localDatastore[pinName] || [];\n              pinned = (0, _filter.default)(pinned).call(pinned, function (item) {\n                return !(0, _includes.default)(objectKeys).call(objectKeys, item);\n              });\n\n              if (pinned.length == 0) {\n                promises.push(_this2.unPinWithName(pinName));\n                delete localDatastore[pinName];\n              } else {\n                promises.push(_this2.pinWithName(pinName, pinned));\n                localDatastore[pinName] = pinned;\n              }\n\n              _iterator3 = _createForOfIteratorHelper(objectKeys);\n              _context4.prev = 13;\n\n              _iterator3.s();\n\n            case 15:\n              if ((_step3 = _iterator3.n()).done) {\n                _context4.next = 31;\n                break;\n              }\n\n              objectKey = _step3.value;\n              hasReference = false;\n              _context4.t0 = (0, _keys2.default)(_regenerator.default).call(_regenerator.default, localDatastore);\n\n            case 19:\n              if ((_context4.t1 = _context4.t0()).done) {\n                _context4.next = 28;\n                break;\n              }\n\n              key = _context4.t1.value;\n\n              if (!(key === _LocalDatastoreUtils.DEFAULT_PIN || (0, _startsWith.default)(key).call(key, _LocalDatastoreUtils.PIN_PREFIX))) {\n                _context4.next = 26;\n                break;\n              }\n\n              pinnedObjects = localDatastore[key] || [];\n\n              if (!(0, _includes.default)(pinnedObjects).call(pinnedObjects, objectKey)) {\n                _context4.next = 26;\n                break;\n              }\n\n              hasReference = true;\n              return _context4.abrupt(\"break\", 28);\n\n            case 26:\n              _context4.next = 19;\n              break;\n\n            case 28:\n              if (!hasReference) {\n                promises.push(_this2.unPinWithName(objectKey));\n              }\n\n            case 29:\n              _context4.next = 15;\n              break;\n\n            case 31:\n              _context4.next = 36;\n              break;\n\n            case 33:\n              _context4.prev = 33;\n              _context4.t2 = _context4[\"catch\"](13);\n\n              _iterator3.e(_context4.t2);\n\n            case 36:\n              _context4.prev = 36;\n\n              _iterator3.f();\n\n              return _context4.finish(36);\n\n            case 39:\n              return _context4.abrupt(\"return\", _promise.default.all(promises));\n\n            case 40:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee2, null, [[13, 33, 36, 39]]);\n    }))();\n  },\n  // Retrieve all pointer fields from object recursively\n  _getChildren: function _getChildren(object\n  /*: ParseObject*/\n  ) {\n    var encountered = {};\n\n    var json = object._toFullJSON(undefined, true);\n\n    for (var key in json) {\n      if (json[key] && json[key].__type && json[key].__type === 'Object') {\n        this._traverse(json[key], encountered);\n      }\n    }\n\n    return encountered;\n  },\n  _traverse: function _traverse(object\n  /*: any*/\n  , encountered\n  /*: any*/\n  ) {\n    if (!object.objectId) {\n      return;\n    } else {\n      var objectKey = this.getKeyForObject(object);\n\n      if (encountered[objectKey]) {\n        return;\n      }\n\n      encountered[objectKey] = object;\n    }\n\n    for (var key in object) {\n      var json = object[key];\n\n      if (!object[key]) {\n        json = object;\n      }\n\n      if (json.__type && json.__type === 'Object') {\n        this._traverse(json, encountered);\n      }\n    }\n  },\n  // Transform keys in pin name to objects\n  _serializeObjectsFromPinName: function _serializeObjectsFromPinName(name\n  /*: string*/\n  ) {\n    var _this3 = this;\n\n    return (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee3() {\n      var _context5, _concatInstanceProper, _context6;\n\n      var localDatastore, allObjects, key, pinName, pinned, promises, objects;\n      return _regenerator.default.wrap(function (_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              _context7.next = 2;\n              return _this3._getAllContents();\n\n            case 2:\n              localDatastore = _context7.sent;\n              allObjects = [];\n\n              for (key in localDatastore) {\n                if ((0, _startsWith.default)(key).call(key, _LocalDatastoreUtils.OBJECT_PREFIX)) {\n                  allObjects.push(localDatastore[key][0]);\n                }\n              }\n\n              if (name) {\n                _context7.next = 7;\n                break;\n              }\n\n              return _context7.abrupt(\"return\", allObjects);\n\n            case 7:\n              pinName = _this3.getPinName(name);\n              pinned = localDatastore[pinName];\n\n              if ((0, _isArray.default)(pinned)) {\n                _context7.next = 11;\n                break;\n              }\n\n              return _context7.abrupt(\"return\", []);\n\n            case 11:\n              promises = (0, _map.default)(pinned).call(pinned, function (objectKey) {\n                return _this3.fromPinWithName(objectKey);\n              });\n              _context7.next = 14;\n              return _promise.default.all(promises);\n\n            case 14:\n              objects = _context7.sent;\n              objects = (_concatInstanceProper = (0, _concat.default)(_context5 = [])).call.apply(_concatInstanceProper, (0, _concat.default)(_context6 = [_context5]).call(_context6, (0, _toConsumableArray2.default)(objects)));\n              return _context7.abrupt(\"return\", (0, _filter.default)(objects).call(objects, function (object) {\n                return object != null;\n              }));\n\n            case 17:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, _callee3);\n    }))();\n  },\n  // Replaces object pointers with pinned pointers\n  // The object pointers may contain old data\n  // Uses Breadth First Search Algorithm\n  _serializeObject: function _serializeObject(objectKey\n  /*: string*/\n  , localDatastore\n  /*: any*/\n  ) {\n    var _this4 = this;\n\n    return (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee4() {\n      var LDS, root, queue, meta, uniqueId, nodeId, subTreeRoot, field, value, key, pointer;\n      return _regenerator.default.wrap(function (_context8) {\n        while (1) {\n          switch (_context8.prev = _context8.next) {\n            case 0:\n              LDS = localDatastore;\n\n              if (LDS) {\n                _context8.next = 5;\n                break;\n              }\n\n              _context8.next = 4;\n              return _this4._getAllContents();\n\n            case 4:\n              LDS = _context8.sent;\n\n            case 5:\n              if (!(!LDS[objectKey] || LDS[objectKey].length === 0)) {\n                _context8.next = 7;\n                break;\n              }\n\n              return _context8.abrupt(\"return\", null);\n\n            case 7:\n              root = LDS[objectKey][0];\n              queue = [];\n              meta = {};\n              uniqueId = 0;\n              meta[uniqueId] = root;\n              queue.push(uniqueId);\n\n              while (queue.length !== 0) {\n                nodeId = queue.shift();\n                subTreeRoot = meta[nodeId];\n\n                for (field in subTreeRoot) {\n                  value = subTreeRoot[field];\n\n                  if (value.__type && value.__type === 'Object') {\n                    key = _this4.getKeyForObject(value);\n\n                    if (LDS[key] && LDS[key].length > 0) {\n                      pointer = LDS[key][0];\n                      uniqueId++;\n                      meta[uniqueId] = pointer;\n                      subTreeRoot[field] = pointer;\n                      queue.push(uniqueId);\n                    }\n                  }\n                }\n              }\n\n              return _context8.abrupt(\"return\", root);\n\n            case 15:\n            case \"end\":\n              return _context8.stop();\n          }\n        }\n      }, _callee4);\n    }))();\n  },\n  // Called when an object is save / fetched\n  // Update object pin value\n  _updateObjectIfPinned: function _updateObjectIfPinned(object\n  /*: ParseObject*/\n  )\n  /*: Promise<void>*/\n  {\n    var _this5 = this;\n\n    return (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee5() {\n      var objectKey, pinned;\n      return _regenerator.default.wrap(function (_context9) {\n        while (1) {\n          switch (_context9.prev = _context9.next) {\n            case 0:\n              if (_this5.isEnabled) {\n                _context9.next = 2;\n                break;\n              }\n\n              return _context9.abrupt(\"return\");\n\n            case 2:\n              objectKey = _this5.getKeyForObject(object);\n              _context9.next = 5;\n              return _this5.fromPinWithName(objectKey);\n\n            case 5:\n              pinned = _context9.sent;\n\n              if (!(!pinned || pinned.length === 0)) {\n                _context9.next = 8;\n                break;\n              }\n\n              return _context9.abrupt(\"return\");\n\n            case 8:\n              return _context9.abrupt(\"return\", _this5.pinWithName(objectKey, [object._toFullJSON()]));\n\n            case 9:\n            case \"end\":\n              return _context9.stop();\n          }\n        }\n      }, _callee5);\n    }))();\n  },\n  // Called when object is destroyed\n  // Unpin object and remove all references from pin names\n  // TODO: Destroy children?\n  _destroyObjectIfPinned: function _destroyObjectIfPinned(object\n  /*: ParseObject*/\n  ) {\n    var _this6 = this;\n\n    return (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee6() {\n      var localDatastore, objectKey, pin, promises, key, pinned;\n      return _regenerator.default.wrap(function (_context10) {\n        while (1) {\n          switch (_context10.prev = _context10.next) {\n            case 0:\n              if (_this6.isEnabled) {\n                _context10.next = 2;\n                break;\n              }\n\n              return _context10.abrupt(\"return\");\n\n            case 2:\n              _context10.next = 4;\n              return _this6._getAllContents();\n\n            case 4:\n              localDatastore = _context10.sent;\n              objectKey = _this6.getKeyForObject(object);\n              pin = localDatastore[objectKey];\n\n              if (pin) {\n                _context10.next = 9;\n                break;\n              }\n\n              return _context10.abrupt(\"return\");\n\n            case 9:\n              promises = [_this6.unPinWithName(objectKey)];\n              delete localDatastore[objectKey];\n\n              for (key in localDatastore) {\n                if (key === _LocalDatastoreUtils.DEFAULT_PIN || (0, _startsWith.default)(key).call(key, _LocalDatastoreUtils.PIN_PREFIX)) {\n                  pinned = localDatastore[key] || [];\n\n                  if ((0, _includes.default)(pinned).call(pinned, objectKey)) {\n                    pinned = (0, _filter.default)(pinned).call(pinned, function (item) {\n                      return item !== objectKey;\n                    });\n\n                    if (pinned.length == 0) {\n                      promises.push(_this6.unPinWithName(key));\n                      delete localDatastore[key];\n                    } else {\n                      promises.push(_this6.pinWithName(key, pinned));\n                      localDatastore[key] = pinned;\n                    }\n                  }\n                }\n              }\n\n              return _context10.abrupt(\"return\", _promise.default.all(promises));\n\n            case 13:\n            case \"end\":\n              return _context10.stop();\n          }\n        }\n      }, _callee6);\n    }))();\n  },\n  // Update pin and references of the unsaved object\n  _updateLocalIdForObject: function _updateLocalIdForObject(localId\n  /*: string*/\n  , object\n  /*: ParseObject*/\n  ) {\n    var _this7 = this;\n\n    return (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee7() {\n      var _context11, _context12;\n\n      var localKey, objectKey, unsaved, promises, localDatastore, key, pinned;\n      return _regenerator.default.wrap(function (_context13) {\n        while (1) {\n          switch (_context13.prev = _context13.next) {\n            case 0:\n              if (_this7.isEnabled) {\n                _context13.next = 2;\n                break;\n              }\n\n              return _context13.abrupt(\"return\");\n\n            case 2:\n              localKey = (0, _concat.default)(_context11 = (0, _concat.default)(_context12 = \"\".concat(_LocalDatastoreUtils.OBJECT_PREFIX)).call(_context12, object.className, \"_\")).call(_context11, localId);\n              objectKey = _this7.getKeyForObject(object);\n              _context13.next = 6;\n              return _this7.fromPinWithName(localKey);\n\n            case 6:\n              unsaved = _context13.sent;\n\n              if (!(!unsaved || unsaved.length === 0)) {\n                _context13.next = 9;\n                break;\n              }\n\n              return _context13.abrupt(\"return\");\n\n            case 9:\n              promises = [_this7.unPinWithName(localKey), _this7.pinWithName(objectKey, unsaved)];\n              _context13.next = 12;\n              return _this7._getAllContents();\n\n            case 12:\n              localDatastore = _context13.sent;\n\n              for (key in localDatastore) {\n                if (key === _LocalDatastoreUtils.DEFAULT_PIN || (0, _startsWith.default)(key).call(key, _LocalDatastoreUtils.PIN_PREFIX)) {\n                  pinned = localDatastore[key] || [];\n\n                  if ((0, _includes.default)(pinned).call(pinned, localKey)) {\n                    pinned = (0, _filter.default)(pinned).call(pinned, function (item) {\n                      return item !== localKey;\n                    });\n                    pinned.push(objectKey);\n                    promises.push(_this7.pinWithName(key, pinned));\n                    localDatastore[key] = pinned;\n                  }\n                }\n              }\n\n              return _context13.abrupt(\"return\", _promise.default.all(promises));\n\n            case 15:\n            case \"end\":\n              return _context13.stop();\n          }\n        }\n      }, _callee7);\n    }))();\n  },\n\n  /**\r\n   * Updates Local Datastore from Server\r\n   *\r\n   * <pre>\r\n   * await Parse.LocalDatastore.updateFromServer();\r\n   * </pre>\r\n   *\r\n   * @function updateFromServer\r\n   * @name Parse.LocalDatastore.updateFromServer\r\n   * @static\r\n   */\n  updateFromServer: function updateFromServer() {\n    var _this8 = this;\n\n    return (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee8() {\n      var _context14;\n\n      var localDatastore, keys, key, pointersHash, _i, _keys, _key, _key$split, _key$split2, className, objectId, queryPromises, responses, objects, pinPromises;\n\n      return _regenerator.default.wrap(function (_context15) {\n        while (1) {\n          switch (_context15.prev = _context15.next) {\n            case 0:\n              if (!(!_this8.checkIfEnabled() || _this8.isSyncing)) {\n                _context15.next = 2;\n                break;\n              }\n\n              return _context15.abrupt(\"return\");\n\n            case 2:\n              _context15.next = 4;\n              return _this8._getAllContents();\n\n            case 4:\n              localDatastore = _context15.sent;\n              keys = [];\n\n              for (key in localDatastore) {\n                if ((0, _startsWith.default)(key).call(key, _LocalDatastoreUtils.OBJECT_PREFIX)) {\n                  keys.push(key);\n                }\n              }\n\n              if (!(keys.length === 0)) {\n                _context15.next = 9;\n                break;\n              }\n\n              return _context15.abrupt(\"return\");\n\n            case 9:\n              _this8.isSyncing = true;\n              pointersHash = {};\n              _i = 0, _keys = keys;\n\n            case 12:\n              if (!(_i < _keys.length)) {\n                _context15.next = 23;\n                break;\n              }\n\n              _key = _keys[_i]; // Ignore the OBJECT_PREFIX\n\n              _key$split = _key.split('_'), _key$split2 = (0, _slicedToArray2.default)(_key$split, 4), className = _key$split2[2], objectId = _key$split2[3]; // User key is split into [ 'Parse', 'LDS', '', 'User', 'objectId' ]\n\n              if (_key.split('_').length === 5 && _key.split('_')[3] === 'User') {\n                className = '_User';\n                objectId = _key.split('_')[4];\n              }\n\n              if (!(0, _startsWith.default)(objectId).call(objectId, 'local')) {\n                _context15.next = 18;\n                break;\n              }\n\n              return _context15.abrupt(\"continue\", 20);\n\n            case 18:\n              if (!(className in pointersHash)) {\n                pointersHash[className] = new _set.default();\n              }\n\n              pointersHash[className].add(objectId);\n\n            case 20:\n              _i++;\n              _context15.next = 12;\n              break;\n\n            case 23:\n              queryPromises = (0, _map.default)(_context14 = (0, _keys3.default)(pointersHash)).call(_context14, function (className) {\n                var objectIds = (0, _from.default)(pointersHash[className]);\n                var query = new _ParseQuery.default(className);\n                query.limit(objectIds.length);\n\n                if (objectIds.length === 1) {\n                  query.equalTo('objectId', objectIds[0]);\n                } else {\n                  query.containedIn('objectId', objectIds);\n                }\n\n                return (0, _find.default)(query).call(query);\n              });\n              _context15.prev = 24;\n              _context15.next = 27;\n              return _promise.default.all(queryPromises);\n\n            case 27:\n              responses = _context15.sent;\n              objects = (0, _concat.default)([]).apply([], responses);\n              pinPromises = (0, _map.default)(objects).call(objects, function (object) {\n                var objectKey = _this8.getKeyForObject(object);\n\n                return _this8.pinWithName(objectKey, object._toFullJSON());\n              });\n              _context15.next = 32;\n              return _promise.default.all(pinPromises);\n\n            case 32:\n              _this8.isSyncing = false;\n              _context15.next = 39;\n              break;\n\n            case 35:\n              _context15.prev = 35;\n              _context15.t0 = _context15[\"catch\"](24);\n              console.error('Error syncing LocalDatastore: ', _context15.t0);\n              _this8.isSyncing = false;\n\n            case 39:\n            case \"end\":\n              return _context15.stop();\n          }\n        }\n      }, _callee8, null, [[24, 35]]);\n    }))();\n  },\n  getKeyForObject: function getKeyForObject(object\n  /*: any*/\n  ) {\n    var _context16, _context17;\n\n    var objectId = object.objectId || object._getId();\n\n    return (0, _concat.default)(_context16 = (0, _concat.default)(_context17 = \"\".concat(_LocalDatastoreUtils.OBJECT_PREFIX)).call(_context17, object.className, \"_\")).call(_context16, objectId);\n  },\n  getPinName: function getPinName(pinName\n  /*: ?string*/\n  ) {\n    if (!pinName || pinName === _LocalDatastoreUtils.DEFAULT_PIN) {\n      return _LocalDatastoreUtils.DEFAULT_PIN;\n    }\n\n    return _LocalDatastoreUtils.PIN_PREFIX + pinName;\n  },\n  checkIfEnabled: function checkIfEnabled() {\n    if (!this.isEnabled) {\n      console.error('Parse.enableLocalDatastore() must be called first');\n    }\n\n    return this.isEnabled;\n  }\n};\nmodule.exports = LocalDatastore;\n\n_CoreManager.default.setLocalDatastoreController(require('./LocalDatastoreController'));\n\n_CoreManager.default.setLocalDatastore(LocalDatastore);","map":null,"metadata":{},"sourceType":"script"}