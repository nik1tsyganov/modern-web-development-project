{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs3/helpers/interopRequireDefault\");\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs3/core-js-stable/object/define-property\");\n\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = void 0;\n\nvar _ParseUser = _interopRequireDefault(require(\"./ParseUser\"));\n/**\r\n * Copyright (c) 2015-present, Parse, LLC.\r\n * All rights reserved.\r\n *\r\n * This source code is licensed under the BSD-style license found in the\r\n * LICENSE file in the root directory of this source tree. An additional grant\r\n * of patent rights can be found in the PATENTS file in the same directory.\r\n *\r\n * @flow-weak\r\n */\n\n\nvar uuidv4 = require('./uuid');\n\nvar registered = false;\n/**\r\n * Provides utility functions for working with Anonymously logged-in users. <br />\r\n * Anonymous users have some unique characteristics:\r\n * <ul>\r\n *  <li>Anonymous users don't need a user name or password.</li>\r\n *  <ul>\r\n *    <li>Once logged out, an anonymous user cannot be recovered.</li>\r\n *  </ul>\r\n *  <li>signUp converts an anonymous user to a standard user with the given username and password.</li>\r\n *  <ul>\r\n *    <li>Data associated with the anonymous user is retained.</li>\r\n *  </ul>\r\n *  <li>logIn switches users without converting the anonymous user.</li>\r\n *  <ul>\r\n *    <li>Data associated with the anonymous user will be lost.</li>\r\n *  </ul>\r\n *  <li>Service logIn (e.g. Facebook, Twitter) will attempt to convert\r\n *  the anonymous user into a standard user by linking it to the service.</li>\r\n *  <ul>\r\n *    <li>If a user already exists that is linked to the service, it will instead switch to the existing user.</li>\r\n *  </ul>\r\n *  <li>Service linking (e.g. Facebook, Twitter) will convert the anonymous user\r\n *  into a standard user by linking it to the service.</li>\r\n * </ul>\r\n *\r\n * @class Parse.AnonymousUtils\r\n * @static\r\n */\n\nvar AnonymousUtils = {\n  /**\r\n   * Gets whether the user has their account linked to anonymous user.\r\n   *\r\n   * @function isLinked\r\n   * @name Parse.AnonymousUtils.isLinked\r\n   * @param {Parse.User} user User to check for.\r\n   *     The user must be logged in on this device.\r\n   * @returns {boolean} <code>true</code> if the user has their account\r\n   *     linked to an anonymous user.\r\n   * @static\r\n   */\n  isLinked: function (user\n  /*: ParseUser*/\n  ) {\n    var provider = this._getAuthProvider();\n\n    return user._isLinked(provider.getAuthType());\n  },\n\n  /**\r\n   * Logs in a user Anonymously.\r\n   *\r\n   * @function logIn\r\n   * @name Parse.AnonymousUtils.logIn\r\n   * @param {object} options MasterKey / SessionToken.\r\n   * @returns {Promise} Logged in user\r\n   * @static\r\n   */\n  logIn: function (options\n  /*:: ?: RequestOptions*/\n  )\n  /*: Promise<ParseUser>*/\n  {\n    var provider = this._getAuthProvider();\n\n    return _ParseUser.default.logInWith(provider.getAuthType(), provider.getAuthData(), options);\n  },\n\n  /**\r\n   * Links Anonymous User to an existing PFUser.\r\n   *\r\n   * @function link\r\n   * @name Parse.AnonymousUtils.link\r\n   * @param {Parse.User} user User to link. This must be the current user.\r\n   * @param {object} options MasterKey / SessionToken.\r\n   * @returns {Promise} Linked with User\r\n   * @static\r\n   */\n  link: function (user\n  /*: ParseUser*/\n  , options\n  /*:: ?: RequestOptions*/\n  )\n  /*: Promise<ParseUser>*/\n  {\n    var provider = this._getAuthProvider();\n\n    return user.linkWith(provider.getAuthType(), provider.getAuthData(), options);\n  },\n\n  /**\r\n   * Returns true if Authentication Provider has been registered for use.\r\n   *\r\n   * @function isRegistered\r\n   * @name Parse.AnonymousUtils.isRegistered\r\n   * @returns {boolean}\r\n   * @static\r\n   */\n  isRegistered: function ()\n  /*: boolean*/\n  {\n    return registered;\n  },\n  _getAuthProvider: function () {\n    var provider = {\n      restoreAuthentication: function () {\n        return true;\n      },\n      getAuthType: function () {\n        return 'anonymous';\n      },\n      getAuthData: function () {\n        return {\n          authData: {\n            id: uuidv4()\n          }\n        };\n      }\n    };\n\n    if (!registered) {\n      _ParseUser.default._registerAuthenticationProvider(provider);\n\n      registered = true;\n    }\n\n    return provider;\n  }\n};\nvar _default = AnonymousUtils;\nexports.default = _default;","map":{"version":3,"names":["_interopRequireDefault","require","_Object$defineProperty","exports","value","default","_ParseUser","uuidv4","registered","AnonymousUtils","isLinked","user","provider","_getAuthProvider","_isLinked","getAuthType","logIn","options","logInWith","getAuthData","link","linkWith","isRegistered","restoreAuthentication","authData","id","_registerAuthenticationProvider","_default"],"sources":["C:/Users/brosk/Documents/Web Dev/modern-web-development-project/project/node_modules/parse/lib/browser/AnonymousUtils.js"],"sourcesContent":["\"use strict\";\r\n\r\nvar _interopRequireDefault = require(\"@babel/runtime-corejs3/helpers/interopRequireDefault\");\r\n\r\nvar _Object$defineProperty = require(\"@babel/runtime-corejs3/core-js-stable/object/define-property\");\r\n\r\n_Object$defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nexports.default = void 0;\r\n\r\nvar _ParseUser = _interopRequireDefault(require(\"./ParseUser\"));\r\n/**\r\n * Copyright (c) 2015-present, Parse, LLC.\r\n * All rights reserved.\r\n *\r\n * This source code is licensed under the BSD-style license found in the\r\n * LICENSE file in the root directory of this source tree. An additional grant\r\n * of patent rights can be found in the PATENTS file in the same directory.\r\n *\r\n * @flow-weak\r\n */\r\n\r\n\r\nvar uuidv4 = require('./uuid');\r\n\r\nvar registered = false;\r\n/**\r\n * Provides utility functions for working with Anonymously logged-in users. <br />\r\n * Anonymous users have some unique characteristics:\r\n * <ul>\r\n *  <li>Anonymous users don't need a user name or password.</li>\r\n *  <ul>\r\n *    <li>Once logged out, an anonymous user cannot be recovered.</li>\r\n *  </ul>\r\n *  <li>signUp converts an anonymous user to a standard user with the given username and password.</li>\r\n *  <ul>\r\n *    <li>Data associated with the anonymous user is retained.</li>\r\n *  </ul>\r\n *  <li>logIn switches users without converting the anonymous user.</li>\r\n *  <ul>\r\n *    <li>Data associated with the anonymous user will be lost.</li>\r\n *  </ul>\r\n *  <li>Service logIn (e.g. Facebook, Twitter) will attempt to convert\r\n *  the anonymous user into a standard user by linking it to the service.</li>\r\n *  <ul>\r\n *    <li>If a user already exists that is linked to the service, it will instead switch to the existing user.</li>\r\n *  </ul>\r\n *  <li>Service linking (e.g. Facebook, Twitter) will convert the anonymous user\r\n *  into a standard user by linking it to the service.</li>\r\n * </ul>\r\n *\r\n * @class Parse.AnonymousUtils\r\n * @static\r\n */\r\n\r\nvar AnonymousUtils = {\r\n  /**\r\n   * Gets whether the user has their account linked to anonymous user.\r\n   *\r\n   * @function isLinked\r\n   * @name Parse.AnonymousUtils.isLinked\r\n   * @param {Parse.User} user User to check for.\r\n   *     The user must be logged in on this device.\r\n   * @returns {boolean} <code>true</code> if the user has their account\r\n   *     linked to an anonymous user.\r\n   * @static\r\n   */\r\n  isLinked: function (user\r\n  /*: ParseUser*/\r\n  ) {\r\n    var provider = this._getAuthProvider();\r\n\r\n    return user._isLinked(provider.getAuthType());\r\n  },\r\n\r\n  /**\r\n   * Logs in a user Anonymously.\r\n   *\r\n   * @function logIn\r\n   * @name Parse.AnonymousUtils.logIn\r\n   * @param {object} options MasterKey / SessionToken.\r\n   * @returns {Promise} Logged in user\r\n   * @static\r\n   */\r\n  logIn: function (options\r\n  /*:: ?: RequestOptions*/\r\n  )\r\n  /*: Promise<ParseUser>*/\r\n  {\r\n    var provider = this._getAuthProvider();\r\n\r\n    return _ParseUser.default.logInWith(provider.getAuthType(), provider.getAuthData(), options);\r\n  },\r\n\r\n  /**\r\n   * Links Anonymous User to an existing PFUser.\r\n   *\r\n   * @function link\r\n   * @name Parse.AnonymousUtils.link\r\n   * @param {Parse.User} user User to link. This must be the current user.\r\n   * @param {object} options MasterKey / SessionToken.\r\n   * @returns {Promise} Linked with User\r\n   * @static\r\n   */\r\n  link: function (user\r\n  /*: ParseUser*/\r\n  , options\r\n  /*:: ?: RequestOptions*/\r\n  )\r\n  /*: Promise<ParseUser>*/\r\n  {\r\n    var provider = this._getAuthProvider();\r\n\r\n    return user.linkWith(provider.getAuthType(), provider.getAuthData(), options);\r\n  },\r\n\r\n  /**\r\n   * Returns true if Authentication Provider has been registered for use.\r\n   *\r\n   * @function isRegistered\r\n   * @name Parse.AnonymousUtils.isRegistered\r\n   * @returns {boolean}\r\n   * @static\r\n   */\r\n  isRegistered: function ()\r\n  /*: boolean*/\r\n  {\r\n    return registered;\r\n  },\r\n  _getAuthProvider: function () {\r\n    var provider = {\r\n      restoreAuthentication: function () {\r\n        return true;\r\n      },\r\n      getAuthType: function () {\r\n        return 'anonymous';\r\n      },\r\n      getAuthData: function () {\r\n        return {\r\n          authData: {\r\n            id: uuidv4()\r\n          }\r\n        };\r\n      }\r\n    };\r\n\r\n    if (!registered) {\r\n      _ParseUser.default._registerAuthenticationProvider(provider);\r\n\r\n      registered = true;\r\n    }\r\n\r\n    return provider;\r\n  }\r\n};\r\nvar _default = AnonymousUtils;\r\nexports.default = _default;"],"mappings":"AAAA;;AAEA,IAAIA,sBAAsB,GAAGC,OAAO,CAAC,sDAAD,CAApC;;AAEA,IAAIC,sBAAsB,GAAGD,OAAO,CAAC,8DAAD,CAApC;;AAEAC,sBAAsB,CAACC,OAAD,EAAU,YAAV,EAAwB;EAC5CC,KAAK,EAAE;AADqC,CAAxB,CAAtB;;AAIAD,OAAO,CAACE,OAAR,GAAkB,KAAK,CAAvB;;AAEA,IAAIC,UAAU,GAAGN,sBAAsB,CAACC,OAAO,CAAC,aAAD,CAAR,CAAvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,IAAIM,MAAM,GAAGN,OAAO,CAAC,QAAD,CAApB;;AAEA,IAAIO,UAAU,GAAG,KAAjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIC,cAAc,GAAG;EACnB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEC,QAAQ,EAAE,UAAUC;EACpB;EADU,EAER;IACA,IAAIC,QAAQ,GAAG,KAAKC,gBAAL,EAAf;;IAEA,OAAOF,IAAI,CAACG,SAAL,CAAeF,QAAQ,CAACG,WAAT,EAAf,CAAP;EACD,CAlBkB;;EAoBnB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEC,KAAK,EAAE,UAAUC;EACjB;EADO;EAGP;EACA;IACE,IAAIL,QAAQ,GAAG,KAAKC,gBAAL,EAAf;;IAEA,OAAOP,UAAU,CAACD,OAAX,CAAmBa,SAAnB,CAA6BN,QAAQ,CAACG,WAAT,EAA7B,EAAqDH,QAAQ,CAACO,WAAT,EAArD,EAA6EF,OAA7E,CAAP;EACD,CArCkB;;EAuCnB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEG,IAAI,EAAE,UAAUT;EAChB;EADM,EAEJM;EACF;EAHM;EAKN;EACA;IACE,IAAIL,QAAQ,GAAG,KAAKC,gBAAL,EAAf;;IAEA,OAAOF,IAAI,CAACU,QAAL,CAAcT,QAAQ,CAACG,WAAT,EAAd,EAAsCH,QAAQ,CAACO,WAAT,EAAtC,EAA8DF,OAA9D,CAAP;EACD,CA3DkB;;EA6DnB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACEK,YAAY,EAAE;EACd;EACA;IACE,OAAOd,UAAP;EACD,CAzEkB;EA0EnBK,gBAAgB,EAAE,YAAY;IAC5B,IAAID,QAAQ,GAAG;MACbW,qBAAqB,EAAE,YAAY;QACjC,OAAO,IAAP;MACD,CAHY;MAIbR,WAAW,EAAE,YAAY;QACvB,OAAO,WAAP;MACD,CANY;MAObI,WAAW,EAAE,YAAY;QACvB,OAAO;UACLK,QAAQ,EAAE;YACRC,EAAE,EAAElB,MAAM;UADF;QADL,CAAP;MAKD;IAbY,CAAf;;IAgBA,IAAI,CAACC,UAAL,EAAiB;MACfF,UAAU,CAACD,OAAX,CAAmBqB,+BAAnB,CAAmDd,QAAnD;;MAEAJ,UAAU,GAAG,IAAb;IACD;;IAED,OAAOI,QAAP;EACD;AAlGkB,CAArB;AAoGA,IAAIe,QAAQ,GAAGlB,cAAf;AACAN,OAAO,CAACE,OAAR,GAAkBsB,QAAlB"},"metadata":{},"sourceType":"script"}