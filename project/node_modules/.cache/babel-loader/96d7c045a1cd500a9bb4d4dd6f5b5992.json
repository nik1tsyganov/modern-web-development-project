{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nexport var keys = function keys(obj) {\n  return obj === Object(obj) ? Object.keys(obj) : [];\n};\nexport var values = function values(obj) {\n  return obj === Object(obj) ? Object.values(obj) : [];\n};\n\nfunction mergeDeep(target, source) {\n  var output = Object.assign({}, target);\n\n  if (isPlainObject(target) && isPlainObject(source)) {\n    keys(source).forEach(function (key) {\n      if (isPlainObject(source[key])) {\n        if (!(key in target)) Object.assign(output, _defineProperty({}, key, source[key]));else output[key] = mergeDeep(target[key], source[key]);\n      } else {\n        Object.assign(output, _defineProperty({}, key, source[key]));\n      }\n    });\n  }\n\n  return output;\n}\n\nexport var merge = function merge(target) {\n  for (var _len = arguments.length, sources = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    sources[_key - 1] = arguments[_key];\n  }\n\n  return sources.reduce(function (t, s) {\n    return mergeDeep(t, s);\n  }, target);\n};\nexport var identity = function identity(value) {\n  return value;\n};\nexport var omit = function omit(obj, keys) {\n  var other = Object.assign({}, obj);\n\n  if (keys) {\n    for (var i = 0; i < keys.length; i++) {\n      delete other[keys[i]];\n    }\n  }\n\n  return other;\n};\nexport var isPlainObject = function isPlainObject(obj) {\n  return obj === Object(obj) && !(obj instanceof Date) && !Array.isArray(obj);\n};\nexport var compact = function compact(arr) {\n  return (arr || []).filter(Boolean);\n};","map":null,"metadata":{},"sourceType":"module"}