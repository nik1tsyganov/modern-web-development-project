{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs3/helpers/interopRequireDefault\");\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs3/core-js-stable/object/define-property\");\n\nvar _Reflect$construct = require(\"@babel/runtime-corejs3/core-js-stable/reflect/construct\");\n\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/createClass\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/getPrototypeOf\"));\n\nvar _EventEmitter2 = _interopRequireDefault(require(\"./EventEmitter\"));\n\nvar _CoreManager = _interopRequireDefault(require(\"./CoreManager\"));\n\nvar _promiseUtils = require(\"./promiseUtils\");\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function () {\n    var Super = (0, _getPrototypeOf2.default)(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;\n      result = _Reflect$construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return (0, _possibleConstructorReturn2.default)(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !_Reflect$construct) return false;\n  if (_Reflect$construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(_Reflect$construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n/**\r\n * Creates a new LiveQuery Subscription.\r\n * Extends events.EventEmitter\r\n * <a href=\"https://nodejs.org/api/events.html#events_class_eventemitter\">cloud functions</a>.\r\n *\r\n * <p>Response Object - Contains data from the client that made the request\r\n * <ul>\r\n * <li>clientId</li>\r\n * <li>installationId - requires Parse Server 4.0.0+</li>\r\n * </ul>\r\n * </p>\r\n *\r\n * <p>Open Event - When you call query.subscribe(), we send a subscribe request to\r\n * the LiveQuery server, when we get the confirmation from the LiveQuery server,\r\n * this event will be emitted. When the client loses WebSocket connection to the\r\n * LiveQuery server, we will try to auto reconnect the LiveQuery server. If we\r\n * reconnect the LiveQuery server and successfully resubscribe the ParseQuery,\r\n * you'll also get this event.\r\n *\r\n * <pre>\r\n * subscription.on('open', (response) => {\r\n *\r\n * });</pre></p>\r\n *\r\n * <p>Create Event - When a new ParseObject is created and it fulfills the ParseQuery you subscribe,\r\n * you'll get this event. The object is the ParseObject which is created.\r\n *\r\n * <pre>\r\n * subscription.on('create', (object, response) => {\r\n *\r\n * });</pre></p>\r\n *\r\n * <p>Update Event - When an existing ParseObject (original) which fulfills the ParseQuery you subscribe\r\n * is updated (The ParseObject fulfills the ParseQuery before and after changes),\r\n * you'll get this event. The object is the ParseObject which is updated.\r\n * Its content is the latest value of the ParseObject.\r\n *\r\n * Parse-Server 3.1.3+ Required for original object parameter\r\n *\r\n * <pre>\r\n * subscription.on('update', (object, original, response) => {\r\n *\r\n * });</pre></p>\r\n *\r\n * <p>Enter Event - When an existing ParseObject's (original) old value doesn't fulfill the ParseQuery\r\n * but its new value fulfills the ParseQuery, you'll get this event. The object is the\r\n * ParseObject which enters the ParseQuery. Its content is the latest value of the ParseObject.\r\n *\r\n * Parse-Server 3.1.3+ Required for original object parameter\r\n *\r\n * <pre>\r\n * subscription.on('enter', (object, original, response) => {\r\n *\r\n * });</pre></p>\r\n *\r\n *\r\n * <p>Update Event - When an existing ParseObject's old value fulfills the ParseQuery but its new value\r\n * doesn't fulfill the ParseQuery, you'll get this event. The object is the ParseObject\r\n * which leaves the ParseQuery. Its content is the latest value of the ParseObject.\r\n *\r\n * <pre>\r\n * subscription.on('leave', (object, response) => {\r\n *\r\n * });</pre></p>\r\n *\r\n *\r\n * <p>Delete Event - When an existing ParseObject which fulfills the ParseQuery is deleted, you'll\r\n * get this event. The object is the ParseObject which is deleted.\r\n *\r\n * <pre>\r\n * subscription.on('delete', (object, response) => {\r\n *\r\n * });</pre></p>\r\n *\r\n *\r\n * <p>Close Event - When the client loses the WebSocket connection to the LiveQuery\r\n * server and we stop receiving events, you'll get this event.\r\n *\r\n * <pre>\r\n * subscription.on('close', () => {\r\n *\r\n * });</pre></p>\r\n *\r\n * @alias Parse.LiveQuerySubscription\r\n */\n\n\nvar Subscription = /*#__PURE__*/function (_EventEmitter) {\n  (0, _inherits2.default)(Subscription, _EventEmitter);\n\n  var _super = _createSuper(Subscription);\n  /*\r\n   * @param {string} id - subscription id\r\n   * @param {string} query - query to subscribe to\r\n   * @param {string} sessionToken - optional session token\r\n   */\n\n\n  function Subscription(id, query, sessionToken) {\n    var _this;\n\n    (0, _classCallCheck2.default)(this, Subscription);\n    _this = _super.call(this);\n    _this.id = id;\n    _this.query = query;\n    _this.sessionToken = sessionToken;\n    _this.subscribePromise = (0, _promiseUtils.resolvingPromise)();\n    _this.subscribed = false; // adding listener so process does not crash\n    // best practice is for developer to register their own listener\n\n    _this.on('error', function () {});\n\n    return _this;\n  }\n  /**\r\n   * Close the subscription\r\n   *\r\n   * @returns {Promise}\r\n   */\n\n\n  (0, _createClass2.default)(Subscription, [{\n    key: \"unsubscribe\",\n    value: function value()\n    /*: Promise*/\n    {\n      var _this2 = this;\n\n      return _CoreManager.default.getLiveQueryController().getDefaultLiveQueryClient().then(function (liveQueryClient) {\n        liveQueryClient.unsubscribe(_this2);\n\n        _this2.emit('close');\n      });\n    }\n  }]);\n  return Subscription;\n}(_EventEmitter2.default);\n\nvar _default = Subscription;\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}