{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\brosk\\\\Documents\\\\Web Dev\\\\modern-web-development-project\\\\project\\\\src\\\\Components\\\\Historical\\\\HistoricalMain.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport ProtectedRoute from \"./../../Common/AppTools/ProtectedRoute\";\nimport Historical from \"./Historical\";\nimport Parse from \"parse\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst MainHistroical = () => {\n  _s();\n\n  const [flag, setFlag] = useState(false);\n  var check; // tests for existence of parse user\n\n  if (Parse.User.current() == null) {\n    check = false;\n  } else {\n    check = Parse.User.current().authenticated();\n  }\n\n  useEffect(() => {\n    if (check === true) {\n      console.log(\"Good\");\n      setFlag(true);\n    } else {\n      console.log(\"Bad\");\n      setFlag(false);\n    }\n  }, []);\n  console.log(check); // if parse user does not exist, redirects user to login\n  // if parse user exists, directs user to historical\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(ProtectedRoute, {\n      exact: true,\n      desiredPath: \"/historical\",\n      redirectedPath: \"/login\",\n      flag: flag,\n      component: Historical\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this);\n};\n\n_s(MainHistroical, \"nbgx/+6EY5TM12i91zPw1fqO8wY=\");\n\n_c = MainHistroical;\nexport default MainHistroical;\n\nvar _c;\n\n$RefreshReg$(_c, \"MainHistroical\");","map":{"version":3,"names":["React","useEffect","useState","ProtectedRoute","Historical","Parse","MainHistroical","flag","setFlag","check","User","current","authenticated","console","log"],"sources":["C:/Users/brosk/Documents/Web Dev/modern-web-development-project/project/src/Components/Historical/HistoricalMain.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport ProtectedRoute from \"./../../Common/AppTools/ProtectedRoute\";\r\nimport Historical from \"./Historical\";\r\nimport Parse from \"parse\";\r\n\r\nconst MainHistroical = () => {\r\n  const [flag, setFlag] = useState(false);\r\n  var check;\r\n\r\n    // tests for existence of parse user\r\n  if (Parse.User.current() == null) {\r\n    check = false;\r\n  } else {\r\n    check = Parse.User.current().authenticated();\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (check === true) {\r\n      console.log(\"Good\")\r\n      setFlag(true);\r\n    } else {\r\n      console.log(\"Bad\")\r\n      setFlag(false);\r\n    }\r\n  }, []);\r\n\r\n  console.log(check);\r\n\r\n  // if parse user does not exist, redirects user to login\r\n  // if parse user exists, directs user to historical\r\n  return (\r\n    <div>\r\n      <ProtectedRoute\r\n        exact\r\n        desiredPath=\"/historical\"\r\n        redirectedPath=\"/login\"\r\n        flag={flag}\r\n        component={Historical}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MainHistroical;\r\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,cAAP,MAA2B,wCAA3B;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,KAAP,MAAkB,OAAlB;;;AAEA,MAAMC,cAAc,GAAG,MAAM;EAAA;;EAC3B,MAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBN,QAAQ,CAAC,KAAD,CAAhC;EACA,IAAIO,KAAJ,CAF2B,CAIzB;;EACF,IAAIJ,KAAK,CAACK,IAAN,CAAWC,OAAX,MAAwB,IAA5B,EAAkC;IAChCF,KAAK,GAAG,KAAR;EACD,CAFD,MAEO;IACLA,KAAK,GAAGJ,KAAK,CAACK,IAAN,CAAWC,OAAX,GAAqBC,aAArB,EAAR;EACD;;EAEDX,SAAS,CAAC,MAAM;IACd,IAAIQ,KAAK,KAAK,IAAd,EAAoB;MAClBI,OAAO,CAACC,GAAR,CAAY,MAAZ;MACAN,OAAO,CAAC,IAAD,CAAP;IACD,CAHD,MAGO;MACLK,OAAO,CAACC,GAAR,CAAY,KAAZ;MACAN,OAAO,CAAC,KAAD,CAAP;IACD;EACF,CARQ,EAQN,EARM,CAAT;EAUAK,OAAO,CAACC,GAAR,CAAYL,KAAZ,EArB2B,CAuB3B;EACA;;EACA,oBACE;IAAA,uBACE,QAAC,cAAD;MACE,KAAK,MADP;MAEE,WAAW,EAAC,aAFd;MAGE,cAAc,EAAC,QAHjB;MAIE,IAAI,EAAEF,IAJR;MAKE,SAAS,EAAEH;IALb;MAAA;MAAA;MAAA;IAAA;EADF;IAAA;IAAA;IAAA;EAAA,QADF;AAWD,CApCD;;GAAME,c;;KAAAA,c;AAsCN,eAAeA,cAAf"},"metadata":{},"sourceType":"module"}