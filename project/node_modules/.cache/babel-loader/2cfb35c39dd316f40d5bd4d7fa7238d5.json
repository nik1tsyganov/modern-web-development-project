{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs3/helpers/interopRequireDefault\");\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs3/core-js-stable/object/define-property\");\n\nvar _Reflect$construct = require(\"@babel/runtime-corejs3/core-js-stable/reflect/construct\");\n\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/createClass\"));\n\nvar _get2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/get\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/getPrototypeOf\"));\n\nvar _ParseACL = _interopRequireDefault(require(\"./ParseACL\"));\n\nvar _ParseError = _interopRequireDefault(require(\"./ParseError\"));\n\nvar _ParseObject2 = _interopRequireDefault(require(\"./ParseObject\"));\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function () {\n    var Super = (0, _getPrototypeOf2.default)(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;\n      result = _Reflect$construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return (0, _possibleConstructorReturn2.default)(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !_Reflect$construct) return false;\n  if (_Reflect$construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(_Reflect$construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n/**\r\n * Represents a Role on the Parse server. Roles represent groupings of\r\n * Users for the purposes of granting permissions (e.g. specifying an ACL\r\n * for an Object). Roles are specified by their sets of child users and\r\n * child roles, all of which are granted any permissions that the parent\r\n * role has.\r\n *\r\n * <p>Roles must have a name (which cannot be changed after creation of the\r\n * role), and must specify an ACL.</p>\r\n *\r\n * @alias Parse.Role\r\n * @augments Parse.Object\r\n */\n\n\nvar ParseRole = /*#__PURE__*/function (_ParseObject) {\n  (0, _inherits2.default)(ParseRole, _ParseObject);\n\n  var _super = _createSuper(ParseRole);\n  /**\r\n   * @param {string} name The name of the Role to create.\r\n   * @param {Parse.ACL} acl The ACL for this role. Roles must have an ACL.\r\n   * A Parse.Role is a local representation of a role persisted to the Parse\r\n   * cloud.\r\n   */\n\n\n  function ParseRole(name\n  /*: string*/\n  , acl\n  /*: ParseACL*/\n  ) {\n    var _this;\n\n    (0, _classCallCheck2.default)(this, ParseRole);\n    _this = _super.call(this, '_Role');\n\n    if (typeof name === 'string' && acl instanceof _ParseACL.default) {\n      _this.setName(name);\n\n      _this.setACL(acl);\n    }\n\n    return _this;\n  }\n  /**\r\n   * Gets the name of the role.  You can alternatively call role.get(\"name\")\r\n   *\r\n   * @returns {string} the name of the role.\r\n   */\n\n\n  (0, _createClass2.default)(ParseRole, [{\n    key: \"getName\",\n    value: function value()\n    /*: ?string*/\n    {\n      var name = this.get('name');\n\n      if (name == null || typeof name === 'string') {\n        return name;\n      }\n\n      return '';\n    }\n    /**\r\n     * Sets the name for a role. This value must be set before the role has\r\n     * been saved to the server, and cannot be set once the role has been\r\n     * saved.\r\n     *\r\n     * <p>\r\n     *   A role's name can only contain alphanumeric characters, _, -, and\r\n     *   spaces.\r\n     * </p>\r\n     *\r\n     * <p>This is equivalent to calling role.set(\"name\", name)</p>\r\n     *\r\n     * @param {string} name The name of the role.\r\n     * @param {object} options Standard options object with success and error\r\n     *     callbacks.\r\n     * @returns {(ParseObject|boolean)} true if the set succeeded.\r\n     */\n\n  }, {\n    key: \"setName\",\n    value: function value(name\n    /*: string*/\n    , options\n    /*:: ?: mixed*/\n    )\n    /*: ParseObject | boolean*/\n    {\n      return this.set('name', name, options);\n    }\n    /**\r\n     * Gets the Parse.Relation for the Parse.Users that are direct\r\n     * children of this role. These users are granted any privileges that this\r\n     * role has been granted (e.g. read or write access through ACLs). You can\r\n     * add or remove users from the role through this relation.\r\n     *\r\n     * <p>This is equivalent to calling role.relation(\"users\")</p>\r\n     *\r\n     * @returns {Parse.Relation} the relation for the users belonging to this\r\n     *     role.\r\n     */\n\n  }, {\n    key: \"getUsers\",\n    value: function value()\n    /*: ParseRelation*/\n    {\n      return this.relation('users');\n    }\n    /**\r\n     * Gets the Parse.Relation for the Parse.Roles that are direct\r\n     * children of this role. These roles' users are granted any privileges that\r\n     * this role has been granted (e.g. read or write access through ACLs). You\r\n     * can add or remove child roles from this role through this relation.\r\n     *\r\n     * <p>This is equivalent to calling role.relation(\"roles\")</p>\r\n     *\r\n     * @returns {Parse.Relation} the relation for the roles belonging to this\r\n     *     role.\r\n     */\n\n  }, {\n    key: \"getRoles\",\n    value: function value()\n    /*: ParseRelation*/\n    {\n      return this.relation('roles');\n    }\n  }, {\n    key: \"validate\",\n    value: function value(attrs\n    /*: AttributeMap*/\n    , options\n    /*:: ?: mixed*/\n    )\n    /*: ParseError | boolean*/\n    {\n      var isInvalid = (0, _get2.default)((0, _getPrototypeOf2.default)(ParseRole.prototype), \"validate\", this).call(this, attrs, options);\n\n      if (isInvalid) {\n        return isInvalid;\n      }\n\n      if ('name' in attrs && attrs.name !== this.getName()) {\n        var newName = attrs.name;\n\n        if (this.id && this.id !== attrs.objectId) {\n          // Check to see if the objectId being set matches this.id\n          // This happens during a fetch -- the id is set before calling fetch\n          // Let the name be set in this case\n          return new _ParseError.default(_ParseError.default.OTHER_CAUSE, \"A role's name can only be set before it has been saved.\");\n        }\n\n        if (typeof newName !== 'string') {\n          return new _ParseError.default(_ParseError.default.OTHER_CAUSE, \"A role's name must be a String.\");\n        }\n\n        if (!/^[0-9a-zA-Z\\-_ ]+$/.test(newName)) {\n          return new _ParseError.default(_ParseError.default.OTHER_CAUSE, \"A role's name can be only contain alphanumeric characters, _, \" + '-, and spaces.');\n        }\n      }\n\n      return false;\n    }\n  }]);\n  return ParseRole;\n}(_ParseObject2.default);\n\n_ParseObject2.default.registerSubclass('_Role', ParseRole);\n\nvar _default = ParseRole;\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}