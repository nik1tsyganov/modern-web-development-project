{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs3/helpers/interopRequireDefault\");\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs3/core-js-stable/object/define-property\");\n\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.track = track;\n\nvar _CoreManager = _interopRequireDefault(require(\"./CoreManager\"));\n/**\r\n * Copyright (c) 2015-present, Parse, LLC.\r\n * All rights reserved.\r\n *\r\n * This source code is licensed under the BSD-style license found in the\r\n * LICENSE file in the root directory of this source tree. An additional grant\r\n * of patent rights can be found in the PATENTS file in the same directory.\r\n *\r\n * @flow\r\n */\n\n/**\r\n * Parse.Analytics provides an interface to Parse's logging and analytics\r\n * backend.\r\n *\r\n * @class Parse.Analytics\r\n * @static\r\n * @hideconstructor\r\n */\n\n/**\r\n * Tracks the occurrence of a custom event with additional dimensions.\r\n * Parse will store a data point at the time of invocation with the given\r\n * event name.\r\n *\r\n * Dimensions will allow segmentation of the occurrences of this custom\r\n * event. Keys and values should be {@code String}s, and will throw\r\n * otherwise.\r\n *\r\n * To track a user signup along with additional metadata, consider the\r\n * following:\r\n * <pre>\r\n * var dimensions = {\r\n *  gender: 'm',\r\n *  source: 'web',\r\n *  dayType: 'weekend'\r\n * };\r\n * Parse.Analytics.track('signup', dimensions);\r\n * </pre>\r\n *\r\n * There is a default limit of 8 dimensions per event tracked.\r\n *\r\n * @function track\r\n * @name Parse.Analytics.track\r\n * @param {string} name The name of the custom event to report to Parse as\r\n * having happened.\r\n * @param {object} dimensions The dictionary of information by which to\r\n * segment this event.\r\n * @returns {Promise} A promise that is resolved when the round-trip\r\n * to the server completes.\r\n */\n\n\nfunction track(name\n/*: string*/\n, dimensions\n/*: { [key: string]: string }*/\n)\n/*: Promise*/\n{\n  name = name || '';\n  name = name.replace(/^\\s*/, '');\n  name = name.replace(/\\s*$/, '');\n\n  if (name.length === 0) {\n    throw new TypeError('A name for the custom event must be provided');\n  }\n\n  for (var _key in dimensions) {\n    if (typeof _key !== 'string' || typeof dimensions[_key] !== 'string') {\n      throw new TypeError('track() dimensions expects keys and values of type \"string\".');\n    }\n  }\n\n  return _CoreManager.default.getAnalyticsController().track(name, dimensions);\n}\n\nvar DefaultController = {\n  track: function track(name, dimensions) {\n    var RESTController = _CoreManager.default.getRESTController();\n\n    return RESTController.request('POST', 'events/' + name, {\n      dimensions: dimensions\n    });\n  }\n};\n\n_CoreManager.default.setAnalyticsController(DefaultController);","map":null,"metadata":{},"sourceType":"script"}