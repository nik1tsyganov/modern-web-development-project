{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs3/helpers/interopRequireDefault\");\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs3/core-js-stable/object/define-property\");\n\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = void 0;\n\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/typeof\"));\n\nvar _isArray = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/array/is-array\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/createClass\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/defineProperty\"));\n/**\r\n * Copyright (c) 2015-present, Parse, LLC.\r\n * All rights reserved.\r\n *\r\n * This source code is licensed under the BSD-style license found in the\r\n * LICENSE file in the root directory of this source tree. An additional grant\r\n * of patent rights can be found in the PATENTS file in the same directory.\r\n *\r\n * @flow\r\n */\n\n/**\r\n * Creates a new GeoPoint with any of the following forms:<br>\r\n *   <pre>\r\n *   new GeoPoint(otherGeoPoint)\r\n *   new GeoPoint(30, 30)\r\n *   new GeoPoint([30, 30])\r\n *   new GeoPoint({latitude: 30, longitude: 30})\r\n *   new GeoPoint()  // defaults to (0, 0)\r\n *   </pre>\r\n * <p>Represents a latitude / longitude point that may be associated\r\n * with a key in a ParseObject or used as a reference point for geo queries.\r\n * This allows proximity-based queries on the key.</p>\r\n *\r\n * <p>Only one key in a class may contain a GeoPoint.</p>\r\n *\r\n * <p>Example:<pre>\r\n *   var point = new Parse.GeoPoint(30.0, -20.0);\r\n *   var object = new Parse.Object(\"PlaceObject\");\r\n *   object.set(\"location\", point);\r\n *   object.save();</pre></p>\r\n *\r\n * @alias Parse.GeoPoint\r\n */\n\n/* global navigator */\n\n\nvar ParseGeoPoint = /*#__PURE__*/function () {\n  /**\r\n   * @param {(number[] | object | number)} arg1 Either a list of coordinate pairs, an object with `latitude`, `longitude`, or the latitude or the point.\r\n   * @param {number} arg2 The longitude of the GeoPoint\r\n   */\n  function ParseGeoPoint(arg1\n  /*: Array<number> | { latitude: number, longitude: number } | number*/\n  , arg2\n  /*:: ?: number*/\n  ) {\n    (0, _classCallCheck2.default)(this, ParseGeoPoint);\n    (0, _defineProperty2.default)(this, \"_latitude\", void 0);\n    (0, _defineProperty2.default)(this, \"_longitude\", void 0);\n\n    if ((0, _isArray.default)(arg1)) {\n      ParseGeoPoint._validate(arg1[0], arg1[1]);\n\n      this._latitude = arg1[0];\n      this._longitude = arg1[1];\n    } else if ((0, _typeof2.default)(arg1) === 'object') {\n      ParseGeoPoint._validate(arg1.latitude, arg1.longitude);\n\n      this._latitude = arg1.latitude;\n      this._longitude = arg1.longitude;\n    } else if (arg1 !== undefined && arg2 !== undefined) {\n      ParseGeoPoint._validate(arg1, arg2);\n\n      this._latitude = arg1;\n      this._longitude = arg2;\n    } else {\n      this._latitude = 0;\n      this._longitude = 0;\n    }\n  }\n  /**\r\n   * North-south portion of the coordinate, in range [-90, 90].\r\n   * Throws an exception if set out of range in a modern browser.\r\n   *\r\n   * @property {number} latitude\r\n   * @returns {number}\r\n   */\n\n\n  (0, _createClass2.default)(ParseGeoPoint, [{\n    key: \"latitude\",\n    get: function get()\n    /*: number*/\n    {\n      return this._latitude;\n    },\n    set: function set(val\n    /*: number*/\n    ) {\n      ParseGeoPoint._validate(val, this.longitude);\n\n      this._latitude = val;\n    }\n    /**\r\n     * East-west portion of the coordinate, in range [-180, 180].\r\n     * Throws if set out of range in a modern browser.\r\n     *\r\n     * @property {number} longitude\r\n     * @returns {number}\r\n     */\n\n  }, {\n    key: \"longitude\",\n    get: function get()\n    /*: number*/\n    {\n      return this._longitude;\n    },\n    set: function set(val\n    /*: number*/\n    ) {\n      ParseGeoPoint._validate(this.latitude, val);\n\n      this._longitude = val;\n    }\n    /**\r\n     * Returns a JSON representation of the GeoPoint, suitable for Parse.\r\n     *\r\n     * @returns {object}\r\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function value()\n    /*: { __type: string, latitude: number, longitude: number }*/\n    {\n      ParseGeoPoint._validate(this._latitude, this._longitude);\n\n      return {\n        __type: 'GeoPoint',\n        latitude: this._latitude,\n        longitude: this._longitude\n      };\n    }\n  }, {\n    key: \"equals\",\n    value: function value(other\n    /*: mixed*/\n    )\n    /*: boolean*/\n    {\n      return other instanceof ParseGeoPoint && this.latitude === other.latitude && this.longitude === other.longitude;\n    }\n    /**\r\n     * Returns the distance from this GeoPoint to another in radians.\r\n     *\r\n     * @param {Parse.GeoPoint} point the other Parse.GeoPoint.\r\n     * @returns {number}\r\n     */\n\n  }, {\n    key: \"radiansTo\",\n    value: function value(point\n    /*: ParseGeoPoint*/\n    )\n    /*: number*/\n    {\n      var d2r = Math.PI / 180.0;\n      var lat1rad = this.latitude * d2r;\n      var long1rad = this.longitude * d2r;\n      var lat2rad = point.latitude * d2r;\n      var long2rad = point.longitude * d2r;\n      var sinDeltaLatDiv2 = Math.sin((lat1rad - lat2rad) / 2);\n      var sinDeltaLongDiv2 = Math.sin((long1rad - long2rad) / 2); // Square of half the straight line chord distance between both points.\n\n      var a = sinDeltaLatDiv2 * sinDeltaLatDiv2 + Math.cos(lat1rad) * Math.cos(lat2rad) * sinDeltaLongDiv2 * sinDeltaLongDiv2;\n      a = Math.min(1.0, a);\n      return 2 * Math.asin(Math.sqrt(a));\n    }\n    /**\r\n     * Returns the distance from this GeoPoint to another in kilometers.\r\n     *\r\n     * @param {Parse.GeoPoint} point the other Parse.GeoPoint.\r\n     * @returns {number}\r\n     */\n\n  }, {\n    key: \"kilometersTo\",\n    value: function value(point\n    /*: ParseGeoPoint*/\n    )\n    /*: number*/\n    {\n      return this.radiansTo(point) * 6371.0;\n    }\n    /**\r\n     * Returns the distance from this GeoPoint to another in miles.\r\n     *\r\n     * @param {Parse.GeoPoint} point the other Parse.GeoPoint.\r\n     * @returns {number}\r\n     */\n\n  }, {\n    key: \"milesTo\",\n    value: function value(point\n    /*: ParseGeoPoint*/\n    )\n    /*: number*/\n    {\n      return this.radiansTo(point) * 3958.8;\n    }\n    /*\r\n     * Throws an exception if the given lat-long is out of bounds.\r\n     */\n\n  }], [{\n    key: \"_validate\",\n    value: function value(latitude\n    /*: number*/\n    , longitude\n    /*: number*/\n    ) {\n      if (isNaN(latitude) || isNaN(longitude) || typeof latitude !== 'number' || typeof longitude !== 'number') {\n        throw new TypeError('GeoPoint latitude and longitude must be valid numbers');\n      }\n\n      if (latitude < -90.0) {\n        throw new TypeError('GeoPoint latitude out of bounds: ' + latitude + ' < -90.0.');\n      }\n\n      if (latitude > 90.0) {\n        throw new TypeError('GeoPoint latitude out of bounds: ' + latitude + ' > 90.0.');\n      }\n\n      if (longitude < -180.0) {\n        throw new TypeError('GeoPoint longitude out of bounds: ' + longitude + ' < -180.0.');\n      }\n\n      if (longitude > 180.0) {\n        throw new TypeError('GeoPoint longitude out of bounds: ' + longitude + ' > 180.0.');\n      }\n    }\n    /**\r\n     * Creates a GeoPoint with the user's current location, if available.\r\n     *\r\n     * @static\r\n     * @returns {Parse.GeoPoint} User's current location\r\n     */\n\n  }, {\n    key: \"current\",\n    value: function value() {\n      return navigator.geolocation.getCurrentPosition(function (location) {\n        return new ParseGeoPoint(location.coords.latitude, location.coords.longitude);\n      });\n    }\n  }]);\n  return ParseGeoPoint;\n}();\n\nvar _default = ParseGeoPoint;\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}