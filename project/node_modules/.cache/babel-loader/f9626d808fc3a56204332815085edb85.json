{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs3/helpers/interopRequireDefault\");\n\nvar _typeof3 = require(\"@babel/runtime-corejs3/helpers/typeof\");\n\nvar _WeakMap = require(\"@babel/runtime-corejs3/core-js-stable/weak-map\");\n\nvar _Array$isArray2 = require(\"@babel/runtime-corejs3/core-js-stable/array/is-array\");\n\nvar _getIteratorMethod = require(\"@babel/runtime-corejs3/core-js/get-iterator-method\");\n\nvar _Symbol = require(\"@babel/runtime-corejs3/core-js-stable/symbol\");\n\nvar _Array$from = require(\"@babel/runtime-corejs3/core-js-stable/array/from\");\n\nvar _sliceInstanceProperty = require(\"@babel/runtime-corejs3/core-js-stable/instance/slice\");\n\nvar _Object$defineProperty2 = require(\"@babel/runtime-corejs3/core-js-stable/object/define-property\");\n\nvar _Object$defineProperties = require(\"@babel/runtime-corejs3/core-js-stable/object/define-properties\");\n\nvar _Object$getOwnPropertyDescriptors = require(\"@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptors\");\n\nvar _forEachInstanceProperty2 = require(\"@babel/runtime-corejs3/core-js-stable/instance/for-each\");\n\nvar _Object$getOwnPropertyDescriptor = require(\"@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor\");\n\nvar _filterInstanceProperty = require(\"@babel/runtime-corejs3/core-js-stable/instance/filter\");\n\nvar _Object$getOwnPropertySymbols = require(\"@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols\");\n\nvar _Object$keys2 = require(\"@babel/runtime-corejs3/core-js-stable/object/keys\");\n\n_Object$defineProperty2(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = void 0;\n\nvar _map = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/map\"));\n\nvar _find = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/find\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/object/define-property\"));\n\nvar _create = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/object/create\"));\n\nvar _promise = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/promise\"));\n\nvar _isArray = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/array/is-array\"));\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime-corejs3/regenerator\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/asyncToGenerator\"));\n\nvar _concat = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/concat\"));\n\nvar _getPrototypeOf = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/object/get-prototype-of\"));\n\nvar _includes = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/includes\"));\n\nvar _stringify = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/json/stringify\"));\n\nvar _forEach = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/for-each\"));\n\nvar _keys = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/object/keys\"));\n\nvar _freeze = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/object/freeze\"));\n\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/typeof\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/createClass\"));\n\nvar _defineProperty3 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/defineProperty\"));\n\nvar _indexOf = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/index-of\"));\n\nvar _CoreManager = _interopRequireDefault(require(\"./CoreManager\"));\n\nvar _canBeSerialized = _interopRequireDefault(require(\"./canBeSerialized\"));\n\nvar _decode = _interopRequireDefault(require(\"./decode\"));\n\nvar _encode = _interopRequireDefault(require(\"./encode\"));\n\nvar _escape2 = _interopRequireDefault(require(\"./escape\"));\n\nvar _EventuallyQueue = _interopRequireDefault(require(\"./EventuallyQueue\"));\n\nvar _ParseACL = _interopRequireDefault(require(\"./ParseACL\"));\n\nvar _parseDate = _interopRequireDefault(require(\"./parseDate\"));\n\nvar _ParseError = _interopRequireDefault(require(\"./ParseError\"));\n\nvar _ParseFile = _interopRequireDefault(require(\"./ParseFile\"));\n\nvar _promiseUtils = require(\"./promiseUtils\");\n\nvar _LocalDatastoreUtils = require(\"./LocalDatastoreUtils\");\n\nvar _ParseOp = require(\"./ParseOp\");\n\nvar _ParseQuery = _interopRequireDefault(require(\"./ParseQuery\"));\n\nvar _ParseRelation = _interopRequireDefault(require(\"./ParseRelation\"));\n\nvar SingleInstanceStateController = _interopRequireWildcard(require(\"./SingleInstanceStateController\"));\n\nvar _unique = _interopRequireDefault(require(\"./unique\"));\n\nvar UniqueInstanceStateController = _interopRequireWildcard(require(\"./UniqueInstanceStateController\"));\n\nvar _unsavedChildren = _interopRequireDefault(require(\"./unsavedChildren\"));\n\nfunction _getRequireWildcardCache(nodeInterop) {\n  if (typeof _WeakMap !== \"function\") return null;\n  var cacheBabelInterop = new _WeakMap();\n  var cacheNodeInterop = new _WeakMap();\n  return (_getRequireWildcardCache = function (nodeInterop) {\n    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;\n  })(nodeInterop);\n}\n\nfunction _interopRequireWildcard(obj, nodeInterop) {\n  if (!nodeInterop && obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (obj === null || _typeof3(obj) !== \"object\" && typeof obj !== \"function\") {\n    return {\n      default: obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache(nodeInterop);\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n\n  for (var key in obj) {\n    if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = _Object$defineProperty2 && _Object$getOwnPropertyDescriptor ? _Object$getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        _Object$defineProperty2(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj.default = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) {\n  var it = typeof _Symbol !== \"undefined\" && _getIteratorMethod(o) || o[\"@@iterator\"];\n\n  if (!it) {\n    if (_Array$isArray2(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function () {};\n\n      return {\n        s: F,\n        n: function () {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function (_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function () {\n      it = it.call(o);\n    },\n    n: function () {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function (_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function () {\n      try {\n        if (!normalCompletion && it.return != null) it.return();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  var _context18;\n\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n\n  var n = _sliceInstanceProperty(_context18 = Object.prototype.toString.call(o)).call(_context18, 8, -1);\n\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return _Array$from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = _Object$keys2(object);\n\n  if (_Object$getOwnPropertySymbols) {\n    var symbols = _Object$getOwnPropertySymbols(object);\n\n    enumerableOnly && (symbols = _filterInstanceProperty(symbols).call(symbols, function (sym) {\n      return _Object$getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var _context16, _context17;\n\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? _forEachInstanceProperty2(_context16 = ownKeys(Object(source), !0)).call(_context16, function (key) {\n      (0, _defineProperty3.default)(target, key, source[key]);\n    }) : _Object$getOwnPropertyDescriptors ? _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)) : _forEachInstanceProperty2(_context17 = ownKeys(Object(source))).call(_context17, function (key) {\n      _Object$defineProperty2(target, key, _Object$getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nvar uuidv4 = require('./uuid');\n/*:: export type Pointer = {\r\n  __type: string,\r\n  className: string,\r\n  objectId: string,\r\n};*/\n\n/*:: type SaveParams = {\r\n  method: string,\r\n  path: string,\r\n  body: AttributeMap,\r\n};*/\n\n/*:: export type SaveOptions = FullOptions & {\r\n  cascadeSave?: boolean,\r\n  context?: AttributeMap,\r\n};*/\n// Mapping of class names to constructors, so we can populate objects from the\n// server with appropriate subclasses of ParseObject\n\n\nvar classMap = {}; // Global counter for generating unique Ids for non-single-instance objects\n\nvar objectCount = 0; // On web clients, objects are single-instance: any two objects with the same Id\n// will have the same attributes. However, this may be dangerous default\n// behavior in a server scenario\n\nvar singleInstance = !_CoreManager.default.get('IS_NODE');\n\nif (singleInstance) {\n  _CoreManager.default.setObjectStateController(SingleInstanceStateController);\n} else {\n  _CoreManager.default.setObjectStateController(UniqueInstanceStateController);\n}\n\nfunction getServerUrlPath() {\n  var serverUrl = _CoreManager.default.get('SERVER_URL');\n\n  if (serverUrl[serverUrl.length - 1] !== '/') {\n    serverUrl += '/';\n  }\n\n  var url = serverUrl.replace(/https?:\\/\\//, '');\n  return url.substr((0, _indexOf.default)(url).call(url, '/'));\n}\n/**\r\n * Creates a new model with defined attributes.\r\n *\r\n * <p>You won't normally call this method directly.  It is recommended that\r\n * you use a subclass of <code>Parse.Object</code> instead, created by calling\r\n * <code>extend</code>.</p>\r\n *\r\n * <p>However, if you don't want to use a subclass, or aren't sure which\r\n * subclass is appropriate, you can use this form:<pre>\r\n *     var object = new Parse.Object(\"ClassName\");\r\n * </pre>\r\n * That is basically equivalent to:<pre>\r\n *     var MyClass = Parse.Object.extend(\"ClassName\");\r\n *     var object = new MyClass();\r\n * </pre></p>\r\n *\r\n * @alias Parse.Object\r\n */\n\n\nvar ParseObject = /*#__PURE__*/function () {\n  /**\r\n   * @param {string} className The class name for the object\r\n   * @param {object} attributes The initial set of data to store in the object.\r\n   * @param {object} options The options for this object instance.\r\n   */\n  function ParseObject(className\n  /*: ?string | { className: string, [attr: string]: mixed }*/\n  , attributes\n  /*:: ?: { [attr: string]: mixed }*/\n  , options\n  /*:: ?: { ignoreValidation: boolean }*/\n  ) {\n    (0, _classCallCheck2.default)(this, ParseObject);\n    (0, _defineProperty3.default)(this, \"id\", void 0);\n    (0, _defineProperty3.default)(this, \"_localId\", void 0);\n    (0, _defineProperty3.default)(this, \"_objCount\", void 0);\n    (0, _defineProperty3.default)(this, \"className\", void 0); // Enable legacy initializers\n\n    if (typeof this.initialize === 'function') {\n      this.initialize.apply(this, arguments);\n    }\n\n    var toSet = null;\n    this._objCount = objectCount++;\n\n    if (typeof className === 'string') {\n      this.className = className;\n\n      if (attributes && (0, _typeof2.default)(attributes) === 'object') {\n        toSet = attributes;\n      }\n    } else if (className && (0, _typeof2.default)(className) === 'object') {\n      this.className = className.className;\n      toSet = {};\n\n      for (var _attr in className) {\n        if (_attr !== 'className') {\n          toSet[_attr] = className[_attr];\n        }\n      }\n\n      if (attributes && (0, _typeof2.default)(attributes) === 'object') {\n        options = attributes;\n      }\n    }\n\n    if (toSet && !this.set(toSet, options)) {\n      throw new Error(\"Can't create an invalid Parse Object\");\n    }\n  }\n  /**\r\n   * The ID of this object, unique within its class.\r\n   *\r\n   * @property {string} id\r\n   */\n\n\n  (0, _createClass2.default)(ParseObject, [{\n    key: \"attributes\",\n    get:\n    /** Prototype getters / setters **/\n    function ()\n    /*: AttributeMap*/\n    {\n      var stateController = _CoreManager.default.getObjectStateController();\n\n      return (0, _freeze.default)(stateController.estimateAttributes(this._getStateIdentifier()));\n    }\n    /**\r\n     * The first time this object was saved on the server.\r\n     *\r\n     * @property {Date} createdAt\r\n     * @returns {Date}\r\n     */\n\n  }, {\n    key: \"createdAt\",\n    get: function ()\n    /*: ?Date*/\n    {\n      return this._getServerData().createdAt;\n    }\n    /**\r\n     * The last time this object was updated on the server.\r\n     *\r\n     * @property {Date} updatedAt\r\n     * @returns {Date}\r\n     */\n\n  }, {\n    key: \"updatedAt\",\n    get: function ()\n    /*: ?Date*/\n    {\n      return this._getServerData().updatedAt;\n    }\n    /** Private methods **/\n\n    /**\r\n     * Returns a local or server Id used uniquely identify this object\r\n     *\r\n     * @returns {string}\r\n     */\n\n  }, {\n    key: \"_getId\",\n    value: function ()\n    /*: string*/\n    {\n      if (typeof this.id === 'string') {\n        return this.id;\n      }\n\n      if (typeof this._localId === 'string') {\n        return this._localId;\n      }\n\n      var localId = 'local' + uuidv4();\n      this._localId = localId;\n      return localId;\n    }\n    /**\r\n     * Returns a unique identifier used to pull data from the State Controller.\r\n     *\r\n     * @returns {Parse.Object|object}\r\n     */\n\n  }, {\n    key: \"_getStateIdentifier\",\n    value: function ()\n    /*: ParseObject | { id: string, className: string }*/\n    {\n      if (singleInstance) {\n        var id = this.id;\n\n        if (!id) {\n          id = this._getId();\n        }\n\n        return {\n          id: id,\n          className: this.className\n        };\n      } else {\n        return this;\n      }\n    }\n  }, {\n    key: \"_getServerData\",\n    value: function ()\n    /*: AttributeMap*/\n    {\n      var stateController = _CoreManager.default.getObjectStateController();\n\n      return stateController.getServerData(this._getStateIdentifier());\n    }\n  }, {\n    key: \"_clearServerData\",\n    value: function () {\n      var serverData = this._getServerData();\n\n      var unset = {};\n\n      for (var _attr2 in serverData) {\n        unset[_attr2] = undefined;\n      }\n\n      var stateController = _CoreManager.default.getObjectStateController();\n\n      stateController.setServerData(this._getStateIdentifier(), unset);\n    }\n  }, {\n    key: \"_getPendingOps\",\n    value: function ()\n    /*: Array<OpsMap>*/\n    {\n      var stateController = _CoreManager.default.getObjectStateController();\n\n      return stateController.getPendingOps(this._getStateIdentifier());\n    }\n    /**\r\n     * @param {Array<string>} [keysToClear] - if specified, only ops matching\r\n     * these fields will be cleared\r\n     */\n\n  }, {\n    key: \"_clearPendingOps\",\n    value: function (keysToClear\n    /*:: ?: Array<string>*/\n    ) {\n      var pending = this._getPendingOps();\n\n      var latest = pending[pending.length - 1];\n      var keys = keysToClear || (0, _keys.default)(latest);\n      (0, _forEach.default)(keys).call(keys, function (key) {\n        delete latest[key];\n      });\n    }\n  }, {\n    key: \"_getDirtyObjectAttributes\",\n    value: function ()\n    /*: AttributeMap*/\n    {\n      var attributes = this.attributes;\n\n      var stateController = _CoreManager.default.getObjectStateController();\n\n      var objectCache = stateController.getObjectCache(this._getStateIdentifier());\n      var dirty = {};\n\n      for (var _attr3 in attributes) {\n        var val = attributes[_attr3];\n\n        if (val && (0, _typeof2.default)(val) === 'object' && !(val instanceof ParseObject) && !(val instanceof _ParseFile.default) && !(val instanceof _ParseRelation.default)) {\n          // Due to the way browsers construct maps, the key order will not change\n          // unless the object is changed\n          try {\n            var json = (0, _encode.default)(val, false, true);\n            var stringified = (0, _stringify.default)(json);\n\n            if (objectCache[_attr3] !== stringified) {\n              dirty[_attr3] = val;\n            }\n          } catch (e) {\n            // Error occurred, possibly by a nested unsaved pointer in a mutable container\n            // No matter how it happened, it indicates a change in the attribute\n            dirty[_attr3] = val;\n          }\n        }\n      }\n\n      return dirty;\n    }\n  }, {\n    key: \"_toFullJSON\",\n    value: function (seen\n    /*:: ?: Array<any>*/\n    , offline\n    /*:: ?: boolean*/\n    )\n    /*: AttributeMap*/\n    {\n      var json\n      /*: { [key: string]: mixed }*/\n      = this.toJSON(seen, offline);\n      json.__type = 'Object';\n      json.className = this.className;\n      return json;\n    }\n  }, {\n    key: \"_getSaveJSON\",\n    value: function ()\n    /*: AttributeMap*/\n    {\n      var pending = this._getPendingOps();\n\n      var dirtyObjects = this._getDirtyObjectAttributes();\n\n      var json = {};\n\n      for (var attr in dirtyObjects) {\n        var isDotNotation = false;\n\n        for (var i = 0; i < pending.length; i += 1) {\n          for (var field in pending[i]) {\n            // Dot notation operations are handled later\n            if ((0, _includes.default)(field).call(field, '.')) {\n              var fieldName = field.split('.')[0];\n\n              if (fieldName === attr) {\n                isDotNotation = true;\n                break;\n              }\n            }\n          }\n        }\n\n        if (!isDotNotation) {\n          json[attr] = new _ParseOp.SetOp(dirtyObjects[attr]).toJSON();\n        }\n      }\n\n      for (attr in pending[0]) {\n        json[attr] = pending[0][attr].toJSON();\n      }\n\n      return json;\n    }\n  }, {\n    key: \"_getSaveParams\",\n    value: function ()\n    /*: SaveParams*/\n    {\n      var method = this.id ? 'PUT' : 'POST';\n\n      var body = this._getSaveJSON();\n\n      var path = 'classes/' + this.className;\n\n      if (_CoreManager.default.get('ALLOW_CUSTOM_OBJECT_ID')) {\n        if (!this.createdAt) {\n          method = 'POST';\n          body.objectId = this.id;\n        } else {\n          method = 'PUT';\n          path += '/' + this.id;\n        }\n      } else if (this.id) {\n        path += '/' + this.id;\n      } else if (this.className === '_User') {\n        path = 'users';\n      }\n\n      return {\n        method: method,\n        body: body,\n        path: path\n      };\n    }\n  }, {\n    key: \"_finishFetch\",\n    value: function (serverData\n    /*: AttributeMap*/\n    ) {\n      if (!this.id && serverData.objectId) {\n        this.id = serverData.objectId;\n      }\n\n      var stateController = _CoreManager.default.getObjectStateController();\n\n      stateController.initializeState(this._getStateIdentifier());\n      var decoded = {};\n\n      for (var _attr4 in serverData) {\n        if (_attr4 === 'ACL') {\n          decoded[_attr4] = new _ParseACL.default(serverData[_attr4]);\n        } else if (_attr4 !== 'objectId') {\n          decoded[_attr4] = (0, _decode.default)(serverData[_attr4]);\n\n          if (decoded[_attr4] instanceof _ParseRelation.default) {\n            decoded[_attr4]._ensureParentAndKey(this, _attr4);\n          }\n        }\n      }\n\n      if (decoded.createdAt && typeof decoded.createdAt === 'string') {\n        decoded.createdAt = (0, _parseDate.default)(decoded.createdAt);\n      }\n\n      if (decoded.updatedAt && typeof decoded.updatedAt === 'string') {\n        decoded.updatedAt = (0, _parseDate.default)(decoded.updatedAt);\n      }\n\n      if (!decoded.updatedAt && decoded.createdAt) {\n        decoded.updatedAt = decoded.createdAt;\n      }\n\n      stateController.commitServerChanges(this._getStateIdentifier(), decoded);\n    }\n  }, {\n    key: \"_setExisted\",\n    value: function (existed\n    /*: boolean*/\n    ) {\n      var stateController = _CoreManager.default.getObjectStateController();\n\n      var state = stateController.getState(this._getStateIdentifier());\n\n      if (state) {\n        state.existed = existed;\n      }\n    }\n  }, {\n    key: \"_migrateId\",\n    value: function (serverId\n    /*: string*/\n    ) {\n      if (this._localId && serverId) {\n        if (singleInstance) {\n          var stateController = _CoreManager.default.getObjectStateController();\n\n          var oldState = stateController.removeState(this._getStateIdentifier());\n          this.id = serverId;\n          delete this._localId;\n\n          if (oldState) {\n            stateController.initializeState(this._getStateIdentifier(), oldState);\n          }\n        } else {\n          this.id = serverId;\n          delete this._localId;\n        }\n      }\n    }\n  }, {\n    key: \"_handleSaveResponse\",\n    value: function (response\n    /*: AttributeMap*/\n    , status\n    /*: number*/\n    ) {\n      var changes = {};\n\n      var stateController = _CoreManager.default.getObjectStateController();\n\n      var pending = stateController.popPendingState(this._getStateIdentifier());\n\n      for (var attr in pending) {\n        if (pending[attr] instanceof _ParseOp.RelationOp) {\n          changes[attr] = pending[attr].applyTo(undefined, this, attr);\n        } else if (!(attr in response)) {\n          // Only SetOps and UnsetOps should not come back with results\n          changes[attr] = pending[attr].applyTo(undefined);\n        }\n      }\n\n      for (attr in response) {\n        if ((attr === 'createdAt' || attr === 'updatedAt') && typeof response[attr] === 'string') {\n          changes[attr] = (0, _parseDate.default)(response[attr]);\n        } else if (attr === 'ACL') {\n          changes[attr] = new _ParseACL.default(response[attr]);\n        } else if (attr !== 'objectId') {\n          var val = (0, _decode.default)(response[attr]);\n\n          if (val && (0, _getPrototypeOf.default)(val) === Object.prototype) {\n            changes[attr] = _objectSpread(_objectSpread({}, this.attributes[attr]), val);\n          } else {\n            changes[attr] = val;\n          }\n\n          if (changes[attr] instanceof _ParseOp.UnsetOp) {\n            changes[attr] = undefined;\n          }\n        }\n      }\n\n      if (changes.createdAt && !changes.updatedAt) {\n        changes.updatedAt = changes.createdAt;\n      }\n\n      this._migrateId(response.objectId);\n\n      if (status !== 201) {\n        this._setExisted(true);\n      }\n\n      stateController.commitServerChanges(this._getStateIdentifier(), changes);\n    }\n  }, {\n    key: \"_handleSaveError\",\n    value: function () {\n      var stateController = _CoreManager.default.getObjectStateController();\n\n      stateController.mergeFirstPendingState(this._getStateIdentifier());\n    }\n  }, {\n    key: \"initialize\",\n    value:\n    /** Public methods **/\n    function () {// NOOP\n    }\n    /**\r\n     * Returns a JSON version of the object suitable for saving to Parse.\r\n     *\r\n     * @param seen\r\n     * @param offline\r\n     * @returns {object}\r\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function (seen\n    /*: Array<any> | void*/\n    , offline\n    /*:: ?: boolean*/\n    )\n    /*: AttributeMap*/\n    {\n      var seenEntry = this.id ? this.className + ':' + this.id : this;\n      seen = seen || [seenEntry];\n      var json = {};\n      var attrs = this.attributes;\n\n      for (var _attr5 in attrs) {\n        if ((_attr5 === 'createdAt' || _attr5 === 'updatedAt') && attrs[_attr5].toJSON) {\n          json[_attr5] = attrs[_attr5].toJSON();\n        } else {\n          json[_attr5] = (0, _encode.default)(attrs[_attr5], false, false, seen, offline);\n        }\n      }\n\n      var pending = this._getPendingOps();\n\n      for (var _attr6 in pending[0]) {\n        json[_attr6] = pending[0][_attr6].toJSON(offline);\n      }\n\n      if (this.id) {\n        json.objectId = this.id;\n      }\n\n      return json;\n    }\n    /**\r\n     * Determines whether this ParseObject is equal to another ParseObject\r\n     *\r\n     * @param {object} other - An other object ot compare\r\n     * @returns {boolean}\r\n     */\n\n  }, {\n    key: \"equals\",\n    value: function (other\n    /*: mixed*/\n    )\n    /*: boolean*/\n    {\n      if (this === other) {\n        return true;\n      }\n\n      return other instanceof ParseObject && this.className === other.className && this.id === other.id && typeof this.id !== 'undefined';\n    }\n    /**\r\n     * Returns true if this object has been modified since its last\r\n     * save/refresh.  If an attribute is specified, it returns true only if that\r\n     * particular attribute has been modified since the last save/refresh.\r\n     *\r\n     * @param {string} attr An attribute name (optional).\r\n     * @returns {boolean}\r\n     */\n\n  }, {\n    key: \"dirty\",\n    value: function (attr\n    /*:: ?: string*/\n    )\n    /*: boolean*/\n    {\n      if (!this.id) {\n        return true;\n      }\n\n      var pendingOps = this._getPendingOps();\n\n      var dirtyObjects = this._getDirtyObjectAttributes();\n\n      if (attr) {\n        if (dirtyObjects.hasOwnProperty(attr)) {\n          return true;\n        }\n\n        for (var i = 0; i < pendingOps.length; i++) {\n          if (pendingOps[i].hasOwnProperty(attr)) {\n            return true;\n          }\n        }\n\n        return false;\n      }\n\n      if ((0, _keys.default)(pendingOps[0]).length !== 0) {\n        return true;\n      }\n\n      if ((0, _keys.default)(dirtyObjects).length !== 0) {\n        return true;\n      }\n\n      return false;\n    }\n    /**\r\n     * Returns an array of keys that have been modified since last save/refresh\r\n     *\r\n     * @returns {string[]}\r\n     */\n\n  }, {\n    key: \"dirtyKeys\",\n    value: function ()\n    /*: Array<string>*/\n    {\n      var pendingOps = this._getPendingOps();\n\n      var keys = {};\n\n      for (var i = 0; i < pendingOps.length; i++) {\n        for (var _attr7 in pendingOps[i]) {\n          keys[_attr7] = true;\n        }\n      }\n\n      var dirtyObjects = this._getDirtyObjectAttributes();\n\n      for (var _attr8 in dirtyObjects) {\n        keys[_attr8] = true;\n      }\n\n      return (0, _keys.default)(keys);\n    }\n    /**\r\n     * Returns true if the object has been fetched.\r\n     *\r\n     * @returns {boolean}\r\n     */\n\n  }, {\n    key: \"isDataAvailable\",\n    value: function ()\n    /*: boolean*/\n    {\n      var serverData = this._getServerData();\n\n      return !!(0, _keys.default)(serverData).length;\n    }\n    /**\r\n     * Gets a Pointer referencing this Object.\r\n     *\r\n     * @returns {Pointer}\r\n     */\n\n  }, {\n    key: \"toPointer\",\n    value: function ()\n    /*: Pointer*/\n    {\n      if (!this.id) {\n        throw new Error('Cannot create a pointer to an unsaved ParseObject');\n      }\n\n      return {\n        __type: 'Pointer',\n        className: this.className,\n        objectId: this.id\n      };\n    }\n    /**\r\n     * Gets a Pointer referencing this Object.\r\n     *\r\n     * @returns {Pointer}\r\n     */\n\n  }, {\n    key: \"toOfflinePointer\",\n    value: function ()\n    /*: Pointer*/\n    {\n      if (!this._localId) {\n        throw new Error('Cannot create a offline pointer to a saved ParseObject');\n      }\n\n      return {\n        __type: 'Object',\n        className: this.className,\n        _localId: this._localId\n      };\n    }\n    /**\r\n     * Gets the value of an attribute.\r\n     *\r\n     * @param {string} attr The string name of an attribute.\r\n     * @returns {*}\r\n     */\n\n  }, {\n    key: \"get\",\n    value: function (attr\n    /*: string*/\n    )\n    /*: mixed*/\n    {\n      return this.attributes[attr];\n    }\n    /**\r\n     * Gets a relation on the given class for the attribute.\r\n     *\r\n     * @param {string} attr The attribute to get the relation for.\r\n     * @returns {Parse.Relation}\r\n     */\n\n  }, {\n    key: \"relation\",\n    value: function (attr\n    /*: string*/\n    )\n    /*: ParseRelation*/\n    {\n      var value = this.get(attr);\n\n      if (value) {\n        if (!(value instanceof _ParseRelation.default)) {\n          throw new Error('Called relation() on non-relation field ' + attr);\n        }\n\n        value._ensureParentAndKey(this, attr);\n\n        return value;\n      }\n\n      return new _ParseRelation.default(this, attr);\n    }\n    /**\r\n     * Gets the HTML-escaped value of an attribute.\r\n     *\r\n     * @param {string} attr The string name of an attribute.\r\n     * @returns {string}\r\n     */\n\n  }, {\n    key: \"escape\",\n    value: function (attr\n    /*: string*/\n    )\n    /*: string*/\n    {\n      var val = this.attributes[attr];\n\n      if (val == null) {\n        return '';\n      }\n\n      if (typeof val !== 'string') {\n        if (typeof val.toString !== 'function') {\n          return '';\n        }\n\n        val = val.toString();\n      }\n\n      return (0, _escape2.default)(val);\n    }\n    /**\r\n     * Returns <code>true</code> if the attribute contains a value that is not\r\n     * null or undefined.\r\n     *\r\n     * @param {string} attr The string name of the attribute.\r\n     * @returns {boolean}\r\n     */\n\n  }, {\n    key: \"has\",\n    value: function (attr\n    /*: string*/\n    )\n    /*: boolean*/\n    {\n      var attributes = this.attributes;\n\n      if (attributes.hasOwnProperty(attr)) {\n        return attributes[attr] != null;\n      }\n\n      return false;\n    }\n    /**\r\n     * Sets a hash of model attributes on the object.\r\n     *\r\n     * <p>You can call it with an object containing keys and values, with one\r\n     * key and value, or dot notation.  For example:<pre>\r\n     *   gameTurn.set({\r\n     *     player: player1,\r\n     *     diceRoll: 2\r\n     *   }, {\r\n     *     error: function(gameTurnAgain, error) {\r\n     *       // The set failed validation.\r\n     *     }\r\n     *   });\r\n     *\r\n     *   game.set(\"currentPlayer\", player2, {\r\n     *     error: function(gameTurnAgain, error) {\r\n     *       // The set failed validation.\r\n     *     }\r\n     *   });\r\n     *\r\n     *   game.set(\"finished\", true);</pre></p>\r\n     *\r\n     *   game.set(\"player.score\", 10);</pre></p>\r\n     *\r\n     * @param {(string|object)} key The key to set.\r\n     * @param {(string|object)} value The value to give it.\r\n     * @param {object} options A set of options for the set.\r\n     *     The only supported option is <code>error</code>.\r\n     * @returns {(ParseObject|boolean)} true if the set succeeded.\r\n     */\n\n  }, {\n    key: \"set\",\n    value: function (key\n    /*: mixed*/\n    , value\n    /*: mixed*/\n    , options\n    /*:: ?: mixed*/\n    )\n    /*: ParseObject | boolean*/\n    {\n      var changes = {};\n      var newOps = {};\n\n      if (key && (0, _typeof2.default)(key) === 'object') {\n        changes = key;\n        options = value;\n      } else if (typeof key === 'string') {\n        changes[key] = value;\n      } else {\n        return this;\n      }\n\n      options = options || {};\n      var readonly = [];\n\n      if (typeof this.constructor.readOnlyAttributes === 'function') {\n        readonly = (0, _concat.default)(readonly).call(readonly, this.constructor.readOnlyAttributes());\n      }\n\n      for (var k in changes) {\n        if (k === 'createdAt' || k === 'updatedAt') {\n          // This property is read-only, but for legacy reasons we silently\n          // ignore it\n          continue;\n        }\n\n        if ((0, _indexOf.default)(readonly).call(readonly, k) > -1) {\n          throw new Error('Cannot modify readonly attribute: ' + k);\n        }\n\n        if (options.unset) {\n          newOps[k] = new _ParseOp.UnsetOp();\n        } else if (changes[k] instanceof _ParseOp.Op) {\n          newOps[k] = changes[k];\n        } else if (changes[k] && (0, _typeof2.default)(changes[k]) === 'object' && typeof changes[k].__op === 'string') {\n          newOps[k] = (0, _ParseOp.opFromJSON)(changes[k]);\n        } else if (k === 'objectId' || k === 'id') {\n          if (typeof changes[k] === 'string') {\n            this.id = changes[k];\n          }\n        } else if (k === 'ACL' && (0, _typeof2.default)(changes[k]) === 'object' && !(changes[k] instanceof _ParseACL.default)) {\n          newOps[k] = new _ParseOp.SetOp(new _ParseACL.default(changes[k]));\n        } else if (changes[k] instanceof _ParseRelation.default) {\n          var relation = new _ParseRelation.default(this, k);\n          relation.targetClassName = changes[k].targetClassName;\n          newOps[k] = new _ParseOp.SetOp(relation);\n        } else {\n          newOps[k] = new _ParseOp.SetOp(changes[k]);\n        }\n      }\n\n      var currentAttributes = this.attributes; // Calculate new values\n\n      var newValues = {};\n\n      for (var _attr9 in newOps) {\n        if (newOps[_attr9] instanceof _ParseOp.RelationOp) {\n          newValues[_attr9] = newOps[_attr9].applyTo(currentAttributes[_attr9], this, _attr9);\n        } else if (!(newOps[_attr9] instanceof _ParseOp.UnsetOp)) {\n          newValues[_attr9] = newOps[_attr9].applyTo(currentAttributes[_attr9]);\n        }\n      } // Validate changes\n\n\n      if (!options.ignoreValidation) {\n        var validation = this.validate(newValues);\n\n        if (validation) {\n          if (typeof options.error === 'function') {\n            options.error(this, validation);\n          }\n\n          return false;\n        }\n      } // Consolidate Ops\n\n\n      var pendingOps = this._getPendingOps();\n\n      var last = pendingOps.length - 1;\n\n      var stateController = _CoreManager.default.getObjectStateController();\n\n      for (var _attr10 in newOps) {\n        var nextOp = newOps[_attr10].mergeWith(pendingOps[last][_attr10]);\n\n        stateController.setPendingOp(this._getStateIdentifier(), _attr10, nextOp);\n      }\n\n      return this;\n    }\n    /**\r\n     * Remove an attribute from the model. This is a noop if the attribute doesn't\r\n     * exist.\r\n     *\r\n     * @param {string} attr The string name of an attribute.\r\n     * @param options\r\n     * @returns {(ParseObject | boolean)}\r\n     */\n\n  }, {\n    key: \"unset\",\n    value: function (attr\n    /*: string*/\n    , options\n    /*:: ?: { [opt: string]: mixed }*/\n    )\n    /*: ParseObject | boolean*/\n    {\n      options = options || {};\n      options.unset = true;\n      return this.set(attr, null, options);\n    }\n    /**\r\n     * Atomically increments the value of the given attribute the next time the\r\n     * object is saved. If no amount is specified, 1 is used by default.\r\n     *\r\n     * @param attr {String} The key.\r\n     * @param amount {Number} The amount to increment by (optional).\r\n     * @returns {(ParseObject|boolean)}\r\n     */\n\n  }, {\n    key: \"increment\",\n    value: function (attr\n    /*: string*/\n    , amount\n    /*:: ?: number*/\n    )\n    /*: ParseObject | boolean*/\n    {\n      if (typeof amount === 'undefined') {\n        amount = 1;\n      }\n\n      if (typeof amount !== 'number') {\n        throw new Error('Cannot increment by a non-numeric amount.');\n      }\n\n      return this.set(attr, new _ParseOp.IncrementOp(amount));\n    }\n    /**\r\n     * Atomically decrements the value of the given attribute the next time the\r\n     * object is saved. If no amount is specified, 1 is used by default.\r\n     *\r\n     * @param attr {String} The key.\r\n     * @param amount {Number} The amount to decrement by (optional).\r\n     * @returns {(ParseObject | boolean)}\r\n     */\n\n  }, {\n    key: \"decrement\",\n    value: function (attr\n    /*: string*/\n    , amount\n    /*:: ?: number*/\n    )\n    /*: ParseObject | boolean*/\n    {\n      if (typeof amount === 'undefined') {\n        amount = 1;\n      }\n\n      if (typeof amount !== 'number') {\n        throw new Error('Cannot decrement by a non-numeric amount.');\n      }\n\n      return this.set(attr, new _ParseOp.IncrementOp(amount * -1));\n    }\n    /**\r\n     * Atomically add an object to the end of the array associated with a given\r\n     * key.\r\n     *\r\n     * @param attr {String} The key.\r\n     * @param item {} The item to add.\r\n     * @returns {(ParseObject | boolean)}\r\n     */\n\n  }, {\n    key: \"add\",\n    value: function (attr\n    /*: string*/\n    , item\n    /*: mixed*/\n    )\n    /*: ParseObject | boolean*/\n    {\n      return this.set(attr, new _ParseOp.AddOp([item]));\n    }\n    /**\r\n     * Atomically add the objects to the end of the array associated with a given\r\n     * key.\r\n     *\r\n     * @param attr {String} The key.\r\n     * @param items {Object[]} The items to add.\r\n     * @returns {(ParseObject | boolean)}\r\n     */\n\n  }, {\n    key: \"addAll\",\n    value: function (attr\n    /*: string*/\n    , items\n    /*: Array<mixed>*/\n    )\n    /*: ParseObject | boolean*/\n    {\n      return this.set(attr, new _ParseOp.AddOp(items));\n    }\n    /**\r\n     * Atomically add an object to the array associated with a given key, only\r\n     * if it is not already present in the array. The position of the insert is\r\n     * not guaranteed.\r\n     *\r\n     * @param attr {String} The key.\r\n     * @param item {} The object to add.\r\n     * @returns {(ParseObject | boolean)}\r\n     */\n\n  }, {\n    key: \"addUnique\",\n    value: function (attr\n    /*: string*/\n    , item\n    /*: mixed*/\n    )\n    /*: ParseObject | boolean*/\n    {\n      return this.set(attr, new _ParseOp.AddUniqueOp([item]));\n    }\n    /**\r\n     * Atomically add the objects to the array associated with a given key, only\r\n     * if it is not already present in the array. The position of the insert is\r\n     * not guaranteed.\r\n     *\r\n     * @param attr {String} The key.\r\n     * @param items {Object[]} The objects to add.\r\n     * @returns {(ParseObject | boolean)}\r\n     */\n\n  }, {\n    key: \"addAllUnique\",\n    value: function (attr\n    /*: string*/\n    , items\n    /*: Array<mixed>*/\n    )\n    /*: ParseObject | boolean*/\n    {\n      return this.set(attr, new _ParseOp.AddUniqueOp(items));\n    }\n    /**\r\n     * Atomically remove all instances of an object from the array associated\r\n     * with a given key.\r\n     *\r\n     * @param attr {String} The key.\r\n     * @param item {} The object to remove.\r\n     * @returns {(ParseObject | boolean)}\r\n     */\n\n  }, {\n    key: \"remove\",\n    value: function (attr\n    /*: string*/\n    , item\n    /*: mixed*/\n    )\n    /*: ParseObject | boolean*/\n    {\n      return this.set(attr, new _ParseOp.RemoveOp([item]));\n    }\n    /**\r\n     * Atomically remove all instances of the objects from the array associated\r\n     * with a given key.\r\n     *\r\n     * @param attr {String} The key.\r\n     * @param items {Object[]} The object to remove.\r\n     * @returns {(ParseObject | boolean)}\r\n     */\n\n  }, {\n    key: \"removeAll\",\n    value: function (attr\n    /*: string*/\n    , items\n    /*: Array<mixed>*/\n    )\n    /*: ParseObject | boolean*/\n    {\n      return this.set(attr, new _ParseOp.RemoveOp(items));\n    }\n    /**\r\n     * Returns an instance of a subclass of Parse.Op describing what kind of\r\n     * modification has been performed on this field since the last time it was\r\n     * saved. For example, after calling object.increment(\"x\"), calling\r\n     * object.op(\"x\") would return an instance of Parse.Op.Increment.\r\n     *\r\n     * @param attr {String} The key.\r\n     * @returns {Parse.Op} The operation, or undefined if none.\r\n     */\n\n  }, {\n    key: \"op\",\n    value: function (attr\n    /*: string*/\n    )\n    /*: ?Op*/\n    {\n      var pending = this._getPendingOps();\n\n      for (var i = pending.length; i--;) {\n        if (pending[i][attr]) {\n          return pending[i][attr];\n        }\n      }\n    }\n    /**\r\n     * Creates a new model with identical attributes to this one.\r\n     *\r\n     * @returns {Parse.Object}\r\n     */\n\n  }, {\n    key: \"clone\",\n    value: function clone()\n    /*: any*/\n    {\n      var clone = new this.constructor(this.className);\n      var attributes = this.attributes;\n\n      if (typeof this.constructor.readOnlyAttributes === 'function') {\n        var readonly = this.constructor.readOnlyAttributes() || []; // Attributes are frozen, so we have to rebuild an object,\n        // rather than delete readonly keys\n\n        var copy = {};\n\n        for (var a in attributes) {\n          if ((0, _indexOf.default)(readonly).call(readonly, a) < 0) {\n            copy[a] = attributes[a];\n          }\n        }\n\n        attributes = copy;\n      }\n\n      if (clone.set) {\n        clone.set(attributes);\n      }\n\n      return clone;\n    }\n    /**\r\n     * Creates a new instance of this object. Not to be confused with clone()\r\n     *\r\n     * @returns {Parse.Object}\r\n     */\n\n  }, {\n    key: \"newInstance\",\n    value: function ()\n    /*: any*/\n    {\n      var clone = new this.constructor(this.className);\n      clone.id = this.id;\n\n      if (singleInstance) {\n        // Just return an object with the right id\n        return clone;\n      }\n\n      var stateController = _CoreManager.default.getObjectStateController();\n\n      if (stateController) {\n        stateController.duplicateState(this._getStateIdentifier(), clone._getStateIdentifier());\n      }\n\n      return clone;\n    }\n    /**\r\n     * Returns true if this object has never been saved to Parse.\r\n     *\r\n     * @returns {boolean}\r\n     */\n\n  }, {\n    key: \"isNew\",\n    value: function ()\n    /*: boolean*/\n    {\n      return !this.id;\n    }\n    /**\r\n     * Returns true if this object was created by the Parse server when the\r\n     * object might have already been there (e.g. in the case of a Facebook\r\n     * login)\r\n     *\r\n     * @returns {boolean}\r\n     */\n\n  }, {\n    key: \"existed\",\n    value: function ()\n    /*: boolean*/\n    {\n      if (!this.id) {\n        return false;\n      }\n\n      var stateController = _CoreManager.default.getObjectStateController();\n\n      var state = stateController.getState(this._getStateIdentifier());\n\n      if (state) {\n        return state.existed;\n      }\n\n      return false;\n    }\n    /**\r\n     * Returns true if this object exists on the Server\r\n     *\r\n     * @param {object} options\r\n     * Valid options are:<ul>\r\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\r\n     *     be used for this request.\r\n     *   <li>sessionToken: A valid session token, used for making a request on\r\n     *       behalf of a specific user.\r\n     * </ul>\r\n     * @returns {Promise<boolean>} A boolean promise that is fulfilled if object exists.\r\n     */\n\n  }, {\n    key: \"exists\",\n    value: function () {\n      var _exists = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee(options\n      /*:: ?: RequestOptions*/\n      ) {\n        var query;\n        return _regenerator.default.wrap(function (_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (this.id) {\n                  _context.next = 2;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", false);\n\n              case 2:\n                _context.prev = 2;\n                query = new _ParseQuery.default(this.className);\n                _context.next = 6;\n                return query.get(this.id, options);\n\n              case 6:\n                return _context.abrupt(\"return\", true);\n\n              case 9:\n                _context.prev = 9;\n                _context.t0 = _context[\"catch\"](2);\n\n                if (!(_context.t0.code === _ParseError.default.OBJECT_NOT_FOUND)) {\n                  _context.next = 13;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", false);\n\n              case 13:\n                throw _context.t0;\n\n              case 14:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[2, 9]]);\n      }));\n\n      return function () {\n        return _exists.apply(this, arguments);\n      };\n    }()\n    /**\r\n     * Checks if the model is currently in a valid state.\r\n     *\r\n     * @returns {boolean}\r\n     */\n\n  }, {\n    key: \"isValid\",\n    value: function ()\n    /*: boolean*/\n    {\n      return !this.validate(this.attributes);\n    }\n    /**\r\n     * You should not call this function directly unless you subclass\r\n     * <code>Parse.Object</code>, in which case you can override this method\r\n     * to provide additional validation on <code>set</code> and\r\n     * <code>save</code>.  Your implementation should return\r\n     *\r\n     * @param {object} attrs The current data to validate.\r\n     * @returns {Parse.Error|boolean} False if the data is valid.  An error object otherwise.\r\n     * @see Parse.Object#set\r\n     */\n\n  }, {\n    key: \"validate\",\n    value: function (attrs\n    /*: AttributeMap*/\n    )\n    /*: ParseError | boolean*/\n    {\n      if (attrs.hasOwnProperty('ACL') && !(attrs.ACL instanceof _ParseACL.default)) {\n        return new _ParseError.default(_ParseError.default.OTHER_CAUSE, 'ACL must be a Parse ACL.');\n      }\n\n      for (var _key in attrs) {\n        if (!/^[A-Za-z][0-9A-Za-z_.]*$/.test(_key)) {\n          return new _ParseError.default(_ParseError.default.INVALID_KEY_NAME);\n        }\n      }\n\n      return false;\n    }\n    /**\r\n     * Returns the ACL for this object.\r\n     *\r\n     * @returns {Parse.ACL} An instance of Parse.ACL.\r\n     * @see Parse.Object#get\r\n     */\n\n  }, {\n    key: \"getACL\",\n    value: function ()\n    /*: ?ParseACL*/\n    {\n      var acl = this.get('ACL');\n\n      if (acl instanceof _ParseACL.default) {\n        return acl;\n      }\n\n      return null;\n    }\n    /**\r\n     * Sets the ACL to be used for this object.\r\n     *\r\n     * @param {Parse.ACL} acl An instance of Parse.ACL.\r\n     * @param {object} options\r\n     * @returns {(ParseObject | boolean)} Whether the set passed validation.\r\n     * @see Parse.Object#set\r\n     */\n\n  }, {\n    key: \"setACL\",\n    value: function (acl\n    /*: ParseACL*/\n    , options\n    /*:: ?: mixed*/\n    )\n    /*: ParseObject | boolean*/\n    {\n      return this.set('ACL', acl, options);\n    }\n    /**\r\n     * Clears any (or specific) changes to this object made since the last call to save()\r\n     *\r\n     * @param {string} [keys] - specify which fields to revert\r\n     */\n\n  }, {\n    key: \"revert\",\n    value: function ()\n    /*: void*/\n    {\n      var keysToRevert;\n\n      for (var _len = arguments.length, keys = new Array(_len), _key2 = 0; _key2 < _len; _key2++) {\n        keys[_key2] = arguments[_key2];\n      }\n\n      if (keys.length) {\n        keysToRevert = [];\n\n        var _iterator = _createForOfIteratorHelper(keys),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var _key3 = _step.value;\n\n            if (typeof _key3 === 'string') {\n              keysToRevert.push(_key3);\n            } else {\n              throw new Error('Parse.Object#revert expects either no, or a list of string, arguments.');\n            }\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      }\n\n      this._clearPendingOps(keysToRevert);\n    }\n    /**\r\n     * Clears all attributes on a model\r\n     *\r\n     * @returns {(ParseObject | boolean)}\r\n     */\n\n  }, {\n    key: \"clear\",\n    value: function ()\n    /*: ParseObject | boolean*/\n    {\n      var attributes = this.attributes;\n      var erasable = {};\n      var readonly = ['createdAt', 'updatedAt'];\n\n      if (typeof this.constructor.readOnlyAttributes === 'function') {\n        readonly = (0, _concat.default)(readonly).call(readonly, this.constructor.readOnlyAttributes());\n      }\n\n      for (var _attr11 in attributes) {\n        if ((0, _indexOf.default)(readonly).call(readonly, _attr11) < 0) {\n          erasable[_attr11] = true;\n        }\n      }\n\n      return this.set(erasable, {\n        unset: true\n      });\n    }\n    /**\r\n     * Fetch the model from the server. If the server's representation of the\r\n     * model differs from its current attributes, they will be overriden.\r\n     *\r\n     * @param {object} options\r\n     * Valid options are:<ul>\r\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\r\n     *     be used for this request.\r\n     *   <li>sessionToken: A valid session token, used for making a request on\r\n     *       behalf of a specific user.\r\n     *   <li>include: The name(s) of the key(s) to include. Can be a string, an array of strings,\r\n     *       or an array of array of strings.\r\n     *   <li>context: A dictionary that is accessible in Cloud Code `beforeFind` trigger.\r\n     * </ul>\r\n     * @returns {Promise} A promise that is fulfilled when the fetch\r\n     *     completes.\r\n     */\n\n  }, {\n    key: \"fetch\",\n    value: function (options\n    /*: RequestOptions*/\n    )\n    /*: Promise*/\n    {\n      options = options || {};\n      var fetchOptions = {};\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        fetchOptions.useMasterKey = options.useMasterKey;\n      }\n\n      if (options.hasOwnProperty('sessionToken')) {\n        fetchOptions.sessionToken = options.sessionToken;\n      }\n\n      if (options.hasOwnProperty('context') && (0, _typeof2.default)(options.context) === 'object') {\n        fetchOptions.context = options.context;\n      }\n\n      if (options.hasOwnProperty('include')) {\n        fetchOptions.include = [];\n\n        if ((0, _isArray.default)(options.include)) {\n          var _context2;\n\n          (0, _forEach.default)(_context2 = options.include).call(_context2, function (key) {\n            if ((0, _isArray.default)(key)) {\n              var _context3;\n\n              fetchOptions.include = (0, _concat.default)(_context3 = fetchOptions.include).call(_context3, key);\n            } else {\n              fetchOptions.include.push(key);\n            }\n          });\n        } else {\n          fetchOptions.include.push(options.include);\n        }\n      }\n\n      var controller = _CoreManager.default.getObjectController();\n\n      return controller.fetch(this, true, fetchOptions);\n    }\n    /**\r\n     * Fetch the model from the server. If the server's representation of the\r\n     * model differs from its current attributes, they will be overriden.\r\n     *\r\n     * Includes nested Parse.Objects for the provided key. You can use dot\r\n     * notation to specify which fields in the included object are also fetched.\r\n     *\r\n     * @param {string | Array<string | Array<string>>} keys The name(s) of the key(s) to include.\r\n     * @param {object} options\r\n     * Valid options are:<ul>\r\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\r\n     *     be used for this request.\r\n     *   <li>sessionToken: A valid session token, used for making a request on\r\n     *       behalf of a specific user.\r\n     * </ul>\r\n     * @returns {Promise} A promise that is fulfilled when the fetch\r\n     *     completes.\r\n     */\n\n  }, {\n    key: \"fetchWithInclude\",\n    value: function (keys\n    /*: String | Array<string | Array<string>>*/\n    , options\n    /*: RequestOptions*/\n    )\n    /*: Promise*/\n    {\n      options = options || {};\n      options.include = keys;\n      return this.fetch(options);\n    }\n    /**\r\n     * Saves this object to the server at some unspecified time in the future,\r\n     * even if Parse is currently inaccessible.\r\n     *\r\n     * Use this when you may not have a solid network connection, and don't need to know when the save completes.\r\n     * If there is some problem with the object such that it can't be saved, it will be silently discarded.\r\n     *\r\n     * Objects saved with this method will be stored locally in an on-disk cache until they can be delivered to Parse.\r\n     * They will be sent immediately if possible. Otherwise, they will be sent the next time a network connection is\r\n     * available. Objects saved this way will persist even after the app is closed, in which case they will be sent the\r\n     * next time the app is opened.\r\n     *\r\n     * @param {object} [options]\r\n     * Used to pass option parameters to method if arg1 and arg2 were both passed as strings.\r\n     * Valid options are:\r\n     * <ul>\r\n     * <li>sessionToken: A valid session token, used for making a request on\r\n     * behalf of a specific user.\r\n     * <li>cascadeSave: If `false`, nested objects will not be saved (default is `true`).\r\n     * <li>context: A dictionary that is accessible in Cloud Code `beforeSave` and `afterSave` triggers.\r\n     * </ul>\r\n     * @returns {Promise} A promise that is fulfilled when the save\r\n     * completes.\r\n     */\n\n  }, {\n    key: \"saveEventually\",\n    value: function () {\n      var _saveEventually = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee2(options\n      /*: SaveOptions*/\n      ) {\n        return _regenerator.default.wrap(function (_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.prev = 0;\n                _context4.next = 3;\n                return this.save(null, options);\n\n              case 3:\n                _context4.next = 11;\n                break;\n\n              case 5:\n                _context4.prev = 5;\n                _context4.t0 = _context4[\"catch\"](0);\n\n                if (!(_context4.t0.message === 'XMLHttpRequest failed: \"Unable to connect to the Parse API\"')) {\n                  _context4.next = 11;\n                  break;\n                }\n\n                _context4.next = 10;\n                return _EventuallyQueue.default.save(this, options);\n\n              case 10:\n                _EventuallyQueue.default.poll();\n\n              case 11:\n                return _context4.abrupt(\"return\", this);\n\n              case 12:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee2, this, [[0, 5]]);\n      }));\n\n      return function () {\n        return _saveEventually.apply(this, arguments);\n      };\n    }()\n    /**\r\n     * Set a hash of model attributes, and save the model to the server.\r\n     * updatedAt will be updated when the request returns.\r\n     * You can either call it as:<pre>\r\n     * object.save();</pre>\r\n     * or<pre>\r\n     * object.save(attrs);</pre>\r\n     * or<pre>\r\n     * object.save(null, options);</pre>\r\n     * or<pre>\r\n     * object.save(attrs, options);</pre>\r\n     * or<pre>\r\n     * object.save(key, value);</pre>\r\n     * or<pre>\r\n     * object.save(key, value, options);</pre>\r\n     *\r\n     * Example 1: <pre>\r\n     * gameTurn.save({\r\n     * player: \"Jake Cutter\",\r\n     * diceRoll: 2\r\n     * }).then(function(gameTurnAgain) {\r\n     * // The save was successful.\r\n     * }, function(error) {\r\n     * // The save failed.  Error is an instance of Parse.Error.\r\n     * });</pre>\r\n     *\r\n     * Example 2: <pre>\r\n     * gameTurn.save(\"player\", \"Jake Cutter\");</pre>\r\n     *\r\n     * @param {string | object | null} [arg1]\r\n     * Valid options are:<ul>\r\n     * <li>`Object` - Key/value pairs to update on the object.</li>\r\n     * <li>`String` Key - Key of attribute to update (requires arg2 to also be string)</li>\r\n     * <li>`null` - Passing null for arg1 allows you to save the object with options passed in arg2.</li>\r\n     * </ul>\r\n     * @param {string | object} [arg2]\r\n     * <ul>\r\n     * <li>`String` Value - If arg1 was passed as a key, arg2 is the value that should be set on that key.</li>\r\n     * <li>`Object` Options - Valid options are:\r\n     * <ul>\r\n     * <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\r\n     * be used for this request.\r\n     * <li>sessionToken: A valid session token, used for making a request on\r\n     * behalf of a specific user.\r\n     * <li>cascadeSave: If `false`, nested objects will not be saved (default is `true`).\r\n     * <li>context: A dictionary that is accessible in Cloud Code `beforeSave` and `afterSave` triggers.\r\n     * </ul>\r\n     * </li>\r\n     * </ul>\r\n     * @param {object} [arg3]\r\n     * Used to pass option parameters to method if arg1 and arg2 were both passed as strings.\r\n     * Valid options are:\r\n     * <ul>\r\n     * <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\r\n     * be used for this request.\r\n     * <li>sessionToken: A valid session token, used for making a request on\r\n     * behalf of a specific user.\r\n     * <li>cascadeSave: If `false`, nested objects will not be saved (default is `true`).\r\n     * <li>context: A dictionary that is accessible in Cloud Code `beforeSave` and `afterSave` triggers.\r\n     * </ul>\r\n     * @returns {Promise} A promise that is fulfilled when the save\r\n     * completes.\r\n     */\n\n  }, {\n    key: \"save\",\n    value: function (arg1\n    /*: ?string | { [attr: string]: mixed }*/\n    , arg2\n    /*: SaveOptions | mixed*/\n    , arg3\n    /*:: ?: SaveOptions*/\n    )\n    /*: Promise*/\n    {\n      var _this = this;\n\n      var attrs;\n      var options;\n\n      if ((0, _typeof2.default)(arg1) === 'object' || typeof arg1 === 'undefined') {\n        attrs = arg1;\n\n        if ((0, _typeof2.default)(arg2) === 'object') {\n          options = arg2;\n        }\n      } else {\n        attrs = {};\n        attrs[arg1] = arg2;\n        options = arg3;\n      }\n\n      if (attrs) {\n        var validation = this.validate(attrs);\n\n        if (validation) {\n          return _promise.default.reject(validation);\n        }\n\n        this.set(attrs, options);\n      }\n\n      options = options || {};\n      var saveOptions = {};\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        saveOptions.useMasterKey = !!options.useMasterKey;\n      }\n\n      if (options.hasOwnProperty('sessionToken') && typeof options.sessionToken === 'string') {\n        saveOptions.sessionToken = options.sessionToken;\n      }\n\n      if (options.hasOwnProperty('installationId') && typeof options.installationId === 'string') {\n        saveOptions.installationId = options.installationId;\n      }\n\n      if (options.hasOwnProperty('context') && (0, _typeof2.default)(options.context) === 'object') {\n        saveOptions.context = options.context;\n      }\n\n      var controller = _CoreManager.default.getObjectController();\n\n      var unsaved = options.cascadeSave !== false ? (0, _unsavedChildren.default)(this) : null;\n      return controller.save(unsaved, saveOptions).then(function () {\n        return controller.save(_this, saveOptions);\n      });\n    }\n    /**\r\n     * Deletes this object from the server at some unspecified time in the future,\r\n     * even if Parse is currently inaccessible.\r\n     *\r\n     * Use this when you may not have a solid network connection,\r\n     * and don't need to know when the delete completes. If there is some problem with the object\r\n     * such that it can't be deleted, the request will be silently discarded.\r\n     *\r\n     * Delete instructions made with this method will be stored locally in an on-disk cache until they can be transmitted\r\n     * to Parse. They will be sent immediately if possible. Otherwise, they will be sent the next time a network connection\r\n     * is available. Delete requests will persist even after the app is closed, in which case they will be sent the\r\n     * next time the app is opened.\r\n     *\r\n     * @param {object} [options]\r\n     * Valid options are:<ul>\r\n     *   <li>sessionToken: A valid session token, used for making a request on\r\n     *       behalf of a specific user.\r\n     *   <li>context: A dictionary that is accessible in Cloud Code `beforeDelete` and `afterDelete` triggers.\r\n     * </ul>\r\n     * @returns {Promise} A promise that is fulfilled when the destroy\r\n     *     completes.\r\n     */\n\n  }, {\n    key: \"destroyEventually\",\n    value: function () {\n      var _destroyEventually = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee3(options\n      /*: RequestOptions*/\n      ) {\n        return _regenerator.default.wrap(function (_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.prev = 0;\n                _context5.next = 3;\n                return this.destroy(options);\n\n              case 3:\n                _context5.next = 11;\n                break;\n\n              case 5:\n                _context5.prev = 5;\n                _context5.t0 = _context5[\"catch\"](0);\n\n                if (!(_context5.t0.message === 'XMLHttpRequest failed: \"Unable to connect to the Parse API\"')) {\n                  _context5.next = 11;\n                  break;\n                }\n\n                _context5.next = 10;\n                return _EventuallyQueue.default.destroy(this, options);\n\n              case 10:\n                _EventuallyQueue.default.poll();\n\n              case 11:\n                return _context5.abrupt(\"return\", this);\n\n              case 12:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee3, this, [[0, 5]]);\n      }));\n\n      return function () {\n        return _destroyEventually.apply(this, arguments);\n      };\n    }()\n    /**\r\n     * Destroy this model on the server if it was already persisted.\r\n     *\r\n     * @param {object} options\r\n     * Valid options are:<ul>\r\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\r\n     *     be used for this request.\r\n     *   <li>sessionToken: A valid session token, used for making a request on\r\n     *       behalf of a specific user.\r\n     *   <li>context: A dictionary that is accessible in Cloud Code `beforeDelete` and `afterDelete` triggers.\r\n     * </ul>\r\n     * @returns {Promise} A promise that is fulfilled when the destroy\r\n     *     completes.\r\n     */\n\n  }, {\n    key: \"destroy\",\n    value: function (options\n    /*: RequestOptions*/\n    )\n    /*: Promise*/\n    {\n      options = options || {};\n      var destroyOptions = {};\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        destroyOptions.useMasterKey = options.useMasterKey;\n      }\n\n      if (options.hasOwnProperty('sessionToken')) {\n        destroyOptions.sessionToken = options.sessionToken;\n      }\n\n      if (options.hasOwnProperty('context') && (0, _typeof2.default)(options.context) === 'object') {\n        destroyOptions.context = options.context;\n      }\n\n      if (!this.id) {\n        return _promise.default.resolve();\n      }\n\n      return _CoreManager.default.getObjectController().destroy(this, destroyOptions);\n    }\n    /**\r\n     * Asynchronously stores the object and every object it points to in the local datastore,\r\n     * recursively, using a default pin name: _default.\r\n     *\r\n     * If those other objects have not been fetched from Parse, they will not be stored.\r\n     * However, if they have changed data, all the changes will be retained.\r\n     *\r\n     * <pre>\r\n     * await object.pin();\r\n     * </pre>\r\n     *\r\n     * To retrieve object:\r\n     * <code>query.fromLocalDatastore()</code> or <code>query.fromPin()</code>\r\n     *\r\n     * @returns {Promise} A promise that is fulfilled when the pin completes.\r\n     */\n\n  }, {\n    key: \"pin\",\n    value: function ()\n    /*: Promise<void>*/\n    {\n      return ParseObject.pinAllWithName(_LocalDatastoreUtils.DEFAULT_PIN, [this]);\n    }\n    /**\r\n     * Asynchronously removes the object and every object it points to in the local datastore,\r\n     * recursively, using a default pin name: _default.\r\n     *\r\n     * <pre>\r\n     * await object.unPin();\r\n     * </pre>\r\n     *\r\n     * @returns {Promise} A promise that is fulfilled when the unPin completes.\r\n     */\n\n  }, {\n    key: \"unPin\",\n    value: function ()\n    /*: Promise<void>*/\n    {\n      return ParseObject.unPinAllWithName(_LocalDatastoreUtils.DEFAULT_PIN, [this]);\n    }\n    /**\r\n     * Asynchronously returns if the object is pinned\r\n     *\r\n     * <pre>\r\n     * const isPinned = await object.isPinned();\r\n     * </pre>\r\n     *\r\n     * @returns {Promise<boolean>} A boolean promise that is fulfilled if object is pinned.\r\n     */\n\n  }, {\n    key: \"isPinned\",\n    value: function () {\n      var _isPinned = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee4() {\n        var localDatastore, objectKey, pin;\n        return _regenerator.default.wrap(function (_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                localDatastore = _CoreManager.default.getLocalDatastore();\n\n                if (localDatastore.isEnabled) {\n                  _context6.next = 3;\n                  break;\n                }\n\n                return _context6.abrupt(\"return\", _promise.default.reject('Parse.enableLocalDatastore() must be called first'));\n\n              case 3:\n                objectKey = localDatastore.getKeyForObject(this);\n                _context6.next = 6;\n                return localDatastore.fromPinWithName(objectKey);\n\n              case 6:\n                pin = _context6.sent;\n                return _context6.abrupt(\"return\", pin.length > 0);\n\n              case 8:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      return function () {\n        return _isPinned.apply(this, arguments);\n      };\n    }()\n    /**\r\n     * Asynchronously stores the objects and every object they point to in the local datastore, recursively.\r\n     *\r\n     * If those other objects have not been fetched from Parse, they will not be stored.\r\n     * However, if they have changed data, all the changes will be retained.\r\n     *\r\n     * <pre>\r\n     * await object.pinWithName(name);\r\n     * </pre>\r\n     *\r\n     * To retrieve object:\r\n     * <code>query.fromLocalDatastore()</code> or <code>query.fromPinWithName(name)</code>\r\n     *\r\n     * @param {string} name Name of Pin.\r\n     * @returns {Promise} A promise that is fulfilled when the pin completes.\r\n     */\n\n  }, {\n    key: \"pinWithName\",\n    value: function (name\n    /*: string*/\n    )\n    /*: Promise<void>*/\n    {\n      return ParseObject.pinAllWithName(name, [this]);\n    }\n    /**\r\n     * Asynchronously removes the object and every object it points to in the local datastore, recursively.\r\n     *\r\n     * <pre>\r\n     * await object.unPinWithName(name);\r\n     * </pre>\r\n     *\r\n     * @param {string} name Name of Pin.\r\n     * @returns {Promise} A promise that is fulfilled when the unPin completes.\r\n     */\n\n  }, {\n    key: \"unPinWithName\",\n    value: function (name\n    /*: string*/\n    )\n    /*: Promise<void>*/\n    {\n      return ParseObject.unPinAllWithName(name, [this]);\n    }\n    /**\r\n     * Asynchronously loads data from the local datastore into this object.\r\n     *\r\n     * <pre>\r\n     * await object.fetchFromLocalDatastore();\r\n     * </pre>\r\n     *\r\n     * You can create an unfetched pointer with <code>Parse.Object.createWithoutData()</code>\r\n     * and then call <code>fetchFromLocalDatastore()</code> on it.\r\n     *\r\n     * @returns {Promise} A promise that is fulfilled when the fetch completes.\r\n     */\n\n  }, {\n    key: \"fetchFromLocalDatastore\",\n    value: function () {\n      var _fetchFromLocalDatastore = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee5() {\n        var localDatastore, objectKey, pinned, result;\n        return _regenerator.default.wrap(function (_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                localDatastore = _CoreManager.default.getLocalDatastore();\n\n                if (localDatastore.isEnabled) {\n                  _context7.next = 3;\n                  break;\n                }\n\n                throw new Error('Parse.enableLocalDatastore() must be called first');\n\n              case 3:\n                objectKey = localDatastore.getKeyForObject(this);\n                _context7.next = 6;\n                return localDatastore._serializeObject(objectKey);\n\n              case 6:\n                pinned = _context7.sent;\n\n                if (pinned) {\n                  _context7.next = 9;\n                  break;\n                }\n\n                throw new Error('Cannot fetch an unsaved ParseObject');\n\n              case 9:\n                result = ParseObject.fromJSON(pinned);\n\n                this._finishFetch(result.toJSON());\n\n                return _context7.abrupt(\"return\", this);\n\n              case 12:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      return function () {\n        return _fetchFromLocalDatastore.apply(this, arguments);\n      };\n    }()\n    /** Static methods **/\n\n  }], [{\n    key: \"_getClassMap\",\n    value: function () {\n      return classMap;\n    }\n  }, {\n    key: \"_clearAllState\",\n    value: function () {\n      var stateController = _CoreManager.default.getObjectStateController();\n\n      stateController.clearAllState();\n    }\n    /**\r\n     * Fetches the given list of Parse.Object.\r\n     * If any error is encountered, stops and calls the error handler.\r\n     *\r\n     * <pre>\r\n     *   Parse.Object.fetchAll([object1, object2, ...])\r\n     *    .then((list) => {\r\n     *      // All the objects were fetched.\r\n     *    }, (error) => {\r\n     *      // An error occurred while fetching one of the objects.\r\n     *    });\r\n     * </pre>\r\n     *\r\n     * @param {Array} list A list of <code>Parse.Object</code>.\r\n     * @param {object} options\r\n     * Valid options are:<ul>\r\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\r\n     *     be used for this request.\r\n     *   <li>sessionToken: A valid session token, used for making a request on\r\n     *       behalf of a specific user.\r\n     *   <li>include: The name(s) of the key(s) to include. Can be a string, an array of strings,\r\n     *       or an array of array of strings.\r\n     * </ul>\r\n     * @static\r\n     * @returns {Parse.Object[]}\r\n     */\n\n  }, {\n    key: \"fetchAll\",\n    value: function (list\n    /*: Array<ParseObject>*/\n    ) {\n      var options\n      /*: RequestOptions*/\n      = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var queryOptions = {};\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        queryOptions.useMasterKey = options.useMasterKey;\n      }\n\n      if (options.hasOwnProperty('sessionToken')) {\n        queryOptions.sessionToken = options.sessionToken;\n      }\n\n      if (options.hasOwnProperty('include')) {\n        queryOptions.include = ParseObject.handleIncludeOptions(options);\n      }\n\n      return _CoreManager.default.getObjectController().fetch(list, true, queryOptions);\n    }\n    /**\r\n     * Fetches the given list of Parse.Object.\r\n     *\r\n     * Includes nested Parse.Objects for the provided key. You can use dot\r\n     * notation to specify which fields in the included object are also fetched.\r\n     *\r\n     * If any error is encountered, stops and calls the error handler.\r\n     *\r\n     * <pre>\r\n     *   Parse.Object.fetchAllWithInclude([object1, object2, ...], [pointer1, pointer2, ...])\r\n     *    .then((list) => {\r\n     *      // All the objects were fetched.\r\n     *    }, (error) => {\r\n     *      // An error occurred while fetching one of the objects.\r\n     *    });\r\n     * </pre>\r\n     *\r\n     * @param {Array} list A list of <code>Parse.Object</code>.\r\n     * @param {string | Array<string | Array<string>>} keys The name(s) of the key(s) to include.\r\n     * @param {object} options\r\n     * Valid options are:<ul>\r\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\r\n     *     be used for this request.\r\n     *   <li>sessionToken: A valid session token, used for making a request on\r\n     *       behalf of a specific user.\r\n     * </ul>\r\n     * @static\r\n     * @returns {Parse.Object[]}\r\n     */\n\n  }, {\n    key: \"fetchAllWithInclude\",\n    value: function (list\n    /*: Array<ParseObject>*/\n    , keys\n    /*: String | Array<string | Array<string>>*/\n    , options\n    /*: RequestOptions*/\n    ) {\n      options = options || {};\n      options.include = keys;\n      return ParseObject.fetchAll(list, options);\n    }\n    /**\r\n     * Fetches the given list of Parse.Object if needed.\r\n     * If any error is encountered, stops and calls the error handler.\r\n     *\r\n     * Includes nested Parse.Objects for the provided key. You can use dot\r\n     * notation to specify which fields in the included object are also fetched.\r\n     *\r\n     * If any error is encountered, stops and calls the error handler.\r\n     *\r\n     * <pre>\r\n     *   Parse.Object.fetchAllIfNeededWithInclude([object1, object2, ...], [pointer1, pointer2, ...])\r\n     *    .then((list) => {\r\n     *      // All the objects were fetched.\r\n     *    }, (error) => {\r\n     *      // An error occurred while fetching one of the objects.\r\n     *    });\r\n     * </pre>\r\n     *\r\n     * @param {Array} list A list of <code>Parse.Object</code>.\r\n     * @param {string | Array<string | Array<string>>} keys The name(s) of the key(s) to include.\r\n     * @param {object} options\r\n     * Valid options are:<ul>\r\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\r\n     *     be used for this request.\r\n     *   <li>sessionToken: A valid session token, used for making a request on\r\n     *       behalf of a specific user.\r\n     * </ul>\r\n     * @static\r\n     * @returns {Parse.Object[]}\r\n     */\n\n  }, {\n    key: \"fetchAllIfNeededWithInclude\",\n    value: function (list\n    /*: Array<ParseObject>*/\n    , keys\n    /*: String | Array<string | Array<string>>*/\n    , options\n    /*: RequestOptions*/\n    ) {\n      options = options || {};\n      options.include = keys;\n      return ParseObject.fetchAllIfNeeded(list, options);\n    }\n    /**\r\n     * Fetches the given list of Parse.Object if needed.\r\n     * If any error is encountered, stops and calls the error handler.\r\n     *\r\n     * <pre>\r\n     *   Parse.Object.fetchAllIfNeeded([object1, ...])\r\n     *    .then((list) => {\r\n     *      // Objects were fetched and updated.\r\n     *    }, (error) => {\r\n     *      // An error occurred while fetching one of the objects.\r\n     *    });\r\n     * </pre>\r\n     *\r\n     * @param {Array} list A list of <code>Parse.Object</code>.\r\n     * @param {object} options\r\n     * @static\r\n     * @returns {Parse.Object[]}\r\n     */\n\n  }, {\n    key: \"fetchAllIfNeeded\",\n    value: function (list\n    /*: Array<ParseObject>*/\n    , options) {\n      options = options || {};\n      var queryOptions = {};\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        queryOptions.useMasterKey = options.useMasterKey;\n      }\n\n      if (options.hasOwnProperty('sessionToken')) {\n        queryOptions.sessionToken = options.sessionToken;\n      }\n\n      if (options.hasOwnProperty('include')) {\n        queryOptions.include = ParseObject.handleIncludeOptions(options);\n      }\n\n      return _CoreManager.default.getObjectController().fetch(list, false, queryOptions);\n    }\n  }, {\n    key: \"handleIncludeOptions\",\n    value: function (options) {\n      var include = [];\n\n      if ((0, _isArray.default)(options.include)) {\n        var _context8;\n\n        (0, _forEach.default)(_context8 = options.include).call(_context8, function (key) {\n          if ((0, _isArray.default)(key)) {\n            include = (0, _concat.default)(include).call(include, key);\n          } else {\n            include.push(key);\n          }\n        });\n      } else {\n        include.push(options.include);\n      }\n\n      return include;\n    }\n    /**\r\n     * Destroy the given list of models on the server if it was already persisted.\r\n     *\r\n     * <p>Unlike saveAll, if an error occurs while deleting an individual model,\r\n     * this method will continue trying to delete the rest of the models if\r\n     * possible, except in the case of a fatal error like a connection error.\r\n     *\r\n     * <p>In particular, the Parse.Error object returned in the case of error may\r\n     * be one of two types:\r\n     *\r\n     * <ul>\r\n     * <li>A Parse.Error.AGGREGATE_ERROR. This object's \"errors\" property is an\r\n     * array of other Parse.Error objects. Each error object in this array\r\n     * has an \"object\" property that references the object that could not be\r\n     * deleted (for instance, because that object could not be found).</li>\r\n     * <li>A non-aggregate Parse.Error. This indicates a serious error that\r\n     * caused the delete operation to be aborted partway through (for\r\n     * instance, a connection failure in the middle of the delete).</li>\r\n     * </ul>\r\n     *\r\n     * <pre>\r\n     * Parse.Object.destroyAll([object1, object2, ...])\r\n     * .then((list) => {\r\n     * // All the objects were deleted.\r\n     * }, (error) => {\r\n     * // An error occurred while deleting one or more of the objects.\r\n     * // If this is an aggregate error, then we can inspect each error\r\n     * // object individually to determine the reason why a particular\r\n     * // object was not deleted.\r\n     * if (error.code === Parse.Error.AGGREGATE_ERROR) {\r\n     * for (var i = 0; i < error.errors.length; i++) {\r\n     * console.log(\"Couldn't delete \" + error.errors[i].object.id +\r\n     * \"due to \" + error.errors[i].message);\r\n     * }\r\n     * } else {\r\n     * console.log(\"Delete aborted because of \" + error.message);\r\n     * }\r\n     * });\r\n     * </pre>\r\n     *\r\n     * @param {Array} list A list of <code>Parse.Object</code>.\r\n     * @param {object} options\r\n     * @static\r\n     * @returns {Promise} A promise that is fulfilled when the destroyAll\r\n     * completes.\r\n     */\n\n  }, {\n    key: \"destroyAll\",\n    value: function (list\n    /*: Array<ParseObject>*/\n    ) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var destroyOptions = {};\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        destroyOptions.useMasterKey = options.useMasterKey;\n      }\n\n      if (options.hasOwnProperty('sessionToken')) {\n        destroyOptions.sessionToken = options.sessionToken;\n      }\n\n      if (options.hasOwnProperty('batchSize') && typeof options.batchSize === 'number') {\n        destroyOptions.batchSize = options.batchSize;\n      }\n\n      if (options.hasOwnProperty('context') && (0, _typeof2.default)(options.context) === 'object') {\n        destroyOptions.context = options.context;\n      }\n\n      return _CoreManager.default.getObjectController().destroy(list, destroyOptions);\n    }\n    /**\r\n     * Saves the given list of Parse.Object.\r\n     * If any error is encountered, stops and calls the error handler.\r\n     *\r\n     * <pre>\r\n     * Parse.Object.saveAll([object1, object2, ...])\r\n     * .then((list) => {\r\n     * // All the objects were saved.\r\n     * }, (error) => {\r\n     * // An error occurred while saving one of the objects.\r\n     * });\r\n     * </pre>\r\n     *\r\n     * @param {Array} list A list of <code>Parse.Object</code>.\r\n     * @param {object} options\r\n     * @static\r\n     * @returns {Parse.Object[]}\r\n     */\n\n  }, {\n    key: \"saveAll\",\n    value: function (list\n    /*: Array<ParseObject>*/\n    ) {\n      var options\n      /*: RequestOptions*/\n      = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var saveOptions = {};\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        saveOptions.useMasterKey = options.useMasterKey;\n      }\n\n      if (options.hasOwnProperty('sessionToken')) {\n        saveOptions.sessionToken = options.sessionToken;\n      }\n\n      if (options.hasOwnProperty('batchSize') && typeof options.batchSize === 'number') {\n        saveOptions.batchSize = options.batchSize;\n      }\n\n      if (options.hasOwnProperty('context') && (0, _typeof2.default)(options.context) === 'object') {\n        saveOptions.context = options.context;\n      }\n\n      return _CoreManager.default.getObjectController().save(list, saveOptions);\n    }\n    /**\r\n     * Creates a reference to a subclass of Parse.Object with the given id. This\r\n     * does not exist on Parse.Object, only on subclasses.\r\n     *\r\n     * <p>A shortcut for: <pre>\r\n     *  var Foo = Parse.Object.extend(\"Foo\");\r\n     *  var pointerToFoo = new Foo();\r\n     *  pointerToFoo.id = \"myObjectId\";\r\n     * </pre>\r\n     *\r\n     * @param {string} id The ID of the object to create a reference to.\r\n     * @static\r\n     * @returns {Parse.Object} A Parse.Object reference.\r\n     */\n\n  }, {\n    key: \"createWithoutData\",\n    value: function (id\n    /*: string*/\n    ) {\n      var obj = new this();\n      obj.id = id;\n      return obj;\n    }\n    /**\r\n     * Creates a new instance of a Parse Object from a JSON representation.\r\n     *\r\n     * @param {object} json The JSON map of the Object's data\r\n     * @param {boolean} override In single instance mode, all old server data\r\n     *   is overwritten if this is set to true\r\n     * @param {boolean} dirty Whether the Parse.Object should set JSON keys to dirty\r\n     * @static\r\n     * @returns {Parse.Object} A Parse.Object reference\r\n     */\n\n  }, {\n    key: \"fromJSON\",\n    value: function (json\n    /*: any*/\n    , override\n    /*:: ?: boolean*/\n    , dirty\n    /*:: ?: boolean*/\n    ) {\n      if (!json.className) {\n        throw new Error('Cannot create an object without a className');\n      }\n\n      var constructor = classMap[json.className];\n      var o = constructor ? new constructor(json.className) : new ParseObject(json.className);\n      var otherAttributes = {};\n\n      for (var _attr12 in json) {\n        if (_attr12 !== 'className' && _attr12 !== '__type') {\n          otherAttributes[_attr12] = json[_attr12];\n\n          if (dirty) {\n            o.set(_attr12, json[_attr12]);\n          }\n        }\n      }\n\n      if (override) {\n        // id needs to be set before clearServerData can work\n        if (otherAttributes.objectId) {\n          o.id = otherAttributes.objectId;\n        }\n\n        var preserved = null;\n\n        if (typeof o._preserveFieldsOnFetch === 'function') {\n          preserved = o._preserveFieldsOnFetch();\n        }\n\n        o._clearServerData();\n\n        if (preserved) {\n          o._finishFetch(preserved);\n        }\n      }\n\n      o._finishFetch(otherAttributes);\n\n      if (json.objectId) {\n        o._setExisted(true);\n      }\n\n      return o;\n    }\n    /**\r\n     * Registers a subclass of Parse.Object with a specific class name.\r\n     * When objects of that class are retrieved from a query, they will be\r\n     * instantiated with this subclass.\r\n     * This is only necessary when using ES6 subclassing.\r\n     *\r\n     * @param {string} className The class name of the subclass\r\n     * @param {Function} constructor The subclass\r\n     */\n\n  }, {\n    key: \"registerSubclass\",\n    value: function (className\n    /*: string*/\n    , constructor\n    /*: any*/\n    ) {\n      if (typeof className !== 'string') {\n        throw new TypeError('The first argument must be a valid class name.');\n      }\n\n      if (typeof constructor === 'undefined') {\n        throw new TypeError('You must supply a subclass constructor.');\n      }\n\n      if (typeof constructor !== 'function') {\n        throw new TypeError('You must register the subclass constructor. ' + 'Did you attempt to register an instance of the subclass?');\n      }\n\n      classMap[className] = constructor;\n\n      if (!constructor.className) {\n        constructor.className = className;\n      }\n    }\n    /**\r\n     * Unegisters a subclass of Parse.Object with a specific class name.\r\n     *\r\n     * @param {string} className The class name of the subclass\r\n     */\n\n  }, {\n    key: \"unregisterSubclass\",\n    value: function (className\n    /*: string*/\n    ) {\n      if (typeof className !== 'string') {\n        throw new TypeError('The first argument must be a valid class name.');\n      }\n\n      delete classMap[className];\n    }\n    /**\r\n     * Creates a new subclass of Parse.Object for the given Parse class name.\r\n     *\r\n     * <p>Every extension of a Parse class will inherit from the most recent\r\n     * previous extension of that class. When a Parse.Object is automatically\r\n     * created by parsing JSON, it will use the most recent extension of that\r\n     * class.</p>\r\n     *\r\n     * <p>You should call either:<pre>\r\n     *     var MyClass = Parse.Object.extend(\"MyClass\", {\r\n     *         <i>Instance methods</i>,\r\n     *         initialize: function(attrs, options) {\r\n     *             this.someInstanceProperty = [],\r\n     *             <i>Other instance properties</i>\r\n     *         }\r\n     *     }, {\r\n     *         <i>Class properties</i>\r\n     *     });</pre>\r\n     * or, for Backbone compatibility:<pre>\r\n     *     var MyClass = Parse.Object.extend({\r\n     *         className: \"MyClass\",\r\n     *         <i>Instance methods</i>,\r\n     *         initialize: function(attrs, options) {\r\n     *             this.someInstanceProperty = [],\r\n     *             <i>Other instance properties</i>\r\n     *         }\r\n     *     }, {\r\n     *         <i>Class properties</i>\r\n     *     });</pre></p>\r\n     *\r\n     * @param {string} className The name of the Parse class backing this model.\r\n     * @param {object} protoProps Instance properties to add to instances of the\r\n     *     class returned from this method.\r\n     * @param {object} classProps Class properties to add the class returned from\r\n     *     this method.\r\n     * @returns {Parse.Object} A new subclass of Parse.Object.\r\n     */\n\n  }, {\n    key: \"extend\",\n    value: function (className\n    /*: any*/\n    , protoProps\n    /*: any*/\n    , classProps\n    /*: any*/\n    ) {\n      if (typeof className !== 'string') {\n        if (className && typeof className.className === 'string') {\n          return ParseObject.extend(className.className, className, protoProps);\n        } else {\n          throw new Error(\"Parse.Object.extend's first argument should be the className.\");\n        }\n      }\n\n      var adjustedClassName = className;\n\n      if (adjustedClassName === 'User' && _CoreManager.default.get('PERFORM_USER_REWRITE')) {\n        adjustedClassName = '_User';\n      }\n\n      var parentProto = ParseObject.prototype;\n\n      if (this.hasOwnProperty('__super__') && this.__super__) {\n        parentProto = this.prototype;\n      } else if (classMap[adjustedClassName]) {\n        parentProto = classMap[adjustedClassName].prototype;\n      }\n\n      var ParseObjectSubclass = function (attributes, options) {\n        this.className = adjustedClassName;\n        this._objCount = objectCount++; // Enable legacy initializers\n\n        if (typeof this.initialize === 'function') {\n          this.initialize.apply(this, arguments);\n        }\n\n        if (attributes && (0, _typeof2.default)(attributes) === 'object') {\n          if (!this.set(attributes || {}, options)) {\n            throw new Error(\"Can't create an invalid Parse Object\");\n          }\n        }\n      };\n\n      ParseObjectSubclass.className = adjustedClassName;\n      ParseObjectSubclass.__super__ = parentProto;\n      ParseObjectSubclass.prototype = (0, _create.default)(parentProto, {\n        constructor: {\n          value: ParseObjectSubclass,\n          enumerable: false,\n          writable: true,\n          configurable: true\n        }\n      });\n\n      if (protoProps) {\n        for (var prop in protoProps) {\n          if (prop !== 'className') {\n            (0, _defineProperty2.default)(ParseObjectSubclass.prototype, prop, {\n              value: protoProps[prop],\n              enumerable: false,\n              writable: true,\n              configurable: true\n            });\n          }\n        }\n      }\n\n      if (classProps) {\n        for (var _prop in classProps) {\n          if (_prop !== 'className') {\n            (0, _defineProperty2.default)(ParseObjectSubclass, _prop, {\n              value: classProps[_prop],\n              enumerable: false,\n              writable: true,\n              configurable: true\n            });\n          }\n        }\n      }\n\n      ParseObjectSubclass.extend = function (name, protoProps, classProps) {\n        if (typeof name === 'string') {\n          return ParseObject.extend.call(ParseObjectSubclass, name, protoProps, classProps);\n        }\n\n        return ParseObject.extend.call(ParseObjectSubclass, adjustedClassName, name, protoProps);\n      };\n\n      ParseObjectSubclass.createWithoutData = ParseObject.createWithoutData;\n      classMap[adjustedClassName] = ParseObjectSubclass;\n      return ParseObjectSubclass;\n    }\n    /**\r\n     * Enable single instance objects, where any local objects with the same Id\r\n     * share the same attributes, and stay synchronized with each other.\r\n     * This is disabled by default in server environments, since it can lead to\r\n     * security issues.\r\n     *\r\n     * @static\r\n     */\n\n  }, {\n    key: \"enableSingleInstance\",\n    value: function () {\n      singleInstance = true;\n\n      _CoreManager.default.setObjectStateController(SingleInstanceStateController);\n    }\n    /**\r\n     * Disable single instance objects, where any local objects with the same Id\r\n     * share the same attributes, and stay synchronized with each other.\r\n     * When disabled, you can have two instances of the same object in memory\r\n     * without them sharing attributes.\r\n     *\r\n     * @static\r\n     */\n\n  }, {\n    key: \"disableSingleInstance\",\n    value: function () {\n      singleInstance = false;\n\n      _CoreManager.default.setObjectStateController(UniqueInstanceStateController);\n    }\n    /**\r\n     * Asynchronously stores the objects and every object they point to in the local datastore,\r\n     * recursively, using a default pin name: _default.\r\n     *\r\n     * If those other objects have not been fetched from Parse, they will not be stored.\r\n     * However, if they have changed data, all the changes will be retained.\r\n     *\r\n     * <pre>\r\n     * await Parse.Object.pinAll([...]);\r\n     * </pre>\r\n     *\r\n     * To retrieve object:\r\n     * <code>query.fromLocalDatastore()</code> or <code>query.fromPin()</code>\r\n     *\r\n     * @param {Array} objects A list of <code>Parse.Object</code>.\r\n     * @returns {Promise} A promise that is fulfilled when the pin completes.\r\n     * @static\r\n     */\n\n  }, {\n    key: \"pinAll\",\n    value: function (objects\n    /*: Array<ParseObject>*/\n    )\n    /*: Promise<void>*/\n    {\n      var localDatastore = _CoreManager.default.getLocalDatastore();\n\n      if (!localDatastore.isEnabled) {\n        return _promise.default.reject('Parse.enableLocalDatastore() must be called first');\n      }\n\n      return ParseObject.pinAllWithName(_LocalDatastoreUtils.DEFAULT_PIN, objects);\n    }\n    /**\r\n     * Asynchronously stores the objects and every object they point to in the local datastore, recursively.\r\n     *\r\n     * If those other objects have not been fetched from Parse, they will not be stored.\r\n     * However, if they have changed data, all the changes will be retained.\r\n     *\r\n     * <pre>\r\n     * await Parse.Object.pinAllWithName(name, [obj1, obj2, ...]);\r\n     * </pre>\r\n     *\r\n     * To retrieve object:\r\n     * <code>query.fromLocalDatastore()</code> or <code>query.fromPinWithName(name)</code>\r\n     *\r\n     * @param {string} name Name of Pin.\r\n     * @param {Array} objects A list of <code>Parse.Object</code>.\r\n     * @returns {Promise} A promise that is fulfilled when the pin completes.\r\n     * @static\r\n     */\n\n  }, {\n    key: \"pinAllWithName\",\n    value: function (name\n    /*: string*/\n    , objects\n    /*: Array<ParseObject>*/\n    )\n    /*: Promise<void>*/\n    {\n      var localDatastore = _CoreManager.default.getLocalDatastore();\n\n      if (!localDatastore.isEnabled) {\n        return _promise.default.reject('Parse.enableLocalDatastore() must be called first');\n      }\n\n      return localDatastore._handlePinAllWithName(name, objects);\n    }\n    /**\r\n     * Asynchronously removes the objects and every object they point to in the local datastore,\r\n     * recursively, using a default pin name: _default.\r\n     *\r\n     * <pre>\r\n     * await Parse.Object.unPinAll([...]);\r\n     * </pre>\r\n     *\r\n     * @param {Array} objects A list of <code>Parse.Object</code>.\r\n     * @returns {Promise} A promise that is fulfilled when the unPin completes.\r\n     * @static\r\n     */\n\n  }, {\n    key: \"unPinAll\",\n    value: function (objects\n    /*: Array<ParseObject>*/\n    )\n    /*: Promise<void>*/\n    {\n      var localDatastore = _CoreManager.default.getLocalDatastore();\n\n      if (!localDatastore.isEnabled) {\n        return _promise.default.reject('Parse.enableLocalDatastore() must be called first');\n      }\n\n      return ParseObject.unPinAllWithName(_LocalDatastoreUtils.DEFAULT_PIN, objects);\n    }\n    /**\r\n     * Asynchronously removes the objects and every object they point to in the local datastore, recursively.\r\n     *\r\n     * <pre>\r\n     * await Parse.Object.unPinAllWithName(name, [obj1, obj2, ...]);\r\n     * </pre>\r\n     *\r\n     * @param {string} name Name of Pin.\r\n     * @param {Array} objects A list of <code>Parse.Object</code>.\r\n     * @returns {Promise} A promise that is fulfilled when the unPin completes.\r\n     * @static\r\n     */\n\n  }, {\n    key: \"unPinAllWithName\",\n    value: function (name\n    /*: string*/\n    , objects\n    /*: Array<ParseObject>*/\n    )\n    /*: Promise<void>*/\n    {\n      var localDatastore = _CoreManager.default.getLocalDatastore();\n\n      if (!localDatastore.isEnabled) {\n        return _promise.default.reject('Parse.enableLocalDatastore() must be called first');\n      }\n\n      return localDatastore._handleUnPinAllWithName(name, objects);\n    }\n    /**\r\n     * Asynchronously removes all objects in the local datastore using a default pin name: _default.\r\n     *\r\n     * <pre>\r\n     * await Parse.Object.unPinAllObjects();\r\n     * </pre>\r\n     *\r\n     * @returns {Promise} A promise that is fulfilled when the unPin completes.\r\n     * @static\r\n     */\n\n  }, {\n    key: \"unPinAllObjects\",\n    value: function ()\n    /*: Promise<void>*/\n    {\n      var localDatastore = _CoreManager.default.getLocalDatastore();\n\n      if (!localDatastore.isEnabled) {\n        return _promise.default.reject('Parse.enableLocalDatastore() must be called first');\n      }\n\n      return localDatastore.unPinWithName(_LocalDatastoreUtils.DEFAULT_PIN);\n    }\n    /**\r\n     * Asynchronously removes all objects with the specified pin name.\r\n     * Deletes the pin name also.\r\n     *\r\n     * <pre>\r\n     * await Parse.Object.unPinAllObjectsWithName(name);\r\n     * </pre>\r\n     *\r\n     * @param {string} name Name of Pin.\r\n     * @returns {Promise} A promise that is fulfilled when the unPin completes.\r\n     * @static\r\n     */\n\n  }, {\n    key: \"unPinAllObjectsWithName\",\n    value: function (name\n    /*: string*/\n    )\n    /*: Promise<void>*/\n    {\n      var localDatastore = _CoreManager.default.getLocalDatastore();\n\n      if (!localDatastore.isEnabled) {\n        return _promise.default.reject('Parse.enableLocalDatastore() must be called first');\n      }\n\n      return localDatastore.unPinWithName(_LocalDatastoreUtils.PIN_PREFIX + name);\n    }\n  }]);\n  return ParseObject;\n}();\n\nvar DefaultController = {\n  fetch: function (target\n  /*: ParseObject | Array<ParseObject>*/\n  , forceFetch\n  /*: boolean*/\n  , options\n  /*: RequestOptions*/\n  )\n  /*: Promise<Array<void> | ParseObject>*/\n  {\n    var localDatastore = _CoreManager.default.getLocalDatastore();\n\n    if ((0, _isArray.default)(target)) {\n      if (target.length < 1) {\n        return _promise.default.resolve([]);\n      }\n\n      var objs = [];\n      var ids = [];\n      var className = null;\n      var results = [];\n      var error = null;\n      (0, _forEach.default)(target).call(target, function (el) {\n        if (error) {\n          return;\n        }\n\n        if (!className) {\n          className = el.className;\n        }\n\n        if (className !== el.className) {\n          error = new _ParseError.default(_ParseError.default.INVALID_CLASS_NAME, 'All objects should be of the same class');\n        }\n\n        if (!el.id) {\n          error = new _ParseError.default(_ParseError.default.MISSING_OBJECT_ID, 'All objects must have an ID');\n        }\n\n        if (forceFetch || !el.isDataAvailable()) {\n          ids.push(el.id);\n          objs.push(el);\n        }\n\n        results.push(el);\n      });\n\n      if (error) {\n        return _promise.default.reject(error);\n      }\n\n      var query = new _ParseQuery.default(className);\n      query.containedIn('objectId', ids);\n\n      if (options && options.include) {\n        query.include(options.include);\n      }\n\n      query._limit = ids.length;\n      return (0, _find.default)(query).call(query, options).then( /*#__PURE__*/function () {\n        var _ref = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee6(objects) {\n          var idMap, i, obj, _i, _obj, id, _iterator2, _step2, object;\n\n          return _regenerator.default.wrap(function (_context9) {\n            while (1) {\n              switch (_context9.prev = _context9.next) {\n                case 0:\n                  idMap = {};\n                  (0, _forEach.default)(objects).call(objects, function (o) {\n                    idMap[o.id] = o;\n                  });\n                  i = 0;\n\n                case 3:\n                  if (!(i < objs.length)) {\n                    _context9.next = 11;\n                    break;\n                  }\n\n                  obj = objs[i];\n\n                  if (!(!obj || !obj.id || !idMap[obj.id])) {\n                    _context9.next = 8;\n                    break;\n                  }\n\n                  if (!forceFetch) {\n                    _context9.next = 8;\n                    break;\n                  }\n\n                  return _context9.abrupt(\"return\", _promise.default.reject(new _ParseError.default(_ParseError.default.OBJECT_NOT_FOUND, 'All objects must exist on the server.')));\n\n                case 8:\n                  i++;\n                  _context9.next = 3;\n                  break;\n\n                case 11:\n                  if (!singleInstance) {\n                    // If single instance objects are disabled, we need to replace the\n                    for (_i = 0; _i < results.length; _i++) {\n                      _obj = results[_i];\n\n                      if (_obj && _obj.id && idMap[_obj.id]) {\n                        id = _obj.id;\n\n                        _obj._finishFetch(idMap[id].toJSON());\n\n                        results[_i] = idMap[id];\n                      }\n                    }\n                  }\n\n                  _iterator2 = _createForOfIteratorHelper(results);\n                  _context9.prev = 13;\n\n                  _iterator2.s();\n\n                case 15:\n                  if ((_step2 = _iterator2.n()).done) {\n                    _context9.next = 21;\n                    break;\n                  }\n\n                  object = _step2.value;\n                  _context9.next = 19;\n                  return localDatastore._updateObjectIfPinned(object);\n\n                case 19:\n                  _context9.next = 15;\n                  break;\n\n                case 21:\n                  _context9.next = 26;\n                  break;\n\n                case 23:\n                  _context9.prev = 23;\n                  _context9.t0 = _context9[\"catch\"](13);\n\n                  _iterator2.e(_context9.t0);\n\n                case 26:\n                  _context9.prev = 26;\n\n                  _iterator2.f();\n\n                  return _context9.finish(26);\n\n                case 29:\n                  return _context9.abrupt(\"return\", _promise.default.resolve(results));\n\n                case 30:\n                case \"end\":\n                  return _context9.stop();\n              }\n            }\n          }, _callee6, null, [[13, 23, 26, 29]]);\n        }));\n\n        return function () {\n          return _ref.apply(this, arguments);\n        };\n      }());\n    } else if (target instanceof ParseObject) {\n      if (!target.id) {\n        return _promise.default.reject(new _ParseError.default(_ParseError.default.MISSING_OBJECT_ID, 'Object does not have an ID'));\n      }\n\n      var RESTController = _CoreManager.default.getRESTController();\n\n      var params = {};\n\n      if (options && options.include) {\n        params.include = options.include.join();\n      }\n\n      return RESTController.request('GET', 'classes/' + target.className + '/' + target._getId(), params, options).then( /*#__PURE__*/function () {\n        var _ref2 = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee7(response) {\n          return _regenerator.default.wrap(function (_context10) {\n            while (1) {\n              switch (_context10.prev = _context10.next) {\n                case 0:\n                  target._clearPendingOps();\n\n                  target._clearServerData();\n\n                  target._finishFetch(response);\n\n                  _context10.next = 5;\n                  return localDatastore._updateObjectIfPinned(target);\n\n                case 5:\n                  return _context10.abrupt(\"return\", target);\n\n                case 6:\n                case \"end\":\n                  return _context10.stop();\n              }\n            }\n          }, _callee7);\n        }));\n\n        return function () {\n          return _ref2.apply(this, arguments);\n        };\n      }());\n    }\n\n    return _promise.default.resolve();\n  },\n  destroy: function (target\n  /*: ParseObject | Array<ParseObject>*/\n  , options\n  /*: RequestOptions*/\n  )\n  /*: Promise<Array<void> | ParseObject>*/\n  {\n    return (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee10() {\n      var batchSize, localDatastore, RESTController, batches, deleteCompleted, errors;\n      return _regenerator.default.wrap(function (_context13) {\n        while (1) {\n          switch (_context13.prev = _context13.next) {\n            case 0:\n              batchSize = options && options.batchSize ? options.batchSize : _CoreManager.default.get('REQUEST_BATCH_SIZE');\n              localDatastore = _CoreManager.default.getLocalDatastore();\n              RESTController = _CoreManager.default.getRESTController();\n\n              if (!(0, _isArray.default)(target)) {\n                _context13.next = 15;\n                break;\n              }\n\n              if (!(target.length < 1)) {\n                _context13.next = 6;\n                break;\n              }\n\n              return _context13.abrupt(\"return\", _promise.default.resolve([]));\n\n            case 6:\n              batches = [[]];\n              (0, _forEach.default)(target).call(target, function (obj) {\n                if (!obj.id) {\n                  return;\n                }\n\n                batches[batches.length - 1].push(obj);\n\n                if (batches[batches.length - 1].length >= batchSize) {\n                  batches.push([]);\n                }\n              });\n\n              if (batches[batches.length - 1].length === 0) {\n                // If the last batch is empty, remove it\n                batches.pop();\n              }\n\n              deleteCompleted = _promise.default.resolve();\n              errors = [];\n              (0, _forEach.default)(batches).call(batches, function (batch) {\n                deleteCompleted = deleteCompleted.then(function () {\n                  return RESTController.request('POST', 'batch', {\n                    requests: (0, _map.default)(batch).call(batch, function (obj) {\n                      return {\n                        method: 'DELETE',\n                        path: getServerUrlPath() + 'classes/' + obj.className + '/' + obj._getId(),\n                        body: {}\n                      };\n                    })\n                  }, options).then(function (results) {\n                    for (var i = 0; i < results.length; i++) {\n                      if (results[i] && results[i].hasOwnProperty('error')) {\n                        var err = new _ParseError.default(results[i].error.code, results[i].error.error);\n                        err.object = batch[i];\n                        errors.push(err);\n                      }\n                    }\n                  });\n                });\n              });\n              return _context13.abrupt(\"return\", deleteCompleted.then( /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee8() {\n                var aggregate, _iterator3, _step3, object;\n\n                return _regenerator.default.wrap(function (_context11) {\n                  while (1) {\n                    switch (_context11.prev = _context11.next) {\n                      case 0:\n                        if (!errors.length) {\n                          _context11.next = 4;\n                          break;\n                        }\n\n                        aggregate = new _ParseError.default(_ParseError.default.AGGREGATE_ERROR);\n                        aggregate.errors = errors;\n                        return _context11.abrupt(\"return\", _promise.default.reject(aggregate));\n\n                      case 4:\n                        _iterator3 = _createForOfIteratorHelper(target);\n                        _context11.prev = 5;\n\n                        _iterator3.s();\n\n                      case 7:\n                        if ((_step3 = _iterator3.n()).done) {\n                          _context11.next = 13;\n                          break;\n                        }\n\n                        object = _step3.value;\n                        _context11.next = 11;\n                        return localDatastore._destroyObjectIfPinned(object);\n\n                      case 11:\n                        _context11.next = 7;\n                        break;\n\n                      case 13:\n                        _context11.next = 18;\n                        break;\n\n                      case 15:\n                        _context11.prev = 15;\n                        _context11.t0 = _context11[\"catch\"](5);\n\n                        _iterator3.e(_context11.t0);\n\n                      case 18:\n                        _context11.prev = 18;\n\n                        _iterator3.f();\n\n                        return _context11.finish(18);\n\n                      case 21:\n                        return _context11.abrupt(\"return\", _promise.default.resolve(target));\n\n                      case 22:\n                      case \"end\":\n                        return _context11.stop();\n                    }\n                  }\n                }, _callee8, null, [[5, 15, 18, 21]]);\n              }))));\n\n            case 15:\n              if (!(target instanceof ParseObject)) {\n                _context13.next = 17;\n                break;\n              }\n\n              return _context13.abrupt(\"return\", RESTController.request('DELETE', 'classes/' + target.className + '/' + target._getId(), {}, options).then( /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee9() {\n                return _regenerator.default.wrap(function (_context12) {\n                  while (1) {\n                    switch (_context12.prev = _context12.next) {\n                      case 0:\n                        _context12.next = 2;\n                        return localDatastore._destroyObjectIfPinned(target);\n\n                      case 2:\n                        return _context12.abrupt(\"return\", _promise.default.resolve(target));\n\n                      case 3:\n                      case \"end\":\n                        return _context12.stop();\n                    }\n                  }\n                }, _callee9);\n              }))));\n\n            case 17:\n              return _context13.abrupt(\"return\", _promise.default.resolve(target));\n\n            case 18:\n            case \"end\":\n              return _context13.stop();\n          }\n        }\n      }, _callee10);\n    }))();\n  },\n  save: function (target\n  /*: ParseObject | Array<ParseObject | ParseFile>*/\n  , options\n  /*: RequestOptions*/\n  ) {\n    var batchSize = options && options.batchSize ? options.batchSize : _CoreManager.default.get('REQUEST_BATCH_SIZE');\n\n    var localDatastore = _CoreManager.default.getLocalDatastore();\n\n    var mapIdForPin = {};\n\n    var RESTController = _CoreManager.default.getRESTController();\n\n    var stateController = _CoreManager.default.getObjectStateController();\n\n    var allowCustomObjectId = _CoreManager.default.get('ALLOW_CUSTOM_OBJECT_ID');\n\n    options = options || {};\n    options.returnStatus = options.returnStatus || true;\n\n    if ((0, _isArray.default)(target)) {\n      if (target.length < 1) {\n        return _promise.default.resolve([]);\n      }\n\n      var unsaved = (0, _concat.default)(target).call(target);\n\n      for (var i = 0; i < target.length; i++) {\n        if (target[i] instanceof ParseObject) {\n          unsaved = (0, _concat.default)(unsaved).call(unsaved, (0, _unsavedChildren.default)(target[i], true));\n        }\n      }\n\n      unsaved = (0, _unique.default)(unsaved);\n      var filesSaved\n      /*: Array<ParseFile>*/\n      = [];\n      var pending\n      /*: Array<ParseObject>*/\n      = [];\n      (0, _forEach.default)(unsaved).call(unsaved, function (el) {\n        if (el instanceof _ParseFile.default) {\n          filesSaved.push(el.save(options));\n        } else if (el instanceof ParseObject) {\n          if (allowCustomObjectId && !el.id) {\n            throw new _ParseError.default(_ParseError.default.MISSING_OBJECT_ID, 'objectId must not be empty, null or undefined');\n          }\n\n          pending.push(el);\n        }\n      });\n      return _promise.default.all(filesSaved).then(function () {\n        var objectError = null;\n        return (0, _promiseUtils.continueWhile)(function () {\n          return pending.length > 0;\n        }, function () {\n          var batch = [];\n          var nextPending = [];\n          (0, _forEach.default)(pending).call(pending, function (el) {\n            if (batch.length < batchSize && (0, _canBeSerialized.default)(el)) {\n              batch.push(el);\n            } else {\n              nextPending.push(el);\n            }\n          });\n          pending = nextPending;\n\n          if (batch.length < 1) {\n            return _promise.default.reject(new _ParseError.default(_ParseError.default.OTHER_CAUSE, 'Tried to save a batch with a cycle.'));\n          } // Queue up tasks for each object in the batch.\n          // When every task is ready, the API request will execute\n\n\n          var batchReturned = new _promiseUtils.resolvingPromise();\n          var batchReady = [];\n          var batchTasks = [];\n          (0, _forEach.default)(batch).call(batch, function (obj, index) {\n            var ready = new _promiseUtils.resolvingPromise();\n            batchReady.push(ready);\n            stateController.pushPendingState(obj._getStateIdentifier());\n            batchTasks.push(stateController.enqueueTask(obj._getStateIdentifier(), function () {\n              ready.resolve();\n              return batchReturned.then(function (responses) {\n                if (responses[index].hasOwnProperty('success')) {\n                  var objectId = responses[index].success.objectId;\n                  var status = responses[index]._status;\n                  delete responses[index]._status;\n                  mapIdForPin[objectId] = obj._localId;\n\n                  obj._handleSaveResponse(responses[index].success, status);\n                } else {\n                  if (!objectError && responses[index].hasOwnProperty('error')) {\n                    var serverError = responses[index].error;\n                    objectError = new _ParseError.default(serverError.code, serverError.error); // Cancel the rest of the save\n\n                    pending = [];\n                  }\n\n                  obj._handleSaveError();\n                }\n              });\n            }));\n          });\n          (0, _promiseUtils.when)(batchReady).then(function () {\n            // Kick off the batch request\n            return RESTController.request('POST', 'batch', {\n              requests: (0, _map.default)(batch).call(batch, function (obj) {\n                var params = obj._getSaveParams();\n\n                params.path = getServerUrlPath() + params.path;\n                return params;\n              })\n            }, options);\n          }).then(batchReturned.resolve, function (error) {\n            batchReturned.reject(new _ParseError.default(_ParseError.default.INCORRECT_TYPE, error.message));\n          });\n          return (0, _promiseUtils.when)(batchTasks);\n        }).then( /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee11() {\n          var _iterator4, _step4, object;\n\n          return _regenerator.default.wrap(function (_context14) {\n            while (1) {\n              switch (_context14.prev = _context14.next) {\n                case 0:\n                  if (!objectError) {\n                    _context14.next = 2;\n                    break;\n                  }\n\n                  return _context14.abrupt(\"return\", _promise.default.reject(objectError));\n\n                case 2:\n                  _iterator4 = _createForOfIteratorHelper(target);\n                  _context14.prev = 3;\n\n                  _iterator4.s();\n\n                case 5:\n                  if ((_step4 = _iterator4.n()).done) {\n                    _context14.next = 13;\n                    break;\n                  }\n\n                  object = _step4.value;\n                  _context14.next = 9;\n                  return localDatastore._updateLocalIdForObject(mapIdForPin[object.id], object);\n\n                case 9:\n                  _context14.next = 11;\n                  return localDatastore._updateObjectIfPinned(object);\n\n                case 11:\n                  _context14.next = 5;\n                  break;\n\n                case 13:\n                  _context14.next = 18;\n                  break;\n\n                case 15:\n                  _context14.prev = 15;\n                  _context14.t0 = _context14[\"catch\"](3);\n\n                  _iterator4.e(_context14.t0);\n\n                case 18:\n                  _context14.prev = 18;\n\n                  _iterator4.f();\n\n                  return _context14.finish(18);\n\n                case 21:\n                  return _context14.abrupt(\"return\", _promise.default.resolve(target));\n\n                case 22:\n                case \"end\":\n                  return _context14.stop();\n              }\n            }\n          }, _callee11, null, [[3, 15, 18, 21]]);\n        })));\n      });\n    } else if (target instanceof ParseObject) {\n      if (allowCustomObjectId && !target.id) {\n        throw new _ParseError.default(_ParseError.default.MISSING_OBJECT_ID, 'objectId must not be empty, null or undefined');\n      } // generate _localId in case if cascadeSave=false\n\n\n      target._getId();\n\n      var localId = target._localId; // copying target lets Flow guarantee the pointer isn't modified elsewhere\n\n      var targetCopy = target;\n\n      var task = function () {\n        var params = targetCopy._getSaveParams();\n\n        return RESTController.request(params.method, params.path, params.body, options).then(function (response) {\n          var status = response._status;\n          delete response._status;\n\n          targetCopy._handleSaveResponse(response, status);\n        }, function (error) {\n          targetCopy._handleSaveError();\n\n          return _promise.default.reject(error);\n        });\n      };\n\n      stateController.pushPendingState(target._getStateIdentifier());\n      return stateController.enqueueTask(target._getStateIdentifier(), task).then( /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee12() {\n        return _regenerator.default.wrap(function (_context15) {\n          while (1) {\n            switch (_context15.prev = _context15.next) {\n              case 0:\n                _context15.next = 2;\n                return localDatastore._updateLocalIdForObject(localId, target);\n\n              case 2:\n                _context15.next = 4;\n                return localDatastore._updateObjectIfPinned(target);\n\n              case 4:\n                return _context15.abrupt(\"return\", target);\n\n              case 5:\n              case \"end\":\n                return _context15.stop();\n            }\n          }\n        }, _callee12);\n      })), function (error) {\n        return _promise.default.reject(error);\n      });\n    }\n\n    return _promise.default.resolve();\n  }\n};\n\n_CoreManager.default.setObjectController(DefaultController);\n\nvar _default = ParseObject;\nexports.default = _default;","map":{"version":3,"names":["_interopRequireDefault","require","_typeof3","_WeakMap","_Array$isArray2","_getIteratorMethod","_Symbol","_Array$from","_sliceInstanceProperty","_Object$defineProperty2","_Object$defineProperties","_Object$getOwnPropertyDescriptors","_forEachInstanceProperty2","_Object$getOwnPropertyDescriptor","_filterInstanceProperty","_Object$getOwnPropertySymbols","_Object$keys2","exports","value","default","_map","_find","_defineProperty2","_create","_promise","_isArray","_regenerator","_asyncToGenerator2","_concat","_getPrototypeOf","_includes","_stringify","_forEach","_keys","_freeze","_typeof2","_classCallCheck2","_createClass2","_defineProperty3","_indexOf","_CoreManager","_canBeSerialized","_decode","_encode","_escape2","_EventuallyQueue","_ParseACL","_parseDate","_ParseError","_ParseFile","_promiseUtils","_LocalDatastoreUtils","_ParseOp","_ParseQuery","_ParseRelation","SingleInstanceStateController","_interopRequireWildcard","_unique","UniqueInstanceStateController","_unsavedChildren","_getRequireWildcardCache","nodeInterop","cacheBabelInterop","cacheNodeInterop","obj","__esModule","cache","has","get","newObj","key","Object","prototype","hasOwnProperty","call","desc","set","_createForOfIteratorHelper","o","allowArrayLike","it","_unsupportedIterableToArray","length","i","F","s","n","done","e","_e","f","TypeError","normalCompletion","didErr","err","step","next","_e2","return","minLen","_context18","_arrayLikeToArray","toString","constructor","name","test","arr","len","arr2","Array","ownKeys","object","enumerableOnly","keys","symbols","sym","enumerable","push","apply","_objectSpread","target","arguments","_context16","_context17","source","uuidv4","classMap","objectCount","singleInstance","setObjectStateController","getServerUrlPath","serverUrl","url","replace","substr","ParseObject","className","attributes","options","initialize","toSet","_objCount","_attr","Error","stateController","getObjectStateController","estimateAttributes","_getStateIdentifier","_getServerData","createdAt","updatedAt","id","_localId","localId","_getId","getServerData","serverData","unset","_attr2","undefined","setServerData","getPendingOps","keysToClear","pending","_getPendingOps","latest","objectCache","getObjectCache","dirty","_attr3","val","json","stringified","seen","offline","toJSON","__type","dirtyObjects","_getDirtyObjectAttributes","attr","isDotNotation","field","fieldName","split","SetOp","method","body","_getSaveJSON","path","objectId","initializeState","decoded","_attr4","_ensureParentAndKey","commitServerChanges","existed","state","getState","serverId","oldState","removeState","response","status","changes","popPendingState","RelationOp","applyTo","UnsetOp","_migrateId","_setExisted","mergeFirstPendingState","seenEntry","attrs","_attr5","_attr6","other","pendingOps","_attr7","_attr8","newOps","readonly","readOnlyAttributes","k","Op","__op","opFromJSON","relation","targetClassName","currentAttributes","newValues","_attr9","ignoreValidation","validation","validate","error","last","_attr10","nextOp","mergeWith","setPendingOp","amount","IncrementOp","item","AddOp","items","AddUniqueOp","RemoveOp","clone","copy","a","duplicateState","_exists","mark","_callee","query","wrap","_context","prev","abrupt","t0","code","OBJECT_NOT_FOUND","stop","ACL","OTHER_CAUSE","_key","INVALID_KEY_NAME","acl","keysToRevert","_len","_key2","_iterator","_step","_key3","_clearPendingOps","erasable","_attr11","fetchOptions","useMasterKey","sessionToken","context","include","_context2","_context3","controller","getObjectController","fetch","_saveEventually","_callee2","_context4","save","message","poll","arg1","arg2","arg3","_this","reject","saveOptions","installationId","unsaved","cascadeSave","then","_destroyEventually","_callee3","_context5","destroy","destroyOptions","resolve","pinAllWithName","DEFAULT_PIN","unPinAllWithName","_isPinned","_callee4","localDatastore","objectKey","pin","_context6","getLocalDatastore","isEnabled","getKeyForObject","fromPinWithName","sent","_fetchFromLocalDatastore","_callee5","pinned","result","_context7","_serializeObject","fromJSON","_finishFetch","clearAllState","list","queryOptions","handleIncludeOptions","fetchAll","fetchAllIfNeeded","_context8","batchSize","override","otherAttributes","_attr12","preserved","_preserveFieldsOnFetch","_clearServerData","protoProps","classProps","extend","adjustedClassName","parentProto","__super__","ParseObjectSubclass","writable","configurable","prop","_prop","createWithoutData","objects","_handlePinAllWithName","_handleUnPinAllWithName","unPinWithName","PIN_PREFIX","DefaultController","forceFetch","objs","ids","results","el","INVALID_CLASS_NAME","MISSING_OBJECT_ID","isDataAvailable","containedIn","_limit","_ref","_callee6","idMap","_i","_obj","_iterator2","_step2","_context9","_updateObjectIfPinned","finish","RESTController","getRESTController","params","join","request","_ref2","_callee7","_context10","_callee10","batches","deleteCompleted","errors","_context13","pop","batch","requests","_callee8","aggregate","_iterator3","_step3","_context11","AGGREGATE_ERROR","_destroyObjectIfPinned","_callee9","_context12","mapIdForPin","allowCustomObjectId","returnStatus","filesSaved","all","objectError","continueWhile","nextPending","batchReturned","resolvingPromise","batchReady","batchTasks","index","ready","pushPendingState","enqueueTask","responses","success","_status","_handleSaveResponse","serverError","_handleSaveError","when","_getSaveParams","INCORRECT_TYPE","_callee11","_iterator4","_step4","_context14","_updateLocalIdForObject","targetCopy","task","_callee12","_context15","setObjectController","_default"],"sources":["C:/Users/brosk/Documents/Web Dev/modern-web-development-project/project/node_modules/parse/lib/browser/ParseObject.js"],"sourcesContent":["\"use strict\";\r\n\r\nvar _interopRequireDefault = require(\"@babel/runtime-corejs3/helpers/interopRequireDefault\");\r\n\r\nvar _typeof3 = require(\"@babel/runtime-corejs3/helpers/typeof\");\r\n\r\nvar _WeakMap = require(\"@babel/runtime-corejs3/core-js-stable/weak-map\");\r\n\r\nvar _Array$isArray2 = require(\"@babel/runtime-corejs3/core-js-stable/array/is-array\");\r\n\r\nvar _getIteratorMethod = require(\"@babel/runtime-corejs3/core-js/get-iterator-method\");\r\n\r\nvar _Symbol = require(\"@babel/runtime-corejs3/core-js-stable/symbol\");\r\n\r\nvar _Array$from = require(\"@babel/runtime-corejs3/core-js-stable/array/from\");\r\n\r\nvar _sliceInstanceProperty = require(\"@babel/runtime-corejs3/core-js-stable/instance/slice\");\r\n\r\nvar _Object$defineProperty2 = require(\"@babel/runtime-corejs3/core-js-stable/object/define-property\");\r\n\r\nvar _Object$defineProperties = require(\"@babel/runtime-corejs3/core-js-stable/object/define-properties\");\r\n\r\nvar _Object$getOwnPropertyDescriptors = require(\"@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptors\");\r\n\r\nvar _forEachInstanceProperty2 = require(\"@babel/runtime-corejs3/core-js-stable/instance/for-each\");\r\n\r\nvar _Object$getOwnPropertyDescriptor = require(\"@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor\");\r\n\r\nvar _filterInstanceProperty = require(\"@babel/runtime-corejs3/core-js-stable/instance/filter\");\r\n\r\nvar _Object$getOwnPropertySymbols = require(\"@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols\");\r\n\r\nvar _Object$keys2 = require(\"@babel/runtime-corejs3/core-js-stable/object/keys\");\r\n\r\n_Object$defineProperty2(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nexports.default = void 0;\r\n\r\nvar _map = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/map\"));\r\n\r\nvar _find = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/find\"));\r\n\r\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/object/define-property\"));\r\n\r\nvar _create = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/object/create\"));\r\n\r\nvar _promise = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/promise\"));\r\n\r\nvar _isArray = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/array/is-array\"));\r\n\r\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime-corejs3/regenerator\"));\r\n\r\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/asyncToGenerator\"));\r\n\r\nvar _concat = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/concat\"));\r\n\r\nvar _getPrototypeOf = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/object/get-prototype-of\"));\r\n\r\nvar _includes = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/includes\"));\r\n\r\nvar _stringify = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/json/stringify\"));\r\n\r\nvar _forEach = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/for-each\"));\r\n\r\nvar _keys = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/object/keys\"));\r\n\r\nvar _freeze = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/object/freeze\"));\r\n\r\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/typeof\"));\r\n\r\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/classCallCheck\"));\r\n\r\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/createClass\"));\r\n\r\nvar _defineProperty3 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/defineProperty\"));\r\n\r\nvar _indexOf = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/index-of\"));\r\n\r\nvar _CoreManager = _interopRequireDefault(require(\"./CoreManager\"));\r\n\r\nvar _canBeSerialized = _interopRequireDefault(require(\"./canBeSerialized\"));\r\n\r\nvar _decode = _interopRequireDefault(require(\"./decode\"));\r\n\r\nvar _encode = _interopRequireDefault(require(\"./encode\"));\r\n\r\nvar _escape2 = _interopRequireDefault(require(\"./escape\"));\r\n\r\nvar _EventuallyQueue = _interopRequireDefault(require(\"./EventuallyQueue\"));\r\n\r\nvar _ParseACL = _interopRequireDefault(require(\"./ParseACL\"));\r\n\r\nvar _parseDate = _interopRequireDefault(require(\"./parseDate\"));\r\n\r\nvar _ParseError = _interopRequireDefault(require(\"./ParseError\"));\r\n\r\nvar _ParseFile = _interopRequireDefault(require(\"./ParseFile\"));\r\n\r\nvar _promiseUtils = require(\"./promiseUtils\");\r\n\r\nvar _LocalDatastoreUtils = require(\"./LocalDatastoreUtils\");\r\n\r\nvar _ParseOp = require(\"./ParseOp\");\r\n\r\nvar _ParseQuery = _interopRequireDefault(require(\"./ParseQuery\"));\r\n\r\nvar _ParseRelation = _interopRequireDefault(require(\"./ParseRelation\"));\r\n\r\nvar SingleInstanceStateController = _interopRequireWildcard(require(\"./SingleInstanceStateController\"));\r\n\r\nvar _unique = _interopRequireDefault(require(\"./unique\"));\r\n\r\nvar UniqueInstanceStateController = _interopRequireWildcard(require(\"./UniqueInstanceStateController\"));\r\n\r\nvar _unsavedChildren = _interopRequireDefault(require(\"./unsavedChildren\"));\r\n\r\nfunction _getRequireWildcardCache(nodeInterop) {\r\n  if (typeof _WeakMap !== \"function\") return null;\r\n  var cacheBabelInterop = new _WeakMap();\r\n  var cacheNodeInterop = new _WeakMap();\r\n  return (_getRequireWildcardCache = function (nodeInterop) {\r\n    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;\r\n  })(nodeInterop);\r\n}\r\n\r\nfunction _interopRequireWildcard(obj, nodeInterop) {\r\n  if (!nodeInterop && obj && obj.__esModule) {\r\n    return obj;\r\n  }\r\n\r\n  if (obj === null || _typeof3(obj) !== \"object\" && typeof obj !== \"function\") {\r\n    return {\r\n      default: obj\r\n    };\r\n  }\r\n\r\n  var cache = _getRequireWildcardCache(nodeInterop);\r\n\r\n  if (cache && cache.has(obj)) {\r\n    return cache.get(obj);\r\n  }\r\n\r\n  var newObj = {};\r\n\r\n  for (var key in obj) {\r\n    if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) {\r\n      var desc = _Object$defineProperty2 && _Object$getOwnPropertyDescriptor ? _Object$getOwnPropertyDescriptor(obj, key) : null;\r\n\r\n      if (desc && (desc.get || desc.set)) {\r\n        _Object$defineProperty2(newObj, key, desc);\r\n      } else {\r\n        newObj[key] = obj[key];\r\n      }\r\n    }\r\n  }\r\n\r\n  newObj.default = obj;\r\n\r\n  if (cache) {\r\n    cache.set(obj, newObj);\r\n  }\r\n\r\n  return newObj;\r\n}\r\n\r\nfunction _createForOfIteratorHelper(o, allowArrayLike) {\r\n  var it = typeof _Symbol !== \"undefined\" && _getIteratorMethod(o) || o[\"@@iterator\"];\r\n\r\n  if (!it) {\r\n    if (_Array$isArray2(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\r\n      if (it) o = it;\r\n      var i = 0;\r\n\r\n      var F = function () {};\r\n\r\n      return {\r\n        s: F,\r\n        n: function () {\r\n          if (i >= o.length) return {\r\n            done: true\r\n          };\r\n          return {\r\n            done: false,\r\n            value: o[i++]\r\n          };\r\n        },\r\n        e: function (_e) {\r\n          throw _e;\r\n        },\r\n        f: F\r\n      };\r\n    }\r\n\r\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\r\n  }\r\n\r\n  var normalCompletion = true,\r\n      didErr = false,\r\n      err;\r\n  return {\r\n    s: function () {\r\n      it = it.call(o);\r\n    },\r\n    n: function () {\r\n      var step = it.next();\r\n      normalCompletion = step.done;\r\n      return step;\r\n    },\r\n    e: function (_e2) {\r\n      didErr = true;\r\n      err = _e2;\r\n    },\r\n    f: function () {\r\n      try {\r\n        if (!normalCompletion && it.return != null) it.return();\r\n      } finally {\r\n        if (didErr) throw err;\r\n      }\r\n    }\r\n  };\r\n}\r\n\r\nfunction _unsupportedIterableToArray(o, minLen) {\r\n  var _context18;\r\n\r\n  if (!o) return;\r\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\r\n\r\n  var n = _sliceInstanceProperty(_context18 = Object.prototype.toString.call(o)).call(_context18, 8, -1);\r\n\r\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\r\n  if (n === \"Map\" || n === \"Set\") return _Array$from(o);\r\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\r\n}\r\n\r\nfunction _arrayLikeToArray(arr, len) {\r\n  if (len == null || len > arr.length) len = arr.length;\r\n\r\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\r\n    arr2[i] = arr[i];\r\n  }\r\n\r\n  return arr2;\r\n}\r\n\r\nfunction ownKeys(object, enumerableOnly) {\r\n  var keys = _Object$keys2(object);\r\n\r\n  if (_Object$getOwnPropertySymbols) {\r\n    var symbols = _Object$getOwnPropertySymbols(object);\r\n\r\n    enumerableOnly && (symbols = _filterInstanceProperty(symbols).call(symbols, function (sym) {\r\n      return _Object$getOwnPropertyDescriptor(object, sym).enumerable;\r\n    })), keys.push.apply(keys, symbols);\r\n  }\r\n\r\n  return keys;\r\n}\r\n\r\nfunction _objectSpread(target) {\r\n  for (var i = 1; i < arguments.length; i++) {\r\n    var _context16, _context17;\r\n\r\n    var source = null != arguments[i] ? arguments[i] : {};\r\n    i % 2 ? _forEachInstanceProperty2(_context16 = ownKeys(Object(source), !0)).call(_context16, function (key) {\r\n      (0, _defineProperty3.default)(target, key, source[key]);\r\n    }) : _Object$getOwnPropertyDescriptors ? _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)) : _forEachInstanceProperty2(_context17 = ownKeys(Object(source))).call(_context17, function (key) {\r\n      _Object$defineProperty2(target, key, _Object$getOwnPropertyDescriptor(source, key));\r\n    });\r\n  }\r\n\r\n  return target;\r\n}\r\n\r\nvar uuidv4 = require('./uuid');\r\n/*:: export type Pointer = {\r\n  __type: string,\r\n  className: string,\r\n  objectId: string,\r\n};*/\r\n\r\n/*:: type SaveParams = {\r\n  method: string,\r\n  path: string,\r\n  body: AttributeMap,\r\n};*/\r\n\r\n/*:: export type SaveOptions = FullOptions & {\r\n  cascadeSave?: boolean,\r\n  context?: AttributeMap,\r\n};*/\r\n// Mapping of class names to constructors, so we can populate objects from the\r\n// server with appropriate subclasses of ParseObject\r\n\r\n\r\nvar classMap = {}; // Global counter for generating unique Ids for non-single-instance objects\r\n\r\nvar objectCount = 0; // On web clients, objects are single-instance: any two objects with the same Id\r\n// will have the same attributes. However, this may be dangerous default\r\n// behavior in a server scenario\r\n\r\nvar singleInstance = !_CoreManager.default.get('IS_NODE');\r\n\r\nif (singleInstance) {\r\n  _CoreManager.default.setObjectStateController(SingleInstanceStateController);\r\n} else {\r\n  _CoreManager.default.setObjectStateController(UniqueInstanceStateController);\r\n}\r\n\r\nfunction getServerUrlPath() {\r\n  var serverUrl = _CoreManager.default.get('SERVER_URL');\r\n\r\n  if (serverUrl[serverUrl.length - 1] !== '/') {\r\n    serverUrl += '/';\r\n  }\r\n\r\n  var url = serverUrl.replace(/https?:\\/\\//, '');\r\n  return url.substr((0, _indexOf.default)(url).call(url, '/'));\r\n}\r\n/**\r\n * Creates a new model with defined attributes.\r\n *\r\n * <p>You won't normally call this method directly.  It is recommended that\r\n * you use a subclass of <code>Parse.Object</code> instead, created by calling\r\n * <code>extend</code>.</p>\r\n *\r\n * <p>However, if you don't want to use a subclass, or aren't sure which\r\n * subclass is appropriate, you can use this form:<pre>\r\n *     var object = new Parse.Object(\"ClassName\");\r\n * </pre>\r\n * That is basically equivalent to:<pre>\r\n *     var MyClass = Parse.Object.extend(\"ClassName\");\r\n *     var object = new MyClass();\r\n * </pre></p>\r\n *\r\n * @alias Parse.Object\r\n */\r\n\r\n\r\nvar ParseObject = /*#__PURE__*/function () {\r\n  /**\r\n   * @param {string} className The class name for the object\r\n   * @param {object} attributes The initial set of data to store in the object.\r\n   * @param {object} options The options for this object instance.\r\n   */\r\n  function ParseObject(className\r\n  /*: ?string | { className: string, [attr: string]: mixed }*/\r\n  , attributes\r\n  /*:: ?: { [attr: string]: mixed }*/\r\n  , options\r\n  /*:: ?: { ignoreValidation: boolean }*/\r\n  ) {\r\n    (0, _classCallCheck2.default)(this, ParseObject);\r\n    (0, _defineProperty3.default)(this, \"id\", void 0);\r\n    (0, _defineProperty3.default)(this, \"_localId\", void 0);\r\n    (0, _defineProperty3.default)(this, \"_objCount\", void 0);\r\n    (0, _defineProperty3.default)(this, \"className\", void 0); // Enable legacy initializers\r\n\r\n    if (typeof this.initialize === 'function') {\r\n      this.initialize.apply(this, arguments);\r\n    }\r\n\r\n    var toSet = null;\r\n    this._objCount = objectCount++;\r\n\r\n    if (typeof className === 'string') {\r\n      this.className = className;\r\n\r\n      if (attributes && (0, _typeof2.default)(attributes) === 'object') {\r\n        toSet = attributes;\r\n      }\r\n    } else if (className && (0, _typeof2.default)(className) === 'object') {\r\n      this.className = className.className;\r\n      toSet = {};\r\n\r\n      for (var _attr in className) {\r\n        if (_attr !== 'className') {\r\n          toSet[_attr] = className[_attr];\r\n        }\r\n      }\r\n\r\n      if (attributes && (0, _typeof2.default)(attributes) === 'object') {\r\n        options = attributes;\r\n      }\r\n    }\r\n\r\n    if (toSet && !this.set(toSet, options)) {\r\n      throw new Error(\"Can't create an invalid Parse Object\");\r\n    }\r\n  }\r\n  /**\r\n   * The ID of this object, unique within its class.\r\n   *\r\n   * @property {string} id\r\n   */\r\n\r\n\r\n  (0, _createClass2.default)(ParseObject, [{\r\n    key: \"attributes\",\r\n    get:\r\n    /** Prototype getters / setters **/\r\n    function ()\r\n    /*: AttributeMap*/\r\n    {\r\n      var stateController = _CoreManager.default.getObjectStateController();\r\n\r\n      return (0, _freeze.default)(stateController.estimateAttributes(this._getStateIdentifier()));\r\n    }\r\n    /**\r\n     * The first time this object was saved on the server.\r\n     *\r\n     * @property {Date} createdAt\r\n     * @returns {Date}\r\n     */\r\n\r\n  }, {\r\n    key: \"createdAt\",\r\n    get: function ()\r\n    /*: ?Date*/\r\n    {\r\n      return this._getServerData().createdAt;\r\n    }\r\n    /**\r\n     * The last time this object was updated on the server.\r\n     *\r\n     * @property {Date} updatedAt\r\n     * @returns {Date}\r\n     */\r\n\r\n  }, {\r\n    key: \"updatedAt\",\r\n    get: function ()\r\n    /*: ?Date*/\r\n    {\r\n      return this._getServerData().updatedAt;\r\n    }\r\n    /** Private methods **/\r\n\r\n    /**\r\n     * Returns a local or server Id used uniquely identify this object\r\n     *\r\n     * @returns {string}\r\n     */\r\n\r\n  }, {\r\n    key: \"_getId\",\r\n    value: function ()\r\n    /*: string*/\r\n    {\r\n      if (typeof this.id === 'string') {\r\n        return this.id;\r\n      }\r\n\r\n      if (typeof this._localId === 'string') {\r\n        return this._localId;\r\n      }\r\n\r\n      var localId = 'local' + uuidv4();\r\n      this._localId = localId;\r\n      return localId;\r\n    }\r\n    /**\r\n     * Returns a unique identifier used to pull data from the State Controller.\r\n     *\r\n     * @returns {Parse.Object|object}\r\n     */\r\n\r\n  }, {\r\n    key: \"_getStateIdentifier\",\r\n    value: function ()\r\n    /*: ParseObject | { id: string, className: string }*/\r\n    {\r\n      if (singleInstance) {\r\n        var id = this.id;\r\n\r\n        if (!id) {\r\n          id = this._getId();\r\n        }\r\n\r\n        return {\r\n          id: id,\r\n          className: this.className\r\n        };\r\n      } else {\r\n        return this;\r\n      }\r\n    }\r\n  }, {\r\n    key: \"_getServerData\",\r\n    value: function ()\r\n    /*: AttributeMap*/\r\n    {\r\n      var stateController = _CoreManager.default.getObjectStateController();\r\n\r\n      return stateController.getServerData(this._getStateIdentifier());\r\n    }\r\n  }, {\r\n    key: \"_clearServerData\",\r\n    value: function () {\r\n      var serverData = this._getServerData();\r\n\r\n      var unset = {};\r\n\r\n      for (var _attr2 in serverData) {\r\n        unset[_attr2] = undefined;\r\n      }\r\n\r\n      var stateController = _CoreManager.default.getObjectStateController();\r\n\r\n      stateController.setServerData(this._getStateIdentifier(), unset);\r\n    }\r\n  }, {\r\n    key: \"_getPendingOps\",\r\n    value: function ()\r\n    /*: Array<OpsMap>*/\r\n    {\r\n      var stateController = _CoreManager.default.getObjectStateController();\r\n\r\n      return stateController.getPendingOps(this._getStateIdentifier());\r\n    }\r\n    /**\r\n     * @param {Array<string>} [keysToClear] - if specified, only ops matching\r\n     * these fields will be cleared\r\n     */\r\n\r\n  }, {\r\n    key: \"_clearPendingOps\",\r\n    value: function (keysToClear\r\n    /*:: ?: Array<string>*/\r\n    ) {\r\n      var pending = this._getPendingOps();\r\n\r\n      var latest = pending[pending.length - 1];\r\n      var keys = keysToClear || (0, _keys.default)(latest);\r\n      (0, _forEach.default)(keys).call(keys, function (key) {\r\n        delete latest[key];\r\n      });\r\n    }\r\n  }, {\r\n    key: \"_getDirtyObjectAttributes\",\r\n    value: function ()\r\n    /*: AttributeMap*/\r\n    {\r\n      var attributes = this.attributes;\r\n\r\n      var stateController = _CoreManager.default.getObjectStateController();\r\n\r\n      var objectCache = stateController.getObjectCache(this._getStateIdentifier());\r\n      var dirty = {};\r\n\r\n      for (var _attr3 in attributes) {\r\n        var val = attributes[_attr3];\r\n\r\n        if (val && (0, _typeof2.default)(val) === 'object' && !(val instanceof ParseObject) && !(val instanceof _ParseFile.default) && !(val instanceof _ParseRelation.default)) {\r\n          // Due to the way browsers construct maps, the key order will not change\r\n          // unless the object is changed\r\n          try {\r\n            var json = (0, _encode.default)(val, false, true);\r\n            var stringified = (0, _stringify.default)(json);\r\n\r\n            if (objectCache[_attr3] !== stringified) {\r\n              dirty[_attr3] = val;\r\n            }\r\n          } catch (e) {\r\n            // Error occurred, possibly by a nested unsaved pointer in a mutable container\r\n            // No matter how it happened, it indicates a change in the attribute\r\n            dirty[_attr3] = val;\r\n          }\r\n        }\r\n      }\r\n\r\n      return dirty;\r\n    }\r\n  }, {\r\n    key: \"_toFullJSON\",\r\n    value: function (seen\r\n    /*:: ?: Array<any>*/\r\n    , offline\r\n    /*:: ?: boolean*/\r\n    )\r\n    /*: AttributeMap*/\r\n    {\r\n      var json\r\n      /*: { [key: string]: mixed }*/\r\n      = this.toJSON(seen, offline);\r\n      json.__type = 'Object';\r\n      json.className = this.className;\r\n      return json;\r\n    }\r\n  }, {\r\n    key: \"_getSaveJSON\",\r\n    value: function ()\r\n    /*: AttributeMap*/\r\n    {\r\n      var pending = this._getPendingOps();\r\n\r\n      var dirtyObjects = this._getDirtyObjectAttributes();\r\n\r\n      var json = {};\r\n\r\n      for (var attr in dirtyObjects) {\r\n        var isDotNotation = false;\r\n\r\n        for (var i = 0; i < pending.length; i += 1) {\r\n          for (var field in pending[i]) {\r\n            // Dot notation operations are handled later\r\n            if ((0, _includes.default)(field).call(field, '.')) {\r\n              var fieldName = field.split('.')[0];\r\n\r\n              if (fieldName === attr) {\r\n                isDotNotation = true;\r\n                break;\r\n              }\r\n            }\r\n          }\r\n        }\r\n\r\n        if (!isDotNotation) {\r\n          json[attr] = new _ParseOp.SetOp(dirtyObjects[attr]).toJSON();\r\n        }\r\n      }\r\n\r\n      for (attr in pending[0]) {\r\n        json[attr] = pending[0][attr].toJSON();\r\n      }\r\n\r\n      return json;\r\n    }\r\n  }, {\r\n    key: \"_getSaveParams\",\r\n    value: function ()\r\n    /*: SaveParams*/\r\n    {\r\n      var method = this.id ? 'PUT' : 'POST';\r\n\r\n      var body = this._getSaveJSON();\r\n\r\n      var path = 'classes/' + this.className;\r\n\r\n      if (_CoreManager.default.get('ALLOW_CUSTOM_OBJECT_ID')) {\r\n        if (!this.createdAt) {\r\n          method = 'POST';\r\n          body.objectId = this.id;\r\n        } else {\r\n          method = 'PUT';\r\n          path += '/' + this.id;\r\n        }\r\n      } else if (this.id) {\r\n        path += '/' + this.id;\r\n      } else if (this.className === '_User') {\r\n        path = 'users';\r\n      }\r\n\r\n      return {\r\n        method: method,\r\n        body: body,\r\n        path: path\r\n      };\r\n    }\r\n  }, {\r\n    key: \"_finishFetch\",\r\n    value: function (serverData\r\n    /*: AttributeMap*/\r\n    ) {\r\n      if (!this.id && serverData.objectId) {\r\n        this.id = serverData.objectId;\r\n      }\r\n\r\n      var stateController = _CoreManager.default.getObjectStateController();\r\n\r\n      stateController.initializeState(this._getStateIdentifier());\r\n      var decoded = {};\r\n\r\n      for (var _attr4 in serverData) {\r\n        if (_attr4 === 'ACL') {\r\n          decoded[_attr4] = new _ParseACL.default(serverData[_attr4]);\r\n        } else if (_attr4 !== 'objectId') {\r\n          decoded[_attr4] = (0, _decode.default)(serverData[_attr4]);\r\n\r\n          if (decoded[_attr4] instanceof _ParseRelation.default) {\r\n            decoded[_attr4]._ensureParentAndKey(this, _attr4);\r\n          }\r\n        }\r\n      }\r\n\r\n      if (decoded.createdAt && typeof decoded.createdAt === 'string') {\r\n        decoded.createdAt = (0, _parseDate.default)(decoded.createdAt);\r\n      }\r\n\r\n      if (decoded.updatedAt && typeof decoded.updatedAt === 'string') {\r\n        decoded.updatedAt = (0, _parseDate.default)(decoded.updatedAt);\r\n      }\r\n\r\n      if (!decoded.updatedAt && decoded.createdAt) {\r\n        decoded.updatedAt = decoded.createdAt;\r\n      }\r\n\r\n      stateController.commitServerChanges(this._getStateIdentifier(), decoded);\r\n    }\r\n  }, {\r\n    key: \"_setExisted\",\r\n    value: function (existed\r\n    /*: boolean*/\r\n    ) {\r\n      var stateController = _CoreManager.default.getObjectStateController();\r\n\r\n      var state = stateController.getState(this._getStateIdentifier());\r\n\r\n      if (state) {\r\n        state.existed = existed;\r\n      }\r\n    }\r\n  }, {\r\n    key: \"_migrateId\",\r\n    value: function (serverId\r\n    /*: string*/\r\n    ) {\r\n      if (this._localId && serverId) {\r\n        if (singleInstance) {\r\n          var stateController = _CoreManager.default.getObjectStateController();\r\n\r\n          var oldState = stateController.removeState(this._getStateIdentifier());\r\n          this.id = serverId;\r\n          delete this._localId;\r\n\r\n          if (oldState) {\r\n            stateController.initializeState(this._getStateIdentifier(), oldState);\r\n          }\r\n        } else {\r\n          this.id = serverId;\r\n          delete this._localId;\r\n        }\r\n      }\r\n    }\r\n  }, {\r\n    key: \"_handleSaveResponse\",\r\n    value: function (response\r\n    /*: AttributeMap*/\r\n    , status\r\n    /*: number*/\r\n    ) {\r\n      var changes = {};\r\n\r\n      var stateController = _CoreManager.default.getObjectStateController();\r\n\r\n      var pending = stateController.popPendingState(this._getStateIdentifier());\r\n\r\n      for (var attr in pending) {\r\n        if (pending[attr] instanceof _ParseOp.RelationOp) {\r\n          changes[attr] = pending[attr].applyTo(undefined, this, attr);\r\n        } else if (!(attr in response)) {\r\n          // Only SetOps and UnsetOps should not come back with results\r\n          changes[attr] = pending[attr].applyTo(undefined);\r\n        }\r\n      }\r\n\r\n      for (attr in response) {\r\n        if ((attr === 'createdAt' || attr === 'updatedAt') && typeof response[attr] === 'string') {\r\n          changes[attr] = (0, _parseDate.default)(response[attr]);\r\n        } else if (attr === 'ACL') {\r\n          changes[attr] = new _ParseACL.default(response[attr]);\r\n        } else if (attr !== 'objectId') {\r\n          var val = (0, _decode.default)(response[attr]);\r\n\r\n          if (val && (0, _getPrototypeOf.default)(val) === Object.prototype) {\r\n            changes[attr] = _objectSpread(_objectSpread({}, this.attributes[attr]), val);\r\n          } else {\r\n            changes[attr] = val;\r\n          }\r\n\r\n          if (changes[attr] instanceof _ParseOp.UnsetOp) {\r\n            changes[attr] = undefined;\r\n          }\r\n        }\r\n      }\r\n\r\n      if (changes.createdAt && !changes.updatedAt) {\r\n        changes.updatedAt = changes.createdAt;\r\n      }\r\n\r\n      this._migrateId(response.objectId);\r\n\r\n      if (status !== 201) {\r\n        this._setExisted(true);\r\n      }\r\n\r\n      stateController.commitServerChanges(this._getStateIdentifier(), changes);\r\n    }\r\n  }, {\r\n    key: \"_handleSaveError\",\r\n    value: function () {\r\n      var stateController = _CoreManager.default.getObjectStateController();\r\n\r\n      stateController.mergeFirstPendingState(this._getStateIdentifier());\r\n    }\r\n  }, {\r\n    key: \"initialize\",\r\n    value:\r\n    /** Public methods **/\r\n    function () {// NOOP\r\n    }\r\n    /**\r\n     * Returns a JSON version of the object suitable for saving to Parse.\r\n     *\r\n     * @param seen\r\n     * @param offline\r\n     * @returns {object}\r\n     */\r\n\r\n  }, {\r\n    key: \"toJSON\",\r\n    value: function (seen\r\n    /*: Array<any> | void*/\r\n    , offline\r\n    /*:: ?: boolean*/\r\n    )\r\n    /*: AttributeMap*/\r\n    {\r\n      var seenEntry = this.id ? this.className + ':' + this.id : this;\r\n      seen = seen || [seenEntry];\r\n      var json = {};\r\n      var attrs = this.attributes;\r\n\r\n      for (var _attr5 in attrs) {\r\n        if ((_attr5 === 'createdAt' || _attr5 === 'updatedAt') && attrs[_attr5].toJSON) {\r\n          json[_attr5] = attrs[_attr5].toJSON();\r\n        } else {\r\n          json[_attr5] = (0, _encode.default)(attrs[_attr5], false, false, seen, offline);\r\n        }\r\n      }\r\n\r\n      var pending = this._getPendingOps();\r\n\r\n      for (var _attr6 in pending[0]) {\r\n        json[_attr6] = pending[0][_attr6].toJSON(offline);\r\n      }\r\n\r\n      if (this.id) {\r\n        json.objectId = this.id;\r\n      }\r\n\r\n      return json;\r\n    }\r\n    /**\r\n     * Determines whether this ParseObject is equal to another ParseObject\r\n     *\r\n     * @param {object} other - An other object ot compare\r\n     * @returns {boolean}\r\n     */\r\n\r\n  }, {\r\n    key: \"equals\",\r\n    value: function (other\r\n    /*: mixed*/\r\n    )\r\n    /*: boolean*/\r\n    {\r\n      if (this === other) {\r\n        return true;\r\n      }\r\n\r\n      return other instanceof ParseObject && this.className === other.className && this.id === other.id && typeof this.id !== 'undefined';\r\n    }\r\n    /**\r\n     * Returns true if this object has been modified since its last\r\n     * save/refresh.  If an attribute is specified, it returns true only if that\r\n     * particular attribute has been modified since the last save/refresh.\r\n     *\r\n     * @param {string} attr An attribute name (optional).\r\n     * @returns {boolean}\r\n     */\r\n\r\n  }, {\r\n    key: \"dirty\",\r\n    value: function (attr\r\n    /*:: ?: string*/\r\n    )\r\n    /*: boolean*/\r\n    {\r\n      if (!this.id) {\r\n        return true;\r\n      }\r\n\r\n      var pendingOps = this._getPendingOps();\r\n\r\n      var dirtyObjects = this._getDirtyObjectAttributes();\r\n\r\n      if (attr) {\r\n        if (dirtyObjects.hasOwnProperty(attr)) {\r\n          return true;\r\n        }\r\n\r\n        for (var i = 0; i < pendingOps.length; i++) {\r\n          if (pendingOps[i].hasOwnProperty(attr)) {\r\n            return true;\r\n          }\r\n        }\r\n\r\n        return false;\r\n      }\r\n\r\n      if ((0, _keys.default)(pendingOps[0]).length !== 0) {\r\n        return true;\r\n      }\r\n\r\n      if ((0, _keys.default)(dirtyObjects).length !== 0) {\r\n        return true;\r\n      }\r\n\r\n      return false;\r\n    }\r\n    /**\r\n     * Returns an array of keys that have been modified since last save/refresh\r\n     *\r\n     * @returns {string[]}\r\n     */\r\n\r\n  }, {\r\n    key: \"dirtyKeys\",\r\n    value: function ()\r\n    /*: Array<string>*/\r\n    {\r\n      var pendingOps = this._getPendingOps();\r\n\r\n      var keys = {};\r\n\r\n      for (var i = 0; i < pendingOps.length; i++) {\r\n        for (var _attr7 in pendingOps[i]) {\r\n          keys[_attr7] = true;\r\n        }\r\n      }\r\n\r\n      var dirtyObjects = this._getDirtyObjectAttributes();\r\n\r\n      for (var _attr8 in dirtyObjects) {\r\n        keys[_attr8] = true;\r\n      }\r\n\r\n      return (0, _keys.default)(keys);\r\n    }\r\n    /**\r\n     * Returns true if the object has been fetched.\r\n     *\r\n     * @returns {boolean}\r\n     */\r\n\r\n  }, {\r\n    key: \"isDataAvailable\",\r\n    value: function ()\r\n    /*: boolean*/\r\n    {\r\n      var serverData = this._getServerData();\r\n\r\n      return !!(0, _keys.default)(serverData).length;\r\n    }\r\n    /**\r\n     * Gets a Pointer referencing this Object.\r\n     *\r\n     * @returns {Pointer}\r\n     */\r\n\r\n  }, {\r\n    key: \"toPointer\",\r\n    value: function ()\r\n    /*: Pointer*/\r\n    {\r\n      if (!this.id) {\r\n        throw new Error('Cannot create a pointer to an unsaved ParseObject');\r\n      }\r\n\r\n      return {\r\n        __type: 'Pointer',\r\n        className: this.className,\r\n        objectId: this.id\r\n      };\r\n    }\r\n    /**\r\n     * Gets a Pointer referencing this Object.\r\n     *\r\n     * @returns {Pointer}\r\n     */\r\n\r\n  }, {\r\n    key: \"toOfflinePointer\",\r\n    value: function ()\r\n    /*: Pointer*/\r\n    {\r\n      if (!this._localId) {\r\n        throw new Error('Cannot create a offline pointer to a saved ParseObject');\r\n      }\r\n\r\n      return {\r\n        __type: 'Object',\r\n        className: this.className,\r\n        _localId: this._localId\r\n      };\r\n    }\r\n    /**\r\n     * Gets the value of an attribute.\r\n     *\r\n     * @param {string} attr The string name of an attribute.\r\n     * @returns {*}\r\n     */\r\n\r\n  }, {\r\n    key: \"get\",\r\n    value: function (attr\r\n    /*: string*/\r\n    )\r\n    /*: mixed*/\r\n    {\r\n      return this.attributes[attr];\r\n    }\r\n    /**\r\n     * Gets a relation on the given class for the attribute.\r\n     *\r\n     * @param {string} attr The attribute to get the relation for.\r\n     * @returns {Parse.Relation}\r\n     */\r\n\r\n  }, {\r\n    key: \"relation\",\r\n    value: function (attr\r\n    /*: string*/\r\n    )\r\n    /*: ParseRelation*/\r\n    {\r\n      var value = this.get(attr);\r\n\r\n      if (value) {\r\n        if (!(value instanceof _ParseRelation.default)) {\r\n          throw new Error('Called relation() on non-relation field ' + attr);\r\n        }\r\n\r\n        value._ensureParentAndKey(this, attr);\r\n\r\n        return value;\r\n      }\r\n\r\n      return new _ParseRelation.default(this, attr);\r\n    }\r\n    /**\r\n     * Gets the HTML-escaped value of an attribute.\r\n     *\r\n     * @param {string} attr The string name of an attribute.\r\n     * @returns {string}\r\n     */\r\n\r\n  }, {\r\n    key: \"escape\",\r\n    value: function (attr\r\n    /*: string*/\r\n    )\r\n    /*: string*/\r\n    {\r\n      var val = this.attributes[attr];\r\n\r\n      if (val == null) {\r\n        return '';\r\n      }\r\n\r\n      if (typeof val !== 'string') {\r\n        if (typeof val.toString !== 'function') {\r\n          return '';\r\n        }\r\n\r\n        val = val.toString();\r\n      }\r\n\r\n      return (0, _escape2.default)(val);\r\n    }\r\n    /**\r\n     * Returns <code>true</code> if the attribute contains a value that is not\r\n     * null or undefined.\r\n     *\r\n     * @param {string} attr The string name of the attribute.\r\n     * @returns {boolean}\r\n     */\r\n\r\n  }, {\r\n    key: \"has\",\r\n    value: function (attr\r\n    /*: string*/\r\n    )\r\n    /*: boolean*/\r\n    {\r\n      var attributes = this.attributes;\r\n\r\n      if (attributes.hasOwnProperty(attr)) {\r\n        return attributes[attr] != null;\r\n      }\r\n\r\n      return false;\r\n    }\r\n    /**\r\n     * Sets a hash of model attributes on the object.\r\n     *\r\n     * <p>You can call it with an object containing keys and values, with one\r\n     * key and value, or dot notation.  For example:<pre>\r\n     *   gameTurn.set({\r\n     *     player: player1,\r\n     *     diceRoll: 2\r\n     *   }, {\r\n     *     error: function(gameTurnAgain, error) {\r\n     *       // The set failed validation.\r\n     *     }\r\n     *   });\r\n     *\r\n     *   game.set(\"currentPlayer\", player2, {\r\n     *     error: function(gameTurnAgain, error) {\r\n     *       // The set failed validation.\r\n     *     }\r\n     *   });\r\n     *\r\n     *   game.set(\"finished\", true);</pre></p>\r\n     *\r\n     *   game.set(\"player.score\", 10);</pre></p>\r\n     *\r\n     * @param {(string|object)} key The key to set.\r\n     * @param {(string|object)} value The value to give it.\r\n     * @param {object} options A set of options for the set.\r\n     *     The only supported option is <code>error</code>.\r\n     * @returns {(ParseObject|boolean)} true if the set succeeded.\r\n     */\r\n\r\n  }, {\r\n    key: \"set\",\r\n    value: function (key\r\n    /*: mixed*/\r\n    , value\r\n    /*: mixed*/\r\n    , options\r\n    /*:: ?: mixed*/\r\n    )\r\n    /*: ParseObject | boolean*/\r\n    {\r\n      var changes = {};\r\n      var newOps = {};\r\n\r\n      if (key && (0, _typeof2.default)(key) === 'object') {\r\n        changes = key;\r\n        options = value;\r\n      } else if (typeof key === 'string') {\r\n        changes[key] = value;\r\n      } else {\r\n        return this;\r\n      }\r\n\r\n      options = options || {};\r\n      var readonly = [];\r\n\r\n      if (typeof this.constructor.readOnlyAttributes === 'function') {\r\n        readonly = (0, _concat.default)(readonly).call(readonly, this.constructor.readOnlyAttributes());\r\n      }\r\n\r\n      for (var k in changes) {\r\n        if (k === 'createdAt' || k === 'updatedAt') {\r\n          // This property is read-only, but for legacy reasons we silently\r\n          // ignore it\r\n          continue;\r\n        }\r\n\r\n        if ((0, _indexOf.default)(readonly).call(readonly, k) > -1) {\r\n          throw new Error('Cannot modify readonly attribute: ' + k);\r\n        }\r\n\r\n        if (options.unset) {\r\n          newOps[k] = new _ParseOp.UnsetOp();\r\n        } else if (changes[k] instanceof _ParseOp.Op) {\r\n          newOps[k] = changes[k];\r\n        } else if (changes[k] && (0, _typeof2.default)(changes[k]) === 'object' && typeof changes[k].__op === 'string') {\r\n          newOps[k] = (0, _ParseOp.opFromJSON)(changes[k]);\r\n        } else if (k === 'objectId' || k === 'id') {\r\n          if (typeof changes[k] === 'string') {\r\n            this.id = changes[k];\r\n          }\r\n        } else if (k === 'ACL' && (0, _typeof2.default)(changes[k]) === 'object' && !(changes[k] instanceof _ParseACL.default)) {\r\n          newOps[k] = new _ParseOp.SetOp(new _ParseACL.default(changes[k]));\r\n        } else if (changes[k] instanceof _ParseRelation.default) {\r\n          var relation = new _ParseRelation.default(this, k);\r\n          relation.targetClassName = changes[k].targetClassName;\r\n          newOps[k] = new _ParseOp.SetOp(relation);\r\n        } else {\r\n          newOps[k] = new _ParseOp.SetOp(changes[k]);\r\n        }\r\n      }\r\n\r\n      var currentAttributes = this.attributes; // Calculate new values\r\n\r\n      var newValues = {};\r\n\r\n      for (var _attr9 in newOps) {\r\n        if (newOps[_attr9] instanceof _ParseOp.RelationOp) {\r\n          newValues[_attr9] = newOps[_attr9].applyTo(currentAttributes[_attr9], this, _attr9);\r\n        } else if (!(newOps[_attr9] instanceof _ParseOp.UnsetOp)) {\r\n          newValues[_attr9] = newOps[_attr9].applyTo(currentAttributes[_attr9]);\r\n        }\r\n      } // Validate changes\r\n\r\n\r\n      if (!options.ignoreValidation) {\r\n        var validation = this.validate(newValues);\r\n\r\n        if (validation) {\r\n          if (typeof options.error === 'function') {\r\n            options.error(this, validation);\r\n          }\r\n\r\n          return false;\r\n        }\r\n      } // Consolidate Ops\r\n\r\n\r\n      var pendingOps = this._getPendingOps();\r\n\r\n      var last = pendingOps.length - 1;\r\n\r\n      var stateController = _CoreManager.default.getObjectStateController();\r\n\r\n      for (var _attr10 in newOps) {\r\n        var nextOp = newOps[_attr10].mergeWith(pendingOps[last][_attr10]);\r\n\r\n        stateController.setPendingOp(this._getStateIdentifier(), _attr10, nextOp);\r\n      }\r\n\r\n      return this;\r\n    }\r\n    /**\r\n     * Remove an attribute from the model. This is a noop if the attribute doesn't\r\n     * exist.\r\n     *\r\n     * @param {string} attr The string name of an attribute.\r\n     * @param options\r\n     * @returns {(ParseObject | boolean)}\r\n     */\r\n\r\n  }, {\r\n    key: \"unset\",\r\n    value: function (attr\r\n    /*: string*/\r\n    , options\r\n    /*:: ?: { [opt: string]: mixed }*/\r\n    )\r\n    /*: ParseObject | boolean*/\r\n    {\r\n      options = options || {};\r\n      options.unset = true;\r\n      return this.set(attr, null, options);\r\n    }\r\n    /**\r\n     * Atomically increments the value of the given attribute the next time the\r\n     * object is saved. If no amount is specified, 1 is used by default.\r\n     *\r\n     * @param attr {String} The key.\r\n     * @param amount {Number} The amount to increment by (optional).\r\n     * @returns {(ParseObject|boolean)}\r\n     */\r\n\r\n  }, {\r\n    key: \"increment\",\r\n    value: function (attr\r\n    /*: string*/\r\n    , amount\r\n    /*:: ?: number*/\r\n    )\r\n    /*: ParseObject | boolean*/\r\n    {\r\n      if (typeof amount === 'undefined') {\r\n        amount = 1;\r\n      }\r\n\r\n      if (typeof amount !== 'number') {\r\n        throw new Error('Cannot increment by a non-numeric amount.');\r\n      }\r\n\r\n      return this.set(attr, new _ParseOp.IncrementOp(amount));\r\n    }\r\n    /**\r\n     * Atomically decrements the value of the given attribute the next time the\r\n     * object is saved. If no amount is specified, 1 is used by default.\r\n     *\r\n     * @param attr {String} The key.\r\n     * @param amount {Number} The amount to decrement by (optional).\r\n     * @returns {(ParseObject | boolean)}\r\n     */\r\n\r\n  }, {\r\n    key: \"decrement\",\r\n    value: function (attr\r\n    /*: string*/\r\n    , amount\r\n    /*:: ?: number*/\r\n    )\r\n    /*: ParseObject | boolean*/\r\n    {\r\n      if (typeof amount === 'undefined') {\r\n        amount = 1;\r\n      }\r\n\r\n      if (typeof amount !== 'number') {\r\n        throw new Error('Cannot decrement by a non-numeric amount.');\r\n      }\r\n\r\n      return this.set(attr, new _ParseOp.IncrementOp(amount * -1));\r\n    }\r\n    /**\r\n     * Atomically add an object to the end of the array associated with a given\r\n     * key.\r\n     *\r\n     * @param attr {String} The key.\r\n     * @param item {} The item to add.\r\n     * @returns {(ParseObject | boolean)}\r\n     */\r\n\r\n  }, {\r\n    key: \"add\",\r\n    value: function (attr\r\n    /*: string*/\r\n    , item\r\n    /*: mixed*/\r\n    )\r\n    /*: ParseObject | boolean*/\r\n    {\r\n      return this.set(attr, new _ParseOp.AddOp([item]));\r\n    }\r\n    /**\r\n     * Atomically add the objects to the end of the array associated with a given\r\n     * key.\r\n     *\r\n     * @param attr {String} The key.\r\n     * @param items {Object[]} The items to add.\r\n     * @returns {(ParseObject | boolean)}\r\n     */\r\n\r\n  }, {\r\n    key: \"addAll\",\r\n    value: function (attr\r\n    /*: string*/\r\n    , items\r\n    /*: Array<mixed>*/\r\n    )\r\n    /*: ParseObject | boolean*/\r\n    {\r\n      return this.set(attr, new _ParseOp.AddOp(items));\r\n    }\r\n    /**\r\n     * Atomically add an object to the array associated with a given key, only\r\n     * if it is not already present in the array. The position of the insert is\r\n     * not guaranteed.\r\n     *\r\n     * @param attr {String} The key.\r\n     * @param item {} The object to add.\r\n     * @returns {(ParseObject | boolean)}\r\n     */\r\n\r\n  }, {\r\n    key: \"addUnique\",\r\n    value: function (attr\r\n    /*: string*/\r\n    , item\r\n    /*: mixed*/\r\n    )\r\n    /*: ParseObject | boolean*/\r\n    {\r\n      return this.set(attr, new _ParseOp.AddUniqueOp([item]));\r\n    }\r\n    /**\r\n     * Atomically add the objects to the array associated with a given key, only\r\n     * if it is not already present in the array. The position of the insert is\r\n     * not guaranteed.\r\n     *\r\n     * @param attr {String} The key.\r\n     * @param items {Object[]} The objects to add.\r\n     * @returns {(ParseObject | boolean)}\r\n     */\r\n\r\n  }, {\r\n    key: \"addAllUnique\",\r\n    value: function (attr\r\n    /*: string*/\r\n    , items\r\n    /*: Array<mixed>*/\r\n    )\r\n    /*: ParseObject | boolean*/\r\n    {\r\n      return this.set(attr, new _ParseOp.AddUniqueOp(items));\r\n    }\r\n    /**\r\n     * Atomically remove all instances of an object from the array associated\r\n     * with a given key.\r\n     *\r\n     * @param attr {String} The key.\r\n     * @param item {} The object to remove.\r\n     * @returns {(ParseObject | boolean)}\r\n     */\r\n\r\n  }, {\r\n    key: \"remove\",\r\n    value: function (attr\r\n    /*: string*/\r\n    , item\r\n    /*: mixed*/\r\n    )\r\n    /*: ParseObject | boolean*/\r\n    {\r\n      return this.set(attr, new _ParseOp.RemoveOp([item]));\r\n    }\r\n    /**\r\n     * Atomically remove all instances of the objects from the array associated\r\n     * with a given key.\r\n     *\r\n     * @param attr {String} The key.\r\n     * @param items {Object[]} The object to remove.\r\n     * @returns {(ParseObject | boolean)}\r\n     */\r\n\r\n  }, {\r\n    key: \"removeAll\",\r\n    value: function (attr\r\n    /*: string*/\r\n    , items\r\n    /*: Array<mixed>*/\r\n    )\r\n    /*: ParseObject | boolean*/\r\n    {\r\n      return this.set(attr, new _ParseOp.RemoveOp(items));\r\n    }\r\n    /**\r\n     * Returns an instance of a subclass of Parse.Op describing what kind of\r\n     * modification has been performed on this field since the last time it was\r\n     * saved. For example, after calling object.increment(\"x\"), calling\r\n     * object.op(\"x\") would return an instance of Parse.Op.Increment.\r\n     *\r\n     * @param attr {String} The key.\r\n     * @returns {Parse.Op} The operation, or undefined if none.\r\n     */\r\n\r\n  }, {\r\n    key: \"op\",\r\n    value: function (attr\r\n    /*: string*/\r\n    )\r\n    /*: ?Op*/\r\n    {\r\n      var pending = this._getPendingOps();\r\n\r\n      for (var i = pending.length; i--;) {\r\n        if (pending[i][attr]) {\r\n          return pending[i][attr];\r\n        }\r\n      }\r\n    }\r\n    /**\r\n     * Creates a new model with identical attributes to this one.\r\n     *\r\n     * @returns {Parse.Object}\r\n     */\r\n\r\n  }, {\r\n    key: \"clone\",\r\n    value: function clone()\r\n    /*: any*/\r\n    {\r\n      var clone = new this.constructor(this.className);\r\n      var attributes = this.attributes;\r\n\r\n      if (typeof this.constructor.readOnlyAttributes === 'function') {\r\n        var readonly = this.constructor.readOnlyAttributes() || []; // Attributes are frozen, so we have to rebuild an object,\r\n        // rather than delete readonly keys\r\n\r\n        var copy = {};\r\n\r\n        for (var a in attributes) {\r\n          if ((0, _indexOf.default)(readonly).call(readonly, a) < 0) {\r\n            copy[a] = attributes[a];\r\n          }\r\n        }\r\n\r\n        attributes = copy;\r\n      }\r\n\r\n      if (clone.set) {\r\n        clone.set(attributes);\r\n      }\r\n\r\n      return clone;\r\n    }\r\n    /**\r\n     * Creates a new instance of this object. Not to be confused with clone()\r\n     *\r\n     * @returns {Parse.Object}\r\n     */\r\n\r\n  }, {\r\n    key: \"newInstance\",\r\n    value: function ()\r\n    /*: any*/\r\n    {\r\n      var clone = new this.constructor(this.className);\r\n      clone.id = this.id;\r\n\r\n      if (singleInstance) {\r\n        // Just return an object with the right id\r\n        return clone;\r\n      }\r\n\r\n      var stateController = _CoreManager.default.getObjectStateController();\r\n\r\n      if (stateController) {\r\n        stateController.duplicateState(this._getStateIdentifier(), clone._getStateIdentifier());\r\n      }\r\n\r\n      return clone;\r\n    }\r\n    /**\r\n     * Returns true if this object has never been saved to Parse.\r\n     *\r\n     * @returns {boolean}\r\n     */\r\n\r\n  }, {\r\n    key: \"isNew\",\r\n    value: function ()\r\n    /*: boolean*/\r\n    {\r\n      return !this.id;\r\n    }\r\n    /**\r\n     * Returns true if this object was created by the Parse server when the\r\n     * object might have already been there (e.g. in the case of a Facebook\r\n     * login)\r\n     *\r\n     * @returns {boolean}\r\n     */\r\n\r\n  }, {\r\n    key: \"existed\",\r\n    value: function ()\r\n    /*: boolean*/\r\n    {\r\n      if (!this.id) {\r\n        return false;\r\n      }\r\n\r\n      var stateController = _CoreManager.default.getObjectStateController();\r\n\r\n      var state = stateController.getState(this._getStateIdentifier());\r\n\r\n      if (state) {\r\n        return state.existed;\r\n      }\r\n\r\n      return false;\r\n    }\r\n    /**\r\n     * Returns true if this object exists on the Server\r\n     *\r\n     * @param {object} options\r\n     * Valid options are:<ul>\r\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\r\n     *     be used for this request.\r\n     *   <li>sessionToken: A valid session token, used for making a request on\r\n     *       behalf of a specific user.\r\n     * </ul>\r\n     * @returns {Promise<boolean>} A boolean promise that is fulfilled if object exists.\r\n     */\r\n\r\n  }, {\r\n    key: \"exists\",\r\n    value: function () {\r\n      var _exists = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee(options\r\n      /*:: ?: RequestOptions*/\r\n      ) {\r\n        var query;\r\n        return _regenerator.default.wrap(function (_context) {\r\n          while (1) {\r\n            switch (_context.prev = _context.next) {\r\n              case 0:\r\n                if (this.id) {\r\n                  _context.next = 2;\r\n                  break;\r\n                }\r\n\r\n                return _context.abrupt(\"return\", false);\r\n\r\n              case 2:\r\n                _context.prev = 2;\r\n                query = new _ParseQuery.default(this.className);\r\n                _context.next = 6;\r\n                return query.get(this.id, options);\r\n\r\n              case 6:\r\n                return _context.abrupt(\"return\", true);\r\n\r\n              case 9:\r\n                _context.prev = 9;\r\n                _context.t0 = _context[\"catch\"](2);\r\n\r\n                if (!(_context.t0.code === _ParseError.default.OBJECT_NOT_FOUND)) {\r\n                  _context.next = 13;\r\n                  break;\r\n                }\r\n\r\n                return _context.abrupt(\"return\", false);\r\n\r\n              case 13:\r\n                throw _context.t0;\r\n\r\n              case 14:\r\n              case \"end\":\r\n                return _context.stop();\r\n            }\r\n          }\r\n        }, _callee, this, [[2, 9]]);\r\n      }));\r\n\r\n      return function () {\r\n        return _exists.apply(this, arguments);\r\n      };\r\n    }()\r\n    /**\r\n     * Checks if the model is currently in a valid state.\r\n     *\r\n     * @returns {boolean}\r\n     */\r\n\r\n  }, {\r\n    key: \"isValid\",\r\n    value: function ()\r\n    /*: boolean*/\r\n    {\r\n      return !this.validate(this.attributes);\r\n    }\r\n    /**\r\n     * You should not call this function directly unless you subclass\r\n     * <code>Parse.Object</code>, in which case you can override this method\r\n     * to provide additional validation on <code>set</code> and\r\n     * <code>save</code>.  Your implementation should return\r\n     *\r\n     * @param {object} attrs The current data to validate.\r\n     * @returns {Parse.Error|boolean} False if the data is valid.  An error object otherwise.\r\n     * @see Parse.Object#set\r\n     */\r\n\r\n  }, {\r\n    key: \"validate\",\r\n    value: function (attrs\r\n    /*: AttributeMap*/\r\n    )\r\n    /*: ParseError | boolean*/\r\n    {\r\n      if (attrs.hasOwnProperty('ACL') && !(attrs.ACL instanceof _ParseACL.default)) {\r\n        return new _ParseError.default(_ParseError.default.OTHER_CAUSE, 'ACL must be a Parse ACL.');\r\n      }\r\n\r\n      for (var _key in attrs) {\r\n        if (!/^[A-Za-z][0-9A-Za-z_.]*$/.test(_key)) {\r\n          return new _ParseError.default(_ParseError.default.INVALID_KEY_NAME);\r\n        }\r\n      }\r\n\r\n      return false;\r\n    }\r\n    /**\r\n     * Returns the ACL for this object.\r\n     *\r\n     * @returns {Parse.ACL} An instance of Parse.ACL.\r\n     * @see Parse.Object#get\r\n     */\r\n\r\n  }, {\r\n    key: \"getACL\",\r\n    value: function ()\r\n    /*: ?ParseACL*/\r\n    {\r\n      var acl = this.get('ACL');\r\n\r\n      if (acl instanceof _ParseACL.default) {\r\n        return acl;\r\n      }\r\n\r\n      return null;\r\n    }\r\n    /**\r\n     * Sets the ACL to be used for this object.\r\n     *\r\n     * @param {Parse.ACL} acl An instance of Parse.ACL.\r\n     * @param {object} options\r\n     * @returns {(ParseObject | boolean)} Whether the set passed validation.\r\n     * @see Parse.Object#set\r\n     */\r\n\r\n  }, {\r\n    key: \"setACL\",\r\n    value: function (acl\r\n    /*: ParseACL*/\r\n    , options\r\n    /*:: ?: mixed*/\r\n    )\r\n    /*: ParseObject | boolean*/\r\n    {\r\n      return this.set('ACL', acl, options);\r\n    }\r\n    /**\r\n     * Clears any (or specific) changes to this object made since the last call to save()\r\n     *\r\n     * @param {string} [keys] - specify which fields to revert\r\n     */\r\n\r\n  }, {\r\n    key: \"revert\",\r\n    value: function ()\r\n    /*: void*/\r\n    {\r\n      var keysToRevert;\r\n\r\n      for (var _len = arguments.length, keys = new Array(_len), _key2 = 0; _key2 < _len; _key2++) {\r\n        keys[_key2] = arguments[_key2];\r\n      }\r\n\r\n      if (keys.length) {\r\n        keysToRevert = [];\r\n\r\n        var _iterator = _createForOfIteratorHelper(keys),\r\n            _step;\r\n\r\n        try {\r\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\r\n            var _key3 = _step.value;\r\n\r\n            if (typeof _key3 === 'string') {\r\n              keysToRevert.push(_key3);\r\n            } else {\r\n              throw new Error('Parse.Object#revert expects either no, or a list of string, arguments.');\r\n            }\r\n          }\r\n        } catch (err) {\r\n          _iterator.e(err);\r\n        } finally {\r\n          _iterator.f();\r\n        }\r\n      }\r\n\r\n      this._clearPendingOps(keysToRevert);\r\n    }\r\n    /**\r\n     * Clears all attributes on a model\r\n     *\r\n     * @returns {(ParseObject | boolean)}\r\n     */\r\n\r\n  }, {\r\n    key: \"clear\",\r\n    value: function ()\r\n    /*: ParseObject | boolean*/\r\n    {\r\n      var attributes = this.attributes;\r\n      var erasable = {};\r\n      var readonly = ['createdAt', 'updatedAt'];\r\n\r\n      if (typeof this.constructor.readOnlyAttributes === 'function') {\r\n        readonly = (0, _concat.default)(readonly).call(readonly, this.constructor.readOnlyAttributes());\r\n      }\r\n\r\n      for (var _attr11 in attributes) {\r\n        if ((0, _indexOf.default)(readonly).call(readonly, _attr11) < 0) {\r\n          erasable[_attr11] = true;\r\n        }\r\n      }\r\n\r\n      return this.set(erasable, {\r\n        unset: true\r\n      });\r\n    }\r\n    /**\r\n     * Fetch the model from the server. If the server's representation of the\r\n     * model differs from its current attributes, they will be overriden.\r\n     *\r\n     * @param {object} options\r\n     * Valid options are:<ul>\r\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\r\n     *     be used for this request.\r\n     *   <li>sessionToken: A valid session token, used for making a request on\r\n     *       behalf of a specific user.\r\n     *   <li>include: The name(s) of the key(s) to include. Can be a string, an array of strings,\r\n     *       or an array of array of strings.\r\n     *   <li>context: A dictionary that is accessible in Cloud Code `beforeFind` trigger.\r\n     * </ul>\r\n     * @returns {Promise} A promise that is fulfilled when the fetch\r\n     *     completes.\r\n     */\r\n\r\n  }, {\r\n    key: \"fetch\",\r\n    value: function (options\r\n    /*: RequestOptions*/\r\n    )\r\n    /*: Promise*/\r\n    {\r\n      options = options || {};\r\n      var fetchOptions = {};\r\n\r\n      if (options.hasOwnProperty('useMasterKey')) {\r\n        fetchOptions.useMasterKey = options.useMasterKey;\r\n      }\r\n\r\n      if (options.hasOwnProperty('sessionToken')) {\r\n        fetchOptions.sessionToken = options.sessionToken;\r\n      }\r\n\r\n      if (options.hasOwnProperty('context') && (0, _typeof2.default)(options.context) === 'object') {\r\n        fetchOptions.context = options.context;\r\n      }\r\n\r\n      if (options.hasOwnProperty('include')) {\r\n        fetchOptions.include = [];\r\n\r\n        if ((0, _isArray.default)(options.include)) {\r\n          var _context2;\r\n\r\n          (0, _forEach.default)(_context2 = options.include).call(_context2, function (key) {\r\n            if ((0, _isArray.default)(key)) {\r\n              var _context3;\r\n\r\n              fetchOptions.include = (0, _concat.default)(_context3 = fetchOptions.include).call(_context3, key);\r\n            } else {\r\n              fetchOptions.include.push(key);\r\n            }\r\n          });\r\n        } else {\r\n          fetchOptions.include.push(options.include);\r\n        }\r\n      }\r\n\r\n      var controller = _CoreManager.default.getObjectController();\r\n\r\n      return controller.fetch(this, true, fetchOptions);\r\n    }\r\n    /**\r\n     * Fetch the model from the server. If the server's representation of the\r\n     * model differs from its current attributes, they will be overriden.\r\n     *\r\n     * Includes nested Parse.Objects for the provided key. You can use dot\r\n     * notation to specify which fields in the included object are also fetched.\r\n     *\r\n     * @param {string | Array<string | Array<string>>} keys The name(s) of the key(s) to include.\r\n     * @param {object} options\r\n     * Valid options are:<ul>\r\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\r\n     *     be used for this request.\r\n     *   <li>sessionToken: A valid session token, used for making a request on\r\n     *       behalf of a specific user.\r\n     * </ul>\r\n     * @returns {Promise} A promise that is fulfilled when the fetch\r\n     *     completes.\r\n     */\r\n\r\n  }, {\r\n    key: \"fetchWithInclude\",\r\n    value: function (keys\r\n    /*: String | Array<string | Array<string>>*/\r\n    , options\r\n    /*: RequestOptions*/\r\n    )\r\n    /*: Promise*/\r\n    {\r\n      options = options || {};\r\n      options.include = keys;\r\n      return this.fetch(options);\r\n    }\r\n    /**\r\n     * Saves this object to the server at some unspecified time in the future,\r\n     * even if Parse is currently inaccessible.\r\n     *\r\n     * Use this when you may not have a solid network connection, and don't need to know when the save completes.\r\n     * If there is some problem with the object such that it can't be saved, it will be silently discarded.\r\n     *\r\n     * Objects saved with this method will be stored locally in an on-disk cache until they can be delivered to Parse.\r\n     * They will be sent immediately if possible. Otherwise, they will be sent the next time a network connection is\r\n     * available. Objects saved this way will persist even after the app is closed, in which case they will be sent the\r\n     * next time the app is opened.\r\n     *\r\n     * @param {object} [options]\r\n     * Used to pass option parameters to method if arg1 and arg2 were both passed as strings.\r\n     * Valid options are:\r\n     * <ul>\r\n     * <li>sessionToken: A valid session token, used for making a request on\r\n     * behalf of a specific user.\r\n     * <li>cascadeSave: If `false`, nested objects will not be saved (default is `true`).\r\n     * <li>context: A dictionary that is accessible in Cloud Code `beforeSave` and `afterSave` triggers.\r\n     * </ul>\r\n     * @returns {Promise} A promise that is fulfilled when the save\r\n     * completes.\r\n     */\r\n\r\n  }, {\r\n    key: \"saveEventually\",\r\n    value: function () {\r\n      var _saveEventually = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee2(options\r\n      /*: SaveOptions*/\r\n      ) {\r\n        return _regenerator.default.wrap(function (_context4) {\r\n          while (1) {\r\n            switch (_context4.prev = _context4.next) {\r\n              case 0:\r\n                _context4.prev = 0;\r\n                _context4.next = 3;\r\n                return this.save(null, options);\r\n\r\n              case 3:\r\n                _context4.next = 11;\r\n                break;\r\n\r\n              case 5:\r\n                _context4.prev = 5;\r\n                _context4.t0 = _context4[\"catch\"](0);\r\n\r\n                if (!(_context4.t0.message === 'XMLHttpRequest failed: \"Unable to connect to the Parse API\"')) {\r\n                  _context4.next = 11;\r\n                  break;\r\n                }\r\n\r\n                _context4.next = 10;\r\n                return _EventuallyQueue.default.save(this, options);\r\n\r\n              case 10:\r\n                _EventuallyQueue.default.poll();\r\n\r\n              case 11:\r\n                return _context4.abrupt(\"return\", this);\r\n\r\n              case 12:\r\n              case \"end\":\r\n                return _context4.stop();\r\n            }\r\n          }\r\n        }, _callee2, this, [[0, 5]]);\r\n      }));\r\n\r\n      return function () {\r\n        return _saveEventually.apply(this, arguments);\r\n      };\r\n    }()\r\n    /**\r\n     * Set a hash of model attributes, and save the model to the server.\r\n     * updatedAt will be updated when the request returns.\r\n     * You can either call it as:<pre>\r\n     * object.save();</pre>\r\n     * or<pre>\r\n     * object.save(attrs);</pre>\r\n     * or<pre>\r\n     * object.save(null, options);</pre>\r\n     * or<pre>\r\n     * object.save(attrs, options);</pre>\r\n     * or<pre>\r\n     * object.save(key, value);</pre>\r\n     * or<pre>\r\n     * object.save(key, value, options);</pre>\r\n     *\r\n     * Example 1: <pre>\r\n     * gameTurn.save({\r\n     * player: \"Jake Cutter\",\r\n     * diceRoll: 2\r\n     * }).then(function(gameTurnAgain) {\r\n     * // The save was successful.\r\n     * }, function(error) {\r\n     * // The save failed.  Error is an instance of Parse.Error.\r\n     * });</pre>\r\n     *\r\n     * Example 2: <pre>\r\n     * gameTurn.save(\"player\", \"Jake Cutter\");</pre>\r\n     *\r\n     * @param {string | object | null} [arg1]\r\n     * Valid options are:<ul>\r\n     * <li>`Object` - Key/value pairs to update on the object.</li>\r\n     * <li>`String` Key - Key of attribute to update (requires arg2 to also be string)</li>\r\n     * <li>`null` - Passing null for arg1 allows you to save the object with options passed in arg2.</li>\r\n     * </ul>\r\n     * @param {string | object} [arg2]\r\n     * <ul>\r\n     * <li>`String` Value - If arg1 was passed as a key, arg2 is the value that should be set on that key.</li>\r\n     * <li>`Object` Options - Valid options are:\r\n     * <ul>\r\n     * <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\r\n     * be used for this request.\r\n     * <li>sessionToken: A valid session token, used for making a request on\r\n     * behalf of a specific user.\r\n     * <li>cascadeSave: If `false`, nested objects will not be saved (default is `true`).\r\n     * <li>context: A dictionary that is accessible in Cloud Code `beforeSave` and `afterSave` triggers.\r\n     * </ul>\r\n     * </li>\r\n     * </ul>\r\n     * @param {object} [arg3]\r\n     * Used to pass option parameters to method if arg1 and arg2 were both passed as strings.\r\n     * Valid options are:\r\n     * <ul>\r\n     * <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\r\n     * be used for this request.\r\n     * <li>sessionToken: A valid session token, used for making a request on\r\n     * behalf of a specific user.\r\n     * <li>cascadeSave: If `false`, nested objects will not be saved (default is `true`).\r\n     * <li>context: A dictionary that is accessible in Cloud Code `beforeSave` and `afterSave` triggers.\r\n     * </ul>\r\n     * @returns {Promise} A promise that is fulfilled when the save\r\n     * completes.\r\n     */\r\n\r\n  }, {\r\n    key: \"save\",\r\n    value: function (arg1\r\n    /*: ?string | { [attr: string]: mixed }*/\r\n    , arg2\r\n    /*: SaveOptions | mixed*/\r\n    , arg3\r\n    /*:: ?: SaveOptions*/\r\n    )\r\n    /*: Promise*/\r\n    {\r\n      var _this = this;\r\n\r\n      var attrs;\r\n      var options;\r\n\r\n      if ((0, _typeof2.default)(arg1) === 'object' || typeof arg1 === 'undefined') {\r\n        attrs = arg1;\r\n\r\n        if ((0, _typeof2.default)(arg2) === 'object') {\r\n          options = arg2;\r\n        }\r\n      } else {\r\n        attrs = {};\r\n        attrs[arg1] = arg2;\r\n        options = arg3;\r\n      }\r\n\r\n      if (attrs) {\r\n        var validation = this.validate(attrs);\r\n\r\n        if (validation) {\r\n          return _promise.default.reject(validation);\r\n        }\r\n\r\n        this.set(attrs, options);\r\n      }\r\n\r\n      options = options || {};\r\n      var saveOptions = {};\r\n\r\n      if (options.hasOwnProperty('useMasterKey')) {\r\n        saveOptions.useMasterKey = !!options.useMasterKey;\r\n      }\r\n\r\n      if (options.hasOwnProperty('sessionToken') && typeof options.sessionToken === 'string') {\r\n        saveOptions.sessionToken = options.sessionToken;\r\n      }\r\n\r\n      if (options.hasOwnProperty('installationId') && typeof options.installationId === 'string') {\r\n        saveOptions.installationId = options.installationId;\r\n      }\r\n\r\n      if (options.hasOwnProperty('context') && (0, _typeof2.default)(options.context) === 'object') {\r\n        saveOptions.context = options.context;\r\n      }\r\n\r\n      var controller = _CoreManager.default.getObjectController();\r\n\r\n      var unsaved = options.cascadeSave !== false ? (0, _unsavedChildren.default)(this) : null;\r\n      return controller.save(unsaved, saveOptions).then(function () {\r\n        return controller.save(_this, saveOptions);\r\n      });\r\n    }\r\n    /**\r\n     * Deletes this object from the server at some unspecified time in the future,\r\n     * even if Parse is currently inaccessible.\r\n     *\r\n     * Use this when you may not have a solid network connection,\r\n     * and don't need to know when the delete completes. If there is some problem with the object\r\n     * such that it can't be deleted, the request will be silently discarded.\r\n     *\r\n     * Delete instructions made with this method will be stored locally in an on-disk cache until they can be transmitted\r\n     * to Parse. They will be sent immediately if possible. Otherwise, they will be sent the next time a network connection\r\n     * is available. Delete requests will persist even after the app is closed, in which case they will be sent the\r\n     * next time the app is opened.\r\n     *\r\n     * @param {object} [options]\r\n     * Valid options are:<ul>\r\n     *   <li>sessionToken: A valid session token, used for making a request on\r\n     *       behalf of a specific user.\r\n     *   <li>context: A dictionary that is accessible in Cloud Code `beforeDelete` and `afterDelete` triggers.\r\n     * </ul>\r\n     * @returns {Promise} A promise that is fulfilled when the destroy\r\n     *     completes.\r\n     */\r\n\r\n  }, {\r\n    key: \"destroyEventually\",\r\n    value: function () {\r\n      var _destroyEventually = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee3(options\r\n      /*: RequestOptions*/\r\n      ) {\r\n        return _regenerator.default.wrap(function (_context5) {\r\n          while (1) {\r\n            switch (_context5.prev = _context5.next) {\r\n              case 0:\r\n                _context5.prev = 0;\r\n                _context5.next = 3;\r\n                return this.destroy(options);\r\n\r\n              case 3:\r\n                _context5.next = 11;\r\n                break;\r\n\r\n              case 5:\r\n                _context5.prev = 5;\r\n                _context5.t0 = _context5[\"catch\"](0);\r\n\r\n                if (!(_context5.t0.message === 'XMLHttpRequest failed: \"Unable to connect to the Parse API\"')) {\r\n                  _context5.next = 11;\r\n                  break;\r\n                }\r\n\r\n                _context5.next = 10;\r\n                return _EventuallyQueue.default.destroy(this, options);\r\n\r\n              case 10:\r\n                _EventuallyQueue.default.poll();\r\n\r\n              case 11:\r\n                return _context5.abrupt(\"return\", this);\r\n\r\n              case 12:\r\n              case \"end\":\r\n                return _context5.stop();\r\n            }\r\n          }\r\n        }, _callee3, this, [[0, 5]]);\r\n      }));\r\n\r\n      return function () {\r\n        return _destroyEventually.apply(this, arguments);\r\n      };\r\n    }()\r\n    /**\r\n     * Destroy this model on the server if it was already persisted.\r\n     *\r\n     * @param {object} options\r\n     * Valid options are:<ul>\r\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\r\n     *     be used for this request.\r\n     *   <li>sessionToken: A valid session token, used for making a request on\r\n     *       behalf of a specific user.\r\n     *   <li>context: A dictionary that is accessible in Cloud Code `beforeDelete` and `afterDelete` triggers.\r\n     * </ul>\r\n     * @returns {Promise} A promise that is fulfilled when the destroy\r\n     *     completes.\r\n     */\r\n\r\n  }, {\r\n    key: \"destroy\",\r\n    value: function (options\r\n    /*: RequestOptions*/\r\n    )\r\n    /*: Promise*/\r\n    {\r\n      options = options || {};\r\n      var destroyOptions = {};\r\n\r\n      if (options.hasOwnProperty('useMasterKey')) {\r\n        destroyOptions.useMasterKey = options.useMasterKey;\r\n      }\r\n\r\n      if (options.hasOwnProperty('sessionToken')) {\r\n        destroyOptions.sessionToken = options.sessionToken;\r\n      }\r\n\r\n      if (options.hasOwnProperty('context') && (0, _typeof2.default)(options.context) === 'object') {\r\n        destroyOptions.context = options.context;\r\n      }\r\n\r\n      if (!this.id) {\r\n        return _promise.default.resolve();\r\n      }\r\n\r\n      return _CoreManager.default.getObjectController().destroy(this, destroyOptions);\r\n    }\r\n    /**\r\n     * Asynchronously stores the object and every object it points to in the local datastore,\r\n     * recursively, using a default pin name: _default.\r\n     *\r\n     * If those other objects have not been fetched from Parse, they will not be stored.\r\n     * However, if they have changed data, all the changes will be retained.\r\n     *\r\n     * <pre>\r\n     * await object.pin();\r\n     * </pre>\r\n     *\r\n     * To retrieve object:\r\n     * <code>query.fromLocalDatastore()</code> or <code>query.fromPin()</code>\r\n     *\r\n     * @returns {Promise} A promise that is fulfilled when the pin completes.\r\n     */\r\n\r\n  }, {\r\n    key: \"pin\",\r\n    value: function ()\r\n    /*: Promise<void>*/\r\n    {\r\n      return ParseObject.pinAllWithName(_LocalDatastoreUtils.DEFAULT_PIN, [this]);\r\n    }\r\n    /**\r\n     * Asynchronously removes the object and every object it points to in the local datastore,\r\n     * recursively, using a default pin name: _default.\r\n     *\r\n     * <pre>\r\n     * await object.unPin();\r\n     * </pre>\r\n     *\r\n     * @returns {Promise} A promise that is fulfilled when the unPin completes.\r\n     */\r\n\r\n  }, {\r\n    key: \"unPin\",\r\n    value: function ()\r\n    /*: Promise<void>*/\r\n    {\r\n      return ParseObject.unPinAllWithName(_LocalDatastoreUtils.DEFAULT_PIN, [this]);\r\n    }\r\n    /**\r\n     * Asynchronously returns if the object is pinned\r\n     *\r\n     * <pre>\r\n     * const isPinned = await object.isPinned();\r\n     * </pre>\r\n     *\r\n     * @returns {Promise<boolean>} A boolean promise that is fulfilled if object is pinned.\r\n     */\r\n\r\n  }, {\r\n    key: \"isPinned\",\r\n    value: function () {\r\n      var _isPinned = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee4() {\r\n        var localDatastore, objectKey, pin;\r\n        return _regenerator.default.wrap(function (_context6) {\r\n          while (1) {\r\n            switch (_context6.prev = _context6.next) {\r\n              case 0:\r\n                localDatastore = _CoreManager.default.getLocalDatastore();\r\n\r\n                if (localDatastore.isEnabled) {\r\n                  _context6.next = 3;\r\n                  break;\r\n                }\r\n\r\n                return _context6.abrupt(\"return\", _promise.default.reject('Parse.enableLocalDatastore() must be called first'));\r\n\r\n              case 3:\r\n                objectKey = localDatastore.getKeyForObject(this);\r\n                _context6.next = 6;\r\n                return localDatastore.fromPinWithName(objectKey);\r\n\r\n              case 6:\r\n                pin = _context6.sent;\r\n                return _context6.abrupt(\"return\", pin.length > 0);\r\n\r\n              case 8:\r\n              case \"end\":\r\n                return _context6.stop();\r\n            }\r\n          }\r\n        }, _callee4, this);\r\n      }));\r\n\r\n      return function () {\r\n        return _isPinned.apply(this, arguments);\r\n      };\r\n    }()\r\n    /**\r\n     * Asynchronously stores the objects and every object they point to in the local datastore, recursively.\r\n     *\r\n     * If those other objects have not been fetched from Parse, they will not be stored.\r\n     * However, if they have changed data, all the changes will be retained.\r\n     *\r\n     * <pre>\r\n     * await object.pinWithName(name);\r\n     * </pre>\r\n     *\r\n     * To retrieve object:\r\n     * <code>query.fromLocalDatastore()</code> or <code>query.fromPinWithName(name)</code>\r\n     *\r\n     * @param {string} name Name of Pin.\r\n     * @returns {Promise} A promise that is fulfilled when the pin completes.\r\n     */\r\n\r\n  }, {\r\n    key: \"pinWithName\",\r\n    value: function (name\r\n    /*: string*/\r\n    )\r\n    /*: Promise<void>*/\r\n    {\r\n      return ParseObject.pinAllWithName(name, [this]);\r\n    }\r\n    /**\r\n     * Asynchronously removes the object and every object it points to in the local datastore, recursively.\r\n     *\r\n     * <pre>\r\n     * await object.unPinWithName(name);\r\n     * </pre>\r\n     *\r\n     * @param {string} name Name of Pin.\r\n     * @returns {Promise} A promise that is fulfilled when the unPin completes.\r\n     */\r\n\r\n  }, {\r\n    key: \"unPinWithName\",\r\n    value: function (name\r\n    /*: string*/\r\n    )\r\n    /*: Promise<void>*/\r\n    {\r\n      return ParseObject.unPinAllWithName(name, [this]);\r\n    }\r\n    /**\r\n     * Asynchronously loads data from the local datastore into this object.\r\n     *\r\n     * <pre>\r\n     * await object.fetchFromLocalDatastore();\r\n     * </pre>\r\n     *\r\n     * You can create an unfetched pointer with <code>Parse.Object.createWithoutData()</code>\r\n     * and then call <code>fetchFromLocalDatastore()</code> on it.\r\n     *\r\n     * @returns {Promise} A promise that is fulfilled when the fetch completes.\r\n     */\r\n\r\n  }, {\r\n    key: \"fetchFromLocalDatastore\",\r\n    value: function () {\r\n      var _fetchFromLocalDatastore = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee5() {\r\n        var localDatastore, objectKey, pinned, result;\r\n        return _regenerator.default.wrap(function (_context7) {\r\n          while (1) {\r\n            switch (_context7.prev = _context7.next) {\r\n              case 0:\r\n                localDatastore = _CoreManager.default.getLocalDatastore();\r\n\r\n                if (localDatastore.isEnabled) {\r\n                  _context7.next = 3;\r\n                  break;\r\n                }\r\n\r\n                throw new Error('Parse.enableLocalDatastore() must be called first');\r\n\r\n              case 3:\r\n                objectKey = localDatastore.getKeyForObject(this);\r\n                _context7.next = 6;\r\n                return localDatastore._serializeObject(objectKey);\r\n\r\n              case 6:\r\n                pinned = _context7.sent;\r\n\r\n                if (pinned) {\r\n                  _context7.next = 9;\r\n                  break;\r\n                }\r\n\r\n                throw new Error('Cannot fetch an unsaved ParseObject');\r\n\r\n              case 9:\r\n                result = ParseObject.fromJSON(pinned);\r\n\r\n                this._finishFetch(result.toJSON());\r\n\r\n                return _context7.abrupt(\"return\", this);\r\n\r\n              case 12:\r\n              case \"end\":\r\n                return _context7.stop();\r\n            }\r\n          }\r\n        }, _callee5, this);\r\n      }));\r\n\r\n      return function () {\r\n        return _fetchFromLocalDatastore.apply(this, arguments);\r\n      };\r\n    }()\r\n    /** Static methods **/\r\n\r\n  }], [{\r\n    key: \"_getClassMap\",\r\n    value: function () {\r\n      return classMap;\r\n    }\r\n  }, {\r\n    key: \"_clearAllState\",\r\n    value: function () {\r\n      var stateController = _CoreManager.default.getObjectStateController();\r\n\r\n      stateController.clearAllState();\r\n    }\r\n    /**\r\n     * Fetches the given list of Parse.Object.\r\n     * If any error is encountered, stops and calls the error handler.\r\n     *\r\n     * <pre>\r\n     *   Parse.Object.fetchAll([object1, object2, ...])\r\n     *    .then((list) => {\r\n     *      // All the objects were fetched.\r\n     *    }, (error) => {\r\n     *      // An error occurred while fetching one of the objects.\r\n     *    });\r\n     * </pre>\r\n     *\r\n     * @param {Array} list A list of <code>Parse.Object</code>.\r\n     * @param {object} options\r\n     * Valid options are:<ul>\r\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\r\n     *     be used for this request.\r\n     *   <li>sessionToken: A valid session token, used for making a request on\r\n     *       behalf of a specific user.\r\n     *   <li>include: The name(s) of the key(s) to include. Can be a string, an array of strings,\r\n     *       or an array of array of strings.\r\n     * </ul>\r\n     * @static\r\n     * @returns {Parse.Object[]}\r\n     */\r\n\r\n  }, {\r\n    key: \"fetchAll\",\r\n    value: function (list\r\n    /*: Array<ParseObject>*/\r\n    ) {\r\n      var options\r\n      /*: RequestOptions*/\r\n      = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\r\n      var queryOptions = {};\r\n\r\n      if (options.hasOwnProperty('useMasterKey')) {\r\n        queryOptions.useMasterKey = options.useMasterKey;\r\n      }\r\n\r\n      if (options.hasOwnProperty('sessionToken')) {\r\n        queryOptions.sessionToken = options.sessionToken;\r\n      }\r\n\r\n      if (options.hasOwnProperty('include')) {\r\n        queryOptions.include = ParseObject.handleIncludeOptions(options);\r\n      }\r\n\r\n      return _CoreManager.default.getObjectController().fetch(list, true, queryOptions);\r\n    }\r\n    /**\r\n     * Fetches the given list of Parse.Object.\r\n     *\r\n     * Includes nested Parse.Objects for the provided key. You can use dot\r\n     * notation to specify which fields in the included object are also fetched.\r\n     *\r\n     * If any error is encountered, stops and calls the error handler.\r\n     *\r\n     * <pre>\r\n     *   Parse.Object.fetchAllWithInclude([object1, object2, ...], [pointer1, pointer2, ...])\r\n     *    .then((list) => {\r\n     *      // All the objects were fetched.\r\n     *    }, (error) => {\r\n     *      // An error occurred while fetching one of the objects.\r\n     *    });\r\n     * </pre>\r\n     *\r\n     * @param {Array} list A list of <code>Parse.Object</code>.\r\n     * @param {string | Array<string | Array<string>>} keys The name(s) of the key(s) to include.\r\n     * @param {object} options\r\n     * Valid options are:<ul>\r\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\r\n     *     be used for this request.\r\n     *   <li>sessionToken: A valid session token, used for making a request on\r\n     *       behalf of a specific user.\r\n     * </ul>\r\n     * @static\r\n     * @returns {Parse.Object[]}\r\n     */\r\n\r\n  }, {\r\n    key: \"fetchAllWithInclude\",\r\n    value: function (list\r\n    /*: Array<ParseObject>*/\r\n    , keys\r\n    /*: String | Array<string | Array<string>>*/\r\n    , options\r\n    /*: RequestOptions*/\r\n    ) {\r\n      options = options || {};\r\n      options.include = keys;\r\n      return ParseObject.fetchAll(list, options);\r\n    }\r\n    /**\r\n     * Fetches the given list of Parse.Object if needed.\r\n     * If any error is encountered, stops and calls the error handler.\r\n     *\r\n     * Includes nested Parse.Objects for the provided key. You can use dot\r\n     * notation to specify which fields in the included object are also fetched.\r\n     *\r\n     * If any error is encountered, stops and calls the error handler.\r\n     *\r\n     * <pre>\r\n     *   Parse.Object.fetchAllIfNeededWithInclude([object1, object2, ...], [pointer1, pointer2, ...])\r\n     *    .then((list) => {\r\n     *      // All the objects were fetched.\r\n     *    }, (error) => {\r\n     *      // An error occurred while fetching one of the objects.\r\n     *    });\r\n     * </pre>\r\n     *\r\n     * @param {Array} list A list of <code>Parse.Object</code>.\r\n     * @param {string | Array<string | Array<string>>} keys The name(s) of the key(s) to include.\r\n     * @param {object} options\r\n     * Valid options are:<ul>\r\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\r\n     *     be used for this request.\r\n     *   <li>sessionToken: A valid session token, used for making a request on\r\n     *       behalf of a specific user.\r\n     * </ul>\r\n     * @static\r\n     * @returns {Parse.Object[]}\r\n     */\r\n\r\n  }, {\r\n    key: \"fetchAllIfNeededWithInclude\",\r\n    value: function (list\r\n    /*: Array<ParseObject>*/\r\n    , keys\r\n    /*: String | Array<string | Array<string>>*/\r\n    , options\r\n    /*: RequestOptions*/\r\n    ) {\r\n      options = options || {};\r\n      options.include = keys;\r\n      return ParseObject.fetchAllIfNeeded(list, options);\r\n    }\r\n    /**\r\n     * Fetches the given list of Parse.Object if needed.\r\n     * If any error is encountered, stops and calls the error handler.\r\n     *\r\n     * <pre>\r\n     *   Parse.Object.fetchAllIfNeeded([object1, ...])\r\n     *    .then((list) => {\r\n     *      // Objects were fetched and updated.\r\n     *    }, (error) => {\r\n     *      // An error occurred while fetching one of the objects.\r\n     *    });\r\n     * </pre>\r\n     *\r\n     * @param {Array} list A list of <code>Parse.Object</code>.\r\n     * @param {object} options\r\n     * @static\r\n     * @returns {Parse.Object[]}\r\n     */\r\n\r\n  }, {\r\n    key: \"fetchAllIfNeeded\",\r\n    value: function (list\r\n    /*: Array<ParseObject>*/\r\n    , options) {\r\n      options = options || {};\r\n      var queryOptions = {};\r\n\r\n      if (options.hasOwnProperty('useMasterKey')) {\r\n        queryOptions.useMasterKey = options.useMasterKey;\r\n      }\r\n\r\n      if (options.hasOwnProperty('sessionToken')) {\r\n        queryOptions.sessionToken = options.sessionToken;\r\n      }\r\n\r\n      if (options.hasOwnProperty('include')) {\r\n        queryOptions.include = ParseObject.handleIncludeOptions(options);\r\n      }\r\n\r\n      return _CoreManager.default.getObjectController().fetch(list, false, queryOptions);\r\n    }\r\n  }, {\r\n    key: \"handleIncludeOptions\",\r\n    value: function (options) {\r\n      var include = [];\r\n\r\n      if ((0, _isArray.default)(options.include)) {\r\n        var _context8;\r\n\r\n        (0, _forEach.default)(_context8 = options.include).call(_context8, function (key) {\r\n          if ((0, _isArray.default)(key)) {\r\n            include = (0, _concat.default)(include).call(include, key);\r\n          } else {\r\n            include.push(key);\r\n          }\r\n        });\r\n      } else {\r\n        include.push(options.include);\r\n      }\r\n\r\n      return include;\r\n    }\r\n    /**\r\n     * Destroy the given list of models on the server if it was already persisted.\r\n     *\r\n     * <p>Unlike saveAll, if an error occurs while deleting an individual model,\r\n     * this method will continue trying to delete the rest of the models if\r\n     * possible, except in the case of a fatal error like a connection error.\r\n     *\r\n     * <p>In particular, the Parse.Error object returned in the case of error may\r\n     * be one of two types:\r\n     *\r\n     * <ul>\r\n     * <li>A Parse.Error.AGGREGATE_ERROR. This object's \"errors\" property is an\r\n     * array of other Parse.Error objects. Each error object in this array\r\n     * has an \"object\" property that references the object that could not be\r\n     * deleted (for instance, because that object could not be found).</li>\r\n     * <li>A non-aggregate Parse.Error. This indicates a serious error that\r\n     * caused the delete operation to be aborted partway through (for\r\n     * instance, a connection failure in the middle of the delete).</li>\r\n     * </ul>\r\n     *\r\n     * <pre>\r\n     * Parse.Object.destroyAll([object1, object2, ...])\r\n     * .then((list) => {\r\n     * // All the objects were deleted.\r\n     * }, (error) => {\r\n     * // An error occurred while deleting one or more of the objects.\r\n     * // If this is an aggregate error, then we can inspect each error\r\n     * // object individually to determine the reason why a particular\r\n     * // object was not deleted.\r\n     * if (error.code === Parse.Error.AGGREGATE_ERROR) {\r\n     * for (var i = 0; i < error.errors.length; i++) {\r\n     * console.log(\"Couldn't delete \" + error.errors[i].object.id +\r\n     * \"due to \" + error.errors[i].message);\r\n     * }\r\n     * } else {\r\n     * console.log(\"Delete aborted because of \" + error.message);\r\n     * }\r\n     * });\r\n     * </pre>\r\n     *\r\n     * @param {Array} list A list of <code>Parse.Object</code>.\r\n     * @param {object} options\r\n     * @static\r\n     * @returns {Promise} A promise that is fulfilled when the destroyAll\r\n     * completes.\r\n     */\r\n\r\n  }, {\r\n    key: \"destroyAll\",\r\n    value: function (list\r\n    /*: Array<ParseObject>*/\r\n    ) {\r\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\r\n      var destroyOptions = {};\r\n\r\n      if (options.hasOwnProperty('useMasterKey')) {\r\n        destroyOptions.useMasterKey = options.useMasterKey;\r\n      }\r\n\r\n      if (options.hasOwnProperty('sessionToken')) {\r\n        destroyOptions.sessionToken = options.sessionToken;\r\n      }\r\n\r\n      if (options.hasOwnProperty('batchSize') && typeof options.batchSize === 'number') {\r\n        destroyOptions.batchSize = options.batchSize;\r\n      }\r\n\r\n      if (options.hasOwnProperty('context') && (0, _typeof2.default)(options.context) === 'object') {\r\n        destroyOptions.context = options.context;\r\n      }\r\n\r\n      return _CoreManager.default.getObjectController().destroy(list, destroyOptions);\r\n    }\r\n    /**\r\n     * Saves the given list of Parse.Object.\r\n     * If any error is encountered, stops and calls the error handler.\r\n     *\r\n     * <pre>\r\n     * Parse.Object.saveAll([object1, object2, ...])\r\n     * .then((list) => {\r\n     * // All the objects were saved.\r\n     * }, (error) => {\r\n     * // An error occurred while saving one of the objects.\r\n     * });\r\n     * </pre>\r\n     *\r\n     * @param {Array} list A list of <code>Parse.Object</code>.\r\n     * @param {object} options\r\n     * @static\r\n     * @returns {Parse.Object[]}\r\n     */\r\n\r\n  }, {\r\n    key: \"saveAll\",\r\n    value: function (list\r\n    /*: Array<ParseObject>*/\r\n    ) {\r\n      var options\r\n      /*: RequestOptions*/\r\n      = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\r\n      var saveOptions = {};\r\n\r\n      if (options.hasOwnProperty('useMasterKey')) {\r\n        saveOptions.useMasterKey = options.useMasterKey;\r\n      }\r\n\r\n      if (options.hasOwnProperty('sessionToken')) {\r\n        saveOptions.sessionToken = options.sessionToken;\r\n      }\r\n\r\n      if (options.hasOwnProperty('batchSize') && typeof options.batchSize === 'number') {\r\n        saveOptions.batchSize = options.batchSize;\r\n      }\r\n\r\n      if (options.hasOwnProperty('context') && (0, _typeof2.default)(options.context) === 'object') {\r\n        saveOptions.context = options.context;\r\n      }\r\n\r\n      return _CoreManager.default.getObjectController().save(list, saveOptions);\r\n    }\r\n    /**\r\n     * Creates a reference to a subclass of Parse.Object with the given id. This\r\n     * does not exist on Parse.Object, only on subclasses.\r\n     *\r\n     * <p>A shortcut for: <pre>\r\n     *  var Foo = Parse.Object.extend(\"Foo\");\r\n     *  var pointerToFoo = new Foo();\r\n     *  pointerToFoo.id = \"myObjectId\";\r\n     * </pre>\r\n     *\r\n     * @param {string} id The ID of the object to create a reference to.\r\n     * @static\r\n     * @returns {Parse.Object} A Parse.Object reference.\r\n     */\r\n\r\n  }, {\r\n    key: \"createWithoutData\",\r\n    value: function (id\r\n    /*: string*/\r\n    ) {\r\n      var obj = new this();\r\n      obj.id = id;\r\n      return obj;\r\n    }\r\n    /**\r\n     * Creates a new instance of a Parse Object from a JSON representation.\r\n     *\r\n     * @param {object} json The JSON map of the Object's data\r\n     * @param {boolean} override In single instance mode, all old server data\r\n     *   is overwritten if this is set to true\r\n     * @param {boolean} dirty Whether the Parse.Object should set JSON keys to dirty\r\n     * @static\r\n     * @returns {Parse.Object} A Parse.Object reference\r\n     */\r\n\r\n  }, {\r\n    key: \"fromJSON\",\r\n    value: function (json\r\n    /*: any*/\r\n    , override\r\n    /*:: ?: boolean*/\r\n    , dirty\r\n    /*:: ?: boolean*/\r\n    ) {\r\n      if (!json.className) {\r\n        throw new Error('Cannot create an object without a className');\r\n      }\r\n\r\n      var constructor = classMap[json.className];\r\n      var o = constructor ? new constructor(json.className) : new ParseObject(json.className);\r\n      var otherAttributes = {};\r\n\r\n      for (var _attr12 in json) {\r\n        if (_attr12 !== 'className' && _attr12 !== '__type') {\r\n          otherAttributes[_attr12] = json[_attr12];\r\n\r\n          if (dirty) {\r\n            o.set(_attr12, json[_attr12]);\r\n          }\r\n        }\r\n      }\r\n\r\n      if (override) {\r\n        // id needs to be set before clearServerData can work\r\n        if (otherAttributes.objectId) {\r\n          o.id = otherAttributes.objectId;\r\n        }\r\n\r\n        var preserved = null;\r\n\r\n        if (typeof o._preserveFieldsOnFetch === 'function') {\r\n          preserved = o._preserveFieldsOnFetch();\r\n        }\r\n\r\n        o._clearServerData();\r\n\r\n        if (preserved) {\r\n          o._finishFetch(preserved);\r\n        }\r\n      }\r\n\r\n      o._finishFetch(otherAttributes);\r\n\r\n      if (json.objectId) {\r\n        o._setExisted(true);\r\n      }\r\n\r\n      return o;\r\n    }\r\n    /**\r\n     * Registers a subclass of Parse.Object with a specific class name.\r\n     * When objects of that class are retrieved from a query, they will be\r\n     * instantiated with this subclass.\r\n     * This is only necessary when using ES6 subclassing.\r\n     *\r\n     * @param {string} className The class name of the subclass\r\n     * @param {Function} constructor The subclass\r\n     */\r\n\r\n  }, {\r\n    key: \"registerSubclass\",\r\n    value: function (className\r\n    /*: string*/\r\n    , constructor\r\n    /*: any*/\r\n    ) {\r\n      if (typeof className !== 'string') {\r\n        throw new TypeError('The first argument must be a valid class name.');\r\n      }\r\n\r\n      if (typeof constructor === 'undefined') {\r\n        throw new TypeError('You must supply a subclass constructor.');\r\n      }\r\n\r\n      if (typeof constructor !== 'function') {\r\n        throw new TypeError('You must register the subclass constructor. ' + 'Did you attempt to register an instance of the subclass?');\r\n      }\r\n\r\n      classMap[className] = constructor;\r\n\r\n      if (!constructor.className) {\r\n        constructor.className = className;\r\n      }\r\n    }\r\n    /**\r\n     * Unegisters a subclass of Parse.Object with a specific class name.\r\n     *\r\n     * @param {string} className The class name of the subclass\r\n     */\r\n\r\n  }, {\r\n    key: \"unregisterSubclass\",\r\n    value: function (className\r\n    /*: string*/\r\n    ) {\r\n      if (typeof className !== 'string') {\r\n        throw new TypeError('The first argument must be a valid class name.');\r\n      }\r\n\r\n      delete classMap[className];\r\n    }\r\n    /**\r\n     * Creates a new subclass of Parse.Object for the given Parse class name.\r\n     *\r\n     * <p>Every extension of a Parse class will inherit from the most recent\r\n     * previous extension of that class. When a Parse.Object is automatically\r\n     * created by parsing JSON, it will use the most recent extension of that\r\n     * class.</p>\r\n     *\r\n     * <p>You should call either:<pre>\r\n     *     var MyClass = Parse.Object.extend(\"MyClass\", {\r\n     *         <i>Instance methods</i>,\r\n     *         initialize: function(attrs, options) {\r\n     *             this.someInstanceProperty = [],\r\n     *             <i>Other instance properties</i>\r\n     *         }\r\n     *     }, {\r\n     *         <i>Class properties</i>\r\n     *     });</pre>\r\n     * or, for Backbone compatibility:<pre>\r\n     *     var MyClass = Parse.Object.extend({\r\n     *         className: \"MyClass\",\r\n     *         <i>Instance methods</i>,\r\n     *         initialize: function(attrs, options) {\r\n     *             this.someInstanceProperty = [],\r\n     *             <i>Other instance properties</i>\r\n     *         }\r\n     *     }, {\r\n     *         <i>Class properties</i>\r\n     *     });</pre></p>\r\n     *\r\n     * @param {string} className The name of the Parse class backing this model.\r\n     * @param {object} protoProps Instance properties to add to instances of the\r\n     *     class returned from this method.\r\n     * @param {object} classProps Class properties to add the class returned from\r\n     *     this method.\r\n     * @returns {Parse.Object} A new subclass of Parse.Object.\r\n     */\r\n\r\n  }, {\r\n    key: \"extend\",\r\n    value: function (className\r\n    /*: any*/\r\n    , protoProps\r\n    /*: any*/\r\n    , classProps\r\n    /*: any*/\r\n    ) {\r\n      if (typeof className !== 'string') {\r\n        if (className && typeof className.className === 'string') {\r\n          return ParseObject.extend(className.className, className, protoProps);\r\n        } else {\r\n          throw new Error(\"Parse.Object.extend's first argument should be the className.\");\r\n        }\r\n      }\r\n\r\n      var adjustedClassName = className;\r\n\r\n      if (adjustedClassName === 'User' && _CoreManager.default.get('PERFORM_USER_REWRITE')) {\r\n        adjustedClassName = '_User';\r\n      }\r\n\r\n      var parentProto = ParseObject.prototype;\r\n\r\n      if (this.hasOwnProperty('__super__') && this.__super__) {\r\n        parentProto = this.prototype;\r\n      } else if (classMap[adjustedClassName]) {\r\n        parentProto = classMap[adjustedClassName].prototype;\r\n      }\r\n\r\n      var ParseObjectSubclass = function (attributes, options) {\r\n        this.className = adjustedClassName;\r\n        this._objCount = objectCount++; // Enable legacy initializers\r\n\r\n        if (typeof this.initialize === 'function') {\r\n          this.initialize.apply(this, arguments);\r\n        }\r\n\r\n        if (attributes && (0, _typeof2.default)(attributes) === 'object') {\r\n          if (!this.set(attributes || {}, options)) {\r\n            throw new Error(\"Can't create an invalid Parse Object\");\r\n          }\r\n        }\r\n      };\r\n\r\n      ParseObjectSubclass.className = adjustedClassName;\r\n      ParseObjectSubclass.__super__ = parentProto;\r\n      ParseObjectSubclass.prototype = (0, _create.default)(parentProto, {\r\n        constructor: {\r\n          value: ParseObjectSubclass,\r\n          enumerable: false,\r\n          writable: true,\r\n          configurable: true\r\n        }\r\n      });\r\n\r\n      if (protoProps) {\r\n        for (var prop in protoProps) {\r\n          if (prop !== 'className') {\r\n            (0, _defineProperty2.default)(ParseObjectSubclass.prototype, prop, {\r\n              value: protoProps[prop],\r\n              enumerable: false,\r\n              writable: true,\r\n              configurable: true\r\n            });\r\n          }\r\n        }\r\n      }\r\n\r\n      if (classProps) {\r\n        for (var _prop in classProps) {\r\n          if (_prop !== 'className') {\r\n            (0, _defineProperty2.default)(ParseObjectSubclass, _prop, {\r\n              value: classProps[_prop],\r\n              enumerable: false,\r\n              writable: true,\r\n              configurable: true\r\n            });\r\n          }\r\n        }\r\n      }\r\n\r\n      ParseObjectSubclass.extend = function (name, protoProps, classProps) {\r\n        if (typeof name === 'string') {\r\n          return ParseObject.extend.call(ParseObjectSubclass, name, protoProps, classProps);\r\n        }\r\n\r\n        return ParseObject.extend.call(ParseObjectSubclass, adjustedClassName, name, protoProps);\r\n      };\r\n\r\n      ParseObjectSubclass.createWithoutData = ParseObject.createWithoutData;\r\n      classMap[adjustedClassName] = ParseObjectSubclass;\r\n      return ParseObjectSubclass;\r\n    }\r\n    /**\r\n     * Enable single instance objects, where any local objects with the same Id\r\n     * share the same attributes, and stay synchronized with each other.\r\n     * This is disabled by default in server environments, since it can lead to\r\n     * security issues.\r\n     *\r\n     * @static\r\n     */\r\n\r\n  }, {\r\n    key: \"enableSingleInstance\",\r\n    value: function () {\r\n      singleInstance = true;\r\n\r\n      _CoreManager.default.setObjectStateController(SingleInstanceStateController);\r\n    }\r\n    /**\r\n     * Disable single instance objects, where any local objects with the same Id\r\n     * share the same attributes, and stay synchronized with each other.\r\n     * When disabled, you can have two instances of the same object in memory\r\n     * without them sharing attributes.\r\n     *\r\n     * @static\r\n     */\r\n\r\n  }, {\r\n    key: \"disableSingleInstance\",\r\n    value: function () {\r\n      singleInstance = false;\r\n\r\n      _CoreManager.default.setObjectStateController(UniqueInstanceStateController);\r\n    }\r\n    /**\r\n     * Asynchronously stores the objects and every object they point to in the local datastore,\r\n     * recursively, using a default pin name: _default.\r\n     *\r\n     * If those other objects have not been fetched from Parse, they will not be stored.\r\n     * However, if they have changed data, all the changes will be retained.\r\n     *\r\n     * <pre>\r\n     * await Parse.Object.pinAll([...]);\r\n     * </pre>\r\n     *\r\n     * To retrieve object:\r\n     * <code>query.fromLocalDatastore()</code> or <code>query.fromPin()</code>\r\n     *\r\n     * @param {Array} objects A list of <code>Parse.Object</code>.\r\n     * @returns {Promise} A promise that is fulfilled when the pin completes.\r\n     * @static\r\n     */\r\n\r\n  }, {\r\n    key: \"pinAll\",\r\n    value: function (objects\r\n    /*: Array<ParseObject>*/\r\n    )\r\n    /*: Promise<void>*/\r\n    {\r\n      var localDatastore = _CoreManager.default.getLocalDatastore();\r\n\r\n      if (!localDatastore.isEnabled) {\r\n        return _promise.default.reject('Parse.enableLocalDatastore() must be called first');\r\n      }\r\n\r\n      return ParseObject.pinAllWithName(_LocalDatastoreUtils.DEFAULT_PIN, objects);\r\n    }\r\n    /**\r\n     * Asynchronously stores the objects and every object they point to in the local datastore, recursively.\r\n     *\r\n     * If those other objects have not been fetched from Parse, they will not be stored.\r\n     * However, if they have changed data, all the changes will be retained.\r\n     *\r\n     * <pre>\r\n     * await Parse.Object.pinAllWithName(name, [obj1, obj2, ...]);\r\n     * </pre>\r\n     *\r\n     * To retrieve object:\r\n     * <code>query.fromLocalDatastore()</code> or <code>query.fromPinWithName(name)</code>\r\n     *\r\n     * @param {string} name Name of Pin.\r\n     * @param {Array} objects A list of <code>Parse.Object</code>.\r\n     * @returns {Promise} A promise that is fulfilled when the pin completes.\r\n     * @static\r\n     */\r\n\r\n  }, {\r\n    key: \"pinAllWithName\",\r\n    value: function (name\r\n    /*: string*/\r\n    , objects\r\n    /*: Array<ParseObject>*/\r\n    )\r\n    /*: Promise<void>*/\r\n    {\r\n      var localDatastore = _CoreManager.default.getLocalDatastore();\r\n\r\n      if (!localDatastore.isEnabled) {\r\n        return _promise.default.reject('Parse.enableLocalDatastore() must be called first');\r\n      }\r\n\r\n      return localDatastore._handlePinAllWithName(name, objects);\r\n    }\r\n    /**\r\n     * Asynchronously removes the objects and every object they point to in the local datastore,\r\n     * recursively, using a default pin name: _default.\r\n     *\r\n     * <pre>\r\n     * await Parse.Object.unPinAll([...]);\r\n     * </pre>\r\n     *\r\n     * @param {Array} objects A list of <code>Parse.Object</code>.\r\n     * @returns {Promise} A promise that is fulfilled when the unPin completes.\r\n     * @static\r\n     */\r\n\r\n  }, {\r\n    key: \"unPinAll\",\r\n    value: function (objects\r\n    /*: Array<ParseObject>*/\r\n    )\r\n    /*: Promise<void>*/\r\n    {\r\n      var localDatastore = _CoreManager.default.getLocalDatastore();\r\n\r\n      if (!localDatastore.isEnabled) {\r\n        return _promise.default.reject('Parse.enableLocalDatastore() must be called first');\r\n      }\r\n\r\n      return ParseObject.unPinAllWithName(_LocalDatastoreUtils.DEFAULT_PIN, objects);\r\n    }\r\n    /**\r\n     * Asynchronously removes the objects and every object they point to in the local datastore, recursively.\r\n     *\r\n     * <pre>\r\n     * await Parse.Object.unPinAllWithName(name, [obj1, obj2, ...]);\r\n     * </pre>\r\n     *\r\n     * @param {string} name Name of Pin.\r\n     * @param {Array} objects A list of <code>Parse.Object</code>.\r\n     * @returns {Promise} A promise that is fulfilled when the unPin completes.\r\n     * @static\r\n     */\r\n\r\n  }, {\r\n    key: \"unPinAllWithName\",\r\n    value: function (name\r\n    /*: string*/\r\n    , objects\r\n    /*: Array<ParseObject>*/\r\n    )\r\n    /*: Promise<void>*/\r\n    {\r\n      var localDatastore = _CoreManager.default.getLocalDatastore();\r\n\r\n      if (!localDatastore.isEnabled) {\r\n        return _promise.default.reject('Parse.enableLocalDatastore() must be called first');\r\n      }\r\n\r\n      return localDatastore._handleUnPinAllWithName(name, objects);\r\n    }\r\n    /**\r\n     * Asynchronously removes all objects in the local datastore using a default pin name: _default.\r\n     *\r\n     * <pre>\r\n     * await Parse.Object.unPinAllObjects();\r\n     * </pre>\r\n     *\r\n     * @returns {Promise} A promise that is fulfilled when the unPin completes.\r\n     * @static\r\n     */\r\n\r\n  }, {\r\n    key: \"unPinAllObjects\",\r\n    value: function ()\r\n    /*: Promise<void>*/\r\n    {\r\n      var localDatastore = _CoreManager.default.getLocalDatastore();\r\n\r\n      if (!localDatastore.isEnabled) {\r\n        return _promise.default.reject('Parse.enableLocalDatastore() must be called first');\r\n      }\r\n\r\n      return localDatastore.unPinWithName(_LocalDatastoreUtils.DEFAULT_PIN);\r\n    }\r\n    /**\r\n     * Asynchronously removes all objects with the specified pin name.\r\n     * Deletes the pin name also.\r\n     *\r\n     * <pre>\r\n     * await Parse.Object.unPinAllObjectsWithName(name);\r\n     * </pre>\r\n     *\r\n     * @param {string} name Name of Pin.\r\n     * @returns {Promise} A promise that is fulfilled when the unPin completes.\r\n     * @static\r\n     */\r\n\r\n  }, {\r\n    key: \"unPinAllObjectsWithName\",\r\n    value: function (name\r\n    /*: string*/\r\n    )\r\n    /*: Promise<void>*/\r\n    {\r\n      var localDatastore = _CoreManager.default.getLocalDatastore();\r\n\r\n      if (!localDatastore.isEnabled) {\r\n        return _promise.default.reject('Parse.enableLocalDatastore() must be called first');\r\n      }\r\n\r\n      return localDatastore.unPinWithName(_LocalDatastoreUtils.PIN_PREFIX + name);\r\n    }\r\n  }]);\r\n  return ParseObject;\r\n}();\r\n\r\nvar DefaultController = {\r\n  fetch: function (target\r\n  /*: ParseObject | Array<ParseObject>*/\r\n  , forceFetch\r\n  /*: boolean*/\r\n  , options\r\n  /*: RequestOptions*/\r\n  )\r\n  /*: Promise<Array<void> | ParseObject>*/\r\n  {\r\n    var localDatastore = _CoreManager.default.getLocalDatastore();\r\n\r\n    if ((0, _isArray.default)(target)) {\r\n      if (target.length < 1) {\r\n        return _promise.default.resolve([]);\r\n      }\r\n\r\n      var objs = [];\r\n      var ids = [];\r\n      var className = null;\r\n      var results = [];\r\n      var error = null;\r\n      (0, _forEach.default)(target).call(target, function (el) {\r\n        if (error) {\r\n          return;\r\n        }\r\n\r\n        if (!className) {\r\n          className = el.className;\r\n        }\r\n\r\n        if (className !== el.className) {\r\n          error = new _ParseError.default(_ParseError.default.INVALID_CLASS_NAME, 'All objects should be of the same class');\r\n        }\r\n\r\n        if (!el.id) {\r\n          error = new _ParseError.default(_ParseError.default.MISSING_OBJECT_ID, 'All objects must have an ID');\r\n        }\r\n\r\n        if (forceFetch || !el.isDataAvailable()) {\r\n          ids.push(el.id);\r\n          objs.push(el);\r\n        }\r\n\r\n        results.push(el);\r\n      });\r\n\r\n      if (error) {\r\n        return _promise.default.reject(error);\r\n      }\r\n\r\n      var query = new _ParseQuery.default(className);\r\n      query.containedIn('objectId', ids);\r\n\r\n      if (options && options.include) {\r\n        query.include(options.include);\r\n      }\r\n\r\n      query._limit = ids.length;\r\n      return (0, _find.default)(query).call(query, options).then( /*#__PURE__*/function () {\r\n        var _ref = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee6(objects) {\r\n          var idMap, i, obj, _i, _obj, id, _iterator2, _step2, object;\r\n\r\n          return _regenerator.default.wrap(function (_context9) {\r\n            while (1) {\r\n              switch (_context9.prev = _context9.next) {\r\n                case 0:\r\n                  idMap = {};\r\n                  (0, _forEach.default)(objects).call(objects, function (o) {\r\n                    idMap[o.id] = o;\r\n                  });\r\n                  i = 0;\r\n\r\n                case 3:\r\n                  if (!(i < objs.length)) {\r\n                    _context9.next = 11;\r\n                    break;\r\n                  }\r\n\r\n                  obj = objs[i];\r\n\r\n                  if (!(!obj || !obj.id || !idMap[obj.id])) {\r\n                    _context9.next = 8;\r\n                    break;\r\n                  }\r\n\r\n                  if (!forceFetch) {\r\n                    _context9.next = 8;\r\n                    break;\r\n                  }\r\n\r\n                  return _context9.abrupt(\"return\", _promise.default.reject(new _ParseError.default(_ParseError.default.OBJECT_NOT_FOUND, 'All objects must exist on the server.')));\r\n\r\n                case 8:\r\n                  i++;\r\n                  _context9.next = 3;\r\n                  break;\r\n\r\n                case 11:\r\n                  if (!singleInstance) {\r\n                    // If single instance objects are disabled, we need to replace the\r\n                    for (_i = 0; _i < results.length; _i++) {\r\n                      _obj = results[_i];\r\n\r\n                      if (_obj && _obj.id && idMap[_obj.id]) {\r\n                        id = _obj.id;\r\n\r\n                        _obj._finishFetch(idMap[id].toJSON());\r\n\r\n                        results[_i] = idMap[id];\r\n                      }\r\n                    }\r\n                  }\r\n\r\n                  _iterator2 = _createForOfIteratorHelper(results);\r\n                  _context9.prev = 13;\r\n\r\n                  _iterator2.s();\r\n\r\n                case 15:\r\n                  if ((_step2 = _iterator2.n()).done) {\r\n                    _context9.next = 21;\r\n                    break;\r\n                  }\r\n\r\n                  object = _step2.value;\r\n                  _context9.next = 19;\r\n                  return localDatastore._updateObjectIfPinned(object);\r\n\r\n                case 19:\r\n                  _context9.next = 15;\r\n                  break;\r\n\r\n                case 21:\r\n                  _context9.next = 26;\r\n                  break;\r\n\r\n                case 23:\r\n                  _context9.prev = 23;\r\n                  _context9.t0 = _context9[\"catch\"](13);\r\n\r\n                  _iterator2.e(_context9.t0);\r\n\r\n                case 26:\r\n                  _context9.prev = 26;\r\n\r\n                  _iterator2.f();\r\n\r\n                  return _context9.finish(26);\r\n\r\n                case 29:\r\n                  return _context9.abrupt(\"return\", _promise.default.resolve(results));\r\n\r\n                case 30:\r\n                case \"end\":\r\n                  return _context9.stop();\r\n              }\r\n            }\r\n          }, _callee6, null, [[13, 23, 26, 29]]);\r\n        }));\r\n\r\n        return function () {\r\n          return _ref.apply(this, arguments);\r\n        };\r\n      }());\r\n    } else if (target instanceof ParseObject) {\r\n      if (!target.id) {\r\n        return _promise.default.reject(new _ParseError.default(_ParseError.default.MISSING_OBJECT_ID, 'Object does not have an ID'));\r\n      }\r\n\r\n      var RESTController = _CoreManager.default.getRESTController();\r\n\r\n      var params = {};\r\n\r\n      if (options && options.include) {\r\n        params.include = options.include.join();\r\n      }\r\n\r\n      return RESTController.request('GET', 'classes/' + target.className + '/' + target._getId(), params, options).then( /*#__PURE__*/function () {\r\n        var _ref2 = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee7(response) {\r\n          return _regenerator.default.wrap(function (_context10) {\r\n            while (1) {\r\n              switch (_context10.prev = _context10.next) {\r\n                case 0:\r\n                  target._clearPendingOps();\r\n\r\n                  target._clearServerData();\r\n\r\n                  target._finishFetch(response);\r\n\r\n                  _context10.next = 5;\r\n                  return localDatastore._updateObjectIfPinned(target);\r\n\r\n                case 5:\r\n                  return _context10.abrupt(\"return\", target);\r\n\r\n                case 6:\r\n                case \"end\":\r\n                  return _context10.stop();\r\n              }\r\n            }\r\n          }, _callee7);\r\n        }));\r\n\r\n        return function () {\r\n          return _ref2.apply(this, arguments);\r\n        };\r\n      }());\r\n    }\r\n\r\n    return _promise.default.resolve();\r\n  },\r\n  destroy: function (target\r\n  /*: ParseObject | Array<ParseObject>*/\r\n  , options\r\n  /*: RequestOptions*/\r\n  )\r\n  /*: Promise<Array<void> | ParseObject>*/\r\n  {\r\n    return (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee10() {\r\n      var batchSize, localDatastore, RESTController, batches, deleteCompleted, errors;\r\n      return _regenerator.default.wrap(function (_context13) {\r\n        while (1) {\r\n          switch (_context13.prev = _context13.next) {\r\n            case 0:\r\n              batchSize = options && options.batchSize ? options.batchSize : _CoreManager.default.get('REQUEST_BATCH_SIZE');\r\n              localDatastore = _CoreManager.default.getLocalDatastore();\r\n              RESTController = _CoreManager.default.getRESTController();\r\n\r\n              if (!(0, _isArray.default)(target)) {\r\n                _context13.next = 15;\r\n                break;\r\n              }\r\n\r\n              if (!(target.length < 1)) {\r\n                _context13.next = 6;\r\n                break;\r\n              }\r\n\r\n              return _context13.abrupt(\"return\", _promise.default.resolve([]));\r\n\r\n            case 6:\r\n              batches = [[]];\r\n              (0, _forEach.default)(target).call(target, function (obj) {\r\n                if (!obj.id) {\r\n                  return;\r\n                }\r\n\r\n                batches[batches.length - 1].push(obj);\r\n\r\n                if (batches[batches.length - 1].length >= batchSize) {\r\n                  batches.push([]);\r\n                }\r\n              });\r\n\r\n              if (batches[batches.length - 1].length === 0) {\r\n                // If the last batch is empty, remove it\r\n                batches.pop();\r\n              }\r\n\r\n              deleteCompleted = _promise.default.resolve();\r\n              errors = [];\r\n              (0, _forEach.default)(batches).call(batches, function (batch) {\r\n                deleteCompleted = deleteCompleted.then(function () {\r\n                  return RESTController.request('POST', 'batch', {\r\n                    requests: (0, _map.default)(batch).call(batch, function (obj) {\r\n                      return {\r\n                        method: 'DELETE',\r\n                        path: getServerUrlPath() + 'classes/' + obj.className + '/' + obj._getId(),\r\n                        body: {}\r\n                      };\r\n                    })\r\n                  }, options).then(function (results) {\r\n                    for (var i = 0; i < results.length; i++) {\r\n                      if (results[i] && results[i].hasOwnProperty('error')) {\r\n                        var err = new _ParseError.default(results[i].error.code, results[i].error.error);\r\n                        err.object = batch[i];\r\n                        errors.push(err);\r\n                      }\r\n                    }\r\n                  });\r\n                });\r\n              });\r\n              return _context13.abrupt(\"return\", deleteCompleted.then( /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee8() {\r\n                var aggregate, _iterator3, _step3, object;\r\n\r\n                return _regenerator.default.wrap(function (_context11) {\r\n                  while (1) {\r\n                    switch (_context11.prev = _context11.next) {\r\n                      case 0:\r\n                        if (!errors.length) {\r\n                          _context11.next = 4;\r\n                          break;\r\n                        }\r\n\r\n                        aggregate = new _ParseError.default(_ParseError.default.AGGREGATE_ERROR);\r\n                        aggregate.errors = errors;\r\n                        return _context11.abrupt(\"return\", _promise.default.reject(aggregate));\r\n\r\n                      case 4:\r\n                        _iterator3 = _createForOfIteratorHelper(target);\r\n                        _context11.prev = 5;\r\n\r\n                        _iterator3.s();\r\n\r\n                      case 7:\r\n                        if ((_step3 = _iterator3.n()).done) {\r\n                          _context11.next = 13;\r\n                          break;\r\n                        }\r\n\r\n                        object = _step3.value;\r\n                        _context11.next = 11;\r\n                        return localDatastore._destroyObjectIfPinned(object);\r\n\r\n                      case 11:\r\n                        _context11.next = 7;\r\n                        break;\r\n\r\n                      case 13:\r\n                        _context11.next = 18;\r\n                        break;\r\n\r\n                      case 15:\r\n                        _context11.prev = 15;\r\n                        _context11.t0 = _context11[\"catch\"](5);\r\n\r\n                        _iterator3.e(_context11.t0);\r\n\r\n                      case 18:\r\n                        _context11.prev = 18;\r\n\r\n                        _iterator3.f();\r\n\r\n                        return _context11.finish(18);\r\n\r\n                      case 21:\r\n                        return _context11.abrupt(\"return\", _promise.default.resolve(target));\r\n\r\n                      case 22:\r\n                      case \"end\":\r\n                        return _context11.stop();\r\n                    }\r\n                  }\r\n                }, _callee8, null, [[5, 15, 18, 21]]);\r\n              }))));\r\n\r\n            case 15:\r\n              if (!(target instanceof ParseObject)) {\r\n                _context13.next = 17;\r\n                break;\r\n              }\r\n\r\n              return _context13.abrupt(\"return\", RESTController.request('DELETE', 'classes/' + target.className + '/' + target._getId(), {}, options).then( /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee9() {\r\n                return _regenerator.default.wrap(function (_context12) {\r\n                  while (1) {\r\n                    switch (_context12.prev = _context12.next) {\r\n                      case 0:\r\n                        _context12.next = 2;\r\n                        return localDatastore._destroyObjectIfPinned(target);\r\n\r\n                      case 2:\r\n                        return _context12.abrupt(\"return\", _promise.default.resolve(target));\r\n\r\n                      case 3:\r\n                      case \"end\":\r\n                        return _context12.stop();\r\n                    }\r\n                  }\r\n                }, _callee9);\r\n              }))));\r\n\r\n            case 17:\r\n              return _context13.abrupt(\"return\", _promise.default.resolve(target));\r\n\r\n            case 18:\r\n            case \"end\":\r\n              return _context13.stop();\r\n          }\r\n        }\r\n      }, _callee10);\r\n    }))();\r\n  },\r\n  save: function (target\r\n  /*: ParseObject | Array<ParseObject | ParseFile>*/\r\n  , options\r\n  /*: RequestOptions*/\r\n  ) {\r\n    var batchSize = options && options.batchSize ? options.batchSize : _CoreManager.default.get('REQUEST_BATCH_SIZE');\r\n\r\n    var localDatastore = _CoreManager.default.getLocalDatastore();\r\n\r\n    var mapIdForPin = {};\r\n\r\n    var RESTController = _CoreManager.default.getRESTController();\r\n\r\n    var stateController = _CoreManager.default.getObjectStateController();\r\n\r\n    var allowCustomObjectId = _CoreManager.default.get('ALLOW_CUSTOM_OBJECT_ID');\r\n\r\n    options = options || {};\r\n    options.returnStatus = options.returnStatus || true;\r\n\r\n    if ((0, _isArray.default)(target)) {\r\n      if (target.length < 1) {\r\n        return _promise.default.resolve([]);\r\n      }\r\n\r\n      var unsaved = (0, _concat.default)(target).call(target);\r\n\r\n      for (var i = 0; i < target.length; i++) {\r\n        if (target[i] instanceof ParseObject) {\r\n          unsaved = (0, _concat.default)(unsaved).call(unsaved, (0, _unsavedChildren.default)(target[i], true));\r\n        }\r\n      }\r\n\r\n      unsaved = (0, _unique.default)(unsaved);\r\n      var filesSaved\r\n      /*: Array<ParseFile>*/\r\n      = [];\r\n      var pending\r\n      /*: Array<ParseObject>*/\r\n      = [];\r\n      (0, _forEach.default)(unsaved).call(unsaved, function (el) {\r\n        if (el instanceof _ParseFile.default) {\r\n          filesSaved.push(el.save(options));\r\n        } else if (el instanceof ParseObject) {\r\n          if (allowCustomObjectId && !el.id) {\r\n            throw new _ParseError.default(_ParseError.default.MISSING_OBJECT_ID, 'objectId must not be empty, null or undefined');\r\n          }\r\n\r\n          pending.push(el);\r\n        }\r\n      });\r\n      return _promise.default.all(filesSaved).then(function () {\r\n        var objectError = null;\r\n        return (0, _promiseUtils.continueWhile)(function () {\r\n          return pending.length > 0;\r\n        }, function () {\r\n          var batch = [];\r\n          var nextPending = [];\r\n          (0, _forEach.default)(pending).call(pending, function (el) {\r\n            if (batch.length < batchSize && (0, _canBeSerialized.default)(el)) {\r\n              batch.push(el);\r\n            } else {\r\n              nextPending.push(el);\r\n            }\r\n          });\r\n          pending = nextPending;\r\n\r\n          if (batch.length < 1) {\r\n            return _promise.default.reject(new _ParseError.default(_ParseError.default.OTHER_CAUSE, 'Tried to save a batch with a cycle.'));\r\n          } // Queue up tasks for each object in the batch.\r\n          // When every task is ready, the API request will execute\r\n\r\n\r\n          var batchReturned = new _promiseUtils.resolvingPromise();\r\n          var batchReady = [];\r\n          var batchTasks = [];\r\n          (0, _forEach.default)(batch).call(batch, function (obj, index) {\r\n            var ready = new _promiseUtils.resolvingPromise();\r\n            batchReady.push(ready);\r\n            stateController.pushPendingState(obj._getStateIdentifier());\r\n            batchTasks.push(stateController.enqueueTask(obj._getStateIdentifier(), function () {\r\n              ready.resolve();\r\n              return batchReturned.then(function (responses) {\r\n                if (responses[index].hasOwnProperty('success')) {\r\n                  var objectId = responses[index].success.objectId;\r\n                  var status = responses[index]._status;\r\n                  delete responses[index]._status;\r\n                  mapIdForPin[objectId] = obj._localId;\r\n\r\n                  obj._handleSaveResponse(responses[index].success, status);\r\n                } else {\r\n                  if (!objectError && responses[index].hasOwnProperty('error')) {\r\n                    var serverError = responses[index].error;\r\n                    objectError = new _ParseError.default(serverError.code, serverError.error); // Cancel the rest of the save\r\n\r\n                    pending = [];\r\n                  }\r\n\r\n                  obj._handleSaveError();\r\n                }\r\n              });\r\n            }));\r\n          });\r\n          (0, _promiseUtils.when)(batchReady).then(function () {\r\n            // Kick off the batch request\r\n            return RESTController.request('POST', 'batch', {\r\n              requests: (0, _map.default)(batch).call(batch, function (obj) {\r\n                var params = obj._getSaveParams();\r\n\r\n                params.path = getServerUrlPath() + params.path;\r\n                return params;\r\n              })\r\n            }, options);\r\n          }).then(batchReturned.resolve, function (error) {\r\n            batchReturned.reject(new _ParseError.default(_ParseError.default.INCORRECT_TYPE, error.message));\r\n          });\r\n          return (0, _promiseUtils.when)(batchTasks);\r\n        }).then( /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee11() {\r\n          var _iterator4, _step4, object;\r\n\r\n          return _regenerator.default.wrap(function (_context14) {\r\n            while (1) {\r\n              switch (_context14.prev = _context14.next) {\r\n                case 0:\r\n                  if (!objectError) {\r\n                    _context14.next = 2;\r\n                    break;\r\n                  }\r\n\r\n                  return _context14.abrupt(\"return\", _promise.default.reject(objectError));\r\n\r\n                case 2:\r\n                  _iterator4 = _createForOfIteratorHelper(target);\r\n                  _context14.prev = 3;\r\n\r\n                  _iterator4.s();\r\n\r\n                case 5:\r\n                  if ((_step4 = _iterator4.n()).done) {\r\n                    _context14.next = 13;\r\n                    break;\r\n                  }\r\n\r\n                  object = _step4.value;\r\n                  _context14.next = 9;\r\n                  return localDatastore._updateLocalIdForObject(mapIdForPin[object.id], object);\r\n\r\n                case 9:\r\n                  _context14.next = 11;\r\n                  return localDatastore._updateObjectIfPinned(object);\r\n\r\n                case 11:\r\n                  _context14.next = 5;\r\n                  break;\r\n\r\n                case 13:\r\n                  _context14.next = 18;\r\n                  break;\r\n\r\n                case 15:\r\n                  _context14.prev = 15;\r\n                  _context14.t0 = _context14[\"catch\"](3);\r\n\r\n                  _iterator4.e(_context14.t0);\r\n\r\n                case 18:\r\n                  _context14.prev = 18;\r\n\r\n                  _iterator4.f();\r\n\r\n                  return _context14.finish(18);\r\n\r\n                case 21:\r\n                  return _context14.abrupt(\"return\", _promise.default.resolve(target));\r\n\r\n                case 22:\r\n                case \"end\":\r\n                  return _context14.stop();\r\n              }\r\n            }\r\n          }, _callee11, null, [[3, 15, 18, 21]]);\r\n        })));\r\n      });\r\n    } else if (target instanceof ParseObject) {\r\n      if (allowCustomObjectId && !target.id) {\r\n        throw new _ParseError.default(_ParseError.default.MISSING_OBJECT_ID, 'objectId must not be empty, null or undefined');\r\n      } // generate _localId in case if cascadeSave=false\r\n\r\n\r\n      target._getId();\r\n\r\n      var localId = target._localId; // copying target lets Flow guarantee the pointer isn't modified elsewhere\r\n\r\n      var targetCopy = target;\r\n\r\n      var task = function () {\r\n        var params = targetCopy._getSaveParams();\r\n\r\n        return RESTController.request(params.method, params.path, params.body, options).then(function (response) {\r\n          var status = response._status;\r\n          delete response._status;\r\n\r\n          targetCopy._handleSaveResponse(response, status);\r\n        }, function (error) {\r\n          targetCopy._handleSaveError();\r\n\r\n          return _promise.default.reject(error);\r\n        });\r\n      };\r\n\r\n      stateController.pushPendingState(target._getStateIdentifier());\r\n      return stateController.enqueueTask(target._getStateIdentifier(), task).then( /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee12() {\r\n        return _regenerator.default.wrap(function (_context15) {\r\n          while (1) {\r\n            switch (_context15.prev = _context15.next) {\r\n              case 0:\r\n                _context15.next = 2;\r\n                return localDatastore._updateLocalIdForObject(localId, target);\r\n\r\n              case 2:\r\n                _context15.next = 4;\r\n                return localDatastore._updateObjectIfPinned(target);\r\n\r\n              case 4:\r\n                return _context15.abrupt(\"return\", target);\r\n\r\n              case 5:\r\n              case \"end\":\r\n                return _context15.stop();\r\n            }\r\n          }\r\n        }, _callee12);\r\n      })), function (error) {\r\n        return _promise.default.reject(error);\r\n      });\r\n    }\r\n\r\n    return _promise.default.resolve();\r\n  }\r\n};\r\n\r\n_CoreManager.default.setObjectController(DefaultController);\r\n\r\nvar _default = ParseObject;\r\nexports.default = _default;"],"mappings":"AAAA;;AAEA,IAAIA,sBAAsB,GAAGC,OAAO,CAAC,sDAAD,CAApC;;AAEA,IAAIC,QAAQ,GAAGD,OAAO,CAAC,uCAAD,CAAtB;;AAEA,IAAIE,QAAQ,GAAGF,OAAO,CAAC,gDAAD,CAAtB;;AAEA,IAAIG,eAAe,GAAGH,OAAO,CAAC,sDAAD,CAA7B;;AAEA,IAAII,kBAAkB,GAAGJ,OAAO,CAAC,oDAAD,CAAhC;;AAEA,IAAIK,OAAO,GAAGL,OAAO,CAAC,8CAAD,CAArB;;AAEA,IAAIM,WAAW,GAAGN,OAAO,CAAC,kDAAD,CAAzB;;AAEA,IAAIO,sBAAsB,GAAGP,OAAO,CAAC,sDAAD,CAApC;;AAEA,IAAIQ,uBAAuB,GAAGR,OAAO,CAAC,8DAAD,CAArC;;AAEA,IAAIS,wBAAwB,GAAGT,OAAO,CAAC,gEAAD,CAAtC;;AAEA,IAAIU,iCAAiC,GAAGV,OAAO,CAAC,2EAAD,CAA/C;;AAEA,IAAIW,yBAAyB,GAAGX,OAAO,CAAC,yDAAD,CAAvC;;AAEA,IAAIY,gCAAgC,GAAGZ,OAAO,CAAC,0EAAD,CAA9C;;AAEA,IAAIa,uBAAuB,GAAGb,OAAO,CAAC,uDAAD,CAArC;;AAEA,IAAIc,6BAA6B,GAAGd,OAAO,CAAC,uEAAD,CAA3C;;AAEA,IAAIe,aAAa,GAAGf,OAAO,CAAC,mDAAD,CAA3B;;AAEAQ,uBAAuB,CAACQ,OAAD,EAAU,YAAV,EAAwB;EAC7CC,KAAK,EAAE;AADsC,CAAxB,CAAvB;;AAIAD,OAAO,CAACE,OAAR,GAAkB,KAAK,CAAvB;;AAEA,IAAIC,IAAI,GAAGpB,sBAAsB,CAACC,OAAO,CAAC,oDAAD,CAAR,CAAjC;;AAEA,IAAIoB,KAAK,GAAGrB,sBAAsB,CAACC,OAAO,CAAC,qDAAD,CAAR,CAAlC;;AAEA,IAAIqB,gBAAgB,GAAGtB,sBAAsB,CAACC,OAAO,CAAC,8DAAD,CAAR,CAA7C;;AAEA,IAAIsB,OAAO,GAAGvB,sBAAsB,CAACC,OAAO,CAAC,qDAAD,CAAR,CAApC;;AAEA,IAAIuB,QAAQ,GAAGxB,sBAAsB,CAACC,OAAO,CAAC,+CAAD,CAAR,CAArC;;AAEA,IAAIwB,QAAQ,GAAGzB,sBAAsB,CAACC,OAAO,CAAC,sDAAD,CAAR,CAArC;;AAEA,IAAIyB,YAAY,GAAG1B,sBAAsB,CAACC,OAAO,CAAC,oCAAD,CAAR,CAAzC;;AAEA,IAAI0B,kBAAkB,GAAG3B,sBAAsB,CAACC,OAAO,CAAC,iDAAD,CAAR,CAA/C;;AAEA,IAAI2B,OAAO,GAAG5B,sBAAsB,CAACC,OAAO,CAAC,uDAAD,CAAR,CAApC;;AAEA,IAAI4B,eAAe,GAAG7B,sBAAsB,CAACC,OAAO,CAAC,+DAAD,CAAR,CAA5C;;AAEA,IAAI6B,SAAS,GAAG9B,sBAAsB,CAACC,OAAO,CAAC,yDAAD,CAAR,CAAtC;;AAEA,IAAI8B,UAAU,GAAG/B,sBAAsB,CAACC,OAAO,CAAC,sDAAD,CAAR,CAAvC;;AAEA,IAAI+B,QAAQ,GAAGhC,sBAAsB,CAACC,OAAO,CAAC,yDAAD,CAAR,CAArC;;AAEA,IAAIgC,KAAK,GAAGjC,sBAAsB,CAACC,OAAO,CAAC,mDAAD,CAAR,CAAlC;;AAEA,IAAIiC,OAAO,GAAGlC,sBAAsB,CAACC,OAAO,CAAC,qDAAD,CAAR,CAApC;;AAEA,IAAIkC,QAAQ,GAAGnC,sBAAsB,CAACC,OAAO,CAAC,uCAAD,CAAR,CAArC;;AAEA,IAAImC,gBAAgB,GAAGpC,sBAAsB,CAACC,OAAO,CAAC,+CAAD,CAAR,CAA7C;;AAEA,IAAIoC,aAAa,GAAGrC,sBAAsB,CAACC,OAAO,CAAC,4CAAD,CAAR,CAA1C;;AAEA,IAAIqC,gBAAgB,GAAGtC,sBAAsB,CAACC,OAAO,CAAC,+CAAD,CAAR,CAA7C;;AAEA,IAAIsC,QAAQ,GAAGvC,sBAAsB,CAACC,OAAO,CAAC,yDAAD,CAAR,CAArC;;AAEA,IAAIuC,YAAY,GAAGxC,sBAAsB,CAACC,OAAO,CAAC,eAAD,CAAR,CAAzC;;AAEA,IAAIwC,gBAAgB,GAAGzC,sBAAsB,CAACC,OAAO,CAAC,mBAAD,CAAR,CAA7C;;AAEA,IAAIyC,OAAO,GAAG1C,sBAAsB,CAACC,OAAO,CAAC,UAAD,CAAR,CAApC;;AAEA,IAAI0C,OAAO,GAAG3C,sBAAsB,CAACC,OAAO,CAAC,UAAD,CAAR,CAApC;;AAEA,IAAI2C,QAAQ,GAAG5C,sBAAsB,CAACC,OAAO,CAAC,UAAD,CAAR,CAArC;;AAEA,IAAI4C,gBAAgB,GAAG7C,sBAAsB,CAACC,OAAO,CAAC,mBAAD,CAAR,CAA7C;;AAEA,IAAI6C,SAAS,GAAG9C,sBAAsB,CAACC,OAAO,CAAC,YAAD,CAAR,CAAtC;;AAEA,IAAI8C,UAAU,GAAG/C,sBAAsB,CAACC,OAAO,CAAC,aAAD,CAAR,CAAvC;;AAEA,IAAI+C,WAAW,GAAGhD,sBAAsB,CAACC,OAAO,CAAC,cAAD,CAAR,CAAxC;;AAEA,IAAIgD,UAAU,GAAGjD,sBAAsB,CAACC,OAAO,CAAC,aAAD,CAAR,CAAvC;;AAEA,IAAIiD,aAAa,GAAGjD,OAAO,CAAC,gBAAD,CAA3B;;AAEA,IAAIkD,oBAAoB,GAAGlD,OAAO,CAAC,uBAAD,CAAlC;;AAEA,IAAImD,QAAQ,GAAGnD,OAAO,CAAC,WAAD,CAAtB;;AAEA,IAAIoD,WAAW,GAAGrD,sBAAsB,CAACC,OAAO,CAAC,cAAD,CAAR,CAAxC;;AAEA,IAAIqD,cAAc,GAAGtD,sBAAsB,CAACC,OAAO,CAAC,iBAAD,CAAR,CAA3C;;AAEA,IAAIsD,6BAA6B,GAAGC,uBAAuB,CAACvD,OAAO,CAAC,iCAAD,CAAR,CAA3D;;AAEA,IAAIwD,OAAO,GAAGzD,sBAAsB,CAACC,OAAO,CAAC,UAAD,CAAR,CAApC;;AAEA,IAAIyD,6BAA6B,GAAGF,uBAAuB,CAACvD,OAAO,CAAC,iCAAD,CAAR,CAA3D;;AAEA,IAAI0D,gBAAgB,GAAG3D,sBAAsB,CAACC,OAAO,CAAC,mBAAD,CAAR,CAA7C;;AAEA,SAAS2D,wBAAT,CAAkCC,WAAlC,EAA+C;EAC7C,IAAI,OAAO1D,QAAP,KAAoB,UAAxB,EAAoC,OAAO,IAAP;EACpC,IAAI2D,iBAAiB,GAAG,IAAI3D,QAAJ,EAAxB;EACA,IAAI4D,gBAAgB,GAAG,IAAI5D,QAAJ,EAAvB;EACA,OAAO,CAACyD,wBAAwB,GAAG,UAAUC,WAAV,EAAuB;IACxD,OAAOA,WAAW,GAAGE,gBAAH,GAAsBD,iBAAxC;EACD,CAFM,EAEJD,WAFI,CAAP;AAGD;;AAED,SAASL,uBAAT,CAAiCQ,GAAjC,EAAsCH,WAAtC,EAAmD;EACjD,IAAI,CAACA,WAAD,IAAgBG,GAAhB,IAAuBA,GAAG,CAACC,UAA/B,EAA2C;IACzC,OAAOD,GAAP;EACD;;EAED,IAAIA,GAAG,KAAK,IAAR,IAAgB9D,QAAQ,CAAC8D,GAAD,CAAR,KAAkB,QAAlB,IAA8B,OAAOA,GAAP,KAAe,UAAjE,EAA6E;IAC3E,OAAO;MACL7C,OAAO,EAAE6C;IADJ,CAAP;EAGD;;EAED,IAAIE,KAAK,GAAGN,wBAAwB,CAACC,WAAD,CAApC;;EAEA,IAAIK,KAAK,IAAIA,KAAK,CAACC,GAAN,CAAUH,GAAV,CAAb,EAA6B;IAC3B,OAAOE,KAAK,CAACE,GAAN,CAAUJ,GAAV,CAAP;EACD;;EAED,IAAIK,MAAM,GAAG,EAAb;;EAEA,KAAK,IAAIC,GAAT,IAAgBN,GAAhB,EAAqB;IACnB,IAAIM,GAAG,KAAK,SAAR,IAAqBC,MAAM,CAACC,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCV,GAArC,EAA0CM,GAA1C,CAAzB,EAAyE;MACvE,IAAIK,IAAI,GAAGlE,uBAAuB,IAAII,gCAA3B,GAA8DA,gCAAgC,CAACmD,GAAD,EAAMM,GAAN,CAA9F,GAA2G,IAAtH;;MAEA,IAAIK,IAAI,KAAKA,IAAI,CAACP,GAAL,IAAYO,IAAI,CAACC,GAAtB,CAAR,EAAoC;QAClCnE,uBAAuB,CAAC4D,MAAD,EAASC,GAAT,EAAcK,IAAd,CAAvB;MACD,CAFD,MAEO;QACLN,MAAM,CAACC,GAAD,CAAN,GAAcN,GAAG,CAACM,GAAD,CAAjB;MACD;IACF;EACF;;EAEDD,MAAM,CAAClD,OAAP,GAAiB6C,GAAjB;;EAEA,IAAIE,KAAJ,EAAW;IACTA,KAAK,CAACU,GAAN,CAAUZ,GAAV,EAAeK,MAAf;EACD;;EAED,OAAOA,MAAP;AACD;;AAED,SAASQ,0BAAT,CAAoCC,CAApC,EAAuCC,cAAvC,EAAuD;EACrD,IAAIC,EAAE,GAAG,OAAO1E,OAAP,KAAmB,WAAnB,IAAkCD,kBAAkB,CAACyE,CAAD,CAApD,IAA2DA,CAAC,CAAC,YAAD,CAArE;;EAEA,IAAI,CAACE,EAAL,EAAS;IACP,IAAI5E,eAAe,CAAC0E,CAAD,CAAf,KAAuBE,EAAE,GAAGC,2BAA2B,CAACH,CAAD,CAAvD,KAA+DC,cAAc,IAAID,CAAlB,IAAuB,OAAOA,CAAC,CAACI,MAAT,KAAoB,QAA9G,EAAwH;MACtH,IAAIF,EAAJ,EAAQF,CAAC,GAAGE,EAAJ;MACR,IAAIG,CAAC,GAAG,CAAR;;MAEA,IAAIC,CAAC,GAAG,YAAY,CAAE,CAAtB;;MAEA,OAAO;QACLC,CAAC,EAAED,CADE;QAELE,CAAC,EAAE,YAAY;UACb,IAAIH,CAAC,IAAIL,CAAC,CAACI,MAAX,EAAmB,OAAO;YACxBK,IAAI,EAAE;UADkB,CAAP;UAGnB,OAAO;YACLA,IAAI,EAAE,KADD;YAELrE,KAAK,EAAE4D,CAAC,CAACK,CAAC,EAAF;UAFH,CAAP;QAID,CAVI;QAWLK,CAAC,EAAE,UAAUC,EAAV,EAAc;UACf,MAAMA,EAAN;QACD,CAbI;QAcLC,CAAC,EAAEN;MAdE,CAAP;IAgBD;;IAED,MAAM,IAAIO,SAAJ,CAAc,uIAAd,CAAN;EACD;;EAED,IAAIC,gBAAgB,GAAG,IAAvB;EAAA,IACIC,MAAM,GAAG,KADb;EAAA,IAEIC,GAFJ;EAGA,OAAO;IACLT,CAAC,EAAE,YAAY;MACbL,EAAE,GAAGA,EAAE,CAACN,IAAH,CAAQI,CAAR,CAAL;IACD,CAHI;IAILQ,CAAC,EAAE,YAAY;MACb,IAAIS,IAAI,GAAGf,EAAE,CAACgB,IAAH,EAAX;MACAJ,gBAAgB,GAAGG,IAAI,CAACR,IAAxB;MACA,OAAOQ,IAAP;IACD,CARI;IASLP,CAAC,EAAE,UAAUS,GAAV,EAAe;MAChBJ,MAAM,GAAG,IAAT;MACAC,GAAG,GAAGG,GAAN;IACD,CAZI;IAaLP,CAAC,EAAE,YAAY;MACb,IAAI;QACF,IAAI,CAACE,gBAAD,IAAqBZ,EAAE,CAACkB,MAAH,IAAa,IAAtC,EAA4ClB,EAAE,CAACkB,MAAH;MAC7C,CAFD,SAEU;QACR,IAAIL,MAAJ,EAAY,MAAMC,GAAN;MACb;IACF;EAnBI,CAAP;AAqBD;;AAED,SAASb,2BAAT,CAAqCH,CAArC,EAAwCqB,MAAxC,EAAgD;EAC9C,IAAIC,UAAJ;;EAEA,IAAI,CAACtB,CAAL,EAAQ;EACR,IAAI,OAAOA,CAAP,KAAa,QAAjB,EAA2B,OAAOuB,iBAAiB,CAACvB,CAAD,EAAIqB,MAAJ,CAAxB;;EAE3B,IAAIb,CAAC,GAAG9E,sBAAsB,CAAC4F,UAAU,GAAG7B,MAAM,CAACC,SAAP,CAAiB8B,QAAjB,CAA0B5B,IAA1B,CAA+BI,CAA/B,CAAd,CAAtB,CAAuEJ,IAAvE,CAA4E0B,UAA5E,EAAwF,CAAxF,EAA2F,CAAC,CAA5F,CAAR;;EAEA,IAAId,CAAC,KAAK,QAAN,IAAkBR,CAAC,CAACyB,WAAxB,EAAqCjB,CAAC,GAAGR,CAAC,CAACyB,WAAF,CAAcC,IAAlB;EACrC,IAAIlB,CAAC,KAAK,KAAN,IAAeA,CAAC,KAAK,KAAzB,EAAgC,OAAO/E,WAAW,CAACuE,CAAD,CAAlB;EAChC,IAAIQ,CAAC,KAAK,WAAN,IAAqB,2CAA2CmB,IAA3C,CAAgDnB,CAAhD,CAAzB,EAA6E,OAAOe,iBAAiB,CAACvB,CAAD,EAAIqB,MAAJ,CAAxB;AAC9E;;AAED,SAASE,iBAAT,CAA2BK,GAA3B,EAAgCC,GAAhC,EAAqC;EACnC,IAAIA,GAAG,IAAI,IAAP,IAAeA,GAAG,GAAGD,GAAG,CAACxB,MAA7B,EAAqCyB,GAAG,GAAGD,GAAG,CAACxB,MAAV;;EAErC,KAAK,IAAIC,CAAC,GAAG,CAAR,EAAWyB,IAAI,GAAG,IAAIC,KAAJ,CAAUF,GAAV,CAAvB,EAAuCxB,CAAC,GAAGwB,GAA3C,EAAgDxB,CAAC,EAAjD,EAAqD;IACnDyB,IAAI,CAACzB,CAAD,CAAJ,GAAUuB,GAAG,CAACvB,CAAD,CAAb;EACD;;EAED,OAAOyB,IAAP;AACD;;AAED,SAASE,OAAT,CAAiBC,MAAjB,EAAyBC,cAAzB,EAAyC;EACvC,IAAIC,IAAI,GAAGjG,aAAa,CAAC+F,MAAD,CAAxB;;EAEA,IAAIhG,6BAAJ,EAAmC;IACjC,IAAImG,OAAO,GAAGnG,6BAA6B,CAACgG,MAAD,CAA3C;;IAEAC,cAAc,KAAKE,OAAO,GAAGpG,uBAAuB,CAACoG,OAAD,CAAvB,CAAiCxC,IAAjC,CAAsCwC,OAAtC,EAA+C,UAAUC,GAAV,EAAe;MACzF,OAAOtG,gCAAgC,CAACkG,MAAD,EAASI,GAAT,CAAhC,CAA8CC,UAArD;IACD,CAF4B,CAAf,CAAd,EAEKH,IAAI,CAACI,IAAL,CAAUC,KAAV,CAAgBL,IAAhB,EAAsBC,OAAtB,CAFL;EAGD;;EAED,OAAOD,IAAP;AACD;;AAED,SAASM,aAAT,CAAuBC,MAAvB,EAA+B;EAC7B,KAAK,IAAIrC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGsC,SAAS,CAACvC,MAA9B,EAAsCC,CAAC,EAAvC,EAA2C;IACzC,IAAIuC,UAAJ,EAAgBC,UAAhB;;IAEA,IAAIC,MAAM,GAAG,QAAQH,SAAS,CAACtC,CAAD,CAAjB,GAAuBsC,SAAS,CAACtC,CAAD,CAAhC,GAAsC,EAAnD;IACAA,CAAC,GAAG,CAAJ,GAAQvE,yBAAyB,CAAC8G,UAAU,GAAGZ,OAAO,CAACvC,MAAM,CAACqD,MAAD,CAAP,EAAiB,CAAC,CAAlB,CAArB,CAAzB,CAAoElD,IAApE,CAAyEgD,UAAzE,EAAqF,UAAUpD,GAAV,EAAe;MAC1G,CAAC,GAAGhC,gBAAgB,CAACnB,OAArB,EAA8BqG,MAA9B,EAAsClD,GAAtC,EAA2CsD,MAAM,CAACtD,GAAD,CAAjD;IACD,CAFO,CAAR,GAEK3D,iCAAiC,GAAGD,wBAAwB,CAAC8G,MAAD,EAAS7G,iCAAiC,CAACiH,MAAD,CAA1C,CAA3B,GAAiFhH,yBAAyB,CAAC+G,UAAU,GAAGb,OAAO,CAACvC,MAAM,CAACqD,MAAD,CAAP,CAArB,CAAzB,CAAgElD,IAAhE,CAAqEiD,UAArE,EAAiF,UAAUrD,GAAV,EAAe;MACrN7D,uBAAuB,CAAC+G,MAAD,EAASlD,GAAT,EAAczD,gCAAgC,CAAC+G,MAAD,EAAStD,GAAT,CAA9C,CAAvB;IACD,CAFsH,CAFvH;EAKD;;EAED,OAAOkD,MAAP;AACD;;AAED,IAAIK,MAAM,GAAG5H,OAAO,CAAC,QAAD,CAApB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAGA,IAAI6H,QAAQ,GAAG,EAAf,C,CAAmB;;AAEnB,IAAIC,WAAW,GAAG,CAAlB,C,CAAqB;AACrB;AACA;;AAEA,IAAIC,cAAc,GAAG,CAACxF,YAAY,CAACrB,OAAb,CAAqBiD,GAArB,CAAyB,SAAzB,CAAtB;;AAEA,IAAI4D,cAAJ,EAAoB;EAClBxF,YAAY,CAACrB,OAAb,CAAqB8G,wBAArB,CAA8C1E,6BAA9C;AACD,CAFD,MAEO;EACLf,YAAY,CAACrB,OAAb,CAAqB8G,wBAArB,CAA8CvE,6BAA9C;AACD;;AAED,SAASwE,gBAAT,GAA4B;EAC1B,IAAIC,SAAS,GAAG3F,YAAY,CAACrB,OAAb,CAAqBiD,GAArB,CAAyB,YAAzB,CAAhB;;EAEA,IAAI+D,SAAS,CAACA,SAAS,CAACjD,MAAV,GAAmB,CAApB,CAAT,KAAoC,GAAxC,EAA6C;IAC3CiD,SAAS,IAAI,GAAb;EACD;;EAED,IAAIC,GAAG,GAAGD,SAAS,CAACE,OAAV,CAAkB,aAAlB,EAAiC,EAAjC,CAAV;EACA,OAAOD,GAAG,CAACE,MAAJ,CAAW,CAAC,GAAG/F,QAAQ,CAACpB,OAAb,EAAsBiH,GAAtB,EAA2B1D,IAA3B,CAAgC0D,GAAhC,EAAqC,GAArC,CAAX,CAAP;AACD;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,IAAIG,WAAW,GAAG,aAAa,YAAY;EACzC;AACF;AACA;AACA;AACA;EACE,SAASA,WAAT,CAAqBC;EACrB;EADA,EAEEC;EACF;EAHA,EAIEC;EACF;EALA,EAME;IACA,CAAC,GAAGtG,gBAAgB,CAACjB,OAArB,EAA8B,IAA9B,EAAoCoH,WAApC;IACA,CAAC,GAAGjG,gBAAgB,CAACnB,OAArB,EAA8B,IAA9B,EAAoC,IAApC,EAA0C,KAAK,CAA/C;IACA,CAAC,GAAGmB,gBAAgB,CAACnB,OAArB,EAA8B,IAA9B,EAAoC,UAApC,EAAgD,KAAK,CAArD;IACA,CAAC,GAAGmB,gBAAgB,CAACnB,OAArB,EAA8B,IAA9B,EAAoC,WAApC,EAAiD,KAAK,CAAtD;IACA,CAAC,GAAGmB,gBAAgB,CAACnB,OAArB,EAA8B,IAA9B,EAAoC,WAApC,EAAiD,KAAK,CAAtD,EALA,CAK0D;;IAE1D,IAAI,OAAO,KAAKwH,UAAZ,KAA2B,UAA/B,EAA2C;MACzC,KAAKA,UAAL,CAAgBrB,KAAhB,CAAsB,IAAtB,EAA4BG,SAA5B;IACD;;IAED,IAAImB,KAAK,GAAG,IAAZ;IACA,KAAKC,SAAL,GAAiBd,WAAW,EAA5B;;IAEA,IAAI,OAAOS,SAAP,KAAqB,QAAzB,EAAmC;MACjC,KAAKA,SAAL,GAAiBA,SAAjB;;MAEA,IAAIC,UAAU,IAAI,CAAC,GAAGtG,QAAQ,CAAChB,OAAb,EAAsBsH,UAAtB,MAAsC,QAAxD,EAAkE;QAChEG,KAAK,GAAGH,UAAR;MACD;IACF,CAND,MAMO,IAAID,SAAS,IAAI,CAAC,GAAGrG,QAAQ,CAAChB,OAAb,EAAsBqH,SAAtB,MAAqC,QAAtD,EAAgE;MACrE,KAAKA,SAAL,GAAiBA,SAAS,CAACA,SAA3B;MACAI,KAAK,GAAG,EAAR;;MAEA,KAAK,IAAIE,KAAT,IAAkBN,SAAlB,EAA6B;QAC3B,IAAIM,KAAK,KAAK,WAAd,EAA2B;UACzBF,KAAK,CAACE,KAAD,CAAL,GAAeN,SAAS,CAACM,KAAD,CAAxB;QACD;MACF;;MAED,IAAIL,UAAU,IAAI,CAAC,GAAGtG,QAAQ,CAAChB,OAAb,EAAsBsH,UAAtB,MAAsC,QAAxD,EAAkE;QAChEC,OAAO,GAAGD,UAAV;MACD;IACF;;IAED,IAAIG,KAAK,IAAI,CAAC,KAAKhE,GAAL,CAASgE,KAAT,EAAgBF,OAAhB,CAAd,EAAwC;MACtC,MAAM,IAAIK,KAAJ,CAAU,sCAAV,CAAN;IACD;EACF;EACD;AACF;AACA;AACA;AACA;;;EAGE,CAAC,GAAG1G,aAAa,CAAClB,OAAlB,EAA2BoH,WAA3B,EAAwC,CAAC;IACvCjE,GAAG,EAAE,YADkC;IAEvCF,GAAG;IACH;IACA;IACA;IACA;MACE,IAAI4E,eAAe,GAAGxG,YAAY,CAACrB,OAAb,CAAqB8H,wBAArB,EAAtB;;MAEA,OAAO,CAAC,GAAG/G,OAAO,CAACf,OAAZ,EAAqB6H,eAAe,CAACE,kBAAhB,CAAmC,KAAKC,mBAAL,EAAnC,CAArB,CAAP;IACD;IACD;AACJ;AACA;AACA;AACA;AACA;;EAhB2C,CAAD,EAkBrC;IACD7E,GAAG,EAAE,WADJ;IAEDF,GAAG,EAAE;IACL;IACA;MACE,OAAO,KAAKgF,cAAL,GAAsBC,SAA7B;IACD;IACD;AACJ;AACA;AACA;AACA;AACA;;EAZK,CAlBqC,EAgCrC;IACD/E,GAAG,EAAE,WADJ;IAEDF,GAAG,EAAE;IACL;IACA;MACE,OAAO,KAAKgF,cAAL,GAAsBE,SAA7B;IACD;IACD;;IAEA;AACJ;AACA;AACA;AACA;;EAbK,CAhCqC,EA+CrC;IACDhF,GAAG,EAAE,QADJ;IAEDpD,KAAK,EAAE;IACP;IACA;MACE,IAAI,OAAO,KAAKqI,EAAZ,KAAmB,QAAvB,EAAiC;QAC/B,OAAO,KAAKA,EAAZ;MACD;;MAED,IAAI,OAAO,KAAKC,QAAZ,KAAyB,QAA7B,EAAuC;QACrC,OAAO,KAAKA,QAAZ;MACD;;MAED,IAAIC,OAAO,GAAG,UAAU5B,MAAM,EAA9B;MACA,KAAK2B,QAAL,GAAgBC,OAAhB;MACA,OAAOA,OAAP;IACD;IACD;AACJ;AACA;AACA;AACA;;EArBK,CA/CqC,EAsErC;IACDnF,GAAG,EAAE,qBADJ;IAEDpD,KAAK,EAAE;IACP;IACA;MACE,IAAI8G,cAAJ,EAAoB;QAClB,IAAIuB,EAAE,GAAG,KAAKA,EAAd;;QAEA,IAAI,CAACA,EAAL,EAAS;UACPA,EAAE,GAAG,KAAKG,MAAL,EAAL;QACD;;QAED,OAAO;UACLH,EAAE,EAAEA,EADC;UAELf,SAAS,EAAE,KAAKA;QAFX,CAAP;MAID,CAXD,MAWO;QACL,OAAO,IAAP;MACD;IACF;EAnBA,CAtEqC,EA0FrC;IACDlE,GAAG,EAAE,gBADJ;IAEDpD,KAAK,EAAE;IACP;IACA;MACE,IAAI8H,eAAe,GAAGxG,YAAY,CAACrB,OAAb,CAAqB8H,wBAArB,EAAtB;;MAEA,OAAOD,eAAe,CAACW,aAAhB,CAA8B,KAAKR,mBAAL,EAA9B,CAAP;IACD;EARA,CA1FqC,EAmGrC;IACD7E,GAAG,EAAE,kBADJ;IAEDpD,KAAK,EAAE,YAAY;MACjB,IAAI0I,UAAU,GAAG,KAAKR,cAAL,EAAjB;;MAEA,IAAIS,KAAK,GAAG,EAAZ;;MAEA,KAAK,IAAIC,MAAT,IAAmBF,UAAnB,EAA+B;QAC7BC,KAAK,CAACC,MAAD,CAAL,GAAgBC,SAAhB;MACD;;MAED,IAAIf,eAAe,GAAGxG,YAAY,CAACrB,OAAb,CAAqB8H,wBAArB,EAAtB;;MAEAD,eAAe,CAACgB,aAAhB,CAA8B,KAAKb,mBAAL,EAA9B,EAA0DU,KAA1D;IACD;EAdA,CAnGqC,EAkHrC;IACDvF,GAAG,EAAE,gBADJ;IAEDpD,KAAK,EAAE;IACP;IACA;MACE,IAAI8H,eAAe,GAAGxG,YAAY,CAACrB,OAAb,CAAqB8H,wBAArB,EAAtB;;MAEA,OAAOD,eAAe,CAACiB,aAAhB,CAA8B,KAAKd,mBAAL,EAA9B,CAAP;IACD;IACD;AACJ;AACA;AACA;;EAZK,CAlHqC,EAgIrC;IACD7E,GAAG,EAAE,kBADJ;IAEDpD,KAAK,EAAE,UAAUgJ;IACjB;IADO,EAEL;MACA,IAAIC,OAAO,GAAG,KAAKC,cAAL,EAAd;;MAEA,IAAIC,MAAM,GAAGF,OAAO,CAACA,OAAO,CAACjF,MAAR,GAAiB,CAAlB,CAApB;MACA,IAAI+B,IAAI,GAAGiD,WAAW,IAAI,CAAC,GAAGjI,KAAK,CAACd,OAAV,EAAmBkJ,MAAnB,CAA1B;MACA,CAAC,GAAGrI,QAAQ,CAACb,OAAb,EAAsB8F,IAAtB,EAA4BvC,IAA5B,CAAiCuC,IAAjC,EAAuC,UAAU3C,GAAV,EAAe;QACpD,OAAO+F,MAAM,CAAC/F,GAAD,CAAb;MACD,CAFD;IAGD;EAZA,CAhIqC,EA6IrC;IACDA,GAAG,EAAE,2BADJ;IAEDpD,KAAK,EAAE;IACP;IACA;MACE,IAAIuH,UAAU,GAAG,KAAKA,UAAtB;;MAEA,IAAIO,eAAe,GAAGxG,YAAY,CAACrB,OAAb,CAAqB8H,wBAArB,EAAtB;;MAEA,IAAIqB,WAAW,GAAGtB,eAAe,CAACuB,cAAhB,CAA+B,KAAKpB,mBAAL,EAA/B,CAAlB;MACA,IAAIqB,KAAK,GAAG,EAAZ;;MAEA,KAAK,IAAIC,MAAT,IAAmBhC,UAAnB,EAA+B;QAC7B,IAAIiC,GAAG,GAAGjC,UAAU,CAACgC,MAAD,CAApB;;QAEA,IAAIC,GAAG,IAAI,CAAC,GAAGvI,QAAQ,CAAChB,OAAb,EAAsBuJ,GAAtB,MAA+B,QAAtC,IAAkD,EAAEA,GAAG,YAAYnC,WAAjB,CAAlD,IAAmF,EAAEmC,GAAG,YAAYzH,UAAU,CAAC9B,OAA5B,CAAnF,IAA2H,EAAEuJ,GAAG,YAAYpH,cAAc,CAACnC,OAAhC,CAA/H,EAAyK;UACvK;UACA;UACA,IAAI;YACF,IAAIwJ,IAAI,GAAG,CAAC,GAAGhI,OAAO,CAACxB,OAAZ,EAAqBuJ,GAArB,EAA0B,KAA1B,EAAiC,IAAjC,CAAX;YACA,IAAIE,WAAW,GAAG,CAAC,GAAG7I,UAAU,CAACZ,OAAf,EAAwBwJ,IAAxB,CAAlB;;YAEA,IAAIL,WAAW,CAACG,MAAD,CAAX,KAAwBG,WAA5B,EAAyC;cACvCJ,KAAK,CAACC,MAAD,CAAL,GAAgBC,GAAhB;YACD;UACF,CAPD,CAOE,OAAOlF,CAAP,EAAU;YACV;YACA;YACAgF,KAAK,CAACC,MAAD,CAAL,GAAgBC,GAAhB;UACD;QACF;MACF;;MAED,OAAOF,KAAP;IACD;EAlCA,CA7IqC,EAgLrC;IACDlG,GAAG,EAAE,aADJ;IAEDpD,KAAK,EAAE,UAAU2J;IACjB;IADO,EAELC;IACF;IAHO;IAKP;IACA;MACE,IAAIH;MACJ;MADQ,EAEN,KAAKI,MAAL,CAAYF,IAAZ,EAAkBC,OAAlB,CAFF;MAGAH,IAAI,CAACK,MAAL,GAAc,QAAd;MACAL,IAAI,CAACnC,SAAL,GAAiB,KAAKA,SAAtB;MACA,OAAOmC,IAAP;IACD;EAfA,CAhLqC,EAgMrC;IACDrG,GAAG,EAAE,cADJ;IAEDpD,KAAK,EAAE;IACP;IACA;MACE,IAAIiJ,OAAO,GAAG,KAAKC,cAAL,EAAd;;MAEA,IAAIa,YAAY,GAAG,KAAKC,yBAAL,EAAnB;;MAEA,IAAIP,IAAI,GAAG,EAAX;;MAEA,KAAK,IAAIQ,IAAT,IAAiBF,YAAjB,EAA+B;QAC7B,IAAIG,aAAa,GAAG,KAApB;;QAEA,KAAK,IAAIjG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGgF,OAAO,CAACjF,MAA5B,EAAoCC,CAAC,IAAI,CAAzC,EAA4C;UAC1C,KAAK,IAAIkG,KAAT,IAAkBlB,OAAO,CAAChF,CAAD,CAAzB,EAA8B;YAC5B;YACA,IAAI,CAAC,GAAGrD,SAAS,CAACX,OAAd,EAAuBkK,KAAvB,EAA8B3G,IAA9B,CAAmC2G,KAAnC,EAA0C,GAA1C,CAAJ,EAAoD;cAClD,IAAIC,SAAS,GAAGD,KAAK,CAACE,KAAN,CAAY,GAAZ,EAAiB,CAAjB,CAAhB;;cAEA,IAAID,SAAS,KAAKH,IAAlB,EAAwB;gBACtBC,aAAa,GAAG,IAAhB;gBACA;cACD;YACF;UACF;QACF;;QAED,IAAI,CAACA,aAAL,EAAoB;UAClBT,IAAI,CAACQ,IAAD,CAAJ,GAAa,IAAI/H,QAAQ,CAACoI,KAAb,CAAmBP,YAAY,CAACE,IAAD,CAA/B,EAAuCJ,MAAvC,EAAb;QACD;MACF;;MAED,KAAKI,IAAL,IAAahB,OAAO,CAAC,CAAD,CAApB,EAAyB;QACvBQ,IAAI,CAACQ,IAAD,CAAJ,GAAahB,OAAO,CAAC,CAAD,CAAP,CAAWgB,IAAX,EAAiBJ,MAAjB,EAAb;MACD;;MAED,OAAOJ,IAAP;IACD;EAtCA,CAhMqC,EAuOrC;IACDrG,GAAG,EAAE,gBADJ;IAEDpD,KAAK,EAAE;IACP;IACA;MACE,IAAIuK,MAAM,GAAG,KAAKlC,EAAL,GAAU,KAAV,GAAkB,MAA/B;;MAEA,IAAImC,IAAI,GAAG,KAAKC,YAAL,EAAX;;MAEA,IAAIC,IAAI,GAAG,aAAa,KAAKpD,SAA7B;;MAEA,IAAIhG,YAAY,CAACrB,OAAb,CAAqBiD,GAArB,CAAyB,wBAAzB,CAAJ,EAAwD;QACtD,IAAI,CAAC,KAAKiF,SAAV,EAAqB;UACnBoC,MAAM,GAAG,MAAT;UACAC,IAAI,CAACG,QAAL,GAAgB,KAAKtC,EAArB;QACD,CAHD,MAGO;UACLkC,MAAM,GAAG,KAAT;UACAG,IAAI,IAAI,MAAM,KAAKrC,EAAnB;QACD;MACF,CARD,MAQO,IAAI,KAAKA,EAAT,EAAa;QAClBqC,IAAI,IAAI,MAAM,KAAKrC,EAAnB;MACD,CAFM,MAEA,IAAI,KAAKf,SAAL,KAAmB,OAAvB,EAAgC;QACrCoD,IAAI,GAAG,OAAP;MACD;;MAED,OAAO;QACLH,MAAM,EAAEA,MADH;QAELC,IAAI,EAAEA,IAFD;QAGLE,IAAI,EAAEA;MAHD,CAAP;IAKD;EA9BA,CAvOqC,EAsQrC;IACDtH,GAAG,EAAE,cADJ;IAEDpD,KAAK,EAAE,UAAU0I;IACjB;IADO,EAEL;MACA,IAAI,CAAC,KAAKL,EAAN,IAAYK,UAAU,CAACiC,QAA3B,EAAqC;QACnC,KAAKtC,EAAL,GAAUK,UAAU,CAACiC,QAArB;MACD;;MAED,IAAI7C,eAAe,GAAGxG,YAAY,CAACrB,OAAb,CAAqB8H,wBAArB,EAAtB;;MAEAD,eAAe,CAAC8C,eAAhB,CAAgC,KAAK3C,mBAAL,EAAhC;MACA,IAAI4C,OAAO,GAAG,EAAd;;MAEA,KAAK,IAAIC,MAAT,IAAmBpC,UAAnB,EAA+B;QAC7B,IAAIoC,MAAM,KAAK,KAAf,EAAsB;UACpBD,OAAO,CAACC,MAAD,CAAP,GAAkB,IAAIlJ,SAAS,CAAC3B,OAAd,CAAsByI,UAAU,CAACoC,MAAD,CAAhC,CAAlB;QACD,CAFD,MAEO,IAAIA,MAAM,KAAK,UAAf,EAA2B;UAChCD,OAAO,CAACC,MAAD,CAAP,GAAkB,CAAC,GAAGtJ,OAAO,CAACvB,OAAZ,EAAqByI,UAAU,CAACoC,MAAD,CAA/B,CAAlB;;UAEA,IAAID,OAAO,CAACC,MAAD,CAAP,YAA2B1I,cAAc,CAACnC,OAA9C,EAAuD;YACrD4K,OAAO,CAACC,MAAD,CAAP,CAAgBC,mBAAhB,CAAoC,IAApC,EAA0CD,MAA1C;UACD;QACF;MACF;;MAED,IAAID,OAAO,CAAC1C,SAAR,IAAqB,OAAO0C,OAAO,CAAC1C,SAAf,KAA6B,QAAtD,EAAgE;QAC9D0C,OAAO,CAAC1C,SAAR,GAAoB,CAAC,GAAGtG,UAAU,CAAC5B,OAAf,EAAwB4K,OAAO,CAAC1C,SAAhC,CAApB;MACD;;MAED,IAAI0C,OAAO,CAACzC,SAAR,IAAqB,OAAOyC,OAAO,CAACzC,SAAf,KAA6B,QAAtD,EAAgE;QAC9DyC,OAAO,CAACzC,SAAR,GAAoB,CAAC,GAAGvG,UAAU,CAAC5B,OAAf,EAAwB4K,OAAO,CAACzC,SAAhC,CAApB;MACD;;MAED,IAAI,CAACyC,OAAO,CAACzC,SAAT,IAAsByC,OAAO,CAAC1C,SAAlC,EAA6C;QAC3C0C,OAAO,CAACzC,SAAR,GAAoByC,OAAO,CAAC1C,SAA5B;MACD;;MAEDL,eAAe,CAACkD,mBAAhB,CAAoC,KAAK/C,mBAAL,EAApC,EAAgE4C,OAAhE;IACD;EAvCA,CAtQqC,EA8SrC;IACDzH,GAAG,EAAE,aADJ;IAEDpD,KAAK,EAAE,UAAUiL;IACjB;IADO,EAEL;MACA,IAAInD,eAAe,GAAGxG,YAAY,CAACrB,OAAb,CAAqB8H,wBAArB,EAAtB;;MAEA,IAAImD,KAAK,GAAGpD,eAAe,CAACqD,QAAhB,CAAyB,KAAKlD,mBAAL,EAAzB,CAAZ;;MAEA,IAAIiD,KAAJ,EAAW;QACTA,KAAK,CAACD,OAAN,GAAgBA,OAAhB;MACD;IACF;EAZA,CA9SqC,EA2TrC;IACD7H,GAAG,EAAE,YADJ;IAEDpD,KAAK,EAAE,UAAUoL;IACjB;IADO,EAEL;MACA,IAAI,KAAK9C,QAAL,IAAiB8C,QAArB,EAA+B;QAC7B,IAAItE,cAAJ,EAAoB;UAClB,IAAIgB,eAAe,GAAGxG,YAAY,CAACrB,OAAb,CAAqB8H,wBAArB,EAAtB;;UAEA,IAAIsD,QAAQ,GAAGvD,eAAe,CAACwD,WAAhB,CAA4B,KAAKrD,mBAAL,EAA5B,CAAf;UACA,KAAKI,EAAL,GAAU+C,QAAV;UACA,OAAO,KAAK9C,QAAZ;;UAEA,IAAI+C,QAAJ,EAAc;YACZvD,eAAe,CAAC8C,eAAhB,CAAgC,KAAK3C,mBAAL,EAAhC,EAA4DoD,QAA5D;UACD;QACF,CAVD,MAUO;UACL,KAAKhD,EAAL,GAAU+C,QAAV;UACA,OAAO,KAAK9C,QAAZ;QACD;MACF;IACF;EArBA,CA3TqC,EAiVrC;IACDlF,GAAG,EAAE,qBADJ;IAEDpD,KAAK,EAAE,UAAUuL;IACjB;IADO,EAELC;IACF;IAHO,EAIL;MACA,IAAIC,OAAO,GAAG,EAAd;;MAEA,IAAI3D,eAAe,GAAGxG,YAAY,CAACrB,OAAb,CAAqB8H,wBAArB,EAAtB;;MAEA,IAAIkB,OAAO,GAAGnB,eAAe,CAAC4D,eAAhB,CAAgC,KAAKzD,mBAAL,EAAhC,CAAd;;MAEA,KAAK,IAAIgC,IAAT,IAAiBhB,OAAjB,EAA0B;QACxB,IAAIA,OAAO,CAACgB,IAAD,CAAP,YAAyB/H,QAAQ,CAACyJ,UAAtC,EAAkD;UAChDF,OAAO,CAACxB,IAAD,CAAP,GAAgBhB,OAAO,CAACgB,IAAD,CAAP,CAAc2B,OAAd,CAAsB/C,SAAtB,EAAiC,IAAjC,EAAuCoB,IAAvC,CAAhB;QACD,CAFD,MAEO,IAAI,EAAEA,IAAI,IAAIsB,QAAV,CAAJ,EAAyB;UAC9B;UACAE,OAAO,CAACxB,IAAD,CAAP,GAAgBhB,OAAO,CAACgB,IAAD,CAAP,CAAc2B,OAAd,CAAsB/C,SAAtB,CAAhB;QACD;MACF;;MAED,KAAKoB,IAAL,IAAasB,QAAb,EAAuB;QACrB,IAAI,CAACtB,IAAI,KAAK,WAAT,IAAwBA,IAAI,KAAK,WAAlC,KAAkD,OAAOsB,QAAQ,CAACtB,IAAD,CAAf,KAA0B,QAAhF,EAA0F;UACxFwB,OAAO,CAACxB,IAAD,CAAP,GAAgB,CAAC,GAAGpI,UAAU,CAAC5B,OAAf,EAAwBsL,QAAQ,CAACtB,IAAD,CAAhC,CAAhB;QACD,CAFD,MAEO,IAAIA,IAAI,KAAK,KAAb,EAAoB;UACzBwB,OAAO,CAACxB,IAAD,CAAP,GAAgB,IAAIrI,SAAS,CAAC3B,OAAd,CAAsBsL,QAAQ,CAACtB,IAAD,CAA9B,CAAhB;QACD,CAFM,MAEA,IAAIA,IAAI,KAAK,UAAb,EAAyB;UAC9B,IAAIT,GAAG,GAAG,CAAC,GAAGhI,OAAO,CAACvB,OAAZ,EAAqBsL,QAAQ,CAACtB,IAAD,CAA7B,CAAV;;UAEA,IAAIT,GAAG,IAAI,CAAC,GAAG7I,eAAe,CAACV,OAApB,EAA6BuJ,GAA7B,MAAsCnG,MAAM,CAACC,SAAxD,EAAmE;YACjEmI,OAAO,CAACxB,IAAD,CAAP,GAAgB5D,aAAa,CAACA,aAAa,CAAC,EAAD,EAAK,KAAKkB,UAAL,CAAgB0C,IAAhB,CAAL,CAAd,EAA2CT,GAA3C,CAA7B;UACD,CAFD,MAEO;YACLiC,OAAO,CAACxB,IAAD,CAAP,GAAgBT,GAAhB;UACD;;UAED,IAAIiC,OAAO,CAACxB,IAAD,CAAP,YAAyB/H,QAAQ,CAAC2J,OAAtC,EAA+C;YAC7CJ,OAAO,CAACxB,IAAD,CAAP,GAAgBpB,SAAhB;UACD;QACF;MACF;;MAED,IAAI4C,OAAO,CAACtD,SAAR,IAAqB,CAACsD,OAAO,CAACrD,SAAlC,EAA6C;QAC3CqD,OAAO,CAACrD,SAAR,GAAoBqD,OAAO,CAACtD,SAA5B;MACD;;MAED,KAAK2D,UAAL,CAAgBP,QAAQ,CAACZ,QAAzB;;MAEA,IAAIa,MAAM,KAAK,GAAf,EAAoB;QAClB,KAAKO,WAAL,CAAiB,IAAjB;MACD;;MAEDjE,eAAe,CAACkD,mBAAhB,CAAoC,KAAK/C,mBAAL,EAApC,EAAgEwD,OAAhE;IACD;EArDA,CAjVqC,EAuYrC;IACDrI,GAAG,EAAE,kBADJ;IAEDpD,KAAK,EAAE,YAAY;MACjB,IAAI8H,eAAe,GAAGxG,YAAY,CAACrB,OAAb,CAAqB8H,wBAArB,EAAtB;;MAEAD,eAAe,CAACkE,sBAAhB,CAAuC,KAAK/D,mBAAL,EAAvC;IACD;EANA,CAvYqC,EA8YrC;IACD7E,GAAG,EAAE,YADJ;IAEDpD,KAAK;IACL;IACA,YAAY,CAAC;IACZ;IACD;AACJ;AACA;AACA;AACA;AACA;AACA;;EAZK,CA9YqC,EA4ZrC;IACDoD,GAAG,EAAE,QADJ;IAEDpD,KAAK,EAAE,UAAU2J;IACjB;IADO,EAELC;IACF;IAHO;IAKP;IACA;MACE,IAAIqC,SAAS,GAAG,KAAK5D,EAAL,GAAU,KAAKf,SAAL,GAAiB,GAAjB,GAAuB,KAAKe,EAAtC,GAA2C,IAA3D;MACAsB,IAAI,GAAGA,IAAI,IAAI,CAACsC,SAAD,CAAf;MACA,IAAIxC,IAAI,GAAG,EAAX;MACA,IAAIyC,KAAK,GAAG,KAAK3E,UAAjB;;MAEA,KAAK,IAAI4E,MAAT,IAAmBD,KAAnB,EAA0B;QACxB,IAAI,CAACC,MAAM,KAAK,WAAX,IAA0BA,MAAM,KAAK,WAAtC,KAAsDD,KAAK,CAACC,MAAD,CAAL,CAActC,MAAxE,EAAgF;UAC9EJ,IAAI,CAAC0C,MAAD,CAAJ,GAAeD,KAAK,CAACC,MAAD,CAAL,CAActC,MAAd,EAAf;QACD,CAFD,MAEO;UACLJ,IAAI,CAAC0C,MAAD,CAAJ,GAAe,CAAC,GAAG1K,OAAO,CAACxB,OAAZ,EAAqBiM,KAAK,CAACC,MAAD,CAA1B,EAAoC,KAApC,EAA2C,KAA3C,EAAkDxC,IAAlD,EAAwDC,OAAxD,CAAf;QACD;MACF;;MAED,IAAIX,OAAO,GAAG,KAAKC,cAAL,EAAd;;MAEA,KAAK,IAAIkD,MAAT,IAAmBnD,OAAO,CAAC,CAAD,CAA1B,EAA+B;QAC7BQ,IAAI,CAAC2C,MAAD,CAAJ,GAAenD,OAAO,CAAC,CAAD,CAAP,CAAWmD,MAAX,EAAmBvC,MAAnB,CAA0BD,OAA1B,CAAf;MACD;;MAED,IAAI,KAAKvB,EAAT,EAAa;QACXoB,IAAI,CAACkB,QAAL,GAAgB,KAAKtC,EAArB;MACD;;MAED,OAAOoB,IAAP;IACD;IACD;AACJ;AACA;AACA;AACA;AACA;;EAvCK,CA5ZqC,EAqcrC;IACDrG,GAAG,EAAE,QADJ;IAEDpD,KAAK,EAAE,UAAUqM;IACjB;IADO;IAGP;IACA;MACE,IAAI,SAASA,KAAb,EAAoB;QAClB,OAAO,IAAP;MACD;;MAED,OAAOA,KAAK,YAAYhF,WAAjB,IAAgC,KAAKC,SAAL,KAAmB+E,KAAK,CAAC/E,SAAzD,IAAsE,KAAKe,EAAL,KAAYgE,KAAK,CAAChE,EAAxF,IAA8F,OAAO,KAAKA,EAAZ,KAAmB,WAAxH;IACD;IACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;EApBK,CArcqC,EA2drC;IACDjF,GAAG,EAAE,OADJ;IAEDpD,KAAK,EAAE,UAAUiK;IACjB;IADO;IAGP;IACA;MACE,IAAI,CAAC,KAAK5B,EAAV,EAAc;QACZ,OAAO,IAAP;MACD;;MAED,IAAIiE,UAAU,GAAG,KAAKpD,cAAL,EAAjB;;MAEA,IAAIa,YAAY,GAAG,KAAKC,yBAAL,EAAnB;;MAEA,IAAIC,IAAJ,EAAU;QACR,IAAIF,YAAY,CAACxG,cAAb,CAA4B0G,IAA5B,CAAJ,EAAuC;UACrC,OAAO,IAAP;QACD;;QAED,KAAK,IAAIhG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGqI,UAAU,CAACtI,MAA/B,EAAuCC,CAAC,EAAxC,EAA4C;UAC1C,IAAIqI,UAAU,CAACrI,CAAD,CAAV,CAAcV,cAAd,CAA6B0G,IAA7B,CAAJ,EAAwC;YACtC,OAAO,IAAP;UACD;QACF;;QAED,OAAO,KAAP;MACD;;MAED,IAAI,CAAC,GAAGlJ,KAAK,CAACd,OAAV,EAAmBqM,UAAU,CAAC,CAAD,CAA7B,EAAkCtI,MAAlC,KAA6C,CAAjD,EAAoD;QAClD,OAAO,IAAP;MACD;;MAED,IAAI,CAAC,GAAGjD,KAAK,CAACd,OAAV,EAAmB8J,YAAnB,EAAiC/F,MAAjC,KAA4C,CAAhD,EAAmD;QACjD,OAAO,IAAP;MACD;;MAED,OAAO,KAAP;IACD;IACD;AACJ;AACA;AACA;AACA;;EA3CK,CA3dqC,EAwgBrC;IACDZ,GAAG,EAAE,WADJ;IAEDpD,KAAK,EAAE;IACP;IACA;MACE,IAAIsM,UAAU,GAAG,KAAKpD,cAAL,EAAjB;;MAEA,IAAInD,IAAI,GAAG,EAAX;;MAEA,KAAK,IAAI9B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGqI,UAAU,CAACtI,MAA/B,EAAuCC,CAAC,EAAxC,EAA4C;QAC1C,KAAK,IAAIsI,MAAT,IAAmBD,UAAU,CAACrI,CAAD,CAA7B,EAAkC;UAChC8B,IAAI,CAACwG,MAAD,CAAJ,GAAe,IAAf;QACD;MACF;;MAED,IAAIxC,YAAY,GAAG,KAAKC,yBAAL,EAAnB;;MAEA,KAAK,IAAIwC,MAAT,IAAmBzC,YAAnB,EAAiC;QAC/BhE,IAAI,CAACyG,MAAD,CAAJ,GAAe,IAAf;MACD;;MAED,OAAO,CAAC,GAAGzL,KAAK,CAACd,OAAV,EAAmB8F,IAAnB,CAAP;IACD;IACD;AACJ;AACA;AACA;AACA;;EA3BK,CAxgBqC,EAqiBrC;IACD3C,GAAG,EAAE,iBADJ;IAEDpD,KAAK,EAAE;IACP;IACA;MACE,IAAI0I,UAAU,GAAG,KAAKR,cAAL,EAAjB;;MAEA,OAAO,CAAC,CAAC,CAAC,GAAGnH,KAAK,CAACd,OAAV,EAAmByI,UAAnB,EAA+B1E,MAAxC;IACD;IACD;AACJ;AACA;AACA;AACA;;EAbK,CAriBqC,EAojBrC;IACDZ,GAAG,EAAE,WADJ;IAEDpD,KAAK,EAAE;IACP;IACA;MACE,IAAI,CAAC,KAAKqI,EAAV,EAAc;QACZ,MAAM,IAAIR,KAAJ,CAAU,mDAAV,CAAN;MACD;;MAED,OAAO;QACLiC,MAAM,EAAE,SADH;QAELxC,SAAS,EAAE,KAAKA,SAFX;QAGLqD,QAAQ,EAAE,KAAKtC;MAHV,CAAP;IAKD;IACD;AACJ;AACA;AACA;AACA;;EAnBK,CApjBqC,EAykBrC;IACDjF,GAAG,EAAE,kBADJ;IAEDpD,KAAK,EAAE;IACP;IACA;MACE,IAAI,CAAC,KAAKsI,QAAV,EAAoB;QAClB,MAAM,IAAIT,KAAJ,CAAU,wDAAV,CAAN;MACD;;MAED,OAAO;QACLiC,MAAM,EAAE,QADH;QAELxC,SAAS,EAAE,KAAKA,SAFX;QAGLgB,QAAQ,EAAE,KAAKA;MAHV,CAAP;IAKD;IACD;AACJ;AACA;AACA;AACA;AACA;;EApBK,CAzkBqC,EA+lBrC;IACDlF,GAAG,EAAE,KADJ;IAEDpD,KAAK,EAAE,UAAUiK;IACjB;IADO;IAGP;IACA;MACE,OAAO,KAAK1C,UAAL,CAAgB0C,IAAhB,CAAP;IACD;IACD;AACJ;AACA;AACA;AACA;AACA;;EAdK,CA/lBqC,EA+mBrC;IACD7G,GAAG,EAAE,UADJ;IAEDpD,KAAK,EAAE,UAAUiK;IACjB;IADO;IAGP;IACA;MACE,IAAIjK,KAAK,GAAG,KAAKkD,GAAL,CAAS+G,IAAT,CAAZ;;MAEA,IAAIjK,KAAJ,EAAW;QACT,IAAI,EAAEA,KAAK,YAAYoC,cAAc,CAACnC,OAAlC,CAAJ,EAAgD;UAC9C,MAAM,IAAI4H,KAAJ,CAAU,6CAA6CoC,IAAvD,CAAN;QACD;;QAEDjK,KAAK,CAAC+K,mBAAN,CAA0B,IAA1B,EAAgCd,IAAhC;;QAEA,OAAOjK,KAAP;MACD;;MAED,OAAO,IAAIoC,cAAc,CAACnC,OAAnB,CAA2B,IAA3B,EAAiCgK,IAAjC,CAAP;IACD;IACD;AACJ;AACA;AACA;AACA;AACA;;EA1BK,CA/mBqC,EA2oBrC;IACD7G,GAAG,EAAE,QADJ;IAEDpD,KAAK,EAAE,UAAUiK;IACjB;IADO;IAGP;IACA;MACE,IAAIT,GAAG,GAAG,KAAKjC,UAAL,CAAgB0C,IAAhB,CAAV;;MAEA,IAAIT,GAAG,IAAI,IAAX,EAAiB;QACf,OAAO,EAAP;MACD;;MAED,IAAI,OAAOA,GAAP,KAAe,QAAnB,EAA6B;QAC3B,IAAI,OAAOA,GAAG,CAACpE,QAAX,KAAwB,UAA5B,EAAwC;UACtC,OAAO,EAAP;QACD;;QAEDoE,GAAG,GAAGA,GAAG,CAACpE,QAAJ,EAAN;MACD;;MAED,OAAO,CAAC,GAAG1D,QAAQ,CAACzB,OAAb,EAAsBuJ,GAAtB,CAAP;IACD;IACD;AACJ;AACA;AACA;AACA;AACA;AACA;;EA7BK,CA3oBqC,EA0qBrC;IACDpG,GAAG,EAAE,KADJ;IAEDpD,KAAK,EAAE,UAAUiK;IACjB;IADO;IAGP;IACA;MACE,IAAI1C,UAAU,GAAG,KAAKA,UAAtB;;MAEA,IAAIA,UAAU,CAAChE,cAAX,CAA0B0G,IAA1B,CAAJ,EAAqC;QACnC,OAAO1C,UAAU,CAAC0C,IAAD,CAAV,IAAoB,IAA3B;MACD;;MAED,OAAO,KAAP;IACD;IACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EA5CK,CA1qBqC,EAwtBrC;IACD7G,GAAG,EAAE,KADJ;IAEDpD,KAAK,EAAE,UAAUoD;IACjB;IADO,EAELpD;IACF;IAHO,EAILwH;IACF;IALO;IAOP;IACA;MACE,IAAIiE,OAAO,GAAG,EAAd;MACA,IAAIgB,MAAM,GAAG,EAAb;;MAEA,IAAIrJ,GAAG,IAAI,CAAC,GAAGnC,QAAQ,CAAChB,OAAb,EAAsBmD,GAAtB,MAA+B,QAA1C,EAAoD;QAClDqI,OAAO,GAAGrI,GAAV;QACAoE,OAAO,GAAGxH,KAAV;MACD,CAHD,MAGO,IAAI,OAAOoD,GAAP,KAAe,QAAnB,EAA6B;QAClCqI,OAAO,CAACrI,GAAD,CAAP,GAAepD,KAAf;MACD,CAFM,MAEA;QACL,OAAO,IAAP;MACD;;MAEDwH,OAAO,GAAGA,OAAO,IAAI,EAArB;MACA,IAAIkF,QAAQ,GAAG,EAAf;;MAEA,IAAI,OAAO,KAAKrH,WAAL,CAAiBsH,kBAAxB,KAA+C,UAAnD,EAA+D;QAC7DD,QAAQ,GAAG,CAAC,GAAGhM,OAAO,CAACT,OAAZ,EAAqByM,QAArB,EAA+BlJ,IAA/B,CAAoCkJ,QAApC,EAA8C,KAAKrH,WAAL,CAAiBsH,kBAAjB,EAA9C,CAAX;MACD;;MAED,KAAK,IAAIC,CAAT,IAAcnB,OAAd,EAAuB;QACrB,IAAImB,CAAC,KAAK,WAAN,IAAqBA,CAAC,KAAK,WAA/B,EAA4C;UAC1C;UACA;UACA;QACD;;QAED,IAAI,CAAC,GAAGvL,QAAQ,CAACpB,OAAb,EAAsByM,QAAtB,EAAgClJ,IAAhC,CAAqCkJ,QAArC,EAA+CE,CAA/C,IAAoD,CAAC,CAAzD,EAA4D;UAC1D,MAAM,IAAI/E,KAAJ,CAAU,uCAAuC+E,CAAjD,CAAN;QACD;;QAED,IAAIpF,OAAO,CAACmB,KAAZ,EAAmB;UACjB8D,MAAM,CAACG,CAAD,CAAN,GAAY,IAAI1K,QAAQ,CAAC2J,OAAb,EAAZ;QACD,CAFD,MAEO,IAAIJ,OAAO,CAACmB,CAAD,CAAP,YAAsB1K,QAAQ,CAAC2K,EAAnC,EAAuC;UAC5CJ,MAAM,CAACG,CAAD,CAAN,GAAYnB,OAAO,CAACmB,CAAD,CAAnB;QACD,CAFM,MAEA,IAAInB,OAAO,CAACmB,CAAD,CAAP,IAAc,CAAC,GAAG3L,QAAQ,CAAChB,OAAb,EAAsBwL,OAAO,CAACmB,CAAD,CAA7B,MAAsC,QAApD,IAAgE,OAAOnB,OAAO,CAACmB,CAAD,CAAP,CAAWE,IAAlB,KAA2B,QAA/F,EAAyG;UAC9GL,MAAM,CAACG,CAAD,CAAN,GAAY,CAAC,GAAG1K,QAAQ,CAAC6K,UAAb,EAAyBtB,OAAO,CAACmB,CAAD,CAAhC,CAAZ;QACD,CAFM,MAEA,IAAIA,CAAC,KAAK,UAAN,IAAoBA,CAAC,KAAK,IAA9B,EAAoC;UACzC,IAAI,OAAOnB,OAAO,CAACmB,CAAD,CAAd,KAAsB,QAA1B,EAAoC;YAClC,KAAKvE,EAAL,GAAUoD,OAAO,CAACmB,CAAD,CAAjB;UACD;QACF,CAJM,MAIA,IAAIA,CAAC,KAAK,KAAN,IAAe,CAAC,GAAG3L,QAAQ,CAAChB,OAAb,EAAsBwL,OAAO,CAACmB,CAAD,CAA7B,MAAsC,QAArD,IAAiE,EAAEnB,OAAO,CAACmB,CAAD,CAAP,YAAsBhL,SAAS,CAAC3B,OAAlC,CAArE,EAAiH;UACtHwM,MAAM,CAACG,CAAD,CAAN,GAAY,IAAI1K,QAAQ,CAACoI,KAAb,CAAmB,IAAI1I,SAAS,CAAC3B,OAAd,CAAsBwL,OAAO,CAACmB,CAAD,CAA7B,CAAnB,CAAZ;QACD,CAFM,MAEA,IAAInB,OAAO,CAACmB,CAAD,CAAP,YAAsBxK,cAAc,CAACnC,OAAzC,EAAkD;UACvD,IAAI+M,QAAQ,GAAG,IAAI5K,cAAc,CAACnC,OAAnB,CAA2B,IAA3B,EAAiC2M,CAAjC,CAAf;UACAI,QAAQ,CAACC,eAAT,GAA2BxB,OAAO,CAACmB,CAAD,CAAP,CAAWK,eAAtC;UACAR,MAAM,CAACG,CAAD,CAAN,GAAY,IAAI1K,QAAQ,CAACoI,KAAb,CAAmB0C,QAAnB,CAAZ;QACD,CAJM,MAIA;UACLP,MAAM,CAACG,CAAD,CAAN,GAAY,IAAI1K,QAAQ,CAACoI,KAAb,CAAmBmB,OAAO,CAACmB,CAAD,CAA1B,CAAZ;QACD;MACF;;MAED,IAAIM,iBAAiB,GAAG,KAAK3F,UAA7B,CApDF,CAoD2C;;MAEzC,IAAI4F,SAAS,GAAG,EAAhB;;MAEA,KAAK,IAAIC,MAAT,IAAmBX,MAAnB,EAA2B;QACzB,IAAIA,MAAM,CAACW,MAAD,CAAN,YAA0BlL,QAAQ,CAACyJ,UAAvC,EAAmD;UACjDwB,SAAS,CAACC,MAAD,CAAT,GAAoBX,MAAM,CAACW,MAAD,CAAN,CAAexB,OAAf,CAAuBsB,iBAAiB,CAACE,MAAD,CAAxC,EAAkD,IAAlD,EAAwDA,MAAxD,CAApB;QACD,CAFD,MAEO,IAAI,EAAEX,MAAM,CAACW,MAAD,CAAN,YAA0BlL,QAAQ,CAAC2J,OAArC,CAAJ,EAAmD;UACxDsB,SAAS,CAACC,MAAD,CAAT,GAAoBX,MAAM,CAACW,MAAD,CAAN,CAAexB,OAAf,CAAuBsB,iBAAiB,CAACE,MAAD,CAAxC,CAApB;QACD;MACF,CA9DH,CA8DI;;;MAGF,IAAI,CAAC5F,OAAO,CAAC6F,gBAAb,EAA+B;QAC7B,IAAIC,UAAU,GAAG,KAAKC,QAAL,CAAcJ,SAAd,CAAjB;;QAEA,IAAIG,UAAJ,EAAgB;UACd,IAAI,OAAO9F,OAAO,CAACgG,KAAf,KAAyB,UAA7B,EAAyC;YACvChG,OAAO,CAACgG,KAAR,CAAc,IAAd,EAAoBF,UAApB;UACD;;UAED,OAAO,KAAP;QACD;MACF,CA3EH,CA2EI;;;MAGF,IAAIhB,UAAU,GAAG,KAAKpD,cAAL,EAAjB;;MAEA,IAAIuE,IAAI,GAAGnB,UAAU,CAACtI,MAAX,GAAoB,CAA/B;;MAEA,IAAI8D,eAAe,GAAGxG,YAAY,CAACrB,OAAb,CAAqB8H,wBAArB,EAAtB;;MAEA,KAAK,IAAI2F,OAAT,IAAoBjB,MAApB,EAA4B;QAC1B,IAAIkB,MAAM,GAAGlB,MAAM,CAACiB,OAAD,CAAN,CAAgBE,SAAhB,CAA0BtB,UAAU,CAACmB,IAAD,CAAV,CAAiBC,OAAjB,CAA1B,CAAb;;QAEA5F,eAAe,CAAC+F,YAAhB,CAA6B,KAAK5F,mBAAL,EAA7B,EAAyDyF,OAAzD,EAAkEC,MAAlE;MACD;;MAED,OAAO,IAAP;IACD;IACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;EA7GK,CAxtBqC,EAu0BrC;IACDvK,GAAG,EAAE,OADJ;IAEDpD,KAAK,EAAE,UAAUiK;IACjB;IADO,EAELzC;IACF;IAHO;IAKP;IACA;MACEA,OAAO,GAAGA,OAAO,IAAI,EAArB;MACAA,OAAO,CAACmB,KAAR,GAAgB,IAAhB;MACA,OAAO,KAAKjF,GAAL,CAASuG,IAAT,EAAe,IAAf,EAAqBzC,OAArB,CAAP;IACD;IACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;EApBK,CAv0BqC,EA61BrC;IACDpE,GAAG,EAAE,WADJ;IAEDpD,KAAK,EAAE,UAAUiK;IACjB;IADO,EAEL6D;IACF;IAHO;IAKP;IACA;MACE,IAAI,OAAOA,MAAP,KAAkB,WAAtB,EAAmC;QACjCA,MAAM,GAAG,CAAT;MACD;;MAED,IAAI,OAAOA,MAAP,KAAkB,QAAtB,EAAgC;QAC9B,MAAM,IAAIjG,KAAJ,CAAU,2CAAV,CAAN;MACD;;MAED,OAAO,KAAKnE,GAAL,CAASuG,IAAT,EAAe,IAAI/H,QAAQ,CAAC6L,WAAb,CAAyBD,MAAzB,CAAf,CAAP;IACD;IACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;EA1BK,CA71BqC,EAy3BrC;IACD1K,GAAG,EAAE,WADJ;IAEDpD,KAAK,EAAE,UAAUiK;IACjB;IADO,EAEL6D;IACF;IAHO;IAKP;IACA;MACE,IAAI,OAAOA,MAAP,KAAkB,WAAtB,EAAmC;QACjCA,MAAM,GAAG,CAAT;MACD;;MAED,IAAI,OAAOA,MAAP,KAAkB,QAAtB,EAAgC;QAC9B,MAAM,IAAIjG,KAAJ,CAAU,2CAAV,CAAN;MACD;;MAED,OAAO,KAAKnE,GAAL,CAASuG,IAAT,EAAe,IAAI/H,QAAQ,CAAC6L,WAAb,CAAyBD,MAAM,GAAG,CAAC,CAAnC,CAAf,CAAP;IACD;IACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;EA1BK,CAz3BqC,EAq5BrC;IACD1K,GAAG,EAAE,KADJ;IAEDpD,KAAK,EAAE,UAAUiK;IACjB;IADO,EAEL+D;IACF;IAHO;IAKP;IACA;MACE,OAAO,KAAKtK,GAAL,CAASuG,IAAT,EAAe,IAAI/H,QAAQ,CAAC+L,KAAb,CAAmB,CAACD,IAAD,CAAnB,CAAf,CAAP;IACD;IACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;EAlBK,CAr5BqC,EAy6BrC;IACD5K,GAAG,EAAE,QADJ;IAEDpD,KAAK,EAAE,UAAUiK;IACjB;IADO,EAELiE;IACF;IAHO;IAKP;IACA;MACE,OAAO,KAAKxK,GAAL,CAASuG,IAAT,EAAe,IAAI/H,QAAQ,CAAC+L,KAAb,CAAmBC,KAAnB,CAAf,CAAP;IACD;IACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAnBK,CAz6BqC,EA87BrC;IACD9K,GAAG,EAAE,WADJ;IAEDpD,KAAK,EAAE,UAAUiK;IACjB;IADO,EAEL+D;IACF;IAHO;IAKP;IACA;MACE,OAAO,KAAKtK,GAAL,CAASuG,IAAT,EAAe,IAAI/H,QAAQ,CAACiM,WAAb,CAAyB,CAACH,IAAD,CAAzB,CAAf,CAAP;IACD;IACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAnBK,CA97BqC,EAm9BrC;IACD5K,GAAG,EAAE,cADJ;IAEDpD,KAAK,EAAE,UAAUiK;IACjB;IADO,EAELiE;IACF;IAHO;IAKP;IACA;MACE,OAAO,KAAKxK,GAAL,CAASuG,IAAT,EAAe,IAAI/H,QAAQ,CAACiM,WAAb,CAAyBD,KAAzB,CAAf,CAAP;IACD;IACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;EAlBK,CAn9BqC,EAu+BrC;IACD9K,GAAG,EAAE,QADJ;IAEDpD,KAAK,EAAE,UAAUiK;IACjB;IADO,EAEL+D;IACF;IAHO;IAKP;IACA;MACE,OAAO,KAAKtK,GAAL,CAASuG,IAAT,EAAe,IAAI/H,QAAQ,CAACkM,QAAb,CAAsB,CAACJ,IAAD,CAAtB,CAAf,CAAP;IACD;IACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;EAlBK,CAv+BqC,EA2/BrC;IACD5K,GAAG,EAAE,WADJ;IAEDpD,KAAK,EAAE,UAAUiK;IACjB;IADO,EAELiE;IACF;IAHO;IAKP;IACA;MACE,OAAO,KAAKxK,GAAL,CAASuG,IAAT,EAAe,IAAI/H,QAAQ,CAACkM,QAAb,CAAsBF,KAAtB,CAAf,CAAP;IACD;IACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAnBK,CA3/BqC,EAghCrC;IACD9K,GAAG,EAAE,IADJ;IAEDpD,KAAK,EAAE,UAAUiK;IACjB;IADO;IAGP;IACA;MACE,IAAIhB,OAAO,GAAG,KAAKC,cAAL,EAAd;;MAEA,KAAK,IAAIjF,CAAC,GAAGgF,OAAO,CAACjF,MAArB,EAA6BC,CAAC,EAA9B,GAAmC;QACjC,IAAIgF,OAAO,CAAChF,CAAD,CAAP,CAAWgG,IAAX,CAAJ,EAAsB;UACpB,OAAOhB,OAAO,CAAChF,CAAD,CAAP,CAAWgG,IAAX,CAAP;QACD;MACF;IACF;IACD;AACJ;AACA;AACA;AACA;;EAnBK,CAhhCqC,EAqiCrC;IACD7G,GAAG,EAAE,OADJ;IAEDpD,KAAK,EAAE,SAASqO,KAAT;IACP;IACA;MACE,IAAIA,KAAK,GAAG,IAAI,KAAKhJ,WAAT,CAAqB,KAAKiC,SAA1B,CAAZ;MACA,IAAIC,UAAU,GAAG,KAAKA,UAAtB;;MAEA,IAAI,OAAO,KAAKlC,WAAL,CAAiBsH,kBAAxB,KAA+C,UAAnD,EAA+D;QAC7D,IAAID,QAAQ,GAAG,KAAKrH,WAAL,CAAiBsH,kBAAjB,MAAyC,EAAxD,CAD6D,CACD;QAC5D;;QAEA,IAAI2B,IAAI,GAAG,EAAX;;QAEA,KAAK,IAAIC,CAAT,IAAchH,UAAd,EAA0B;UACxB,IAAI,CAAC,GAAGlG,QAAQ,CAACpB,OAAb,EAAsByM,QAAtB,EAAgClJ,IAAhC,CAAqCkJ,QAArC,EAA+C6B,CAA/C,IAAoD,CAAxD,EAA2D;YACzDD,IAAI,CAACC,CAAD,CAAJ,GAAUhH,UAAU,CAACgH,CAAD,CAApB;UACD;QACF;;QAEDhH,UAAU,GAAG+G,IAAb;MACD;;MAED,IAAID,KAAK,CAAC3K,GAAV,EAAe;QACb2K,KAAK,CAAC3K,GAAN,CAAU6D,UAAV;MACD;;MAED,OAAO8G,KAAP;IACD;IACD;AACJ;AACA;AACA;AACA;;EAjCK,CAriCqC,EAwkCrC;IACDjL,GAAG,EAAE,aADJ;IAEDpD,KAAK,EAAE;IACP;IACA;MACE,IAAIqO,KAAK,GAAG,IAAI,KAAKhJ,WAAT,CAAqB,KAAKiC,SAA1B,CAAZ;MACA+G,KAAK,CAAChG,EAAN,GAAW,KAAKA,EAAhB;;MAEA,IAAIvB,cAAJ,EAAoB;QAClB;QACA,OAAOuH,KAAP;MACD;;MAED,IAAIvG,eAAe,GAAGxG,YAAY,CAACrB,OAAb,CAAqB8H,wBAArB,EAAtB;;MAEA,IAAID,eAAJ,EAAqB;QACnBA,eAAe,CAAC0G,cAAhB,CAA+B,KAAKvG,mBAAL,EAA/B,EAA2DoG,KAAK,CAACpG,mBAAN,EAA3D;MACD;;MAED,OAAOoG,KAAP;IACD;IACD;AACJ;AACA;AACA;AACA;;EAzBK,CAxkCqC,EAmmCrC;IACDjL,GAAG,EAAE,OADJ;IAEDpD,KAAK,EAAE;IACP;IACA;MACE,OAAO,CAAC,KAAKqI,EAAb;IACD;IACD;AACJ;AACA;AACA;AACA;AACA;AACA;;EAbK,CAnmCqC,EAknCrC;IACDjF,GAAG,EAAE,SADJ;IAEDpD,KAAK,EAAE;IACP;IACA;MACE,IAAI,CAAC,KAAKqI,EAAV,EAAc;QACZ,OAAO,KAAP;MACD;;MAED,IAAIP,eAAe,GAAGxG,YAAY,CAACrB,OAAb,CAAqB8H,wBAArB,EAAtB;;MAEA,IAAImD,KAAK,GAAGpD,eAAe,CAACqD,QAAhB,CAAyB,KAAKlD,mBAAL,EAAzB,CAAZ;;MAEA,IAAIiD,KAAJ,EAAW;QACT,OAAOA,KAAK,CAACD,OAAb;MACD;;MAED,OAAO,KAAP;IACD;IACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EA9BK,CAlnCqC,EAkpCrC;IACD7H,GAAG,EAAE,QADJ;IAEDpD,KAAK,EAAE,YAAY;MACjB,IAAIyO,OAAO,GAAG,CAAC,GAAGhO,kBAAkB,CAACR,OAAvB,GAAiC,aAAaO,YAAY,CAACP,OAAb,CAAqByO,IAArB,CAA0B,SAASC,OAAT,CAAiBnH;MACvG;MADsF,EAEpF;QACA,IAAIoH,KAAJ;QACA,OAAOpO,YAAY,CAACP,OAAb,CAAqB4O,IAArB,CAA0B,UAAUC,QAAV,EAAoB;UACnD,OAAO,CAAP,EAAU;YACR,QAAQA,QAAQ,CAACC,IAAT,GAAgBD,QAAQ,CAAChK,IAAjC;cACE,KAAK,CAAL;gBACE,IAAI,KAAKuD,EAAT,EAAa;kBACXyG,QAAQ,CAAChK,IAAT,GAAgB,CAAhB;kBACA;gBACD;;gBAED,OAAOgK,QAAQ,CAACE,MAAT,CAAgB,QAAhB,EAA0B,KAA1B,CAAP;;cAEF,KAAK,CAAL;gBACEF,QAAQ,CAACC,IAAT,GAAgB,CAAhB;gBACAH,KAAK,GAAG,IAAIzM,WAAW,CAAClC,OAAhB,CAAwB,KAAKqH,SAA7B,CAAR;gBACAwH,QAAQ,CAAChK,IAAT,GAAgB,CAAhB;gBACA,OAAO8J,KAAK,CAAC1L,GAAN,CAAU,KAAKmF,EAAf,EAAmBb,OAAnB,CAAP;;cAEF,KAAK,CAAL;gBACE,OAAOsH,QAAQ,CAACE,MAAT,CAAgB,QAAhB,EAA0B,IAA1B,CAAP;;cAEF,KAAK,CAAL;gBACEF,QAAQ,CAACC,IAAT,GAAgB,CAAhB;gBACAD,QAAQ,CAACG,EAAT,GAAcH,QAAQ,CAAC,OAAD,CAAR,CAAkB,CAAlB,CAAd;;gBAEA,IAAI,EAAEA,QAAQ,CAACG,EAAT,CAAYC,IAAZ,KAAqBpN,WAAW,CAAC7B,OAAZ,CAAoBkP,gBAA3C,CAAJ,EAAkE;kBAChEL,QAAQ,CAAChK,IAAT,GAAgB,EAAhB;kBACA;gBACD;;gBAED,OAAOgK,QAAQ,CAACE,MAAT,CAAgB,QAAhB,EAA0B,KAA1B,CAAP;;cAEF,KAAK,EAAL;gBACE,MAAMF,QAAQ,CAACG,EAAf;;cAEF,KAAK,EAAL;cACA,KAAK,KAAL;gBACE,OAAOH,QAAQ,CAACM,IAAT,EAAP;YAlCJ;UAoCD;QACF,CAvCM,EAuCJT,OAvCI,EAuCK,IAvCL,EAuCW,CAAC,CAAC,CAAD,EAAI,CAAJ,CAAD,CAvCX,CAAP;MAwCD,CA5C2D,CAA9C,CAAd;;MA8CA,OAAO,YAAY;QACjB,OAAOF,OAAO,CAACrI,KAAR,CAAc,IAAd,EAAoBG,SAApB,CAAP;MACD,CAFD;IAGD,CAlDM;IAmDP;AACJ;AACA;AACA;AACA;;EAzDK,CAlpCqC,EA6sCrC;IACDnD,GAAG,EAAE,SADJ;IAEDpD,KAAK,EAAE;IACP;IACA;MACE,OAAO,CAAC,KAAKuN,QAAL,CAAc,KAAKhG,UAAnB,CAAR;IACD;IACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAhBK,CA7sCqC,EA+tCrC;IACDnE,GAAG,EAAE,UADJ;IAEDpD,KAAK,EAAE,UAAUkM;IACjB;IADO;IAGP;IACA;MACE,IAAIA,KAAK,CAAC3I,cAAN,CAAqB,KAArB,KAA+B,EAAE2I,KAAK,CAACmD,GAAN,YAAqBzN,SAAS,CAAC3B,OAAjC,CAAnC,EAA8E;QAC5E,OAAO,IAAI6B,WAAW,CAAC7B,OAAhB,CAAwB6B,WAAW,CAAC7B,OAAZ,CAAoBqP,WAA5C,EAAyD,0BAAzD,CAAP;MACD;;MAED,KAAK,IAAIC,IAAT,IAAiBrD,KAAjB,EAAwB;QACtB,IAAI,CAAC,2BAA2B3G,IAA3B,CAAgCgK,IAAhC,CAAL,EAA4C;UAC1C,OAAO,IAAIzN,WAAW,CAAC7B,OAAhB,CAAwB6B,WAAW,CAAC7B,OAAZ,CAAoBuP,gBAA5C,CAAP;QACD;MACF;;MAED,OAAO,KAAP;IACD;IACD;AACJ;AACA;AACA;AACA;AACA;;EAxBK,CA/tCqC,EAyvCrC;IACDpM,GAAG,EAAE,QADJ;IAEDpD,KAAK,EAAE;IACP;IACA;MACE,IAAIyP,GAAG,GAAG,KAAKvM,GAAL,CAAS,KAAT,CAAV;;MAEA,IAAIuM,GAAG,YAAY7N,SAAS,CAAC3B,OAA7B,EAAsC;QACpC,OAAOwP,GAAP;MACD;;MAED,OAAO,IAAP;IACD;IACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;EApBK,CAzvCqC,EA+wCrC;IACDrM,GAAG,EAAE,QADJ;IAEDpD,KAAK,EAAE,UAAUyP;IACjB;IADO,EAELjI;IACF;IAHO;IAKP;IACA;MACE,OAAO,KAAK9D,GAAL,CAAS,KAAT,EAAgB+L,GAAhB,EAAqBjI,OAArB,CAAP;IACD;IACD;AACJ;AACA;AACA;AACA;;EAfK,CA/wCqC,EAgyCrC;IACDpE,GAAG,EAAE,QADJ;IAEDpD,KAAK,EAAE;IACP;IACA;MACE,IAAI0P,YAAJ;;MAEA,KAAK,IAAIC,IAAI,GAAGpJ,SAAS,CAACvC,MAArB,EAA6B+B,IAAI,GAAG,IAAIJ,KAAJ,CAAUgK,IAAV,CAApC,EAAqDC,KAAK,GAAG,CAAlE,EAAqEA,KAAK,GAAGD,IAA7E,EAAmFC,KAAK,EAAxF,EAA4F;QAC1F7J,IAAI,CAAC6J,KAAD,CAAJ,GAAcrJ,SAAS,CAACqJ,KAAD,CAAvB;MACD;;MAED,IAAI7J,IAAI,CAAC/B,MAAT,EAAiB;QACf0L,YAAY,GAAG,EAAf;;QAEA,IAAIG,SAAS,GAAGlM,0BAA0B,CAACoC,IAAD,CAA1C;QAAA,IACI+J,KADJ;;QAGA,IAAI;UACF,KAAKD,SAAS,CAAC1L,CAAV,EAAL,EAAoB,CAAC,CAAC2L,KAAK,GAAGD,SAAS,CAACzL,CAAV,EAAT,EAAwBC,IAA7C,GAAoD;YAClD,IAAI0L,KAAK,GAAGD,KAAK,CAAC9P,KAAlB;;YAEA,IAAI,OAAO+P,KAAP,KAAiB,QAArB,EAA+B;cAC7BL,YAAY,CAACvJ,IAAb,CAAkB4J,KAAlB;YACD,CAFD,MAEO;cACL,MAAM,IAAIlI,KAAJ,CAAU,wEAAV,CAAN;YACD;UACF;QACF,CAVD,CAUE,OAAOjD,GAAP,EAAY;UACZiL,SAAS,CAACvL,CAAV,CAAYM,GAAZ;QACD,CAZD,SAYU;UACRiL,SAAS,CAACrL,CAAV;QACD;MACF;;MAED,KAAKwL,gBAAL,CAAsBN,YAAtB;IACD;IACD;AACJ;AACA;AACA;AACA;;EAxCK,CAhyCqC,EA00CrC;IACDtM,GAAG,EAAE,OADJ;IAEDpD,KAAK,EAAE;IACP;IACA;MACE,IAAIuH,UAAU,GAAG,KAAKA,UAAtB;MACA,IAAI0I,QAAQ,GAAG,EAAf;MACA,IAAIvD,QAAQ,GAAG,CAAC,WAAD,EAAc,WAAd,CAAf;;MAEA,IAAI,OAAO,KAAKrH,WAAL,CAAiBsH,kBAAxB,KAA+C,UAAnD,EAA+D;QAC7DD,QAAQ,GAAG,CAAC,GAAGhM,OAAO,CAACT,OAAZ,EAAqByM,QAArB,EAA+BlJ,IAA/B,CAAoCkJ,QAApC,EAA8C,KAAKrH,WAAL,CAAiBsH,kBAAjB,EAA9C,CAAX;MACD;;MAED,KAAK,IAAIuD,OAAT,IAAoB3I,UAApB,EAAgC;QAC9B,IAAI,CAAC,GAAGlG,QAAQ,CAACpB,OAAb,EAAsByM,QAAtB,EAAgClJ,IAAhC,CAAqCkJ,QAArC,EAA+CwD,OAA/C,IAA0D,CAA9D,EAAiE;UAC/DD,QAAQ,CAACC,OAAD,CAAR,GAAoB,IAApB;QACD;MACF;;MAED,OAAO,KAAKxM,GAAL,CAASuM,QAAT,EAAmB;QACxBtH,KAAK,EAAE;MADiB,CAAnB,CAAP;IAGD;IACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAvCK,CA10CqC,EAm3CrC;IACDvF,GAAG,EAAE,OADJ;IAEDpD,KAAK,EAAE,UAAUwH;IACjB;IADO;IAGP;IACA;MACEA,OAAO,GAAGA,OAAO,IAAI,EAArB;MACA,IAAI2I,YAAY,GAAG,EAAnB;;MAEA,IAAI3I,OAAO,CAACjE,cAAR,CAAuB,cAAvB,CAAJ,EAA4C;QAC1C4M,YAAY,CAACC,YAAb,GAA4B5I,OAAO,CAAC4I,YAApC;MACD;;MAED,IAAI5I,OAAO,CAACjE,cAAR,CAAuB,cAAvB,CAAJ,EAA4C;QAC1C4M,YAAY,CAACE,YAAb,GAA4B7I,OAAO,CAAC6I,YAApC;MACD;;MAED,IAAI7I,OAAO,CAACjE,cAAR,CAAuB,SAAvB,KAAqC,CAAC,GAAGtC,QAAQ,CAAChB,OAAb,EAAsBuH,OAAO,CAAC8I,OAA9B,MAA2C,QAApF,EAA8F;QAC5FH,YAAY,CAACG,OAAb,GAAuB9I,OAAO,CAAC8I,OAA/B;MACD;;MAED,IAAI9I,OAAO,CAACjE,cAAR,CAAuB,SAAvB,CAAJ,EAAuC;QACrC4M,YAAY,CAACI,OAAb,GAAuB,EAAvB;;QAEA,IAAI,CAAC,GAAGhQ,QAAQ,CAACN,OAAb,EAAsBuH,OAAO,CAAC+I,OAA9B,CAAJ,EAA4C;UAC1C,IAAIC,SAAJ;;UAEA,CAAC,GAAG1P,QAAQ,CAACb,OAAb,EAAsBuQ,SAAS,GAAGhJ,OAAO,CAAC+I,OAA1C,EAAmD/M,IAAnD,CAAwDgN,SAAxD,EAAmE,UAAUpN,GAAV,EAAe;YAChF,IAAI,CAAC,GAAG7C,QAAQ,CAACN,OAAb,EAAsBmD,GAAtB,CAAJ,EAAgC;cAC9B,IAAIqN,SAAJ;;cAEAN,YAAY,CAACI,OAAb,GAAuB,CAAC,GAAG7P,OAAO,CAACT,OAAZ,EAAqBwQ,SAAS,GAAGN,YAAY,CAACI,OAA9C,EAAuD/M,IAAvD,CAA4DiN,SAA5D,EAAuErN,GAAvE,CAAvB;YACD,CAJD,MAIO;cACL+M,YAAY,CAACI,OAAb,CAAqBpK,IAArB,CAA0B/C,GAA1B;YACD;UACF,CARD;QASD,CAZD,MAYO;UACL+M,YAAY,CAACI,OAAb,CAAqBpK,IAArB,CAA0BqB,OAAO,CAAC+I,OAAlC;QACD;MACF;;MAED,IAAIG,UAAU,GAAGpP,YAAY,CAACrB,OAAb,CAAqB0Q,mBAArB,EAAjB;;MAEA,OAAOD,UAAU,CAACE,KAAX,CAAiB,IAAjB,EAAuB,IAAvB,EAA6BT,YAA7B,CAAP;IACD;IACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EA/DK,CAn3CqC,EAo7CrC;IACD/M,GAAG,EAAE,kBADJ;IAEDpD,KAAK,EAAE,UAAU+F;IACjB;IADO,EAELyB;IACF;IAHO;IAKP;IACA;MACEA,OAAO,GAAGA,OAAO,IAAI,EAArB;MACAA,OAAO,CAAC+I,OAAR,GAAkBxK,IAAlB;MACA,OAAO,KAAK6K,KAAL,CAAWpJ,OAAX,CAAP;IACD;IACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EApCK,CAp7CqC,EA09CrC;IACDpE,GAAG,EAAE,gBADJ;IAEDpD,KAAK,EAAE,YAAY;MACjB,IAAI6Q,eAAe,GAAG,CAAC,GAAGpQ,kBAAkB,CAACR,OAAvB,GAAiC,aAAaO,YAAY,CAACP,OAAb,CAAqByO,IAArB,CAA0B,SAASoC,QAAT,CAAkBtJ;MAChH;MAD8F,EAE5F;QACA,OAAOhH,YAAY,CAACP,OAAb,CAAqB4O,IAArB,CAA0B,UAAUkC,SAAV,EAAqB;UACpD,OAAO,CAAP,EAAU;YACR,QAAQA,SAAS,CAAChC,IAAV,GAAiBgC,SAAS,CAACjM,IAAnC;cACE,KAAK,CAAL;gBACEiM,SAAS,CAAChC,IAAV,GAAiB,CAAjB;gBACAgC,SAAS,CAACjM,IAAV,GAAiB,CAAjB;gBACA,OAAO,KAAKkM,IAAL,CAAU,IAAV,EAAgBxJ,OAAhB,CAAP;;cAEF,KAAK,CAAL;gBACEuJ,SAAS,CAACjM,IAAV,GAAiB,EAAjB;gBACA;;cAEF,KAAK,CAAL;gBACEiM,SAAS,CAAChC,IAAV,GAAiB,CAAjB;gBACAgC,SAAS,CAAC9B,EAAV,GAAe8B,SAAS,CAAC,OAAD,CAAT,CAAmB,CAAnB,CAAf;;gBAEA,IAAI,EAAEA,SAAS,CAAC9B,EAAV,CAAagC,OAAb,KAAyB,6DAA3B,CAAJ,EAA+F;kBAC7FF,SAAS,CAACjM,IAAV,GAAiB,EAAjB;kBACA;gBACD;;gBAEDiM,SAAS,CAACjM,IAAV,GAAiB,EAAjB;gBACA,OAAOnD,gBAAgB,CAAC1B,OAAjB,CAAyB+Q,IAAzB,CAA8B,IAA9B,EAAoCxJ,OAApC,CAAP;;cAEF,KAAK,EAAL;gBACE7F,gBAAgB,CAAC1B,OAAjB,CAAyBiR,IAAzB;;cAEF,KAAK,EAAL;gBACE,OAAOH,SAAS,CAAC/B,MAAV,CAAiB,QAAjB,EAA2B,IAA3B,CAAP;;cAEF,KAAK,EAAL;cACA,KAAK,KAAL;gBACE,OAAO+B,SAAS,CAAC3B,IAAV,EAAP;YA9BJ;UAgCD;QACF,CAnCM,EAmCJ0B,QAnCI,EAmCM,IAnCN,EAmCY,CAAC,CAAC,CAAD,EAAI,CAAJ,CAAD,CAnCZ,CAAP;MAoCD,CAvCmE,CAA9C,CAAtB;;MAyCA,OAAO,YAAY;QACjB,OAAOD,eAAe,CAACzK,KAAhB,CAAsB,IAAtB,EAA4BG,SAA5B,CAAP;MACD,CAFD;IAGD,CA7CM;IA8CP;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EA9GK,CA19CqC,EA0kDrC;IACDnD,GAAG,EAAE,MADJ;IAEDpD,KAAK,EAAE,UAAUmR;IACjB;IADO,EAELC;IACF;IAHO,EAILC;IACF;IALO;IAOP;IACA;MACE,IAAIC,KAAK,GAAG,IAAZ;;MAEA,IAAIpF,KAAJ;MACA,IAAI1E,OAAJ;;MAEA,IAAI,CAAC,GAAGvG,QAAQ,CAAChB,OAAb,EAAsBkR,IAAtB,MAAgC,QAAhC,IAA4C,OAAOA,IAAP,KAAgB,WAAhE,EAA6E;QAC3EjF,KAAK,GAAGiF,IAAR;;QAEA,IAAI,CAAC,GAAGlQ,QAAQ,CAAChB,OAAb,EAAsBmR,IAAtB,MAAgC,QAApC,EAA8C;UAC5C5J,OAAO,GAAG4J,IAAV;QACD;MACF,CAND,MAMO;QACLlF,KAAK,GAAG,EAAR;QACAA,KAAK,CAACiF,IAAD,CAAL,GAAcC,IAAd;QACA5J,OAAO,GAAG6J,IAAV;MACD;;MAED,IAAInF,KAAJ,EAAW;QACT,IAAIoB,UAAU,GAAG,KAAKC,QAAL,CAAcrB,KAAd,CAAjB;;QAEA,IAAIoB,UAAJ,EAAgB;UACd,OAAOhN,QAAQ,CAACL,OAAT,CAAiBsR,MAAjB,CAAwBjE,UAAxB,CAAP;QACD;;QAED,KAAK5J,GAAL,CAASwI,KAAT,EAAgB1E,OAAhB;MACD;;MAEDA,OAAO,GAAGA,OAAO,IAAI,EAArB;MACA,IAAIgK,WAAW,GAAG,EAAlB;;MAEA,IAAIhK,OAAO,CAACjE,cAAR,CAAuB,cAAvB,CAAJ,EAA4C;QAC1CiO,WAAW,CAACpB,YAAZ,GAA2B,CAAC,CAAC5I,OAAO,CAAC4I,YAArC;MACD;;MAED,IAAI5I,OAAO,CAACjE,cAAR,CAAuB,cAAvB,KAA0C,OAAOiE,OAAO,CAAC6I,YAAf,KAAgC,QAA9E,EAAwF;QACtFmB,WAAW,CAACnB,YAAZ,GAA2B7I,OAAO,CAAC6I,YAAnC;MACD;;MAED,IAAI7I,OAAO,CAACjE,cAAR,CAAuB,gBAAvB,KAA4C,OAAOiE,OAAO,CAACiK,cAAf,KAAkC,QAAlF,EAA4F;QAC1FD,WAAW,CAACC,cAAZ,GAA6BjK,OAAO,CAACiK,cAArC;MACD;;MAED,IAAIjK,OAAO,CAACjE,cAAR,CAAuB,SAAvB,KAAqC,CAAC,GAAGtC,QAAQ,CAAChB,OAAb,EAAsBuH,OAAO,CAAC8I,OAA9B,MAA2C,QAApF,EAA8F;QAC5FkB,WAAW,CAAClB,OAAZ,GAAsB9I,OAAO,CAAC8I,OAA9B;MACD;;MAED,IAAII,UAAU,GAAGpP,YAAY,CAACrB,OAAb,CAAqB0Q,mBAArB,EAAjB;;MAEA,IAAIe,OAAO,GAAGlK,OAAO,CAACmK,WAAR,KAAwB,KAAxB,GAAgC,CAAC,GAAGlP,gBAAgB,CAACxC,OAArB,EAA8B,IAA9B,CAAhC,GAAsE,IAApF;MACA,OAAOyQ,UAAU,CAACM,IAAX,CAAgBU,OAAhB,EAAyBF,WAAzB,EAAsCI,IAAtC,CAA2C,YAAY;QAC5D,OAAOlB,UAAU,CAACM,IAAX,CAAgBM,KAAhB,EAAuBE,WAAvB,CAAP;MACD,CAFM,CAAP;IAGD;IACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EArFK,CA1kDqC,EAiqDrC;IACDpO,GAAG,EAAE,mBADJ;IAEDpD,KAAK,EAAE,YAAY;MACjB,IAAI6R,kBAAkB,GAAG,CAAC,GAAGpR,kBAAkB,CAACR,OAAvB,GAAiC,aAAaO,YAAY,CAACP,OAAb,CAAqByO,IAArB,CAA0B,SAASoD,QAAT,CAAkBtK;MACnH;MADiG,EAE/F;QACA,OAAOhH,YAAY,CAACP,OAAb,CAAqB4O,IAArB,CAA0B,UAAUkD,SAAV,EAAqB;UACpD,OAAO,CAAP,EAAU;YACR,QAAQA,SAAS,CAAChD,IAAV,GAAiBgD,SAAS,CAACjN,IAAnC;cACE,KAAK,CAAL;gBACEiN,SAAS,CAAChD,IAAV,GAAiB,CAAjB;gBACAgD,SAAS,CAACjN,IAAV,GAAiB,CAAjB;gBACA,OAAO,KAAKkN,OAAL,CAAaxK,OAAb,CAAP;;cAEF,KAAK,CAAL;gBACEuK,SAAS,CAACjN,IAAV,GAAiB,EAAjB;gBACA;;cAEF,KAAK,CAAL;gBACEiN,SAAS,CAAChD,IAAV,GAAiB,CAAjB;gBACAgD,SAAS,CAAC9C,EAAV,GAAe8C,SAAS,CAAC,OAAD,CAAT,CAAmB,CAAnB,CAAf;;gBAEA,IAAI,EAAEA,SAAS,CAAC9C,EAAV,CAAagC,OAAb,KAAyB,6DAA3B,CAAJ,EAA+F;kBAC7Fc,SAAS,CAACjN,IAAV,GAAiB,EAAjB;kBACA;gBACD;;gBAEDiN,SAAS,CAACjN,IAAV,GAAiB,EAAjB;gBACA,OAAOnD,gBAAgB,CAAC1B,OAAjB,CAAyB+R,OAAzB,CAAiC,IAAjC,EAAuCxK,OAAvC,CAAP;;cAEF,KAAK,EAAL;gBACE7F,gBAAgB,CAAC1B,OAAjB,CAAyBiR,IAAzB;;cAEF,KAAK,EAAL;gBACE,OAAOa,SAAS,CAAC/C,MAAV,CAAiB,QAAjB,EAA2B,IAA3B,CAAP;;cAEF,KAAK,EAAL;cACA,KAAK,KAAL;gBACE,OAAO+C,SAAS,CAAC3C,IAAV,EAAP;YA9BJ;UAgCD;QACF,CAnCM,EAmCJ0C,QAnCI,EAmCM,IAnCN,EAmCY,CAAC,CAAC,CAAD,EAAI,CAAJ,CAAD,CAnCZ,CAAP;MAoCD,CAvCsE,CAA9C,CAAzB;;MAyCA,OAAO,YAAY;QACjB,OAAOD,kBAAkB,CAACzL,KAAnB,CAAyB,IAAzB,EAA+BG,SAA/B,CAAP;MACD,CAFD;IAGD,CA7CM;IA8CP;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EA7DK,CAjqDqC,EAguDrC;IACDnD,GAAG,EAAE,SADJ;IAEDpD,KAAK,EAAE,UAAUwH;IACjB;IADO;IAGP;IACA;MACEA,OAAO,GAAGA,OAAO,IAAI,EAArB;MACA,IAAIyK,cAAc,GAAG,EAArB;;MAEA,IAAIzK,OAAO,CAACjE,cAAR,CAAuB,cAAvB,CAAJ,EAA4C;QAC1C0O,cAAc,CAAC7B,YAAf,GAA8B5I,OAAO,CAAC4I,YAAtC;MACD;;MAED,IAAI5I,OAAO,CAACjE,cAAR,CAAuB,cAAvB,CAAJ,EAA4C;QAC1C0O,cAAc,CAAC5B,YAAf,GAA8B7I,OAAO,CAAC6I,YAAtC;MACD;;MAED,IAAI7I,OAAO,CAACjE,cAAR,CAAuB,SAAvB,KAAqC,CAAC,GAAGtC,QAAQ,CAAChB,OAAb,EAAsBuH,OAAO,CAAC8I,OAA9B,MAA2C,QAApF,EAA8F;QAC5F2B,cAAc,CAAC3B,OAAf,GAAyB9I,OAAO,CAAC8I,OAAjC;MACD;;MAED,IAAI,CAAC,KAAKjI,EAAV,EAAc;QACZ,OAAO/H,QAAQ,CAACL,OAAT,CAAiBiS,OAAjB,EAAP;MACD;;MAED,OAAO5Q,YAAY,CAACrB,OAAb,CAAqB0Q,mBAArB,GAA2CqB,OAA3C,CAAmD,IAAnD,EAAyDC,cAAzD,CAAP;IACD;IACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EA3CK,CAhuDqC,EA6wDrC;IACD7O,GAAG,EAAE,KADJ;IAEDpD,KAAK,EAAE;IACP;IACA;MACE,OAAOqH,WAAW,CAAC8K,cAAZ,CAA2BlQ,oBAAoB,CAACmQ,WAAhD,EAA6D,CAAC,IAAD,CAA7D,CAAP;IACD;IACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAhBK,CA7wDqC,EA+xDrC;IACDhP,GAAG,EAAE,OADJ;IAEDpD,KAAK,EAAE;IACP;IACA;MACE,OAAOqH,WAAW,CAACgL,gBAAZ,CAA6BpQ,oBAAoB,CAACmQ,WAAlD,EAA+D,CAAC,IAAD,CAA/D,CAAP;IACD;IACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAfK,CA/xDqC,EAgzDrC;IACDhP,GAAG,EAAE,UADJ;IAEDpD,KAAK,EAAE,YAAY;MACjB,IAAIsS,SAAS,GAAG,CAAC,GAAG7R,kBAAkB,CAACR,OAAvB,GAAiC,aAAaO,YAAY,CAACP,OAAb,CAAqByO,IAArB,CAA0B,SAAS6D,QAAT,GAAoB;QAC1G,IAAIC,cAAJ,EAAoBC,SAApB,EAA+BC,GAA/B;QACA,OAAOlS,YAAY,CAACP,OAAb,CAAqB4O,IAArB,CAA0B,UAAU8D,SAAV,EAAqB;UACpD,OAAO,CAAP,EAAU;YACR,QAAQA,SAAS,CAAC5D,IAAV,GAAiB4D,SAAS,CAAC7N,IAAnC;cACE,KAAK,CAAL;gBACE0N,cAAc,GAAGlR,YAAY,CAACrB,OAAb,CAAqB2S,iBAArB,EAAjB;;gBAEA,IAAIJ,cAAc,CAACK,SAAnB,EAA8B;kBAC5BF,SAAS,CAAC7N,IAAV,GAAiB,CAAjB;kBACA;gBACD;;gBAED,OAAO6N,SAAS,CAAC3D,MAAV,CAAiB,QAAjB,EAA2B1O,QAAQ,CAACL,OAAT,CAAiBsR,MAAjB,CAAwB,mDAAxB,CAA3B,CAAP;;cAEF,KAAK,CAAL;gBACEkB,SAAS,GAAGD,cAAc,CAACM,eAAf,CAA+B,IAA/B,CAAZ;gBACAH,SAAS,CAAC7N,IAAV,GAAiB,CAAjB;gBACA,OAAO0N,cAAc,CAACO,eAAf,CAA+BN,SAA/B,CAAP;;cAEF,KAAK,CAAL;gBACEC,GAAG,GAAGC,SAAS,CAACK,IAAhB;gBACA,OAAOL,SAAS,CAAC3D,MAAV,CAAiB,QAAjB,EAA2B0D,GAAG,CAAC1O,MAAJ,GAAa,CAAxC,CAAP;;cAEF,KAAK,CAAL;cACA,KAAK,KAAL;gBACE,OAAO2O,SAAS,CAACvD,IAAV,EAAP;YAtBJ;UAwBD;QACF,CA3BM,EA2BJmD,QA3BI,EA2BM,IA3BN,CAAP;MA4BD,CA9B6D,CAA9C,CAAhB;;MAgCA,OAAO,YAAY;QACjB,OAAOD,SAAS,CAAClM,KAAV,CAAgB,IAAhB,EAAsBG,SAAtB,CAAP;MACD,CAFD;IAGD,CApCM;IAqCP;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAtDK,CAhzDqC,EAw2DrC;IACDnD,GAAG,EAAE,aADJ;IAEDpD,KAAK,EAAE,UAAUsF;IACjB;IADO;IAGP;IACA;MACE,OAAO+B,WAAW,CAAC8K,cAAZ,CAA2B7M,IAA3B,EAAiC,CAAC,IAAD,CAAjC,CAAP;IACD;IACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAlBK,CAx2DqC,EA43DrC;IACDlC,GAAG,EAAE,eADJ;IAEDpD,KAAK,EAAE,UAAUsF;IACjB;IADO;IAGP;IACA;MACE,OAAO+B,WAAW,CAACgL,gBAAZ,CAA6B/M,IAA7B,EAAmC,CAAC,IAAD,CAAnC,CAAP;IACD;IACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EApBK,CA53DqC,EAk5DrC;IACDlC,GAAG,EAAE,yBADJ;IAEDpD,KAAK,EAAE,YAAY;MACjB,IAAIiT,wBAAwB,GAAG,CAAC,GAAGxS,kBAAkB,CAACR,OAAvB,GAAiC,aAAaO,YAAY,CAACP,OAAb,CAAqByO,IAArB,CAA0B,SAASwE,QAAT,GAAoB;QACzH,IAAIV,cAAJ,EAAoBC,SAApB,EAA+BU,MAA/B,EAAuCC,MAAvC;QACA,OAAO5S,YAAY,CAACP,OAAb,CAAqB4O,IAArB,CAA0B,UAAUwE,SAAV,EAAqB;UACpD,OAAO,CAAP,EAAU;YACR,QAAQA,SAAS,CAACtE,IAAV,GAAiBsE,SAAS,CAACvO,IAAnC;cACE,KAAK,CAAL;gBACE0N,cAAc,GAAGlR,YAAY,CAACrB,OAAb,CAAqB2S,iBAArB,EAAjB;;gBAEA,IAAIJ,cAAc,CAACK,SAAnB,EAA8B;kBAC5BQ,SAAS,CAACvO,IAAV,GAAiB,CAAjB;kBACA;gBACD;;gBAED,MAAM,IAAI+C,KAAJ,CAAU,mDAAV,CAAN;;cAEF,KAAK,CAAL;gBACE4K,SAAS,GAAGD,cAAc,CAACM,eAAf,CAA+B,IAA/B,CAAZ;gBACAO,SAAS,CAACvO,IAAV,GAAiB,CAAjB;gBACA,OAAO0N,cAAc,CAACc,gBAAf,CAAgCb,SAAhC,CAAP;;cAEF,KAAK,CAAL;gBACEU,MAAM,GAAGE,SAAS,CAACL,IAAnB;;gBAEA,IAAIG,MAAJ,EAAY;kBACVE,SAAS,CAACvO,IAAV,GAAiB,CAAjB;kBACA;gBACD;;gBAED,MAAM,IAAI+C,KAAJ,CAAU,qCAAV,CAAN;;cAEF,KAAK,CAAL;gBACEuL,MAAM,GAAG/L,WAAW,CAACkM,QAAZ,CAAqBJ,MAArB,CAAT;;gBAEA,KAAKK,YAAL,CAAkBJ,MAAM,CAACvJ,MAAP,EAAlB;;gBAEA,OAAOwJ,SAAS,CAACrE,MAAV,CAAiB,QAAjB,EAA2B,IAA3B,CAAP;;cAEF,KAAK,EAAL;cACA,KAAK,KAAL;gBACE,OAAOqE,SAAS,CAACjE,IAAV,EAAP;YAnCJ;UAqCD;QACF,CAxCM,EAwCJ8D,QAxCI,EAwCM,IAxCN,CAAP;MAyCD,CA3C4E,CAA9C,CAA/B;;MA6CA,OAAO,YAAY;QACjB,OAAOD,wBAAwB,CAAC7M,KAAzB,CAA+B,IAA/B,EAAqCG,SAArC,CAAP;MACD,CAFD;IAGD,CAjDM;IAkDP;;EApDC,CAl5DqC,CAAxC,EAw8DI,CAAC;IACHnD,GAAG,EAAE,cADF;IAEHpD,KAAK,EAAE,YAAY;MACjB,OAAO4G,QAAP;IACD;EAJE,CAAD,EAKD;IACDxD,GAAG,EAAE,gBADJ;IAEDpD,KAAK,EAAE,YAAY;MACjB,IAAI8H,eAAe,GAAGxG,YAAY,CAACrB,OAAb,CAAqB8H,wBAArB,EAAtB;;MAEAD,eAAe,CAAC2L,aAAhB;IACD;IACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAhCK,CALC,EAuCD;IACDrQ,GAAG,EAAE,UADJ;IAEDpD,KAAK,EAAE,UAAU0T;IACjB;IADO,EAEL;MACA,IAAIlM;MACJ;MADW,EAETjB,SAAS,CAACvC,MAAV,GAAmB,CAAnB,IAAwBuC,SAAS,CAAC,CAAD,CAAT,KAAiBsC,SAAzC,GAAqDtC,SAAS,CAAC,CAAD,CAA9D,GAAoE,EAFtE;MAGA,IAAIoN,YAAY,GAAG,EAAnB;;MAEA,IAAInM,OAAO,CAACjE,cAAR,CAAuB,cAAvB,CAAJ,EAA4C;QAC1CoQ,YAAY,CAACvD,YAAb,GAA4B5I,OAAO,CAAC4I,YAApC;MACD;;MAED,IAAI5I,OAAO,CAACjE,cAAR,CAAuB,cAAvB,CAAJ,EAA4C;QAC1CoQ,YAAY,CAACtD,YAAb,GAA4B7I,OAAO,CAAC6I,YAApC;MACD;;MAED,IAAI7I,OAAO,CAACjE,cAAR,CAAuB,SAAvB,CAAJ,EAAuC;QACrCoQ,YAAY,CAACpD,OAAb,GAAuBlJ,WAAW,CAACuM,oBAAZ,CAAiCpM,OAAjC,CAAvB;MACD;;MAED,OAAOlG,YAAY,CAACrB,OAAb,CAAqB0Q,mBAArB,GAA2CC,KAA3C,CAAiD8C,IAAjD,EAAuD,IAAvD,EAA6DC,YAA7D,CAAP;IACD;IACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EApDK,CAvCC,EA6FD;IACDvQ,GAAG,EAAE,qBADJ;IAEDpD,KAAK,EAAE,UAAU0T;IACjB;IADO,EAEL3N;IACF;IAHO,EAILyB;IACF;IALO,EAML;MACAA,OAAO,GAAGA,OAAO,IAAI,EAArB;MACAA,OAAO,CAAC+I,OAAR,GAAkBxK,IAAlB;MACA,OAAOsB,WAAW,CAACwM,QAAZ,CAAqBH,IAArB,EAA2BlM,OAA3B,CAAP;IACD;IACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EA1CK,CA7FC,EAyID;IACDpE,GAAG,EAAE,6BADJ;IAEDpD,KAAK,EAAE,UAAU0T;IACjB;IADO,EAEL3N;IACF;IAHO,EAILyB;IACF;IALO,EAML;MACAA,OAAO,GAAGA,OAAO,IAAI,EAArB;MACAA,OAAO,CAAC+I,OAAR,GAAkBxK,IAAlB;MACA,OAAOsB,WAAW,CAACyM,gBAAZ,CAA6BJ,IAA7B,EAAmClM,OAAnC,CAAP;IACD;IACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EA9BK,CAzIC,EAyKD;IACDpE,GAAG,EAAE,kBADJ;IAEDpD,KAAK,EAAE,UAAU0T;IACjB;IADO,EAELlM,OAFK,EAEI;MACTA,OAAO,GAAGA,OAAO,IAAI,EAArB;MACA,IAAImM,YAAY,GAAG,EAAnB;;MAEA,IAAInM,OAAO,CAACjE,cAAR,CAAuB,cAAvB,CAAJ,EAA4C;QAC1CoQ,YAAY,CAACvD,YAAb,GAA4B5I,OAAO,CAAC4I,YAApC;MACD;;MAED,IAAI5I,OAAO,CAACjE,cAAR,CAAuB,cAAvB,CAAJ,EAA4C;QAC1CoQ,YAAY,CAACtD,YAAb,GAA4B7I,OAAO,CAAC6I,YAApC;MACD;;MAED,IAAI7I,OAAO,CAACjE,cAAR,CAAuB,SAAvB,CAAJ,EAAuC;QACrCoQ,YAAY,CAACpD,OAAb,GAAuBlJ,WAAW,CAACuM,oBAAZ,CAAiCpM,OAAjC,CAAvB;MACD;;MAED,OAAOlG,YAAY,CAACrB,OAAb,CAAqB0Q,mBAArB,GAA2CC,KAA3C,CAAiD8C,IAAjD,EAAuD,KAAvD,EAA8DC,YAA9D,CAAP;IACD;EArBA,CAzKC,EA+LD;IACDvQ,GAAG,EAAE,sBADJ;IAEDpD,KAAK,EAAE,UAAUwH,OAAV,EAAmB;MACxB,IAAI+I,OAAO,GAAG,EAAd;;MAEA,IAAI,CAAC,GAAGhQ,QAAQ,CAACN,OAAb,EAAsBuH,OAAO,CAAC+I,OAA9B,CAAJ,EAA4C;QAC1C,IAAIwD,SAAJ;;QAEA,CAAC,GAAGjT,QAAQ,CAACb,OAAb,EAAsB8T,SAAS,GAAGvM,OAAO,CAAC+I,OAA1C,EAAmD/M,IAAnD,CAAwDuQ,SAAxD,EAAmE,UAAU3Q,GAAV,EAAe;UAChF,IAAI,CAAC,GAAG7C,QAAQ,CAACN,OAAb,EAAsBmD,GAAtB,CAAJ,EAAgC;YAC9BmN,OAAO,GAAG,CAAC,GAAG7P,OAAO,CAACT,OAAZ,EAAqBsQ,OAArB,EAA8B/M,IAA9B,CAAmC+M,OAAnC,EAA4CnN,GAA5C,CAAV;UACD,CAFD,MAEO;YACLmN,OAAO,CAACpK,IAAR,CAAa/C,GAAb;UACD;QACF,CAND;MAOD,CAVD,MAUO;QACLmN,OAAO,CAACpK,IAAR,CAAaqB,OAAO,CAAC+I,OAArB;MACD;;MAED,OAAOA,OAAP;IACD;IACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAlEK,CA/LC,EAmQD;IACDnN,GAAG,EAAE,YADJ;IAEDpD,KAAK,EAAE,UAAU0T;IACjB;IADO,EAEL;MACA,IAAIlM,OAAO,GAAGjB,SAAS,CAACvC,MAAV,GAAmB,CAAnB,IAAwBuC,SAAS,CAAC,CAAD,CAAT,KAAiBsC,SAAzC,GAAqDtC,SAAS,CAAC,CAAD,CAA9D,GAAoE,EAAlF;MACA,IAAI0L,cAAc,GAAG,EAArB;;MAEA,IAAIzK,OAAO,CAACjE,cAAR,CAAuB,cAAvB,CAAJ,EAA4C;QAC1C0O,cAAc,CAAC7B,YAAf,GAA8B5I,OAAO,CAAC4I,YAAtC;MACD;;MAED,IAAI5I,OAAO,CAACjE,cAAR,CAAuB,cAAvB,CAAJ,EAA4C;QAC1C0O,cAAc,CAAC5B,YAAf,GAA8B7I,OAAO,CAAC6I,YAAtC;MACD;;MAED,IAAI7I,OAAO,CAACjE,cAAR,CAAuB,WAAvB,KAAuC,OAAOiE,OAAO,CAACwM,SAAf,KAA6B,QAAxE,EAAkF;QAChF/B,cAAc,CAAC+B,SAAf,GAA2BxM,OAAO,CAACwM,SAAnC;MACD;;MAED,IAAIxM,OAAO,CAACjE,cAAR,CAAuB,SAAvB,KAAqC,CAAC,GAAGtC,QAAQ,CAAChB,OAAb,EAAsBuH,OAAO,CAAC8I,OAA9B,MAA2C,QAApF,EAA8F;QAC5F2B,cAAc,CAAC3B,OAAf,GAAyB9I,OAAO,CAAC8I,OAAjC;MACD;;MAED,OAAOhP,YAAY,CAACrB,OAAb,CAAqB0Q,mBAArB,GAA2CqB,OAA3C,CAAmD0B,IAAnD,EAAyDzB,cAAzD,CAAP;IACD;IACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EA3CK,CAnQC,EAgTD;IACD7O,GAAG,EAAE,SADJ;IAEDpD,KAAK,EAAE,UAAU0T;IACjB;IADO,EAEL;MACA,IAAIlM;MACJ;MADW,EAETjB,SAAS,CAACvC,MAAV,GAAmB,CAAnB,IAAwBuC,SAAS,CAAC,CAAD,CAAT,KAAiBsC,SAAzC,GAAqDtC,SAAS,CAAC,CAAD,CAA9D,GAAoE,EAFtE;MAGA,IAAIiL,WAAW,GAAG,EAAlB;;MAEA,IAAIhK,OAAO,CAACjE,cAAR,CAAuB,cAAvB,CAAJ,EAA4C;QAC1CiO,WAAW,CAACpB,YAAZ,GAA2B5I,OAAO,CAAC4I,YAAnC;MACD;;MAED,IAAI5I,OAAO,CAACjE,cAAR,CAAuB,cAAvB,CAAJ,EAA4C;QAC1CiO,WAAW,CAACnB,YAAZ,GAA2B7I,OAAO,CAAC6I,YAAnC;MACD;;MAED,IAAI7I,OAAO,CAACjE,cAAR,CAAuB,WAAvB,KAAuC,OAAOiE,OAAO,CAACwM,SAAf,KAA6B,QAAxE,EAAkF;QAChFxC,WAAW,CAACwC,SAAZ,GAAwBxM,OAAO,CAACwM,SAAhC;MACD;;MAED,IAAIxM,OAAO,CAACjE,cAAR,CAAuB,SAAvB,KAAqC,CAAC,GAAGtC,QAAQ,CAAChB,OAAb,EAAsBuH,OAAO,CAAC8I,OAA9B,MAA2C,QAApF,EAA8F;QAC5FkB,WAAW,CAAClB,OAAZ,GAAsB9I,OAAO,CAAC8I,OAA9B;MACD;;MAED,OAAOhP,YAAY,CAACrB,OAAb,CAAqB0Q,mBAArB,GAA2CK,IAA3C,CAAgD0C,IAAhD,EAAsDlC,WAAtD,CAAP;IACD;IACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAzCK,CAhTC,EA2VD;IACDpO,GAAG,EAAE,mBADJ;IAEDpD,KAAK,EAAE,UAAUqI;IACjB;IADO,EAEL;MACA,IAAIvF,GAAG,GAAG,IAAI,IAAJ,EAAV;MACAA,GAAG,CAACuF,EAAJ,GAASA,EAAT;MACA,OAAOvF,GAAP;IACD;IACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAlBK,CA3VC,EA+WD;IACDM,GAAG,EAAE,UADJ;IAEDpD,KAAK,EAAE,UAAUyJ;IACjB;IADO,EAELwK;IACF;IAHO,EAIL3K;IACF;IALO,EAML;MACA,IAAI,CAACG,IAAI,CAACnC,SAAV,EAAqB;QACnB,MAAM,IAAIO,KAAJ,CAAU,6CAAV,CAAN;MACD;;MAED,IAAIxC,WAAW,GAAGuB,QAAQ,CAAC6C,IAAI,CAACnC,SAAN,CAA1B;MACA,IAAI1D,CAAC,GAAGyB,WAAW,GAAG,IAAIA,WAAJ,CAAgBoE,IAAI,CAACnC,SAArB,CAAH,GAAqC,IAAID,WAAJ,CAAgBoC,IAAI,CAACnC,SAArB,CAAxD;MACA,IAAI4M,eAAe,GAAG,EAAtB;;MAEA,KAAK,IAAIC,OAAT,IAAoB1K,IAApB,EAA0B;QACxB,IAAI0K,OAAO,KAAK,WAAZ,IAA2BA,OAAO,KAAK,QAA3C,EAAqD;UACnDD,eAAe,CAACC,OAAD,CAAf,GAA2B1K,IAAI,CAAC0K,OAAD,CAA/B;;UAEA,IAAI7K,KAAJ,EAAW;YACT1F,CAAC,CAACF,GAAF,CAAMyQ,OAAN,EAAe1K,IAAI,CAAC0K,OAAD,CAAnB;UACD;QACF;MACF;;MAED,IAAIF,QAAJ,EAAc;QACZ;QACA,IAAIC,eAAe,CAACvJ,QAApB,EAA8B;UAC5B/G,CAAC,CAACyE,EAAF,GAAO6L,eAAe,CAACvJ,QAAvB;QACD;;QAED,IAAIyJ,SAAS,GAAG,IAAhB;;QAEA,IAAI,OAAOxQ,CAAC,CAACyQ,sBAAT,KAAoC,UAAxC,EAAoD;UAClDD,SAAS,GAAGxQ,CAAC,CAACyQ,sBAAF,EAAZ;QACD;;QAEDzQ,CAAC,CAAC0Q,gBAAF;;QAEA,IAAIF,SAAJ,EAAe;UACbxQ,CAAC,CAAC4P,YAAF,CAAeY,SAAf;QACD;MACF;;MAEDxQ,CAAC,CAAC4P,YAAF,CAAeU,eAAf;;MAEA,IAAIzK,IAAI,CAACkB,QAAT,EAAmB;QACjB/G,CAAC,CAACmI,WAAF,CAAc,IAAd;MACD;;MAED,OAAOnI,CAAP;IACD;IACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EA9DK,CA/WC,EA+aD;IACDR,GAAG,EAAE,kBADJ;IAEDpD,KAAK,EAAE,UAAUsH;IACjB;IADO,EAELjC;IACF;IAHO,EAIL;MACA,IAAI,OAAOiC,SAAP,KAAqB,QAAzB,EAAmC;QACjC,MAAM,IAAI7C,SAAJ,CAAc,gDAAd,CAAN;MACD;;MAED,IAAI,OAAOY,WAAP,KAAuB,WAA3B,EAAwC;QACtC,MAAM,IAAIZ,SAAJ,CAAc,yCAAd,CAAN;MACD;;MAED,IAAI,OAAOY,WAAP,KAAuB,UAA3B,EAAuC;QACrC,MAAM,IAAIZ,SAAJ,CAAc,iDAAiD,0DAA/D,CAAN;MACD;;MAEDmC,QAAQ,CAACU,SAAD,CAAR,GAAsBjC,WAAtB;;MAEA,IAAI,CAACA,WAAW,CAACiC,SAAjB,EAA4B;QAC1BjC,WAAW,CAACiC,SAAZ,GAAwBA,SAAxB;MACD;IACF;IACD;AACJ;AACA;AACA;AACA;;EA7BK,CA/aC,EA8cD;IACDlE,GAAG,EAAE,oBADJ;IAEDpD,KAAK,EAAE,UAAUsH;IACjB;IADO,EAEL;MACA,IAAI,OAAOA,SAAP,KAAqB,QAAzB,EAAmC;QACjC,MAAM,IAAI7C,SAAJ,CAAc,gDAAd,CAAN;MACD;;MAED,OAAOmC,QAAQ,CAACU,SAAD,CAAf;IACD;IACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EA/CK,CA9cC,EA+fD;IACDlE,GAAG,EAAE,QADJ;IAEDpD,KAAK,EAAE,UAAUsH;IACjB;IADO,EAELiN;IACF;IAHO,EAILC;IACF;IALO,EAML;MACA,IAAI,OAAOlN,SAAP,KAAqB,QAAzB,EAAmC;QACjC,IAAIA,SAAS,IAAI,OAAOA,SAAS,CAACA,SAAjB,KAA+B,QAAhD,EAA0D;UACxD,OAAOD,WAAW,CAACoN,MAAZ,CAAmBnN,SAAS,CAACA,SAA7B,EAAwCA,SAAxC,EAAmDiN,UAAnD,CAAP;QACD,CAFD,MAEO;UACL,MAAM,IAAI1M,KAAJ,CAAU,+DAAV,CAAN;QACD;MACF;;MAED,IAAI6M,iBAAiB,GAAGpN,SAAxB;;MAEA,IAAIoN,iBAAiB,KAAK,MAAtB,IAAgCpT,YAAY,CAACrB,OAAb,CAAqBiD,GAArB,CAAyB,sBAAzB,CAApC,EAAsF;QACpFwR,iBAAiB,GAAG,OAApB;MACD;;MAED,IAAIC,WAAW,GAAGtN,WAAW,CAAC/D,SAA9B;;MAEA,IAAI,KAAKC,cAAL,CAAoB,WAApB,KAAoC,KAAKqR,SAA7C,EAAwD;QACtDD,WAAW,GAAG,KAAKrR,SAAnB;MACD,CAFD,MAEO,IAAIsD,QAAQ,CAAC8N,iBAAD,CAAZ,EAAiC;QACtCC,WAAW,GAAG/N,QAAQ,CAAC8N,iBAAD,CAAR,CAA4BpR,SAA1C;MACD;;MAED,IAAIuR,mBAAmB,GAAG,UAAUtN,UAAV,EAAsBC,OAAtB,EAA+B;QACvD,KAAKF,SAAL,GAAiBoN,iBAAjB;QACA,KAAK/M,SAAL,GAAiBd,WAAW,EAA5B,CAFuD,CAEvB;;QAEhC,IAAI,OAAO,KAAKY,UAAZ,KAA2B,UAA/B,EAA2C;UACzC,KAAKA,UAAL,CAAgBrB,KAAhB,CAAsB,IAAtB,EAA4BG,SAA5B;QACD;;QAED,IAAIgB,UAAU,IAAI,CAAC,GAAGtG,QAAQ,CAAChB,OAAb,EAAsBsH,UAAtB,MAAsC,QAAxD,EAAkE;UAChE,IAAI,CAAC,KAAK7D,GAAL,CAAS6D,UAAU,IAAI,EAAvB,EAA2BC,OAA3B,CAAL,EAA0C;YACxC,MAAM,IAAIK,KAAJ,CAAU,sCAAV,CAAN;UACD;QACF;MACF,CAbD;;MAeAgN,mBAAmB,CAACvN,SAApB,GAAgCoN,iBAAhC;MACAG,mBAAmB,CAACD,SAApB,GAAgCD,WAAhC;MACAE,mBAAmB,CAACvR,SAApB,GAAgC,CAAC,GAAGjD,OAAO,CAACJ,OAAZ,EAAqB0U,WAArB,EAAkC;QAChEtP,WAAW,EAAE;UACXrF,KAAK,EAAE6U,mBADI;UAEX3O,UAAU,EAAE,KAFD;UAGX4O,QAAQ,EAAE,IAHC;UAIXC,YAAY,EAAE;QAJH;MADmD,CAAlC,CAAhC;;MASA,IAAIR,UAAJ,EAAgB;QACd,KAAK,IAAIS,IAAT,IAAiBT,UAAjB,EAA6B;UAC3B,IAAIS,IAAI,KAAK,WAAb,EAA0B;YACxB,CAAC,GAAG5U,gBAAgB,CAACH,OAArB,EAA8B4U,mBAAmB,CAACvR,SAAlD,EAA6D0R,IAA7D,EAAmE;cACjEhV,KAAK,EAAEuU,UAAU,CAACS,IAAD,CADgD;cAEjE9O,UAAU,EAAE,KAFqD;cAGjE4O,QAAQ,EAAE,IAHuD;cAIjEC,YAAY,EAAE;YAJmD,CAAnE;UAMD;QACF;MACF;;MAED,IAAIP,UAAJ,EAAgB;QACd,KAAK,IAAIS,KAAT,IAAkBT,UAAlB,EAA8B;UAC5B,IAAIS,KAAK,KAAK,WAAd,EAA2B;YACzB,CAAC,GAAG7U,gBAAgB,CAACH,OAArB,EAA8B4U,mBAA9B,EAAmDI,KAAnD,EAA0D;cACxDjV,KAAK,EAAEwU,UAAU,CAACS,KAAD,CADuC;cAExD/O,UAAU,EAAE,KAF4C;cAGxD4O,QAAQ,EAAE,IAH8C;cAIxDC,YAAY,EAAE;YAJ0C,CAA1D;UAMD;QACF;MACF;;MAEDF,mBAAmB,CAACJ,MAApB,GAA6B,UAAUnP,IAAV,EAAgBiP,UAAhB,EAA4BC,UAA5B,EAAwC;QACnE,IAAI,OAAOlP,IAAP,KAAgB,QAApB,EAA8B;UAC5B,OAAO+B,WAAW,CAACoN,MAAZ,CAAmBjR,IAAnB,CAAwBqR,mBAAxB,EAA6CvP,IAA7C,EAAmDiP,UAAnD,EAA+DC,UAA/D,CAAP;QACD;;QAED,OAAOnN,WAAW,CAACoN,MAAZ,CAAmBjR,IAAnB,CAAwBqR,mBAAxB,EAA6CH,iBAA7C,EAAgEpP,IAAhE,EAAsEiP,UAAtE,CAAP;MACD,CAND;;MAQAM,mBAAmB,CAACK,iBAApB,GAAwC7N,WAAW,CAAC6N,iBAApD;MACAtO,QAAQ,CAAC8N,iBAAD,CAAR,GAA8BG,mBAA9B;MACA,OAAOA,mBAAP;IACD;IACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;EAtGK,CA/fC,EAumBD;IACDzR,GAAG,EAAE,sBADJ;IAEDpD,KAAK,EAAE,YAAY;MACjB8G,cAAc,GAAG,IAAjB;;MAEAxF,YAAY,CAACrB,OAAb,CAAqB8G,wBAArB,CAA8C1E,6BAA9C;IACD;IACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;EAdK,CAvmBC,EAunBD;IACDe,GAAG,EAAE,uBADJ;IAEDpD,KAAK,EAAE,YAAY;MACjB8G,cAAc,GAAG,KAAjB;;MAEAxF,YAAY,CAACrB,OAAb,CAAqB8G,wBAArB,CAA8CvE,6BAA9C;IACD;IACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAxBK,CAvnBC,EAipBD;IACDY,GAAG,EAAE,QADJ;IAEDpD,KAAK,EAAE,UAAUmV;IACjB;IADO;IAGP;IACA;MACE,IAAI3C,cAAc,GAAGlR,YAAY,CAACrB,OAAb,CAAqB2S,iBAArB,EAArB;;MAEA,IAAI,CAACJ,cAAc,CAACK,SAApB,EAA+B;QAC7B,OAAOvS,QAAQ,CAACL,OAAT,CAAiBsR,MAAjB,CAAwB,mDAAxB,CAAP;MACD;;MAED,OAAOlK,WAAW,CAAC8K,cAAZ,CAA2BlQ,oBAAoB,CAACmQ,WAAhD,EAA6D+C,OAA7D,CAAP;IACD;IACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAhCK,CAjpBC,EAmrBD;IACD/R,GAAG,EAAE,gBADJ;IAEDpD,KAAK,EAAE,UAAUsF;IACjB;IADO,EAEL6P;IACF;IAHO;IAKP;IACA;MACE,IAAI3C,cAAc,GAAGlR,YAAY,CAACrB,OAAb,CAAqB2S,iBAArB,EAArB;;MAEA,IAAI,CAACJ,cAAc,CAACK,SAApB,EAA+B;QAC7B,OAAOvS,QAAQ,CAACL,OAAT,CAAiBsR,MAAjB,CAAwB,mDAAxB,CAAP;MACD;;MAED,OAAOiB,cAAc,CAAC4C,qBAAf,CAAqC9P,IAArC,EAA2C6P,OAA3C,CAAP;IACD;IACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EA5BK,CAnrBC,EAitBD;IACD/R,GAAG,EAAE,UADJ;IAEDpD,KAAK,EAAE,UAAUmV;IACjB;IADO;IAGP;IACA;MACE,IAAI3C,cAAc,GAAGlR,YAAY,CAACrB,OAAb,CAAqB2S,iBAArB,EAArB;;MAEA,IAAI,CAACJ,cAAc,CAACK,SAApB,EAA+B;QAC7B,OAAOvS,QAAQ,CAACL,OAAT,CAAiBsR,MAAjB,CAAwB,mDAAxB,CAAP;MACD;;MAED,OAAOlK,WAAW,CAACgL,gBAAZ,CAA6BpQ,oBAAoB,CAACmQ,WAAlD,EAA+D+C,OAA/D,CAAP;IACD;IACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EA1BK,CAjtBC,EA6uBD;IACD/R,GAAG,EAAE,kBADJ;IAEDpD,KAAK,EAAE,UAAUsF;IACjB;IADO,EAEL6P;IACF;IAHO;IAKP;IACA;MACE,IAAI3C,cAAc,GAAGlR,YAAY,CAACrB,OAAb,CAAqB2S,iBAArB,EAArB;;MAEA,IAAI,CAACJ,cAAc,CAACK,SAApB,EAA+B;QAC7B,OAAOvS,QAAQ,CAACL,OAAT,CAAiBsR,MAAjB,CAAwB,mDAAxB,CAAP;MACD;;MAED,OAAOiB,cAAc,CAAC6C,uBAAf,CAAuC/P,IAAvC,EAA6C6P,OAA7C,CAAP;IACD;IACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EA1BK,CA7uBC,EAywBD;IACD/R,GAAG,EAAE,iBADJ;IAEDpD,KAAK,EAAE;IACP;IACA;MACE,IAAIwS,cAAc,GAAGlR,YAAY,CAACrB,OAAb,CAAqB2S,iBAArB,EAArB;;MAEA,IAAI,CAACJ,cAAc,CAACK,SAApB,EAA+B;QAC7B,OAAOvS,QAAQ,CAACL,OAAT,CAAiBsR,MAAjB,CAAwB,mDAAxB,CAAP;MACD;;MAED,OAAOiB,cAAc,CAAC8C,aAAf,CAA6BrT,oBAAoB,CAACmQ,WAAlD,CAAP;IACD;IACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAxBK,CAzwBC,EAmyBD;IACDhP,GAAG,EAAE,yBADJ;IAEDpD,KAAK,EAAE,UAAUsF;IACjB;IADO;IAGP;IACA;MACE,IAAIkN,cAAc,GAAGlR,YAAY,CAACrB,OAAb,CAAqB2S,iBAArB,EAArB;;MAEA,IAAI,CAACJ,cAAc,CAACK,SAApB,EAA+B;QAC7B,OAAOvS,QAAQ,CAACL,OAAT,CAAiBsR,MAAjB,CAAwB,mDAAxB,CAAP;MACD;;MAED,OAAOiB,cAAc,CAAC8C,aAAf,CAA6BrT,oBAAoB,CAACsT,UAArB,GAAkCjQ,IAA/D,CAAP;IACD;EAdA,CAnyBC,CAx8DJ;EA2vFA,OAAO+B,WAAP;AACD,CAtzF8B,EAA/B;;AAwzFA,IAAImO,iBAAiB,GAAG;EACtB5E,KAAK,EAAE,UAAUtK;EACjB;EADO,EAELmP;EACF;EAHO,EAILjO;EACF;EALO;EAOP;EACA;IACE,IAAIgL,cAAc,GAAGlR,YAAY,CAACrB,OAAb,CAAqB2S,iBAArB,EAArB;;IAEA,IAAI,CAAC,GAAGrS,QAAQ,CAACN,OAAb,EAAsBqG,MAAtB,CAAJ,EAAmC;MACjC,IAAIA,MAAM,CAACtC,MAAP,GAAgB,CAApB,EAAuB;QACrB,OAAO1D,QAAQ,CAACL,OAAT,CAAiBiS,OAAjB,CAAyB,EAAzB,CAAP;MACD;;MAED,IAAIwD,IAAI,GAAG,EAAX;MACA,IAAIC,GAAG,GAAG,EAAV;MACA,IAAIrO,SAAS,GAAG,IAAhB;MACA,IAAIsO,OAAO,GAAG,EAAd;MACA,IAAIpI,KAAK,GAAG,IAAZ;MACA,CAAC,GAAG1M,QAAQ,CAACb,OAAb,EAAsBqG,MAAtB,EAA8B9C,IAA9B,CAAmC8C,MAAnC,EAA2C,UAAUuP,EAAV,EAAc;QACvD,IAAIrI,KAAJ,EAAW;UACT;QACD;;QAED,IAAI,CAAClG,SAAL,EAAgB;UACdA,SAAS,GAAGuO,EAAE,CAACvO,SAAf;QACD;;QAED,IAAIA,SAAS,KAAKuO,EAAE,CAACvO,SAArB,EAAgC;UAC9BkG,KAAK,GAAG,IAAI1L,WAAW,CAAC7B,OAAhB,CAAwB6B,WAAW,CAAC7B,OAAZ,CAAoB6V,kBAA5C,EAAgE,yCAAhE,CAAR;QACD;;QAED,IAAI,CAACD,EAAE,CAACxN,EAAR,EAAY;UACVmF,KAAK,GAAG,IAAI1L,WAAW,CAAC7B,OAAhB,CAAwB6B,WAAW,CAAC7B,OAAZ,CAAoB8V,iBAA5C,EAA+D,6BAA/D,CAAR;QACD;;QAED,IAAIN,UAAU,IAAI,CAACI,EAAE,CAACG,eAAH,EAAnB,EAAyC;UACvCL,GAAG,CAACxP,IAAJ,CAAS0P,EAAE,CAACxN,EAAZ;UACAqN,IAAI,CAACvP,IAAL,CAAU0P,EAAV;QACD;;QAEDD,OAAO,CAACzP,IAAR,CAAa0P,EAAb;MACD,CAvBD;;MAyBA,IAAIrI,KAAJ,EAAW;QACT,OAAOlN,QAAQ,CAACL,OAAT,CAAiBsR,MAAjB,CAAwB/D,KAAxB,CAAP;MACD;;MAED,IAAIoB,KAAK,GAAG,IAAIzM,WAAW,CAAClC,OAAhB,CAAwBqH,SAAxB,CAAZ;MACAsH,KAAK,CAACqH,WAAN,CAAkB,UAAlB,EAA8BN,GAA9B;;MAEA,IAAInO,OAAO,IAAIA,OAAO,CAAC+I,OAAvB,EAAgC;QAC9B3B,KAAK,CAAC2B,OAAN,CAAc/I,OAAO,CAAC+I,OAAtB;MACD;;MAED3B,KAAK,CAACsH,MAAN,GAAeP,GAAG,CAAC3R,MAAnB;MACA,OAAO,CAAC,GAAG7D,KAAK,CAACF,OAAV,EAAmB2O,KAAnB,EAA0BpL,IAA1B,CAA+BoL,KAA/B,EAAsCpH,OAAtC,EAA+CoK,IAA/C,EAAqD,aAAa,YAAY;QACnF,IAAIuE,IAAI,GAAG,CAAC,GAAG1V,kBAAkB,CAACR,OAAvB,GAAiC,aAAaO,YAAY,CAACP,OAAb,CAAqByO,IAArB,CAA0B,SAAS0H,QAAT,CAAkBjB,OAAlB,EAA2B;UAC5G,IAAIkB,KAAJ,EAAWpS,CAAX,EAAcnB,GAAd,EAAmBwT,EAAnB,EAAuBC,IAAvB,EAA6BlO,EAA7B,EAAiCmO,UAAjC,EAA6CC,MAA7C,EAAqD5Q,MAArD;;UAEA,OAAOrF,YAAY,CAACP,OAAb,CAAqB4O,IAArB,CAA0B,UAAU6H,SAAV,EAAqB;YACpD,OAAO,CAAP,EAAU;cACR,QAAQA,SAAS,CAAC3H,IAAV,GAAiB2H,SAAS,CAAC5R,IAAnC;gBACE,KAAK,CAAL;kBACEuR,KAAK,GAAG,EAAR;kBACA,CAAC,GAAGvV,QAAQ,CAACb,OAAb,EAAsBkV,OAAtB,EAA+B3R,IAA/B,CAAoC2R,OAApC,EAA6C,UAAUvR,CAAV,EAAa;oBACxDyS,KAAK,CAACzS,CAAC,CAACyE,EAAH,CAAL,GAAczE,CAAd;kBACD,CAFD;kBAGAK,CAAC,GAAG,CAAJ;;gBAEF,KAAK,CAAL;kBACE,IAAI,EAAEA,CAAC,GAAGyR,IAAI,CAAC1R,MAAX,CAAJ,EAAwB;oBACtB0S,SAAS,CAAC5R,IAAV,GAAiB,EAAjB;oBACA;kBACD;;kBAEDhC,GAAG,GAAG4S,IAAI,CAACzR,CAAD,CAAV;;kBAEA,IAAI,EAAE,CAACnB,GAAD,IAAQ,CAACA,GAAG,CAACuF,EAAb,IAAmB,CAACgO,KAAK,CAACvT,GAAG,CAACuF,EAAL,CAA3B,CAAJ,EAA0C;oBACxCqO,SAAS,CAAC5R,IAAV,GAAiB,CAAjB;oBACA;kBACD;;kBAED,IAAI,CAAC2Q,UAAL,EAAiB;oBACfiB,SAAS,CAAC5R,IAAV,GAAiB,CAAjB;oBACA;kBACD;;kBAED,OAAO4R,SAAS,CAAC1H,MAAV,CAAiB,QAAjB,EAA2B1O,QAAQ,CAACL,OAAT,CAAiBsR,MAAjB,CAAwB,IAAIzP,WAAW,CAAC7B,OAAhB,CAAwB6B,WAAW,CAAC7B,OAAZ,CAAoBkP,gBAA5C,EAA8D,uCAA9D,CAAxB,CAA3B,CAAP;;gBAEF,KAAK,CAAL;kBACElL,CAAC;kBACDyS,SAAS,CAAC5R,IAAV,GAAiB,CAAjB;kBACA;;gBAEF,KAAK,EAAL;kBACE,IAAI,CAACgC,cAAL,EAAqB;oBACnB;oBACA,KAAKwP,EAAE,GAAG,CAAV,EAAaA,EAAE,GAAGV,OAAO,CAAC5R,MAA1B,EAAkCsS,EAAE,EAApC,EAAwC;sBACtCC,IAAI,GAAGX,OAAO,CAACU,EAAD,CAAd;;sBAEA,IAAIC,IAAI,IAAIA,IAAI,CAAClO,EAAb,IAAmBgO,KAAK,CAACE,IAAI,CAAClO,EAAN,CAA5B,EAAuC;wBACrCA,EAAE,GAAGkO,IAAI,CAAClO,EAAV;;wBAEAkO,IAAI,CAAC/C,YAAL,CAAkB6C,KAAK,CAAChO,EAAD,CAAL,CAAUwB,MAAV,EAAlB;;wBAEA+L,OAAO,CAACU,EAAD,CAAP,GAAcD,KAAK,CAAChO,EAAD,CAAnB;sBACD;oBACF;kBACF;;kBAEDmO,UAAU,GAAG7S,0BAA0B,CAACiS,OAAD,CAAvC;kBACAc,SAAS,CAAC3H,IAAV,GAAiB,EAAjB;;kBAEAyH,UAAU,CAACrS,CAAX;;gBAEF,KAAK,EAAL;kBACE,IAAI,CAACsS,MAAM,GAAGD,UAAU,CAACpS,CAAX,EAAV,EAA0BC,IAA9B,EAAoC;oBAClCqS,SAAS,CAAC5R,IAAV,GAAiB,EAAjB;oBACA;kBACD;;kBAEDe,MAAM,GAAG4Q,MAAM,CAACzW,KAAhB;kBACA0W,SAAS,CAAC5R,IAAV,GAAiB,EAAjB;kBACA,OAAO0N,cAAc,CAACmE,qBAAf,CAAqC9Q,MAArC,CAAP;;gBAEF,KAAK,EAAL;kBACE6Q,SAAS,CAAC5R,IAAV,GAAiB,EAAjB;kBACA;;gBAEF,KAAK,EAAL;kBACE4R,SAAS,CAAC5R,IAAV,GAAiB,EAAjB;kBACA;;gBAEF,KAAK,EAAL;kBACE4R,SAAS,CAAC3H,IAAV,GAAiB,EAAjB;kBACA2H,SAAS,CAACzH,EAAV,GAAeyH,SAAS,CAAC,OAAD,CAAT,CAAmB,EAAnB,CAAf;;kBAEAF,UAAU,CAAClS,CAAX,CAAaoS,SAAS,CAACzH,EAAvB;;gBAEF,KAAK,EAAL;kBACEyH,SAAS,CAAC3H,IAAV,GAAiB,EAAjB;;kBAEAyH,UAAU,CAAChS,CAAX;;kBAEA,OAAOkS,SAAS,CAACE,MAAV,CAAiB,EAAjB,CAAP;;gBAEF,KAAK,EAAL;kBACE,OAAOF,SAAS,CAAC1H,MAAV,CAAiB,QAAjB,EAA2B1O,QAAQ,CAACL,OAAT,CAAiBiS,OAAjB,CAAyB0D,OAAzB,CAA3B,CAAP;;gBAEF,KAAK,EAAL;gBACA,KAAK,KAAL;kBACE,OAAOc,SAAS,CAACtH,IAAV,EAAP;cA1FJ;YA4FD;UACF,CA/FM,EA+FJgH,QA/FI,EA+FM,IA/FN,EA+FY,CAAC,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,CAAD,CA/FZ,CAAP;QAgGD,CAnGwD,CAA9C,CAAX;;QAqGA,OAAO,YAAY;UACjB,OAAOD,IAAI,CAAC/P,KAAL,CAAW,IAAX,EAAiBG,SAAjB,CAAP;QACD,CAFD;MAGD,CAzGwE,EAAlE,CAAP;IA0GD,CAzJD,MAyJO,IAAID,MAAM,YAAYe,WAAtB,EAAmC;MACxC,IAAI,CAACf,MAAM,CAAC+B,EAAZ,EAAgB;QACd,OAAO/H,QAAQ,CAACL,OAAT,CAAiBsR,MAAjB,CAAwB,IAAIzP,WAAW,CAAC7B,OAAhB,CAAwB6B,WAAW,CAAC7B,OAAZ,CAAoB8V,iBAA5C,EAA+D,4BAA/D,CAAxB,CAAP;MACD;;MAED,IAAIc,cAAc,GAAGvV,YAAY,CAACrB,OAAb,CAAqB6W,iBAArB,EAArB;;MAEA,IAAIC,MAAM,GAAG,EAAb;;MAEA,IAAIvP,OAAO,IAAIA,OAAO,CAAC+I,OAAvB,EAAgC;QAC9BwG,MAAM,CAACxG,OAAP,GAAiB/I,OAAO,CAAC+I,OAAR,CAAgByG,IAAhB,EAAjB;MACD;;MAED,OAAOH,cAAc,CAACI,OAAf,CAAuB,KAAvB,EAA8B,aAAa3Q,MAAM,CAACgB,SAApB,GAAgC,GAAhC,GAAsChB,MAAM,CAACkC,MAAP,EAApE,EAAqFuO,MAArF,EAA6FvP,OAA7F,EAAsGoK,IAAtG,EAA4G,aAAa,YAAY;QAC1I,IAAIsF,KAAK,GAAG,CAAC,GAAGzW,kBAAkB,CAACR,OAAvB,GAAiC,aAAaO,YAAY,CAACP,OAAb,CAAqByO,IAArB,CAA0B,SAASyI,QAAT,CAAkB5L,QAAlB,EAA4B;UAC9G,OAAO/K,YAAY,CAACP,OAAb,CAAqB4O,IAArB,CAA0B,UAAUuI,UAAV,EAAsB;YACrD,OAAO,CAAP,EAAU;cACR,QAAQA,UAAU,CAACrI,IAAX,GAAkBqI,UAAU,CAACtS,IAArC;gBACE,KAAK,CAAL;kBACEwB,MAAM,CAAC0J,gBAAP;;kBAEA1J,MAAM,CAACgO,gBAAP;;kBAEAhO,MAAM,CAACkN,YAAP,CAAoBjI,QAApB;;kBAEA6L,UAAU,CAACtS,IAAX,GAAkB,CAAlB;kBACA,OAAO0N,cAAc,CAACmE,qBAAf,CAAqCrQ,MAArC,CAAP;;gBAEF,KAAK,CAAL;kBACE,OAAO8Q,UAAU,CAACpI,MAAX,CAAkB,QAAlB,EAA4B1I,MAA5B,CAAP;;gBAEF,KAAK,CAAL;gBACA,KAAK,KAAL;kBACE,OAAO8Q,UAAU,CAAChI,IAAX,EAAP;cAhBJ;YAkBD;UACF,CArBM,EAqBJ+H,QArBI,CAAP;QAsBD,CAvByD,CAA9C,CAAZ;;QAyBA,OAAO,YAAY;UACjB,OAAOD,KAAK,CAAC9Q,KAAN,CAAY,IAAZ,EAAkBG,SAAlB,CAAP;QACD,CAFD;MAGD,CA7B+H,EAAzH,CAAP;IA8BD;;IAED,OAAOjG,QAAQ,CAACL,OAAT,CAAiBiS,OAAjB,EAAP;EACD,CAnNqB;EAoNtBF,OAAO,EAAE,UAAU1L;EACnB;EADS,EAEPkB;EACF;EAHS;EAKT;EACA;IACE,OAAO,CAAC,GAAG/G,kBAAkB,CAACR,OAAvB,GAAiC,aAAaO,YAAY,CAACP,OAAb,CAAqByO,IAArB,CAA0B,SAAS2I,SAAT,GAAqB;MAClG,IAAIrD,SAAJ,EAAexB,cAAf,EAA+BqE,cAA/B,EAA+CS,OAA/C,EAAwDC,eAAxD,EAAyEC,MAAzE;MACA,OAAOhX,YAAY,CAACP,OAAb,CAAqB4O,IAArB,CAA0B,UAAU4I,UAAV,EAAsB;QACrD,OAAO,CAAP,EAAU;UACR,QAAQA,UAAU,CAAC1I,IAAX,GAAkB0I,UAAU,CAAC3S,IAArC;YACE,KAAK,CAAL;cACEkP,SAAS,GAAGxM,OAAO,IAAIA,OAAO,CAACwM,SAAnB,GAA+BxM,OAAO,CAACwM,SAAvC,GAAmD1S,YAAY,CAACrB,OAAb,CAAqBiD,GAArB,CAAyB,oBAAzB,CAA/D;cACAsP,cAAc,GAAGlR,YAAY,CAACrB,OAAb,CAAqB2S,iBAArB,EAAjB;cACAiE,cAAc,GAAGvV,YAAY,CAACrB,OAAb,CAAqB6W,iBAArB,EAAjB;;cAEA,IAAI,CAAC,CAAC,GAAGvW,QAAQ,CAACN,OAAb,EAAsBqG,MAAtB,CAAL,EAAoC;gBAClCmR,UAAU,CAAC3S,IAAX,GAAkB,EAAlB;gBACA;cACD;;cAED,IAAI,EAAEwB,MAAM,CAACtC,MAAP,GAAgB,CAAlB,CAAJ,EAA0B;gBACxByT,UAAU,CAAC3S,IAAX,GAAkB,CAAlB;gBACA;cACD;;cAED,OAAO2S,UAAU,CAACzI,MAAX,CAAkB,QAAlB,EAA4B1O,QAAQ,CAACL,OAAT,CAAiBiS,OAAjB,CAAyB,EAAzB,CAA5B,CAAP;;YAEF,KAAK,CAAL;cACEoF,OAAO,GAAG,CAAC,EAAD,CAAV;cACA,CAAC,GAAGxW,QAAQ,CAACb,OAAb,EAAsBqG,MAAtB,EAA8B9C,IAA9B,CAAmC8C,MAAnC,EAA2C,UAAUxD,GAAV,EAAe;gBACxD,IAAI,CAACA,GAAG,CAACuF,EAAT,EAAa;kBACX;gBACD;;gBAEDiP,OAAO,CAACA,OAAO,CAACtT,MAAR,GAAiB,CAAlB,CAAP,CAA4BmC,IAA5B,CAAiCrD,GAAjC;;gBAEA,IAAIwU,OAAO,CAACA,OAAO,CAACtT,MAAR,GAAiB,CAAlB,CAAP,CAA4BA,MAA5B,IAAsCgQ,SAA1C,EAAqD;kBACnDsD,OAAO,CAACnR,IAAR,CAAa,EAAb;gBACD;cACF,CAVD;;cAYA,IAAImR,OAAO,CAACA,OAAO,CAACtT,MAAR,GAAiB,CAAlB,CAAP,CAA4BA,MAA5B,KAAuC,CAA3C,EAA8C;gBAC5C;gBACAsT,OAAO,CAACI,GAAR;cACD;;cAEDH,eAAe,GAAGjX,QAAQ,CAACL,OAAT,CAAiBiS,OAAjB,EAAlB;cACAsF,MAAM,GAAG,EAAT;cACA,CAAC,GAAG1W,QAAQ,CAACb,OAAb,EAAsBqX,OAAtB,EAA+B9T,IAA/B,CAAoC8T,OAApC,EAA6C,UAAUK,KAAV,EAAiB;gBAC5DJ,eAAe,GAAGA,eAAe,CAAC3F,IAAhB,CAAqB,YAAY;kBACjD,OAAOiF,cAAc,CAACI,OAAf,CAAuB,MAAvB,EAA+B,OAA/B,EAAwC;oBAC7CW,QAAQ,EAAE,CAAC,GAAG1X,IAAI,CAACD,OAAT,EAAkB0X,KAAlB,EAAyBnU,IAAzB,CAA8BmU,KAA9B,EAAqC,UAAU7U,GAAV,EAAe;sBAC5D,OAAO;wBACLyH,MAAM,EAAE,QADH;wBAELG,IAAI,EAAE1D,gBAAgB,KAAK,UAArB,GAAkClE,GAAG,CAACwE,SAAtC,GAAkD,GAAlD,GAAwDxE,GAAG,CAAC0F,MAAJ,EAFzD;wBAGLgC,IAAI,EAAE;sBAHD,CAAP;oBAKD,CANS;kBADmC,CAAxC,EAQJhD,OARI,EAQKoK,IARL,CAQU,UAAUgE,OAAV,EAAmB;oBAClC,KAAK,IAAI3R,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG2R,OAAO,CAAC5R,MAA5B,EAAoCC,CAAC,EAArC,EAAyC;sBACvC,IAAI2R,OAAO,CAAC3R,CAAD,CAAP,IAAc2R,OAAO,CAAC3R,CAAD,CAAP,CAAWV,cAAX,CAA0B,OAA1B,CAAlB,EAAsD;wBACpD,IAAIqB,GAAG,GAAG,IAAI9C,WAAW,CAAC7B,OAAhB,CAAwB2V,OAAO,CAAC3R,CAAD,CAAP,CAAWuJ,KAAX,CAAiB0B,IAAzC,EAA+C0G,OAAO,CAAC3R,CAAD,CAAP,CAAWuJ,KAAX,CAAiBA,KAAhE,CAAV;wBACA5I,GAAG,CAACiB,MAAJ,GAAa8R,KAAK,CAAC1T,CAAD,CAAlB;wBACAuT,MAAM,CAACrR,IAAP,CAAYvB,GAAZ;sBACD;oBACF;kBACF,CAhBM,CAAP;gBAiBD,CAlBiB,CAAlB;cAmBD,CApBD;cAqBA,OAAO6S,UAAU,CAACzI,MAAX,CAAkB,QAAlB,EAA4BuI,eAAe,CAAC3F,IAAhB,EAAsB,aAAa,CAAC,GAAGnR,kBAAkB,CAACR,OAAvB,GAAiC,aAAaO,YAAY,CAACP,OAAb,CAAqByO,IAArB,CAA0B,SAASmJ,QAAT,GAAoB;gBAChK,IAAIC,SAAJ,EAAeC,UAAf,EAA2BC,MAA3B,EAAmCnS,MAAnC;;gBAEA,OAAOrF,YAAY,CAACP,OAAb,CAAqB4O,IAArB,CAA0B,UAAUoJ,UAAV,EAAsB;kBACrD,OAAO,CAAP,EAAU;oBACR,QAAQA,UAAU,CAAClJ,IAAX,GAAkBkJ,UAAU,CAACnT,IAArC;sBACE,KAAK,CAAL;wBACE,IAAI,CAAC0S,MAAM,CAACxT,MAAZ,EAAoB;0BAClBiU,UAAU,CAACnT,IAAX,GAAkB,CAAlB;0BACA;wBACD;;wBAEDgT,SAAS,GAAG,IAAIhW,WAAW,CAAC7B,OAAhB,CAAwB6B,WAAW,CAAC7B,OAAZ,CAAoBiY,eAA5C,CAAZ;wBACAJ,SAAS,CAACN,MAAV,GAAmBA,MAAnB;wBACA,OAAOS,UAAU,CAACjJ,MAAX,CAAkB,QAAlB,EAA4B1O,QAAQ,CAACL,OAAT,CAAiBsR,MAAjB,CAAwBuG,SAAxB,CAA5B,CAAP;;sBAEF,KAAK,CAAL;wBACEC,UAAU,GAAGpU,0BAA0B,CAAC2C,MAAD,CAAvC;wBACA2R,UAAU,CAAClJ,IAAX,GAAkB,CAAlB;;wBAEAgJ,UAAU,CAAC5T,CAAX;;sBAEF,KAAK,CAAL;wBACE,IAAI,CAAC6T,MAAM,GAAGD,UAAU,CAAC3T,CAAX,EAAV,EAA0BC,IAA9B,EAAoC;0BAClC4T,UAAU,CAACnT,IAAX,GAAkB,EAAlB;0BACA;wBACD;;wBAEDe,MAAM,GAAGmS,MAAM,CAAChY,KAAhB;wBACAiY,UAAU,CAACnT,IAAX,GAAkB,EAAlB;wBACA,OAAO0N,cAAc,CAAC2F,sBAAf,CAAsCtS,MAAtC,CAAP;;sBAEF,KAAK,EAAL;wBACEoS,UAAU,CAACnT,IAAX,GAAkB,CAAlB;wBACA;;sBAEF,KAAK,EAAL;wBACEmT,UAAU,CAACnT,IAAX,GAAkB,EAAlB;wBACA;;sBAEF,KAAK,EAAL;wBACEmT,UAAU,CAAClJ,IAAX,GAAkB,EAAlB;wBACAkJ,UAAU,CAAChJ,EAAX,GAAgBgJ,UAAU,CAAC,OAAD,CAAV,CAAoB,CAApB,CAAhB;;wBAEAF,UAAU,CAACzT,CAAX,CAAa2T,UAAU,CAAChJ,EAAxB;;sBAEF,KAAK,EAAL;wBACEgJ,UAAU,CAAClJ,IAAX,GAAkB,EAAlB;;wBAEAgJ,UAAU,CAACvT,CAAX;;wBAEA,OAAOyT,UAAU,CAACrB,MAAX,CAAkB,EAAlB,CAAP;;sBAEF,KAAK,EAAL;wBACE,OAAOqB,UAAU,CAACjJ,MAAX,CAAkB,QAAlB,EAA4B1O,QAAQ,CAACL,OAAT,CAAiBiS,OAAjB,CAAyB5L,MAAzB,CAA5B,CAAP;;sBAEF,KAAK,EAAL;sBACA,KAAK,KAAL;wBACE,OAAO2R,UAAU,CAAC7I,IAAX,EAAP;oBArDJ;kBAuDD;gBACF,CA1DM,EA0DJyI,QA1DI,EA0DM,IA1DN,EA0DY,CAAC,CAAC,CAAD,EAAI,EAAJ,EAAQ,EAAR,EAAY,EAAZ,CAAD,CA1DZ,CAAP;cA2DD,CA9DmH,CAA9C,CAAnC,CAA5B,CAAP;;YAgEF,KAAK,EAAL;cACE,IAAI,EAAEvR,MAAM,YAAYe,WAApB,CAAJ,EAAsC;gBACpCoQ,UAAU,CAAC3S,IAAX,GAAkB,EAAlB;gBACA;cACD;;cAED,OAAO2S,UAAU,CAACzI,MAAX,CAAkB,QAAlB,EAA4B6H,cAAc,CAACI,OAAf,CAAuB,QAAvB,EAAiC,aAAa3Q,MAAM,CAACgB,SAApB,GAAgC,GAAhC,GAAsChB,MAAM,CAACkC,MAAP,EAAvE,EAAwF,EAAxF,EAA4FhB,OAA5F,EAAqGoK,IAArG,EAA2G,aAAa,CAAC,GAAGnR,kBAAkB,CAACR,OAAvB,GAAiC,aAAaO,YAAY,CAACP,OAAb,CAAqByO,IAArB,CAA0B,SAAS0J,QAAT,GAAoB;gBACrP,OAAO5X,YAAY,CAACP,OAAb,CAAqB4O,IAArB,CAA0B,UAAUwJ,UAAV,EAAsB;kBACrD,OAAO,CAAP,EAAU;oBACR,QAAQA,UAAU,CAACtJ,IAAX,GAAkBsJ,UAAU,CAACvT,IAArC;sBACE,KAAK,CAAL;wBACEuT,UAAU,CAACvT,IAAX,GAAkB,CAAlB;wBACA,OAAO0N,cAAc,CAAC2F,sBAAf,CAAsC7R,MAAtC,CAAP;;sBAEF,KAAK,CAAL;wBACE,OAAO+R,UAAU,CAACrJ,MAAX,CAAkB,QAAlB,EAA4B1O,QAAQ,CAACL,OAAT,CAAiBiS,OAAjB,CAAyB5L,MAAzB,CAA5B,CAAP;;sBAEF,KAAK,CAAL;sBACA,KAAK,KAAL;wBACE,OAAO+R,UAAU,CAACjJ,IAAX,EAAP;oBAVJ;kBAYD;gBACF,CAfM,EAeJgJ,QAfI,CAAP;cAgBD,CAjBwM,CAA9C,CAAxH,CAA5B,CAAP;;YAmBF,KAAK,EAAL;cACE,OAAOX,UAAU,CAACzI,MAAX,CAAkB,QAAlB,EAA4B1O,QAAQ,CAACL,OAAT,CAAiBiS,OAAjB,CAAyB5L,MAAzB,CAA5B,CAAP;;YAEF,KAAK,EAAL;YACA,KAAK,KAAL;cACE,OAAOmR,UAAU,CAACrI,IAAX,EAAP;UA1JJ;QA4JD;MACF,CA/JM,EA+JJiI,SA/JI,CAAP;IAgKD,CAlKoD,CAA9C,GAAP;EAmKD,CA9XqB;EA+XtBrG,IAAI,EAAE,UAAU1K;EAChB;EADM,EAEJkB;EACF;EAHM,EAIJ;IACA,IAAIwM,SAAS,GAAGxM,OAAO,IAAIA,OAAO,CAACwM,SAAnB,GAA+BxM,OAAO,CAACwM,SAAvC,GAAmD1S,YAAY,CAACrB,OAAb,CAAqBiD,GAArB,CAAyB,oBAAzB,CAAnE;;IAEA,IAAIsP,cAAc,GAAGlR,YAAY,CAACrB,OAAb,CAAqB2S,iBAArB,EAArB;;IAEA,IAAI0F,WAAW,GAAG,EAAlB;;IAEA,IAAIzB,cAAc,GAAGvV,YAAY,CAACrB,OAAb,CAAqB6W,iBAArB,EAArB;;IAEA,IAAIhP,eAAe,GAAGxG,YAAY,CAACrB,OAAb,CAAqB8H,wBAArB,EAAtB;;IAEA,IAAIwQ,mBAAmB,GAAGjX,YAAY,CAACrB,OAAb,CAAqBiD,GAArB,CAAyB,wBAAzB,CAA1B;;IAEAsE,OAAO,GAAGA,OAAO,IAAI,EAArB;IACAA,OAAO,CAACgR,YAAR,GAAuBhR,OAAO,CAACgR,YAAR,IAAwB,IAA/C;;IAEA,IAAI,CAAC,GAAGjY,QAAQ,CAACN,OAAb,EAAsBqG,MAAtB,CAAJ,EAAmC;MACjC,IAAIA,MAAM,CAACtC,MAAP,GAAgB,CAApB,EAAuB;QACrB,OAAO1D,QAAQ,CAACL,OAAT,CAAiBiS,OAAjB,CAAyB,EAAzB,CAAP;MACD;;MAED,IAAIR,OAAO,GAAG,CAAC,GAAGhR,OAAO,CAACT,OAAZ,EAAqBqG,MAArB,EAA6B9C,IAA7B,CAAkC8C,MAAlC,CAAd;;MAEA,KAAK,IAAIrC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGqC,MAAM,CAACtC,MAA3B,EAAmCC,CAAC,EAApC,EAAwC;QACtC,IAAIqC,MAAM,CAACrC,CAAD,CAAN,YAAqBoD,WAAzB,EAAsC;UACpCqK,OAAO,GAAG,CAAC,GAAGhR,OAAO,CAACT,OAAZ,EAAqByR,OAArB,EAA8BlO,IAA9B,CAAmCkO,OAAnC,EAA4C,CAAC,GAAGjP,gBAAgB,CAACxC,OAArB,EAA8BqG,MAAM,CAACrC,CAAD,CAApC,EAAyC,IAAzC,CAA5C,CAAV;QACD;MACF;;MAEDyN,OAAO,GAAG,CAAC,GAAGnP,OAAO,CAACtC,OAAZ,EAAqByR,OAArB,CAAV;MACA,IAAI+G;MACJ;MADc,EAEZ,EAFF;MAGA,IAAIxP;MACJ;MADW,EAET,EAFF;MAGA,CAAC,GAAGnI,QAAQ,CAACb,OAAb,EAAsByR,OAAtB,EAA+BlO,IAA/B,CAAoCkO,OAApC,EAA6C,UAAUmE,EAAV,EAAc;QACzD,IAAIA,EAAE,YAAY9T,UAAU,CAAC9B,OAA7B,EAAsC;UACpCwY,UAAU,CAACtS,IAAX,CAAgB0P,EAAE,CAAC7E,IAAH,CAAQxJ,OAAR,CAAhB;QACD,CAFD,MAEO,IAAIqO,EAAE,YAAYxO,WAAlB,EAA+B;UACpC,IAAIkR,mBAAmB,IAAI,CAAC1C,EAAE,CAACxN,EAA/B,EAAmC;YACjC,MAAM,IAAIvG,WAAW,CAAC7B,OAAhB,CAAwB6B,WAAW,CAAC7B,OAAZ,CAAoB8V,iBAA5C,EAA+D,+CAA/D,CAAN;UACD;;UAED9M,OAAO,CAAC9C,IAAR,CAAa0P,EAAb;QACD;MACF,CAVD;MAWA,OAAOvV,QAAQ,CAACL,OAAT,CAAiByY,GAAjB,CAAqBD,UAArB,EAAiC7G,IAAjC,CAAsC,YAAY;QACvD,IAAI+G,WAAW,GAAG,IAAlB;QACA,OAAO,CAAC,GAAG3W,aAAa,CAAC4W,aAAlB,EAAiC,YAAY;UAClD,OAAO3P,OAAO,CAACjF,MAAR,GAAiB,CAAxB;QACD,CAFM,EAEJ,YAAY;UACb,IAAI2T,KAAK,GAAG,EAAZ;UACA,IAAIkB,WAAW,GAAG,EAAlB;UACA,CAAC,GAAG/X,QAAQ,CAACb,OAAb,EAAsBgJ,OAAtB,EAA+BzF,IAA/B,CAAoCyF,OAApC,EAA6C,UAAU4M,EAAV,EAAc;YACzD,IAAI8B,KAAK,CAAC3T,MAAN,GAAegQ,SAAf,IAA4B,CAAC,GAAGzS,gBAAgB,CAACtB,OAArB,EAA8B4V,EAA9B,CAAhC,EAAmE;cACjE8B,KAAK,CAACxR,IAAN,CAAW0P,EAAX;YACD,CAFD,MAEO;cACLgD,WAAW,CAAC1S,IAAZ,CAAiB0P,EAAjB;YACD;UACF,CAND;UAOA5M,OAAO,GAAG4P,WAAV;;UAEA,IAAIlB,KAAK,CAAC3T,MAAN,GAAe,CAAnB,EAAsB;YACpB,OAAO1D,QAAQ,CAACL,OAAT,CAAiBsR,MAAjB,CAAwB,IAAIzP,WAAW,CAAC7B,OAAhB,CAAwB6B,WAAW,CAAC7B,OAAZ,CAAoBqP,WAA5C,EAAyD,qCAAzD,CAAxB,CAAP;UACD,CAdY,CAcX;UACF;;;UAGA,IAAIwJ,aAAa,GAAG,IAAI9W,aAAa,CAAC+W,gBAAlB,EAApB;UACA,IAAIC,UAAU,GAAG,EAAjB;UACA,IAAIC,UAAU,GAAG,EAAjB;UACA,CAAC,GAAGnY,QAAQ,CAACb,OAAb,EAAsB0X,KAAtB,EAA6BnU,IAA7B,CAAkCmU,KAAlC,EAAyC,UAAU7U,GAAV,EAAeoW,KAAf,EAAsB;YAC7D,IAAIC,KAAK,GAAG,IAAInX,aAAa,CAAC+W,gBAAlB,EAAZ;YACAC,UAAU,CAAC7S,IAAX,CAAgBgT,KAAhB;YACArR,eAAe,CAACsR,gBAAhB,CAAiCtW,GAAG,CAACmF,mBAAJ,EAAjC;YACAgR,UAAU,CAAC9S,IAAX,CAAgB2B,eAAe,CAACuR,WAAhB,CAA4BvW,GAAG,CAACmF,mBAAJ,EAA5B,EAAuD,YAAY;cACjFkR,KAAK,CAACjH,OAAN;cACA,OAAO4G,aAAa,CAAClH,IAAd,CAAmB,UAAU0H,SAAV,EAAqB;gBAC7C,IAAIA,SAAS,CAACJ,KAAD,CAAT,CAAiB3V,cAAjB,CAAgC,SAAhC,CAAJ,EAAgD;kBAC9C,IAAIoH,QAAQ,GAAG2O,SAAS,CAACJ,KAAD,CAAT,CAAiBK,OAAjB,CAAyB5O,QAAxC;kBACA,IAAIa,MAAM,GAAG8N,SAAS,CAACJ,KAAD,CAAT,CAAiBM,OAA9B;kBACA,OAAOF,SAAS,CAACJ,KAAD,CAAT,CAAiBM,OAAxB;kBACAlB,WAAW,CAAC3N,QAAD,CAAX,GAAwB7H,GAAG,CAACwF,QAA5B;;kBAEAxF,GAAG,CAAC2W,mBAAJ,CAAwBH,SAAS,CAACJ,KAAD,CAAT,CAAiBK,OAAzC,EAAkD/N,MAAlD;gBACD,CAPD,MAOO;kBACL,IAAI,CAACmN,WAAD,IAAgBW,SAAS,CAACJ,KAAD,CAAT,CAAiB3V,cAAjB,CAAgC,OAAhC,CAApB,EAA8D;oBAC5D,IAAImW,WAAW,GAAGJ,SAAS,CAACJ,KAAD,CAAT,CAAiB1L,KAAnC;oBACAmL,WAAW,GAAG,IAAI7W,WAAW,CAAC7B,OAAhB,CAAwByZ,WAAW,CAACxK,IAApC,EAA0CwK,WAAW,CAAClM,KAAtD,CAAd,CAF4D,CAEgB;;oBAE5EvE,OAAO,GAAG,EAAV;kBACD;;kBAEDnG,GAAG,CAAC6W,gBAAJ;gBACD;cACF,CAlBM,CAAP;YAmBD,CArBe,CAAhB;UAsBD,CA1BD;UA2BA,CAAC,GAAG3X,aAAa,CAAC4X,IAAlB,EAAwBZ,UAAxB,EAAoCpH,IAApC,CAAyC,YAAY;YACnD;YACA,OAAOiF,cAAc,CAACI,OAAf,CAAuB,MAAvB,EAA+B,OAA/B,EAAwC;cAC7CW,QAAQ,EAAE,CAAC,GAAG1X,IAAI,CAACD,OAAT,EAAkB0X,KAAlB,EAAyBnU,IAAzB,CAA8BmU,KAA9B,EAAqC,UAAU7U,GAAV,EAAe;gBAC5D,IAAIiU,MAAM,GAAGjU,GAAG,CAAC+W,cAAJ,EAAb;;gBAEA9C,MAAM,CAACrM,IAAP,GAAc1D,gBAAgB,KAAK+P,MAAM,CAACrM,IAA1C;gBACA,OAAOqM,MAAP;cACD,CALS;YADmC,CAAxC,EAOJvP,OAPI,CAAP;UAQD,CAVD,EAUGoK,IAVH,CAUQkH,aAAa,CAAC5G,OAVtB,EAU+B,UAAU1E,KAAV,EAAiB;YAC9CsL,aAAa,CAACvH,MAAd,CAAqB,IAAIzP,WAAW,CAAC7B,OAAhB,CAAwB6B,WAAW,CAAC7B,OAAZ,CAAoB6Z,cAA5C,EAA4DtM,KAAK,CAACyD,OAAlE,CAArB;UACD,CAZD;UAaA,OAAO,CAAC,GAAGjP,aAAa,CAAC4X,IAAlB,EAAwBX,UAAxB,CAAP;QACD,CAhEM,EAgEJrH,IAhEI,EAgEE,aAAa,CAAC,GAAGnR,kBAAkB,CAACR,OAAvB,GAAiC,aAAaO,YAAY,CAACP,OAAb,CAAqByO,IAArB,CAA0B,SAASqL,SAAT,GAAqB;UACjH,IAAIC,UAAJ,EAAgBC,MAAhB,EAAwBpU,MAAxB;;UAEA,OAAOrF,YAAY,CAACP,OAAb,CAAqB4O,IAArB,CAA0B,UAAUqL,UAAV,EAAsB;YACrD,OAAO,CAAP,EAAU;cACR,QAAQA,UAAU,CAACnL,IAAX,GAAkBmL,UAAU,CAACpV,IAArC;gBACE,KAAK,CAAL;kBACE,IAAI,CAAC6T,WAAL,EAAkB;oBAChBuB,UAAU,CAACpV,IAAX,GAAkB,CAAlB;oBACA;kBACD;;kBAED,OAAOoV,UAAU,CAAClL,MAAX,CAAkB,QAAlB,EAA4B1O,QAAQ,CAACL,OAAT,CAAiBsR,MAAjB,CAAwBoH,WAAxB,CAA5B,CAAP;;gBAEF,KAAK,CAAL;kBACEqB,UAAU,GAAGrW,0BAA0B,CAAC2C,MAAD,CAAvC;kBACA4T,UAAU,CAACnL,IAAX,GAAkB,CAAlB;;kBAEAiL,UAAU,CAAC7V,CAAX;;gBAEF,KAAK,CAAL;kBACE,IAAI,CAAC8V,MAAM,GAAGD,UAAU,CAAC5V,CAAX,EAAV,EAA0BC,IAA9B,EAAoC;oBAClC6V,UAAU,CAACpV,IAAX,GAAkB,EAAlB;oBACA;kBACD;;kBAEDe,MAAM,GAAGoU,MAAM,CAACja,KAAhB;kBACAka,UAAU,CAACpV,IAAX,GAAkB,CAAlB;kBACA,OAAO0N,cAAc,CAAC2H,uBAAf,CAAuC7B,WAAW,CAACzS,MAAM,CAACwC,EAAR,CAAlD,EAA+DxC,MAA/D,CAAP;;gBAEF,KAAK,CAAL;kBACEqU,UAAU,CAACpV,IAAX,GAAkB,EAAlB;kBACA,OAAO0N,cAAc,CAACmE,qBAAf,CAAqC9Q,MAArC,CAAP;;gBAEF,KAAK,EAAL;kBACEqU,UAAU,CAACpV,IAAX,GAAkB,CAAlB;kBACA;;gBAEF,KAAK,EAAL;kBACEoV,UAAU,CAACpV,IAAX,GAAkB,EAAlB;kBACA;;gBAEF,KAAK,EAAL;kBACEoV,UAAU,CAACnL,IAAX,GAAkB,EAAlB;kBACAmL,UAAU,CAACjL,EAAX,GAAgBiL,UAAU,CAAC,OAAD,CAAV,CAAoB,CAApB,CAAhB;;kBAEAF,UAAU,CAAC1V,CAAX,CAAa4V,UAAU,CAACjL,EAAxB;;gBAEF,KAAK,EAAL;kBACEiL,UAAU,CAACnL,IAAX,GAAkB,EAAlB;;kBAEAiL,UAAU,CAACxV,CAAX;;kBAEA,OAAO0V,UAAU,CAACtD,MAAX,CAAkB,EAAlB,CAAP;;gBAEF,KAAK,EAAL;kBACE,OAAOsD,UAAU,CAAClL,MAAX,CAAkB,QAAlB,EAA4B1O,QAAQ,CAACL,OAAT,CAAiBiS,OAAjB,CAAyB5L,MAAzB,CAA5B,CAAP;;gBAEF,KAAK,EAAL;gBACA,KAAK,KAAL;kBACE,OAAO4T,UAAU,CAAC9K,IAAX,EAAP;cAvDJ;YAyDD;UACF,CA5DM,EA4DJ2K,SA5DI,EA4DO,IA5DP,EA4Da,CAAC,CAAC,CAAD,EAAI,EAAJ,EAAQ,EAAR,EAAY,EAAZ,CAAD,CA5Db,CAAP;QA6DD,CAhEmE,CAA9C,CAhEf,CAAP;MAiID,CAnIM,CAAP;IAoID,CAnKD,MAmKO,IAAIzT,MAAM,YAAYe,WAAtB,EAAmC;MACxC,IAAIkR,mBAAmB,IAAI,CAACjS,MAAM,CAAC+B,EAAnC,EAAuC;QACrC,MAAM,IAAIvG,WAAW,CAAC7B,OAAhB,CAAwB6B,WAAW,CAAC7B,OAAZ,CAAoB8V,iBAA5C,EAA+D,+CAA/D,CAAN;MACD,CAHuC,CAGtC;;;MAGFzP,MAAM,CAACkC,MAAP;;MAEA,IAAID,OAAO,GAAGjC,MAAM,CAACgC,QAArB,CARwC,CAQT;;MAE/B,IAAI8R,UAAU,GAAG9T,MAAjB;;MAEA,IAAI+T,IAAI,GAAG,YAAY;QACrB,IAAItD,MAAM,GAAGqD,UAAU,CAACP,cAAX,EAAb;;QAEA,OAAOhD,cAAc,CAACI,OAAf,CAAuBF,MAAM,CAACxM,MAA9B,EAAsCwM,MAAM,CAACrM,IAA7C,EAAmDqM,MAAM,CAACvM,IAA1D,EAAgEhD,OAAhE,EAAyEoK,IAAzE,CAA8E,UAAUrG,QAAV,EAAoB;UACvG,IAAIC,MAAM,GAAGD,QAAQ,CAACiO,OAAtB;UACA,OAAOjO,QAAQ,CAACiO,OAAhB;;UAEAY,UAAU,CAACX,mBAAX,CAA+BlO,QAA/B,EAAyCC,MAAzC;QACD,CALM,EAKJ,UAAUgC,KAAV,EAAiB;UAClB4M,UAAU,CAACT,gBAAX;;UAEA,OAAOrZ,QAAQ,CAACL,OAAT,CAAiBsR,MAAjB,CAAwB/D,KAAxB,CAAP;QACD,CATM,CAAP;MAUD,CAbD;;MAeA1F,eAAe,CAACsR,gBAAhB,CAAiC9S,MAAM,CAAC2B,mBAAP,EAAjC;MACA,OAAOH,eAAe,CAACuR,WAAhB,CAA4B/S,MAAM,CAAC2B,mBAAP,EAA5B,EAA0DoS,IAA1D,EAAgEzI,IAAhE,EAAsE,aAAa,CAAC,GAAGnR,kBAAkB,CAACR,OAAvB,GAAiC,aAAaO,YAAY,CAACP,OAAb,CAAqByO,IAArB,CAA0B,SAAS4L,SAAT,GAAqB;QACrL,OAAO9Z,YAAY,CAACP,OAAb,CAAqB4O,IAArB,CAA0B,UAAU0L,UAAV,EAAsB;UACrD,OAAO,CAAP,EAAU;YACR,QAAQA,UAAU,CAACxL,IAAX,GAAkBwL,UAAU,CAACzV,IAArC;cACE,KAAK,CAAL;gBACEyV,UAAU,CAACzV,IAAX,GAAkB,CAAlB;gBACA,OAAO0N,cAAc,CAAC2H,uBAAf,CAAuC5R,OAAvC,EAAgDjC,MAAhD,CAAP;;cAEF,KAAK,CAAL;gBACEiU,UAAU,CAACzV,IAAX,GAAkB,CAAlB;gBACA,OAAO0N,cAAc,CAACmE,qBAAf,CAAqCrQ,MAArC,CAAP;;cAEF,KAAK,CAAL;gBACE,OAAOiU,UAAU,CAACvL,MAAX,CAAkB,QAAlB,EAA4B1I,MAA5B,CAAP;;cAEF,KAAK,CAAL;cACA,KAAK,KAAL;gBACE,OAAOiU,UAAU,CAACnL,IAAX,EAAP;YAdJ;UAgBD;QACF,CAnBM,EAmBJkL,SAnBI,CAAP;MAoBD,CArBuI,CAA9C,CAAnF,EAqBF,UAAU9M,KAAV,EAAiB;QACpB,OAAOlN,QAAQ,CAACL,OAAT,CAAiBsR,MAAjB,CAAwB/D,KAAxB,CAAP;MACD,CAvBM,CAAP;IAwBD;;IAED,OAAOlN,QAAQ,CAACL,OAAT,CAAiBiS,OAAjB,EAAP;EACD;AA7mBqB,CAAxB;;AAgnBA5Q,YAAY,CAACrB,OAAb,CAAqBua,mBAArB,CAAyChF,iBAAzC;;AAEA,IAAIiF,QAAQ,GAAGpT,WAAf;AACAtH,OAAO,CAACE,OAAR,GAAkBwa,QAAlB"},"metadata":{},"sourceType":"script"}