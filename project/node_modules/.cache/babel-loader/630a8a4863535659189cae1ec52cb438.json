{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs3/helpers/interopRequireDefault\");\n\nvar _promise = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/promise\"));\n\nvar _CoreManager = _interopRequireDefault(require(\"./CoreManager\"));\n/**\r\n * Copyright (c) 2015-present, Parse, LLC.\r\n * All rights reserved.\r\n *\r\n * This source code is licensed under the BSD-style license found in the\r\n * LICENSE file in the root directory of this source tree. An additional grant\r\n * of patent rights can be found in the PATENTS file in the same directory.\r\n *\r\n * @flow\r\n */\n\n\nvar Storage = {\n  async: function async()\n  /*: boolean*/\n  {\n    var controller = _CoreManager.default.getStorageController();\n\n    return !!controller.async;\n  },\n  getItem: function getItem(path\n  /*: string*/\n  )\n  /*: ?string*/\n  {\n    var controller = _CoreManager.default.getStorageController();\n\n    if (controller.async === 1) {\n      throw new Error('Synchronous storage is not supported by the current storage controller');\n    }\n\n    return controller.getItem(path);\n  },\n  getItemAsync: function getItemAsync(path\n  /*: string*/\n  )\n  /*: Promise<string>*/\n  {\n    var controller = _CoreManager.default.getStorageController();\n\n    if (controller.async === 1) {\n      return controller.getItemAsync(path);\n    }\n\n    return _promise.default.resolve(controller.getItem(path));\n  },\n  setItem: function setItem(path\n  /*: string*/\n  , value\n  /*: string*/\n  )\n  /*: void*/\n  {\n    var controller = _CoreManager.default.getStorageController();\n\n    if (controller.async === 1) {\n      throw new Error('Synchronous storage is not supported by the current storage controller');\n    }\n\n    return controller.setItem(path, value);\n  },\n  setItemAsync: function setItemAsync(path\n  /*: string*/\n  , value\n  /*: string*/\n  )\n  /*: Promise<void>*/\n  {\n    var controller = _CoreManager.default.getStorageController();\n\n    if (controller.async === 1) {\n      return controller.setItemAsync(path, value);\n    }\n\n    return _promise.default.resolve(controller.setItem(path, value));\n  },\n  removeItem: function removeItem(path\n  /*: string*/\n  )\n  /*: void*/\n  {\n    var controller = _CoreManager.default.getStorageController();\n\n    if (controller.async === 1) {\n      throw new Error('Synchronous storage is not supported by the current storage controller');\n    }\n\n    return controller.removeItem(path);\n  },\n  removeItemAsync: function removeItemAsync(path\n  /*: string*/\n  )\n  /*: Promise<void>*/\n  {\n    var controller = _CoreManager.default.getStorageController();\n\n    if (controller.async === 1) {\n      return controller.removeItemAsync(path);\n    }\n\n    return _promise.default.resolve(controller.removeItem(path));\n  },\n  getAllKeys: function getAllKeys()\n  /*: Array<string>*/\n  {\n    var controller = _CoreManager.default.getStorageController();\n\n    if (controller.async === 1) {\n      throw new Error('Synchronous storage is not supported by the current storage controller');\n    }\n\n    return controller.getAllKeys();\n  },\n  getAllKeysAsync: function getAllKeysAsync()\n  /*: Promise<Array<string>>*/\n  {\n    var controller = _CoreManager.default.getStorageController();\n\n    if (controller.async === 1) {\n      return controller.getAllKeysAsync();\n    }\n\n    return _promise.default.resolve(controller.getAllKeys());\n  },\n  generatePath: function generatePath(path\n  /*: string*/\n  )\n  /*: string*/\n  {\n    if (!_CoreManager.default.get('APPLICATION_ID')) {\n      throw new Error('You need to call Parse.initialize before using Parse.');\n    }\n\n    if (typeof path !== 'string') {\n      throw new Error('Tried to get a Storage path that was not a String.');\n    }\n\n    if (path[0] === '/') {\n      path = path.substr(1);\n    }\n\n    return 'Parse/' + _CoreManager.default.get('APPLICATION_ID') + '/' + path;\n  },\n  _clear: function _clear() {\n    var controller = _CoreManager.default.getStorageController();\n\n    if (controller.hasOwnProperty('clear')) {\n      controller.clear();\n    }\n  }\n};\nmodule.exports = Storage;\n\n_CoreManager.default.setStorageController(require('./StorageController.browser'));","map":null,"metadata":{},"sourceType":"script"}