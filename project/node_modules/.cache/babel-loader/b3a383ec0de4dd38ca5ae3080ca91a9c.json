{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs3/helpers/interopRequireDefault\");\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs3/core-js-stable/object/define-property\");\n\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = void 0;\n\nvar _ParseUser = _interopRequireDefault(require(\"./ParseUser\"));\n/**\r\n * Copyright (c) 2015-present, Parse, LLC.\r\n * All rights reserved.\r\n *\r\n * This source code is licensed under the BSD-style license found in the\r\n * LICENSE file in the root directory of this source tree. An additional grant\r\n * of patent rights can be found in the PATENTS file in the same directory.\r\n *\r\n * @flow-weak\r\n */\n\n\nvar uuidv4 = require('./uuid');\n\nvar registered = false;\n/**\r\n * Provides utility functions for working with Anonymously logged-in users. <br />\r\n * Anonymous users have some unique characteristics:\r\n * <ul>\r\n *  <li>Anonymous users don't need a user name or password.</li>\r\n *  <ul>\r\n *    <li>Once logged out, an anonymous user cannot be recovered.</li>\r\n *  </ul>\r\n *  <li>signUp converts an anonymous user to a standard user with the given username and password.</li>\r\n *  <ul>\r\n *    <li>Data associated with the anonymous user is retained.</li>\r\n *  </ul>\r\n *  <li>logIn switches users without converting the anonymous user.</li>\r\n *  <ul>\r\n *    <li>Data associated with the anonymous user will be lost.</li>\r\n *  </ul>\r\n *  <li>Service logIn (e.g. Facebook, Twitter) will attempt to convert\r\n *  the anonymous user into a standard user by linking it to the service.</li>\r\n *  <ul>\r\n *    <li>If a user already exists that is linked to the service, it will instead switch to the existing user.</li>\r\n *  </ul>\r\n *  <li>Service linking (e.g. Facebook, Twitter) will convert the anonymous user\r\n *  into a standard user by linking it to the service.</li>\r\n * </ul>\r\n *\r\n * @class Parse.AnonymousUtils\r\n * @static\r\n */\n\nvar AnonymousUtils = {\n  /**\r\n   * Gets whether the user has their account linked to anonymous user.\r\n   *\r\n   * @function isLinked\r\n   * @name Parse.AnonymousUtils.isLinked\r\n   * @param {Parse.User} user User to check for.\r\n   *     The user must be logged in on this device.\r\n   * @returns {boolean} <code>true</code> if the user has their account\r\n   *     linked to an anonymous user.\r\n   * @static\r\n   */\n  isLinked: function isLinked(user\n  /*: ParseUser*/\n  ) {\n    var provider = this._getAuthProvider();\n\n    return user._isLinked(provider.getAuthType());\n  },\n\n  /**\r\n   * Logs in a user Anonymously.\r\n   *\r\n   * @function logIn\r\n   * @name Parse.AnonymousUtils.logIn\r\n   * @param {object} options MasterKey / SessionToken.\r\n   * @returns {Promise} Logged in user\r\n   * @static\r\n   */\n  logIn: function logIn(options\n  /*:: ?: RequestOptions*/\n  )\n  /*: Promise<ParseUser>*/\n  {\n    var provider = this._getAuthProvider();\n\n    return _ParseUser.default.logInWith(provider.getAuthType(), provider.getAuthData(), options);\n  },\n\n  /**\r\n   * Links Anonymous User to an existing PFUser.\r\n   *\r\n   * @function link\r\n   * @name Parse.AnonymousUtils.link\r\n   * @param {Parse.User} user User to link. This must be the current user.\r\n   * @param {object} options MasterKey / SessionToken.\r\n   * @returns {Promise} Linked with User\r\n   * @static\r\n   */\n  link: function link(user\n  /*: ParseUser*/\n  , options\n  /*:: ?: RequestOptions*/\n  )\n  /*: Promise<ParseUser>*/\n  {\n    var provider = this._getAuthProvider();\n\n    return user.linkWith(provider.getAuthType(), provider.getAuthData(), options);\n  },\n\n  /**\r\n   * Returns true if Authentication Provider has been registered for use.\r\n   *\r\n   * @function isRegistered\r\n   * @name Parse.AnonymousUtils.isRegistered\r\n   * @returns {boolean}\r\n   * @static\r\n   */\n  isRegistered: function isRegistered()\n  /*: boolean*/\n  {\n    return registered;\n  },\n  _getAuthProvider: function _getAuthProvider() {\n    var provider = {\n      restoreAuthentication: function restoreAuthentication() {\n        return true;\n      },\n      getAuthType: function getAuthType() {\n        return 'anonymous';\n      },\n      getAuthData: function getAuthData() {\n        return {\n          authData: {\n            id: uuidv4()\n          }\n        };\n      }\n    };\n\n    if (!registered) {\n      _ParseUser.default._registerAuthenticationProvider(provider);\n\n      registered = true;\n    }\n\n    return provider;\n  }\n};\nvar _default = AnonymousUtils;\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}