{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs3/helpers/interopRequireDefault\");\n\nvar _typeof3 = require(\"@babel/runtime-corejs3/helpers/typeof\");\n\nvar _WeakMap = require(\"@babel/runtime-corejs3/core-js-stable/weak-map\");\n\nvar _Array$isArray2 = require(\"@babel/runtime-corejs3/core-js-stable/array/is-array\");\n\nvar _getIteratorMethod = require(\"@babel/runtime-corejs3/core-js/get-iterator-method\");\n\nvar _Symbol = require(\"@babel/runtime-corejs3/core-js-stable/symbol\");\n\nvar _Array$from = require(\"@babel/runtime-corejs3/core-js-stable/array/from\");\n\nvar _sliceInstanceProperty = require(\"@babel/runtime-corejs3/core-js-stable/instance/slice\");\n\nvar _Object$defineProperty2 = require(\"@babel/runtime-corejs3/core-js-stable/object/define-property\");\n\nvar _Object$defineProperties = require(\"@babel/runtime-corejs3/core-js-stable/object/define-properties\");\n\nvar _Object$getOwnPropertyDescriptors = require(\"@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptors\");\n\nvar _forEachInstanceProperty2 = require(\"@babel/runtime-corejs3/core-js-stable/instance/for-each\");\n\nvar _Object$getOwnPropertyDescriptor = require(\"@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor\");\n\nvar _filterInstanceProperty = require(\"@babel/runtime-corejs3/core-js-stable/instance/filter\");\n\nvar _Object$getOwnPropertySymbols = require(\"@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols\");\n\nvar _Object$keys2 = require(\"@babel/runtime-corejs3/core-js-stable/object/keys\");\n\n_Object$defineProperty2(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = void 0;\n\nvar _map = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/map\"));\n\nvar _find = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/find\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/object/define-property\"));\n\nvar _create = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/object/create\"));\n\nvar _promise = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/promise\"));\n\nvar _isArray = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/array/is-array\"));\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime-corejs3/regenerator\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/asyncToGenerator\"));\n\nvar _concat = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/concat\"));\n\nvar _getPrototypeOf = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/object/get-prototype-of\"));\n\nvar _includes = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/includes\"));\n\nvar _stringify = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/json/stringify\"));\n\nvar _forEach = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/for-each\"));\n\nvar _keys = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/object/keys\"));\n\nvar _freeze = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/object/freeze\"));\n\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/typeof\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/createClass\"));\n\nvar _defineProperty3 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/defineProperty\"));\n\nvar _indexOf = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/index-of\"));\n\nvar _CoreManager = _interopRequireDefault(require(\"./CoreManager\"));\n\nvar _canBeSerialized = _interopRequireDefault(require(\"./canBeSerialized\"));\n\nvar _decode = _interopRequireDefault(require(\"./decode\"));\n\nvar _encode = _interopRequireDefault(require(\"./encode\"));\n\nvar _escape2 = _interopRequireDefault(require(\"./escape\"));\n\nvar _EventuallyQueue = _interopRequireDefault(require(\"./EventuallyQueue\"));\n\nvar _ParseACL = _interopRequireDefault(require(\"./ParseACL\"));\n\nvar _parseDate = _interopRequireDefault(require(\"./parseDate\"));\n\nvar _ParseError = _interopRequireDefault(require(\"./ParseError\"));\n\nvar _ParseFile = _interopRequireDefault(require(\"./ParseFile\"));\n\nvar _promiseUtils = require(\"./promiseUtils\");\n\nvar _LocalDatastoreUtils = require(\"./LocalDatastoreUtils\");\n\nvar _ParseOp = require(\"./ParseOp\");\n\nvar _ParseQuery = _interopRequireDefault(require(\"./ParseQuery\"));\n\nvar _ParseRelation = _interopRequireDefault(require(\"./ParseRelation\"));\n\nvar SingleInstanceStateController = _interopRequireWildcard(require(\"./SingleInstanceStateController\"));\n\nvar _unique = _interopRequireDefault(require(\"./unique\"));\n\nvar UniqueInstanceStateController = _interopRequireWildcard(require(\"./UniqueInstanceStateController\"));\n\nvar _unsavedChildren = _interopRequireDefault(require(\"./unsavedChildren\"));\n\nfunction _getRequireWildcardCache(nodeInterop) {\n  if (typeof _WeakMap !== \"function\") return null;\n  var cacheBabelInterop = new _WeakMap();\n  var cacheNodeInterop = new _WeakMap();\n  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {\n    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;\n  })(nodeInterop);\n}\n\nfunction _interopRequireWildcard(obj, nodeInterop) {\n  if (!nodeInterop && obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (obj === null || _typeof3(obj) !== \"object\" && typeof obj !== \"function\") {\n    return {\n      default: obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache(nodeInterop);\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n\n  for (var key in obj) {\n    if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = _Object$defineProperty2 && _Object$getOwnPropertyDescriptor ? _Object$getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        _Object$defineProperty2(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj.default = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) {\n  var it = typeof _Symbol !== \"undefined\" && _getIteratorMethod(o) || o[\"@@iterator\"];\n\n  if (!it) {\n    if (_Array$isArray2(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = it.call(o);\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it.return != null) it.return();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  var _context18;\n\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n\n  var n = _sliceInstanceProperty(_context18 = Object.prototype.toString.call(o)).call(_context18, 8, -1);\n\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return _Array$from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = _Object$keys2(object);\n\n  if (_Object$getOwnPropertySymbols) {\n    var symbols = _Object$getOwnPropertySymbols(object);\n\n    enumerableOnly && (symbols = _filterInstanceProperty(symbols).call(symbols, function (sym) {\n      return _Object$getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var _context16, _context17;\n\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? _forEachInstanceProperty2(_context16 = ownKeys(Object(source), !0)).call(_context16, function (key) {\n      (0, _defineProperty3.default)(target, key, source[key]);\n    }) : _Object$getOwnPropertyDescriptors ? _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)) : _forEachInstanceProperty2(_context17 = ownKeys(Object(source))).call(_context17, function (key) {\n      _Object$defineProperty2(target, key, _Object$getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nvar uuidv4 = require('./uuid');\n/*:: export type Pointer = {\r\n  __type: string,\r\n  className: string,\r\n  objectId: string,\r\n};*/\n\n/*:: type SaveParams = {\r\n  method: string,\r\n  path: string,\r\n  body: AttributeMap,\r\n};*/\n\n/*:: export type SaveOptions = FullOptions & {\r\n  cascadeSave?: boolean,\r\n  context?: AttributeMap,\r\n};*/\n// Mapping of class names to constructors, so we can populate objects from the\n// server with appropriate subclasses of ParseObject\n\n\nvar classMap = {}; // Global counter for generating unique Ids for non-single-instance objects\n\nvar objectCount = 0; // On web clients, objects are single-instance: any two objects with the same Id\n// will have the same attributes. However, this may be dangerous default\n// behavior in a server scenario\n\nvar singleInstance = !_CoreManager.default.get('IS_NODE');\n\nif (singleInstance) {\n  _CoreManager.default.setObjectStateController(SingleInstanceStateController);\n} else {\n  _CoreManager.default.setObjectStateController(UniqueInstanceStateController);\n}\n\nfunction getServerUrlPath() {\n  var serverUrl = _CoreManager.default.get('SERVER_URL');\n\n  if (serverUrl[serverUrl.length - 1] !== '/') {\n    serverUrl += '/';\n  }\n\n  var url = serverUrl.replace(/https?:\\/\\//, '');\n  return url.substr((0, _indexOf.default)(url).call(url, '/'));\n}\n/**\r\n * Creates a new model with defined attributes.\r\n *\r\n * <p>You won't normally call this method directly.  It is recommended that\r\n * you use a subclass of <code>Parse.Object</code> instead, created by calling\r\n * <code>extend</code>.</p>\r\n *\r\n * <p>However, if you don't want to use a subclass, or aren't sure which\r\n * subclass is appropriate, you can use this form:<pre>\r\n *     var object = new Parse.Object(\"ClassName\");\r\n * </pre>\r\n * That is basically equivalent to:<pre>\r\n *     var MyClass = Parse.Object.extend(\"ClassName\");\r\n *     var object = new MyClass();\r\n * </pre></p>\r\n *\r\n * @alias Parse.Object\r\n */\n\n\nvar ParseObject = /*#__PURE__*/function () {\n  /**\r\n   * @param {string} className The class name for the object\r\n   * @param {object} attributes The initial set of data to store in the object.\r\n   * @param {object} options The options for this object instance.\r\n   */\n  function ParseObject(className\n  /*: ?string | { className: string, [attr: string]: mixed }*/\n  , attributes\n  /*:: ?: { [attr: string]: mixed }*/\n  , options\n  /*:: ?: { ignoreValidation: boolean }*/\n  ) {\n    (0, _classCallCheck2.default)(this, ParseObject);\n    (0, _defineProperty3.default)(this, \"id\", void 0);\n    (0, _defineProperty3.default)(this, \"_localId\", void 0);\n    (0, _defineProperty3.default)(this, \"_objCount\", void 0);\n    (0, _defineProperty3.default)(this, \"className\", void 0); // Enable legacy initializers\n\n    if (typeof this.initialize === 'function') {\n      this.initialize.apply(this, arguments);\n    }\n\n    var toSet = null;\n    this._objCount = objectCount++;\n\n    if (typeof className === 'string') {\n      this.className = className;\n\n      if (attributes && (0, _typeof2.default)(attributes) === 'object') {\n        toSet = attributes;\n      }\n    } else if (className && (0, _typeof2.default)(className) === 'object') {\n      this.className = className.className;\n      toSet = {};\n\n      for (var _attr in className) {\n        if (_attr !== 'className') {\n          toSet[_attr] = className[_attr];\n        }\n      }\n\n      if (attributes && (0, _typeof2.default)(attributes) === 'object') {\n        options = attributes;\n      }\n    }\n\n    if (toSet && !this.set(toSet, options)) {\n      throw new Error(\"Can't create an invalid Parse Object\");\n    }\n  }\n  /**\r\n   * The ID of this object, unique within its class.\r\n   *\r\n   * @property {string} id\r\n   */\n\n\n  (0, _createClass2.default)(ParseObject, [{\n    key: \"attributes\",\n    get:\n    /** Prototype getters / setters **/\n    function get()\n    /*: AttributeMap*/\n    {\n      var stateController = _CoreManager.default.getObjectStateController();\n\n      return (0, _freeze.default)(stateController.estimateAttributes(this._getStateIdentifier()));\n    }\n    /**\r\n     * The first time this object was saved on the server.\r\n     *\r\n     * @property {Date} createdAt\r\n     * @returns {Date}\r\n     */\n\n  }, {\n    key: \"createdAt\",\n    get: function get()\n    /*: ?Date*/\n    {\n      return this._getServerData().createdAt;\n    }\n    /**\r\n     * The last time this object was updated on the server.\r\n     *\r\n     * @property {Date} updatedAt\r\n     * @returns {Date}\r\n     */\n\n  }, {\n    key: \"updatedAt\",\n    get: function get()\n    /*: ?Date*/\n    {\n      return this._getServerData().updatedAt;\n    }\n    /** Private methods **/\n\n    /**\r\n     * Returns a local or server Id used uniquely identify this object\r\n     *\r\n     * @returns {string}\r\n     */\n\n  }, {\n    key: \"_getId\",\n    value: function value()\n    /*: string*/\n    {\n      if (typeof this.id === 'string') {\n        return this.id;\n      }\n\n      if (typeof this._localId === 'string') {\n        return this._localId;\n      }\n\n      var localId = 'local' + uuidv4();\n      this._localId = localId;\n      return localId;\n    }\n    /**\r\n     * Returns a unique identifier used to pull data from the State Controller.\r\n     *\r\n     * @returns {Parse.Object|object}\r\n     */\n\n  }, {\n    key: \"_getStateIdentifier\",\n    value: function value()\n    /*: ParseObject | { id: string, className: string }*/\n    {\n      if (singleInstance) {\n        var id = this.id;\n\n        if (!id) {\n          id = this._getId();\n        }\n\n        return {\n          id: id,\n          className: this.className\n        };\n      } else {\n        return this;\n      }\n    }\n  }, {\n    key: \"_getServerData\",\n    value: function value()\n    /*: AttributeMap*/\n    {\n      var stateController = _CoreManager.default.getObjectStateController();\n\n      return stateController.getServerData(this._getStateIdentifier());\n    }\n  }, {\n    key: \"_clearServerData\",\n    value: function value() {\n      var serverData = this._getServerData();\n\n      var unset = {};\n\n      for (var _attr2 in serverData) {\n        unset[_attr2] = undefined;\n      }\n\n      var stateController = _CoreManager.default.getObjectStateController();\n\n      stateController.setServerData(this._getStateIdentifier(), unset);\n    }\n  }, {\n    key: \"_getPendingOps\",\n    value: function value()\n    /*: Array<OpsMap>*/\n    {\n      var stateController = _CoreManager.default.getObjectStateController();\n\n      return stateController.getPendingOps(this._getStateIdentifier());\n    }\n    /**\r\n     * @param {Array<string>} [keysToClear] - if specified, only ops matching\r\n     * these fields will be cleared\r\n     */\n\n  }, {\n    key: \"_clearPendingOps\",\n    value: function value(keysToClear\n    /*:: ?: Array<string>*/\n    ) {\n      var pending = this._getPendingOps();\n\n      var latest = pending[pending.length - 1];\n      var keys = keysToClear || (0, _keys.default)(latest);\n      (0, _forEach.default)(keys).call(keys, function (key) {\n        delete latest[key];\n      });\n    }\n  }, {\n    key: \"_getDirtyObjectAttributes\",\n    value: function value()\n    /*: AttributeMap*/\n    {\n      var attributes = this.attributes;\n\n      var stateController = _CoreManager.default.getObjectStateController();\n\n      var objectCache = stateController.getObjectCache(this._getStateIdentifier());\n      var dirty = {};\n\n      for (var _attr3 in attributes) {\n        var val = attributes[_attr3];\n\n        if (val && (0, _typeof2.default)(val) === 'object' && !(val instanceof ParseObject) && !(val instanceof _ParseFile.default) && !(val instanceof _ParseRelation.default)) {\n          // Due to the way browsers construct maps, the key order will not change\n          // unless the object is changed\n          try {\n            var json = (0, _encode.default)(val, false, true);\n            var stringified = (0, _stringify.default)(json);\n\n            if (objectCache[_attr3] !== stringified) {\n              dirty[_attr3] = val;\n            }\n          } catch (e) {\n            // Error occurred, possibly by a nested unsaved pointer in a mutable container\n            // No matter how it happened, it indicates a change in the attribute\n            dirty[_attr3] = val;\n          }\n        }\n      }\n\n      return dirty;\n    }\n  }, {\n    key: \"_toFullJSON\",\n    value: function value(seen\n    /*:: ?: Array<any>*/\n    , offline\n    /*:: ?: boolean*/\n    )\n    /*: AttributeMap*/\n    {\n      var json\n      /*: { [key: string]: mixed }*/\n      = this.toJSON(seen, offline);\n      json.__type = 'Object';\n      json.className = this.className;\n      return json;\n    }\n  }, {\n    key: \"_getSaveJSON\",\n    value: function value()\n    /*: AttributeMap*/\n    {\n      var pending = this._getPendingOps();\n\n      var dirtyObjects = this._getDirtyObjectAttributes();\n\n      var json = {};\n\n      for (var attr in dirtyObjects) {\n        var isDotNotation = false;\n\n        for (var i = 0; i < pending.length; i += 1) {\n          for (var field in pending[i]) {\n            // Dot notation operations are handled later\n            if ((0, _includes.default)(field).call(field, '.')) {\n              var fieldName = field.split('.')[0];\n\n              if (fieldName === attr) {\n                isDotNotation = true;\n                break;\n              }\n            }\n          }\n        }\n\n        if (!isDotNotation) {\n          json[attr] = new _ParseOp.SetOp(dirtyObjects[attr]).toJSON();\n        }\n      }\n\n      for (attr in pending[0]) {\n        json[attr] = pending[0][attr].toJSON();\n      }\n\n      return json;\n    }\n  }, {\n    key: \"_getSaveParams\",\n    value: function value()\n    /*: SaveParams*/\n    {\n      var method = this.id ? 'PUT' : 'POST';\n\n      var body = this._getSaveJSON();\n\n      var path = 'classes/' + this.className;\n\n      if (_CoreManager.default.get('ALLOW_CUSTOM_OBJECT_ID')) {\n        if (!this.createdAt) {\n          method = 'POST';\n          body.objectId = this.id;\n        } else {\n          method = 'PUT';\n          path += '/' + this.id;\n        }\n      } else if (this.id) {\n        path += '/' + this.id;\n      } else if (this.className === '_User') {\n        path = 'users';\n      }\n\n      return {\n        method: method,\n        body: body,\n        path: path\n      };\n    }\n  }, {\n    key: \"_finishFetch\",\n    value: function value(serverData\n    /*: AttributeMap*/\n    ) {\n      if (!this.id && serverData.objectId) {\n        this.id = serverData.objectId;\n      }\n\n      var stateController = _CoreManager.default.getObjectStateController();\n\n      stateController.initializeState(this._getStateIdentifier());\n      var decoded = {};\n\n      for (var _attr4 in serverData) {\n        if (_attr4 === 'ACL') {\n          decoded[_attr4] = new _ParseACL.default(serverData[_attr4]);\n        } else if (_attr4 !== 'objectId') {\n          decoded[_attr4] = (0, _decode.default)(serverData[_attr4]);\n\n          if (decoded[_attr4] instanceof _ParseRelation.default) {\n            decoded[_attr4]._ensureParentAndKey(this, _attr4);\n          }\n        }\n      }\n\n      if (decoded.createdAt && typeof decoded.createdAt === 'string') {\n        decoded.createdAt = (0, _parseDate.default)(decoded.createdAt);\n      }\n\n      if (decoded.updatedAt && typeof decoded.updatedAt === 'string') {\n        decoded.updatedAt = (0, _parseDate.default)(decoded.updatedAt);\n      }\n\n      if (!decoded.updatedAt && decoded.createdAt) {\n        decoded.updatedAt = decoded.createdAt;\n      }\n\n      stateController.commitServerChanges(this._getStateIdentifier(), decoded);\n    }\n  }, {\n    key: \"_setExisted\",\n    value: function value(existed\n    /*: boolean*/\n    ) {\n      var stateController = _CoreManager.default.getObjectStateController();\n\n      var state = stateController.getState(this._getStateIdentifier());\n\n      if (state) {\n        state.existed = existed;\n      }\n    }\n  }, {\n    key: \"_migrateId\",\n    value: function value(serverId\n    /*: string*/\n    ) {\n      if (this._localId && serverId) {\n        if (singleInstance) {\n          var stateController = _CoreManager.default.getObjectStateController();\n\n          var oldState = stateController.removeState(this._getStateIdentifier());\n          this.id = serverId;\n          delete this._localId;\n\n          if (oldState) {\n            stateController.initializeState(this._getStateIdentifier(), oldState);\n          }\n        } else {\n          this.id = serverId;\n          delete this._localId;\n        }\n      }\n    }\n  }, {\n    key: \"_handleSaveResponse\",\n    value: function value(response\n    /*: AttributeMap*/\n    , status\n    /*: number*/\n    ) {\n      var changes = {};\n\n      var stateController = _CoreManager.default.getObjectStateController();\n\n      var pending = stateController.popPendingState(this._getStateIdentifier());\n\n      for (var attr in pending) {\n        if (pending[attr] instanceof _ParseOp.RelationOp) {\n          changes[attr] = pending[attr].applyTo(undefined, this, attr);\n        } else if (!(attr in response)) {\n          // Only SetOps and UnsetOps should not come back with results\n          changes[attr] = pending[attr].applyTo(undefined);\n        }\n      }\n\n      for (attr in response) {\n        if ((attr === 'createdAt' || attr === 'updatedAt') && typeof response[attr] === 'string') {\n          changes[attr] = (0, _parseDate.default)(response[attr]);\n        } else if (attr === 'ACL') {\n          changes[attr] = new _ParseACL.default(response[attr]);\n        } else if (attr !== 'objectId') {\n          var val = (0, _decode.default)(response[attr]);\n\n          if (val && (0, _getPrototypeOf.default)(val) === Object.prototype) {\n            changes[attr] = _objectSpread(_objectSpread({}, this.attributes[attr]), val);\n          } else {\n            changes[attr] = val;\n          }\n\n          if (changes[attr] instanceof _ParseOp.UnsetOp) {\n            changes[attr] = undefined;\n          }\n        }\n      }\n\n      if (changes.createdAt && !changes.updatedAt) {\n        changes.updatedAt = changes.createdAt;\n      }\n\n      this._migrateId(response.objectId);\n\n      if (status !== 201) {\n        this._setExisted(true);\n      }\n\n      stateController.commitServerChanges(this._getStateIdentifier(), changes);\n    }\n  }, {\n    key: \"_handleSaveError\",\n    value: function value() {\n      var stateController = _CoreManager.default.getObjectStateController();\n\n      stateController.mergeFirstPendingState(this._getStateIdentifier());\n    }\n  }, {\n    key: \"initialize\",\n    value:\n    /** Public methods **/\n    function value() {// NOOP\n    }\n    /**\r\n     * Returns a JSON version of the object suitable for saving to Parse.\r\n     *\r\n     * @param seen\r\n     * @param offline\r\n     * @returns {object}\r\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function value(seen\n    /*: Array<any> | void*/\n    , offline\n    /*:: ?: boolean*/\n    )\n    /*: AttributeMap*/\n    {\n      var seenEntry = this.id ? this.className + ':' + this.id : this;\n      seen = seen || [seenEntry];\n      var json = {};\n      var attrs = this.attributes;\n\n      for (var _attr5 in attrs) {\n        if ((_attr5 === 'createdAt' || _attr5 === 'updatedAt') && attrs[_attr5].toJSON) {\n          json[_attr5] = attrs[_attr5].toJSON();\n        } else {\n          json[_attr5] = (0, _encode.default)(attrs[_attr5], false, false, seen, offline);\n        }\n      }\n\n      var pending = this._getPendingOps();\n\n      for (var _attr6 in pending[0]) {\n        json[_attr6] = pending[0][_attr6].toJSON(offline);\n      }\n\n      if (this.id) {\n        json.objectId = this.id;\n      }\n\n      return json;\n    }\n    /**\r\n     * Determines whether this ParseObject is equal to another ParseObject\r\n     *\r\n     * @param {object} other - An other object ot compare\r\n     * @returns {boolean}\r\n     */\n\n  }, {\n    key: \"equals\",\n    value: function value(other\n    /*: mixed*/\n    )\n    /*: boolean*/\n    {\n      if (this === other) {\n        return true;\n      }\n\n      return other instanceof ParseObject && this.className === other.className && this.id === other.id && typeof this.id !== 'undefined';\n    }\n    /**\r\n     * Returns true if this object has been modified since its last\r\n     * save/refresh.  If an attribute is specified, it returns true only if that\r\n     * particular attribute has been modified since the last save/refresh.\r\n     *\r\n     * @param {string} attr An attribute name (optional).\r\n     * @returns {boolean}\r\n     */\n\n  }, {\n    key: \"dirty\",\n    value: function value(attr\n    /*:: ?: string*/\n    )\n    /*: boolean*/\n    {\n      if (!this.id) {\n        return true;\n      }\n\n      var pendingOps = this._getPendingOps();\n\n      var dirtyObjects = this._getDirtyObjectAttributes();\n\n      if (attr) {\n        if (dirtyObjects.hasOwnProperty(attr)) {\n          return true;\n        }\n\n        for (var i = 0; i < pendingOps.length; i++) {\n          if (pendingOps[i].hasOwnProperty(attr)) {\n            return true;\n          }\n        }\n\n        return false;\n      }\n\n      if ((0, _keys.default)(pendingOps[0]).length !== 0) {\n        return true;\n      }\n\n      if ((0, _keys.default)(dirtyObjects).length !== 0) {\n        return true;\n      }\n\n      return false;\n    }\n    /**\r\n     * Returns an array of keys that have been modified since last save/refresh\r\n     *\r\n     * @returns {string[]}\r\n     */\n\n  }, {\n    key: \"dirtyKeys\",\n    value: function value()\n    /*: Array<string>*/\n    {\n      var pendingOps = this._getPendingOps();\n\n      var keys = {};\n\n      for (var i = 0; i < pendingOps.length; i++) {\n        for (var _attr7 in pendingOps[i]) {\n          keys[_attr7] = true;\n        }\n      }\n\n      var dirtyObjects = this._getDirtyObjectAttributes();\n\n      for (var _attr8 in dirtyObjects) {\n        keys[_attr8] = true;\n      }\n\n      return (0, _keys.default)(keys);\n    }\n    /**\r\n     * Returns true if the object has been fetched.\r\n     *\r\n     * @returns {boolean}\r\n     */\n\n  }, {\n    key: \"isDataAvailable\",\n    value: function value()\n    /*: boolean*/\n    {\n      var serverData = this._getServerData();\n\n      return !!(0, _keys.default)(serverData).length;\n    }\n    /**\r\n     * Gets a Pointer referencing this Object.\r\n     *\r\n     * @returns {Pointer}\r\n     */\n\n  }, {\n    key: \"toPointer\",\n    value: function value()\n    /*: Pointer*/\n    {\n      if (!this.id) {\n        throw new Error('Cannot create a pointer to an unsaved ParseObject');\n      }\n\n      return {\n        __type: 'Pointer',\n        className: this.className,\n        objectId: this.id\n      };\n    }\n    /**\r\n     * Gets a Pointer referencing this Object.\r\n     *\r\n     * @returns {Pointer}\r\n     */\n\n  }, {\n    key: \"toOfflinePointer\",\n    value: function value()\n    /*: Pointer*/\n    {\n      if (!this._localId) {\n        throw new Error('Cannot create a offline pointer to a saved ParseObject');\n      }\n\n      return {\n        __type: 'Object',\n        className: this.className,\n        _localId: this._localId\n      };\n    }\n    /**\r\n     * Gets the value of an attribute.\r\n     *\r\n     * @param {string} attr The string name of an attribute.\r\n     * @returns {*}\r\n     */\n\n  }, {\n    key: \"get\",\n    value: function value(attr\n    /*: string*/\n    )\n    /*: mixed*/\n    {\n      return this.attributes[attr];\n    }\n    /**\r\n     * Gets a relation on the given class for the attribute.\r\n     *\r\n     * @param {string} attr The attribute to get the relation for.\r\n     * @returns {Parse.Relation}\r\n     */\n\n  }, {\n    key: \"relation\",\n    value: function value(attr\n    /*: string*/\n    )\n    /*: ParseRelation*/\n    {\n      var value = this.get(attr);\n\n      if (value) {\n        if (!(value instanceof _ParseRelation.default)) {\n          throw new Error('Called relation() on non-relation field ' + attr);\n        }\n\n        value._ensureParentAndKey(this, attr);\n\n        return value;\n      }\n\n      return new _ParseRelation.default(this, attr);\n    }\n    /**\r\n     * Gets the HTML-escaped value of an attribute.\r\n     *\r\n     * @param {string} attr The string name of an attribute.\r\n     * @returns {string}\r\n     */\n\n  }, {\n    key: \"escape\",\n    value: function value(attr\n    /*: string*/\n    )\n    /*: string*/\n    {\n      var val = this.attributes[attr];\n\n      if (val == null) {\n        return '';\n      }\n\n      if (typeof val !== 'string') {\n        if (typeof val.toString !== 'function') {\n          return '';\n        }\n\n        val = val.toString();\n      }\n\n      return (0, _escape2.default)(val);\n    }\n    /**\r\n     * Returns <code>true</code> if the attribute contains a value that is not\r\n     * null or undefined.\r\n     *\r\n     * @param {string} attr The string name of the attribute.\r\n     * @returns {boolean}\r\n     */\n\n  }, {\n    key: \"has\",\n    value: function value(attr\n    /*: string*/\n    )\n    /*: boolean*/\n    {\n      var attributes = this.attributes;\n\n      if (attributes.hasOwnProperty(attr)) {\n        return attributes[attr] != null;\n      }\n\n      return false;\n    }\n    /**\r\n     * Sets a hash of model attributes on the object.\r\n     *\r\n     * <p>You can call it with an object containing keys and values, with one\r\n     * key and value, or dot notation.  For example:<pre>\r\n     *   gameTurn.set({\r\n     *     player: player1,\r\n     *     diceRoll: 2\r\n     *   }, {\r\n     *     error: function(gameTurnAgain, error) {\r\n     *       // The set failed validation.\r\n     *     }\r\n     *   });\r\n     *\r\n     *   game.set(\"currentPlayer\", player2, {\r\n     *     error: function(gameTurnAgain, error) {\r\n     *       // The set failed validation.\r\n     *     }\r\n     *   });\r\n     *\r\n     *   game.set(\"finished\", true);</pre></p>\r\n     *\r\n     *   game.set(\"player.score\", 10);</pre></p>\r\n     *\r\n     * @param {(string|object)} key The key to set.\r\n     * @param {(string|object)} value The value to give it.\r\n     * @param {object} options A set of options for the set.\r\n     *     The only supported option is <code>error</code>.\r\n     * @returns {(ParseObject|boolean)} true if the set succeeded.\r\n     */\n\n  }, {\n    key: \"set\",\n    value: function value(key\n    /*: mixed*/\n    , _value\n    /*: mixed*/\n    , options\n    /*:: ?: mixed*/\n    )\n    /*: ParseObject | boolean*/\n    {\n      var changes = {};\n      var newOps = {};\n\n      if (key && (0, _typeof2.default)(key) === 'object') {\n        changes = key;\n        options = _value;\n      } else if (typeof key === 'string') {\n        changes[key] = _value;\n      } else {\n        return this;\n      }\n\n      options = options || {};\n      var readonly = [];\n\n      if (typeof this.constructor.readOnlyAttributes === 'function') {\n        readonly = (0, _concat.default)(readonly).call(readonly, this.constructor.readOnlyAttributes());\n      }\n\n      for (var k in changes) {\n        if (k === 'createdAt' || k === 'updatedAt') {\n          // This property is read-only, but for legacy reasons we silently\n          // ignore it\n          continue;\n        }\n\n        if ((0, _indexOf.default)(readonly).call(readonly, k) > -1) {\n          throw new Error('Cannot modify readonly attribute: ' + k);\n        }\n\n        if (options.unset) {\n          newOps[k] = new _ParseOp.UnsetOp();\n        } else if (changes[k] instanceof _ParseOp.Op) {\n          newOps[k] = changes[k];\n        } else if (changes[k] && (0, _typeof2.default)(changes[k]) === 'object' && typeof changes[k].__op === 'string') {\n          newOps[k] = (0, _ParseOp.opFromJSON)(changes[k]);\n        } else if (k === 'objectId' || k === 'id') {\n          if (typeof changes[k] === 'string') {\n            this.id = changes[k];\n          }\n        } else if (k === 'ACL' && (0, _typeof2.default)(changes[k]) === 'object' && !(changes[k] instanceof _ParseACL.default)) {\n          newOps[k] = new _ParseOp.SetOp(new _ParseACL.default(changes[k]));\n        } else if (changes[k] instanceof _ParseRelation.default) {\n          var relation = new _ParseRelation.default(this, k);\n          relation.targetClassName = changes[k].targetClassName;\n          newOps[k] = new _ParseOp.SetOp(relation);\n        } else {\n          newOps[k] = new _ParseOp.SetOp(changes[k]);\n        }\n      }\n\n      var currentAttributes = this.attributes; // Calculate new values\n\n      var newValues = {};\n\n      for (var _attr9 in newOps) {\n        if (newOps[_attr9] instanceof _ParseOp.RelationOp) {\n          newValues[_attr9] = newOps[_attr9].applyTo(currentAttributes[_attr9], this, _attr9);\n        } else if (!(newOps[_attr9] instanceof _ParseOp.UnsetOp)) {\n          newValues[_attr9] = newOps[_attr9].applyTo(currentAttributes[_attr9]);\n        }\n      } // Validate changes\n\n\n      if (!options.ignoreValidation) {\n        var validation = this.validate(newValues);\n\n        if (validation) {\n          if (typeof options.error === 'function') {\n            options.error(this, validation);\n          }\n\n          return false;\n        }\n      } // Consolidate Ops\n\n\n      var pendingOps = this._getPendingOps();\n\n      var last = pendingOps.length - 1;\n\n      var stateController = _CoreManager.default.getObjectStateController();\n\n      for (var _attr10 in newOps) {\n        var nextOp = newOps[_attr10].mergeWith(pendingOps[last][_attr10]);\n\n        stateController.setPendingOp(this._getStateIdentifier(), _attr10, nextOp);\n      }\n\n      return this;\n    }\n    /**\r\n     * Remove an attribute from the model. This is a noop if the attribute doesn't\r\n     * exist.\r\n     *\r\n     * @param {string} attr The string name of an attribute.\r\n     * @param options\r\n     * @returns {(ParseObject | boolean)}\r\n     */\n\n  }, {\n    key: \"unset\",\n    value: function value(attr\n    /*: string*/\n    , options\n    /*:: ?: { [opt: string]: mixed }*/\n    )\n    /*: ParseObject | boolean*/\n    {\n      options = options || {};\n      options.unset = true;\n      return this.set(attr, null, options);\n    }\n    /**\r\n     * Atomically increments the value of the given attribute the next time the\r\n     * object is saved. If no amount is specified, 1 is used by default.\r\n     *\r\n     * @param attr {String} The key.\r\n     * @param amount {Number} The amount to increment by (optional).\r\n     * @returns {(ParseObject|boolean)}\r\n     */\n\n  }, {\n    key: \"increment\",\n    value: function value(attr\n    /*: string*/\n    , amount\n    /*:: ?: number*/\n    )\n    /*: ParseObject | boolean*/\n    {\n      if (typeof amount === 'undefined') {\n        amount = 1;\n      }\n\n      if (typeof amount !== 'number') {\n        throw new Error('Cannot increment by a non-numeric amount.');\n      }\n\n      return this.set(attr, new _ParseOp.IncrementOp(amount));\n    }\n    /**\r\n     * Atomically decrements the value of the given attribute the next time the\r\n     * object is saved. If no amount is specified, 1 is used by default.\r\n     *\r\n     * @param attr {String} The key.\r\n     * @param amount {Number} The amount to decrement by (optional).\r\n     * @returns {(ParseObject | boolean)}\r\n     */\n\n  }, {\n    key: \"decrement\",\n    value: function value(attr\n    /*: string*/\n    , amount\n    /*:: ?: number*/\n    )\n    /*: ParseObject | boolean*/\n    {\n      if (typeof amount === 'undefined') {\n        amount = 1;\n      }\n\n      if (typeof amount !== 'number') {\n        throw new Error('Cannot decrement by a non-numeric amount.');\n      }\n\n      return this.set(attr, new _ParseOp.IncrementOp(amount * -1));\n    }\n    /**\r\n     * Atomically add an object to the end of the array associated with a given\r\n     * key.\r\n     *\r\n     * @param attr {String} The key.\r\n     * @param item {} The item to add.\r\n     * @returns {(ParseObject | boolean)}\r\n     */\n\n  }, {\n    key: \"add\",\n    value: function value(attr\n    /*: string*/\n    , item\n    /*: mixed*/\n    )\n    /*: ParseObject | boolean*/\n    {\n      return this.set(attr, new _ParseOp.AddOp([item]));\n    }\n    /**\r\n     * Atomically add the objects to the end of the array associated with a given\r\n     * key.\r\n     *\r\n     * @param attr {String} The key.\r\n     * @param items {Object[]} The items to add.\r\n     * @returns {(ParseObject | boolean)}\r\n     */\n\n  }, {\n    key: \"addAll\",\n    value: function value(attr\n    /*: string*/\n    , items\n    /*: Array<mixed>*/\n    )\n    /*: ParseObject | boolean*/\n    {\n      return this.set(attr, new _ParseOp.AddOp(items));\n    }\n    /**\r\n     * Atomically add an object to the array associated with a given key, only\r\n     * if it is not already present in the array. The position of the insert is\r\n     * not guaranteed.\r\n     *\r\n     * @param attr {String} The key.\r\n     * @param item {} The object to add.\r\n     * @returns {(ParseObject | boolean)}\r\n     */\n\n  }, {\n    key: \"addUnique\",\n    value: function value(attr\n    /*: string*/\n    , item\n    /*: mixed*/\n    )\n    /*: ParseObject | boolean*/\n    {\n      return this.set(attr, new _ParseOp.AddUniqueOp([item]));\n    }\n    /**\r\n     * Atomically add the objects to the array associated with a given key, only\r\n     * if it is not already present in the array. The position of the insert is\r\n     * not guaranteed.\r\n     *\r\n     * @param attr {String} The key.\r\n     * @param items {Object[]} The objects to add.\r\n     * @returns {(ParseObject | boolean)}\r\n     */\n\n  }, {\n    key: \"addAllUnique\",\n    value: function value(attr\n    /*: string*/\n    , items\n    /*: Array<mixed>*/\n    )\n    /*: ParseObject | boolean*/\n    {\n      return this.set(attr, new _ParseOp.AddUniqueOp(items));\n    }\n    /**\r\n     * Atomically remove all instances of an object from the array associated\r\n     * with a given key.\r\n     *\r\n     * @param attr {String} The key.\r\n     * @param item {} The object to remove.\r\n     * @returns {(ParseObject | boolean)}\r\n     */\n\n  }, {\n    key: \"remove\",\n    value: function value(attr\n    /*: string*/\n    , item\n    /*: mixed*/\n    )\n    /*: ParseObject | boolean*/\n    {\n      return this.set(attr, new _ParseOp.RemoveOp([item]));\n    }\n    /**\r\n     * Atomically remove all instances of the objects from the array associated\r\n     * with a given key.\r\n     *\r\n     * @param attr {String} The key.\r\n     * @param items {Object[]} The object to remove.\r\n     * @returns {(ParseObject | boolean)}\r\n     */\n\n  }, {\n    key: \"removeAll\",\n    value: function value(attr\n    /*: string*/\n    , items\n    /*: Array<mixed>*/\n    )\n    /*: ParseObject | boolean*/\n    {\n      return this.set(attr, new _ParseOp.RemoveOp(items));\n    }\n    /**\r\n     * Returns an instance of a subclass of Parse.Op describing what kind of\r\n     * modification has been performed on this field since the last time it was\r\n     * saved. For example, after calling object.increment(\"x\"), calling\r\n     * object.op(\"x\") would return an instance of Parse.Op.Increment.\r\n     *\r\n     * @param attr {String} The key.\r\n     * @returns {Parse.Op} The operation, or undefined if none.\r\n     */\n\n  }, {\n    key: \"op\",\n    value: function value(attr\n    /*: string*/\n    )\n    /*: ?Op*/\n    {\n      var pending = this._getPendingOps();\n\n      for (var i = pending.length; i--;) {\n        if (pending[i][attr]) {\n          return pending[i][attr];\n        }\n      }\n    }\n    /**\r\n     * Creates a new model with identical attributes to this one.\r\n     *\r\n     * @returns {Parse.Object}\r\n     */\n\n  }, {\n    key: \"clone\",\n    value: function clone()\n    /*: any*/\n    {\n      var clone = new this.constructor(this.className);\n      var attributes = this.attributes;\n\n      if (typeof this.constructor.readOnlyAttributes === 'function') {\n        var readonly = this.constructor.readOnlyAttributes() || []; // Attributes are frozen, so we have to rebuild an object,\n        // rather than delete readonly keys\n\n        var copy = {};\n\n        for (var a in attributes) {\n          if ((0, _indexOf.default)(readonly).call(readonly, a) < 0) {\n            copy[a] = attributes[a];\n          }\n        }\n\n        attributes = copy;\n      }\n\n      if (clone.set) {\n        clone.set(attributes);\n      }\n\n      return clone;\n    }\n    /**\r\n     * Creates a new instance of this object. Not to be confused with clone()\r\n     *\r\n     * @returns {Parse.Object}\r\n     */\n\n  }, {\n    key: \"newInstance\",\n    value: function value()\n    /*: any*/\n    {\n      var clone = new this.constructor(this.className);\n      clone.id = this.id;\n\n      if (singleInstance) {\n        // Just return an object with the right id\n        return clone;\n      }\n\n      var stateController = _CoreManager.default.getObjectStateController();\n\n      if (stateController) {\n        stateController.duplicateState(this._getStateIdentifier(), clone._getStateIdentifier());\n      }\n\n      return clone;\n    }\n    /**\r\n     * Returns true if this object has never been saved to Parse.\r\n     *\r\n     * @returns {boolean}\r\n     */\n\n  }, {\n    key: \"isNew\",\n    value: function value()\n    /*: boolean*/\n    {\n      return !this.id;\n    }\n    /**\r\n     * Returns true if this object was created by the Parse server when the\r\n     * object might have already been there (e.g. in the case of a Facebook\r\n     * login)\r\n     *\r\n     * @returns {boolean}\r\n     */\n\n  }, {\n    key: \"existed\",\n    value: function value()\n    /*: boolean*/\n    {\n      if (!this.id) {\n        return false;\n      }\n\n      var stateController = _CoreManager.default.getObjectStateController();\n\n      var state = stateController.getState(this._getStateIdentifier());\n\n      if (state) {\n        return state.existed;\n      }\n\n      return false;\n    }\n    /**\r\n     * Returns true if this object exists on the Server\r\n     *\r\n     * @param {object} options\r\n     * Valid options are:<ul>\r\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\r\n     *     be used for this request.\r\n     *   <li>sessionToken: A valid session token, used for making a request on\r\n     *       behalf of a specific user.\r\n     * </ul>\r\n     * @returns {Promise<boolean>} A boolean promise that is fulfilled if object exists.\r\n     */\n\n  }, {\n    key: \"exists\",\n    value: function () {\n      var _exists = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee(options\n      /*:: ?: RequestOptions*/\n      ) {\n        var query;\n        return _regenerator.default.wrap(function (_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (this.id) {\n                  _context.next = 2;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", false);\n\n              case 2:\n                _context.prev = 2;\n                query = new _ParseQuery.default(this.className);\n                _context.next = 6;\n                return query.get(this.id, options);\n\n              case 6:\n                return _context.abrupt(\"return\", true);\n\n              case 9:\n                _context.prev = 9;\n                _context.t0 = _context[\"catch\"](2);\n\n                if (!(_context.t0.code === _ParseError.default.OBJECT_NOT_FOUND)) {\n                  _context.next = 13;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", false);\n\n              case 13:\n                throw _context.t0;\n\n              case 14:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[2, 9]]);\n      }));\n\n      return function () {\n        return _exists.apply(this, arguments);\n      };\n    }()\n    /**\r\n     * Checks if the model is currently in a valid state.\r\n     *\r\n     * @returns {boolean}\r\n     */\n\n  }, {\n    key: \"isValid\",\n    value: function value()\n    /*: boolean*/\n    {\n      return !this.validate(this.attributes);\n    }\n    /**\r\n     * You should not call this function directly unless you subclass\r\n     * <code>Parse.Object</code>, in which case you can override this method\r\n     * to provide additional validation on <code>set</code> and\r\n     * <code>save</code>.  Your implementation should return\r\n     *\r\n     * @param {object} attrs The current data to validate.\r\n     * @returns {Parse.Error|boolean} False if the data is valid.  An error object otherwise.\r\n     * @see Parse.Object#set\r\n     */\n\n  }, {\n    key: \"validate\",\n    value: function value(attrs\n    /*: AttributeMap*/\n    )\n    /*: ParseError | boolean*/\n    {\n      if (attrs.hasOwnProperty('ACL') && !(attrs.ACL instanceof _ParseACL.default)) {\n        return new _ParseError.default(_ParseError.default.OTHER_CAUSE, 'ACL must be a Parse ACL.');\n      }\n\n      for (var _key in attrs) {\n        if (!/^[A-Za-z][0-9A-Za-z_.]*$/.test(_key)) {\n          return new _ParseError.default(_ParseError.default.INVALID_KEY_NAME);\n        }\n      }\n\n      return false;\n    }\n    /**\r\n     * Returns the ACL for this object.\r\n     *\r\n     * @returns {Parse.ACL} An instance of Parse.ACL.\r\n     * @see Parse.Object#get\r\n     */\n\n  }, {\n    key: \"getACL\",\n    value: function value()\n    /*: ?ParseACL*/\n    {\n      var acl = this.get('ACL');\n\n      if (acl instanceof _ParseACL.default) {\n        return acl;\n      }\n\n      return null;\n    }\n    /**\r\n     * Sets the ACL to be used for this object.\r\n     *\r\n     * @param {Parse.ACL} acl An instance of Parse.ACL.\r\n     * @param {object} options\r\n     * @returns {(ParseObject | boolean)} Whether the set passed validation.\r\n     * @see Parse.Object#set\r\n     */\n\n  }, {\n    key: \"setACL\",\n    value: function value(acl\n    /*: ParseACL*/\n    , options\n    /*:: ?: mixed*/\n    )\n    /*: ParseObject | boolean*/\n    {\n      return this.set('ACL', acl, options);\n    }\n    /**\r\n     * Clears any (or specific) changes to this object made since the last call to save()\r\n     *\r\n     * @param {string} [keys] - specify which fields to revert\r\n     */\n\n  }, {\n    key: \"revert\",\n    value: function value()\n    /*: void*/\n    {\n      var keysToRevert;\n\n      for (var _len = arguments.length, keys = new Array(_len), _key2 = 0; _key2 < _len; _key2++) {\n        keys[_key2] = arguments[_key2];\n      }\n\n      if (keys.length) {\n        keysToRevert = [];\n\n        var _iterator = _createForOfIteratorHelper(keys),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var _key3 = _step.value;\n\n            if (typeof _key3 === 'string') {\n              keysToRevert.push(_key3);\n            } else {\n              throw new Error('Parse.Object#revert expects either no, or a list of string, arguments.');\n            }\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      }\n\n      this._clearPendingOps(keysToRevert);\n    }\n    /**\r\n     * Clears all attributes on a model\r\n     *\r\n     * @returns {(ParseObject | boolean)}\r\n     */\n\n  }, {\n    key: \"clear\",\n    value: function value()\n    /*: ParseObject | boolean*/\n    {\n      var attributes = this.attributes;\n      var erasable = {};\n      var readonly = ['createdAt', 'updatedAt'];\n\n      if (typeof this.constructor.readOnlyAttributes === 'function') {\n        readonly = (0, _concat.default)(readonly).call(readonly, this.constructor.readOnlyAttributes());\n      }\n\n      for (var _attr11 in attributes) {\n        if ((0, _indexOf.default)(readonly).call(readonly, _attr11) < 0) {\n          erasable[_attr11] = true;\n        }\n      }\n\n      return this.set(erasable, {\n        unset: true\n      });\n    }\n    /**\r\n     * Fetch the model from the server. If the server's representation of the\r\n     * model differs from its current attributes, they will be overriden.\r\n     *\r\n     * @param {object} options\r\n     * Valid options are:<ul>\r\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\r\n     *     be used for this request.\r\n     *   <li>sessionToken: A valid session token, used for making a request on\r\n     *       behalf of a specific user.\r\n     *   <li>include: The name(s) of the key(s) to include. Can be a string, an array of strings,\r\n     *       or an array of array of strings.\r\n     *   <li>context: A dictionary that is accessible in Cloud Code `beforeFind` trigger.\r\n     * </ul>\r\n     * @returns {Promise} A promise that is fulfilled when the fetch\r\n     *     completes.\r\n     */\n\n  }, {\n    key: \"fetch\",\n    value: function value(options\n    /*: RequestOptions*/\n    )\n    /*: Promise*/\n    {\n      options = options || {};\n      var fetchOptions = {};\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        fetchOptions.useMasterKey = options.useMasterKey;\n      }\n\n      if (options.hasOwnProperty('sessionToken')) {\n        fetchOptions.sessionToken = options.sessionToken;\n      }\n\n      if (options.hasOwnProperty('context') && (0, _typeof2.default)(options.context) === 'object') {\n        fetchOptions.context = options.context;\n      }\n\n      if (options.hasOwnProperty('include')) {\n        fetchOptions.include = [];\n\n        if ((0, _isArray.default)(options.include)) {\n          var _context2;\n\n          (0, _forEach.default)(_context2 = options.include).call(_context2, function (key) {\n            if ((0, _isArray.default)(key)) {\n              var _context3;\n\n              fetchOptions.include = (0, _concat.default)(_context3 = fetchOptions.include).call(_context3, key);\n            } else {\n              fetchOptions.include.push(key);\n            }\n          });\n        } else {\n          fetchOptions.include.push(options.include);\n        }\n      }\n\n      var controller = _CoreManager.default.getObjectController();\n\n      return controller.fetch(this, true, fetchOptions);\n    }\n    /**\r\n     * Fetch the model from the server. If the server's representation of the\r\n     * model differs from its current attributes, they will be overriden.\r\n     *\r\n     * Includes nested Parse.Objects for the provided key. You can use dot\r\n     * notation to specify which fields in the included object are also fetched.\r\n     *\r\n     * @param {string | Array<string | Array<string>>} keys The name(s) of the key(s) to include.\r\n     * @param {object} options\r\n     * Valid options are:<ul>\r\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\r\n     *     be used for this request.\r\n     *   <li>sessionToken: A valid session token, used for making a request on\r\n     *       behalf of a specific user.\r\n     * </ul>\r\n     * @returns {Promise} A promise that is fulfilled when the fetch\r\n     *     completes.\r\n     */\n\n  }, {\n    key: \"fetchWithInclude\",\n    value: function value(keys\n    /*: String | Array<string | Array<string>>*/\n    , options\n    /*: RequestOptions*/\n    )\n    /*: Promise*/\n    {\n      options = options || {};\n      options.include = keys;\n      return this.fetch(options);\n    }\n    /**\r\n     * Saves this object to the server at some unspecified time in the future,\r\n     * even if Parse is currently inaccessible.\r\n     *\r\n     * Use this when you may not have a solid network connection, and don't need to know when the save completes.\r\n     * If there is some problem with the object such that it can't be saved, it will be silently discarded.\r\n     *\r\n     * Objects saved with this method will be stored locally in an on-disk cache until they can be delivered to Parse.\r\n     * They will be sent immediately if possible. Otherwise, they will be sent the next time a network connection is\r\n     * available. Objects saved this way will persist even after the app is closed, in which case they will be sent the\r\n     * next time the app is opened.\r\n     *\r\n     * @param {object} [options]\r\n     * Used to pass option parameters to method if arg1 and arg2 were both passed as strings.\r\n     * Valid options are:\r\n     * <ul>\r\n     * <li>sessionToken: A valid session token, used for making a request on\r\n     * behalf of a specific user.\r\n     * <li>cascadeSave: If `false`, nested objects will not be saved (default is `true`).\r\n     * <li>context: A dictionary that is accessible in Cloud Code `beforeSave` and `afterSave` triggers.\r\n     * </ul>\r\n     * @returns {Promise} A promise that is fulfilled when the save\r\n     * completes.\r\n     */\n\n  }, {\n    key: \"saveEventually\",\n    value: function () {\n      var _saveEventually = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee2(options\n      /*: SaveOptions*/\n      ) {\n        return _regenerator.default.wrap(function (_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.prev = 0;\n                _context4.next = 3;\n                return this.save(null, options);\n\n              case 3:\n                _context4.next = 11;\n                break;\n\n              case 5:\n                _context4.prev = 5;\n                _context4.t0 = _context4[\"catch\"](0);\n\n                if (!(_context4.t0.message === 'XMLHttpRequest failed: \"Unable to connect to the Parse API\"')) {\n                  _context4.next = 11;\n                  break;\n                }\n\n                _context4.next = 10;\n                return _EventuallyQueue.default.save(this, options);\n\n              case 10:\n                _EventuallyQueue.default.poll();\n\n              case 11:\n                return _context4.abrupt(\"return\", this);\n\n              case 12:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee2, this, [[0, 5]]);\n      }));\n\n      return function () {\n        return _saveEventually.apply(this, arguments);\n      };\n    }()\n    /**\r\n     * Set a hash of model attributes, and save the model to the server.\r\n     * updatedAt will be updated when the request returns.\r\n     * You can either call it as:<pre>\r\n     * object.save();</pre>\r\n     * or<pre>\r\n     * object.save(attrs);</pre>\r\n     * or<pre>\r\n     * object.save(null, options);</pre>\r\n     * or<pre>\r\n     * object.save(attrs, options);</pre>\r\n     * or<pre>\r\n     * object.save(key, value);</pre>\r\n     * or<pre>\r\n     * object.save(key, value, options);</pre>\r\n     *\r\n     * Example 1: <pre>\r\n     * gameTurn.save({\r\n     * player: \"Jake Cutter\",\r\n     * diceRoll: 2\r\n     * }).then(function(gameTurnAgain) {\r\n     * // The save was successful.\r\n     * }, function(error) {\r\n     * // The save failed.  Error is an instance of Parse.Error.\r\n     * });</pre>\r\n     *\r\n     * Example 2: <pre>\r\n     * gameTurn.save(\"player\", \"Jake Cutter\");</pre>\r\n     *\r\n     * @param {string | object | null} [arg1]\r\n     * Valid options are:<ul>\r\n     * <li>`Object` - Key/value pairs to update on the object.</li>\r\n     * <li>`String` Key - Key of attribute to update (requires arg2 to also be string)</li>\r\n     * <li>`null` - Passing null for arg1 allows you to save the object with options passed in arg2.</li>\r\n     * </ul>\r\n     * @param {string | object} [arg2]\r\n     * <ul>\r\n     * <li>`String` Value - If arg1 was passed as a key, arg2 is the value that should be set on that key.</li>\r\n     * <li>`Object` Options - Valid options are:\r\n     * <ul>\r\n     * <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\r\n     * be used for this request.\r\n     * <li>sessionToken: A valid session token, used for making a request on\r\n     * behalf of a specific user.\r\n     * <li>cascadeSave: If `false`, nested objects will not be saved (default is `true`).\r\n     * <li>context: A dictionary that is accessible in Cloud Code `beforeSave` and `afterSave` triggers.\r\n     * </ul>\r\n     * </li>\r\n     * </ul>\r\n     * @param {object} [arg3]\r\n     * Used to pass option parameters to method if arg1 and arg2 were both passed as strings.\r\n     * Valid options are:\r\n     * <ul>\r\n     * <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\r\n     * be used for this request.\r\n     * <li>sessionToken: A valid session token, used for making a request on\r\n     * behalf of a specific user.\r\n     * <li>cascadeSave: If `false`, nested objects will not be saved (default is `true`).\r\n     * <li>context: A dictionary that is accessible in Cloud Code `beforeSave` and `afterSave` triggers.\r\n     * </ul>\r\n     * @returns {Promise} A promise that is fulfilled when the save\r\n     * completes.\r\n     */\n\n  }, {\n    key: \"save\",\n    value: function value(arg1\n    /*: ?string | { [attr: string]: mixed }*/\n    , arg2\n    /*: SaveOptions | mixed*/\n    , arg3\n    /*:: ?: SaveOptions*/\n    )\n    /*: Promise*/\n    {\n      var _this = this;\n\n      var attrs;\n      var options;\n\n      if ((0, _typeof2.default)(arg1) === 'object' || typeof arg1 === 'undefined') {\n        attrs = arg1;\n\n        if ((0, _typeof2.default)(arg2) === 'object') {\n          options = arg2;\n        }\n      } else {\n        attrs = {};\n        attrs[arg1] = arg2;\n        options = arg3;\n      }\n\n      if (attrs) {\n        var validation = this.validate(attrs);\n\n        if (validation) {\n          return _promise.default.reject(validation);\n        }\n\n        this.set(attrs, options);\n      }\n\n      options = options || {};\n      var saveOptions = {};\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        saveOptions.useMasterKey = !!options.useMasterKey;\n      }\n\n      if (options.hasOwnProperty('sessionToken') && typeof options.sessionToken === 'string') {\n        saveOptions.sessionToken = options.sessionToken;\n      }\n\n      if (options.hasOwnProperty('installationId') && typeof options.installationId === 'string') {\n        saveOptions.installationId = options.installationId;\n      }\n\n      if (options.hasOwnProperty('context') && (0, _typeof2.default)(options.context) === 'object') {\n        saveOptions.context = options.context;\n      }\n\n      var controller = _CoreManager.default.getObjectController();\n\n      var unsaved = options.cascadeSave !== false ? (0, _unsavedChildren.default)(this) : null;\n      return controller.save(unsaved, saveOptions).then(function () {\n        return controller.save(_this, saveOptions);\n      });\n    }\n    /**\r\n     * Deletes this object from the server at some unspecified time in the future,\r\n     * even if Parse is currently inaccessible.\r\n     *\r\n     * Use this when you may not have a solid network connection,\r\n     * and don't need to know when the delete completes. If there is some problem with the object\r\n     * such that it can't be deleted, the request will be silently discarded.\r\n     *\r\n     * Delete instructions made with this method will be stored locally in an on-disk cache until they can be transmitted\r\n     * to Parse. They will be sent immediately if possible. Otherwise, they will be sent the next time a network connection\r\n     * is available. Delete requests will persist even after the app is closed, in which case they will be sent the\r\n     * next time the app is opened.\r\n     *\r\n     * @param {object} [options]\r\n     * Valid options are:<ul>\r\n     *   <li>sessionToken: A valid session token, used for making a request on\r\n     *       behalf of a specific user.\r\n     *   <li>context: A dictionary that is accessible in Cloud Code `beforeDelete` and `afterDelete` triggers.\r\n     * </ul>\r\n     * @returns {Promise} A promise that is fulfilled when the destroy\r\n     *     completes.\r\n     */\n\n  }, {\n    key: \"destroyEventually\",\n    value: function () {\n      var _destroyEventually = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee3(options\n      /*: RequestOptions*/\n      ) {\n        return _regenerator.default.wrap(function (_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.prev = 0;\n                _context5.next = 3;\n                return this.destroy(options);\n\n              case 3:\n                _context5.next = 11;\n                break;\n\n              case 5:\n                _context5.prev = 5;\n                _context5.t0 = _context5[\"catch\"](0);\n\n                if (!(_context5.t0.message === 'XMLHttpRequest failed: \"Unable to connect to the Parse API\"')) {\n                  _context5.next = 11;\n                  break;\n                }\n\n                _context5.next = 10;\n                return _EventuallyQueue.default.destroy(this, options);\n\n              case 10:\n                _EventuallyQueue.default.poll();\n\n              case 11:\n                return _context5.abrupt(\"return\", this);\n\n              case 12:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee3, this, [[0, 5]]);\n      }));\n\n      return function () {\n        return _destroyEventually.apply(this, arguments);\n      };\n    }()\n    /**\r\n     * Destroy this model on the server if it was already persisted.\r\n     *\r\n     * @param {object} options\r\n     * Valid options are:<ul>\r\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\r\n     *     be used for this request.\r\n     *   <li>sessionToken: A valid session token, used for making a request on\r\n     *       behalf of a specific user.\r\n     *   <li>context: A dictionary that is accessible in Cloud Code `beforeDelete` and `afterDelete` triggers.\r\n     * </ul>\r\n     * @returns {Promise} A promise that is fulfilled when the destroy\r\n     *     completes.\r\n     */\n\n  }, {\n    key: \"destroy\",\n    value: function value(options\n    /*: RequestOptions*/\n    )\n    /*: Promise*/\n    {\n      options = options || {};\n      var destroyOptions = {};\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        destroyOptions.useMasterKey = options.useMasterKey;\n      }\n\n      if (options.hasOwnProperty('sessionToken')) {\n        destroyOptions.sessionToken = options.sessionToken;\n      }\n\n      if (options.hasOwnProperty('context') && (0, _typeof2.default)(options.context) === 'object') {\n        destroyOptions.context = options.context;\n      }\n\n      if (!this.id) {\n        return _promise.default.resolve();\n      }\n\n      return _CoreManager.default.getObjectController().destroy(this, destroyOptions);\n    }\n    /**\r\n     * Asynchronously stores the object and every object it points to in the local datastore,\r\n     * recursively, using a default pin name: _default.\r\n     *\r\n     * If those other objects have not been fetched from Parse, they will not be stored.\r\n     * However, if they have changed data, all the changes will be retained.\r\n     *\r\n     * <pre>\r\n     * await object.pin();\r\n     * </pre>\r\n     *\r\n     * To retrieve object:\r\n     * <code>query.fromLocalDatastore()</code> or <code>query.fromPin()</code>\r\n     *\r\n     * @returns {Promise} A promise that is fulfilled when the pin completes.\r\n     */\n\n  }, {\n    key: \"pin\",\n    value: function value()\n    /*: Promise<void>*/\n    {\n      return ParseObject.pinAllWithName(_LocalDatastoreUtils.DEFAULT_PIN, [this]);\n    }\n    /**\r\n     * Asynchronously removes the object and every object it points to in the local datastore,\r\n     * recursively, using a default pin name: _default.\r\n     *\r\n     * <pre>\r\n     * await object.unPin();\r\n     * </pre>\r\n     *\r\n     * @returns {Promise} A promise that is fulfilled when the unPin completes.\r\n     */\n\n  }, {\n    key: \"unPin\",\n    value: function value()\n    /*: Promise<void>*/\n    {\n      return ParseObject.unPinAllWithName(_LocalDatastoreUtils.DEFAULT_PIN, [this]);\n    }\n    /**\r\n     * Asynchronously returns if the object is pinned\r\n     *\r\n     * <pre>\r\n     * const isPinned = await object.isPinned();\r\n     * </pre>\r\n     *\r\n     * @returns {Promise<boolean>} A boolean promise that is fulfilled if object is pinned.\r\n     */\n\n  }, {\n    key: \"isPinned\",\n    value: function () {\n      var _isPinned = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee4() {\n        var localDatastore, objectKey, pin;\n        return _regenerator.default.wrap(function (_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                localDatastore = _CoreManager.default.getLocalDatastore();\n\n                if (localDatastore.isEnabled) {\n                  _context6.next = 3;\n                  break;\n                }\n\n                return _context6.abrupt(\"return\", _promise.default.reject('Parse.enableLocalDatastore() must be called first'));\n\n              case 3:\n                objectKey = localDatastore.getKeyForObject(this);\n                _context6.next = 6;\n                return localDatastore.fromPinWithName(objectKey);\n\n              case 6:\n                pin = _context6.sent;\n                return _context6.abrupt(\"return\", pin.length > 0);\n\n              case 8:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      return function () {\n        return _isPinned.apply(this, arguments);\n      };\n    }()\n    /**\r\n     * Asynchronously stores the objects and every object they point to in the local datastore, recursively.\r\n     *\r\n     * If those other objects have not been fetched from Parse, they will not be stored.\r\n     * However, if they have changed data, all the changes will be retained.\r\n     *\r\n     * <pre>\r\n     * await object.pinWithName(name);\r\n     * </pre>\r\n     *\r\n     * To retrieve object:\r\n     * <code>query.fromLocalDatastore()</code> or <code>query.fromPinWithName(name)</code>\r\n     *\r\n     * @param {string} name Name of Pin.\r\n     * @returns {Promise} A promise that is fulfilled when the pin completes.\r\n     */\n\n  }, {\n    key: \"pinWithName\",\n    value: function value(name\n    /*: string*/\n    )\n    /*: Promise<void>*/\n    {\n      return ParseObject.pinAllWithName(name, [this]);\n    }\n    /**\r\n     * Asynchronously removes the object and every object it points to in the local datastore, recursively.\r\n     *\r\n     * <pre>\r\n     * await object.unPinWithName(name);\r\n     * </pre>\r\n     *\r\n     * @param {string} name Name of Pin.\r\n     * @returns {Promise} A promise that is fulfilled when the unPin completes.\r\n     */\n\n  }, {\n    key: \"unPinWithName\",\n    value: function value(name\n    /*: string*/\n    )\n    /*: Promise<void>*/\n    {\n      return ParseObject.unPinAllWithName(name, [this]);\n    }\n    /**\r\n     * Asynchronously loads data from the local datastore into this object.\r\n     *\r\n     * <pre>\r\n     * await object.fetchFromLocalDatastore();\r\n     * </pre>\r\n     *\r\n     * You can create an unfetched pointer with <code>Parse.Object.createWithoutData()</code>\r\n     * and then call <code>fetchFromLocalDatastore()</code> on it.\r\n     *\r\n     * @returns {Promise} A promise that is fulfilled when the fetch completes.\r\n     */\n\n  }, {\n    key: \"fetchFromLocalDatastore\",\n    value: function () {\n      var _fetchFromLocalDatastore = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee5() {\n        var localDatastore, objectKey, pinned, result;\n        return _regenerator.default.wrap(function (_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                localDatastore = _CoreManager.default.getLocalDatastore();\n\n                if (localDatastore.isEnabled) {\n                  _context7.next = 3;\n                  break;\n                }\n\n                throw new Error('Parse.enableLocalDatastore() must be called first');\n\n              case 3:\n                objectKey = localDatastore.getKeyForObject(this);\n                _context7.next = 6;\n                return localDatastore._serializeObject(objectKey);\n\n              case 6:\n                pinned = _context7.sent;\n\n                if (pinned) {\n                  _context7.next = 9;\n                  break;\n                }\n\n                throw new Error('Cannot fetch an unsaved ParseObject');\n\n              case 9:\n                result = ParseObject.fromJSON(pinned);\n\n                this._finishFetch(result.toJSON());\n\n                return _context7.abrupt(\"return\", this);\n\n              case 12:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      return function () {\n        return _fetchFromLocalDatastore.apply(this, arguments);\n      };\n    }()\n    /** Static methods **/\n\n  }], [{\n    key: \"_getClassMap\",\n    value: function value() {\n      return classMap;\n    }\n  }, {\n    key: \"_clearAllState\",\n    value: function value() {\n      var stateController = _CoreManager.default.getObjectStateController();\n\n      stateController.clearAllState();\n    }\n    /**\r\n     * Fetches the given list of Parse.Object.\r\n     * If any error is encountered, stops and calls the error handler.\r\n     *\r\n     * <pre>\r\n     *   Parse.Object.fetchAll([object1, object2, ...])\r\n     *    .then((list) => {\r\n     *      // All the objects were fetched.\r\n     *    }, (error) => {\r\n     *      // An error occurred while fetching one of the objects.\r\n     *    });\r\n     * </pre>\r\n     *\r\n     * @param {Array} list A list of <code>Parse.Object</code>.\r\n     * @param {object} options\r\n     * Valid options are:<ul>\r\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\r\n     *     be used for this request.\r\n     *   <li>sessionToken: A valid session token, used for making a request on\r\n     *       behalf of a specific user.\r\n     *   <li>include: The name(s) of the key(s) to include. Can be a string, an array of strings,\r\n     *       or an array of array of strings.\r\n     * </ul>\r\n     * @static\r\n     * @returns {Parse.Object[]}\r\n     */\n\n  }, {\n    key: \"fetchAll\",\n    value: function value(list\n    /*: Array<ParseObject>*/\n    ) {\n      var options\n      /*: RequestOptions*/\n      = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var queryOptions = {};\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        queryOptions.useMasterKey = options.useMasterKey;\n      }\n\n      if (options.hasOwnProperty('sessionToken')) {\n        queryOptions.sessionToken = options.sessionToken;\n      }\n\n      if (options.hasOwnProperty('include')) {\n        queryOptions.include = ParseObject.handleIncludeOptions(options);\n      }\n\n      return _CoreManager.default.getObjectController().fetch(list, true, queryOptions);\n    }\n    /**\r\n     * Fetches the given list of Parse.Object.\r\n     *\r\n     * Includes nested Parse.Objects for the provided key. You can use dot\r\n     * notation to specify which fields in the included object are also fetched.\r\n     *\r\n     * If any error is encountered, stops and calls the error handler.\r\n     *\r\n     * <pre>\r\n     *   Parse.Object.fetchAllWithInclude([object1, object2, ...], [pointer1, pointer2, ...])\r\n     *    .then((list) => {\r\n     *      // All the objects were fetched.\r\n     *    }, (error) => {\r\n     *      // An error occurred while fetching one of the objects.\r\n     *    });\r\n     * </pre>\r\n     *\r\n     * @param {Array} list A list of <code>Parse.Object</code>.\r\n     * @param {string | Array<string | Array<string>>} keys The name(s) of the key(s) to include.\r\n     * @param {object} options\r\n     * Valid options are:<ul>\r\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\r\n     *     be used for this request.\r\n     *   <li>sessionToken: A valid session token, used for making a request on\r\n     *       behalf of a specific user.\r\n     * </ul>\r\n     * @static\r\n     * @returns {Parse.Object[]}\r\n     */\n\n  }, {\n    key: \"fetchAllWithInclude\",\n    value: function value(list\n    /*: Array<ParseObject>*/\n    , keys\n    /*: String | Array<string | Array<string>>*/\n    , options\n    /*: RequestOptions*/\n    ) {\n      options = options || {};\n      options.include = keys;\n      return ParseObject.fetchAll(list, options);\n    }\n    /**\r\n     * Fetches the given list of Parse.Object if needed.\r\n     * If any error is encountered, stops and calls the error handler.\r\n     *\r\n     * Includes nested Parse.Objects for the provided key. You can use dot\r\n     * notation to specify which fields in the included object are also fetched.\r\n     *\r\n     * If any error is encountered, stops and calls the error handler.\r\n     *\r\n     * <pre>\r\n     *   Parse.Object.fetchAllIfNeededWithInclude([object1, object2, ...], [pointer1, pointer2, ...])\r\n     *    .then((list) => {\r\n     *      // All the objects were fetched.\r\n     *    }, (error) => {\r\n     *      // An error occurred while fetching one of the objects.\r\n     *    });\r\n     * </pre>\r\n     *\r\n     * @param {Array} list A list of <code>Parse.Object</code>.\r\n     * @param {string | Array<string | Array<string>>} keys The name(s) of the key(s) to include.\r\n     * @param {object} options\r\n     * Valid options are:<ul>\r\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\r\n     *     be used for this request.\r\n     *   <li>sessionToken: A valid session token, used for making a request on\r\n     *       behalf of a specific user.\r\n     * </ul>\r\n     * @static\r\n     * @returns {Parse.Object[]}\r\n     */\n\n  }, {\n    key: \"fetchAllIfNeededWithInclude\",\n    value: function value(list\n    /*: Array<ParseObject>*/\n    , keys\n    /*: String | Array<string | Array<string>>*/\n    , options\n    /*: RequestOptions*/\n    ) {\n      options = options || {};\n      options.include = keys;\n      return ParseObject.fetchAllIfNeeded(list, options);\n    }\n    /**\r\n     * Fetches the given list of Parse.Object if needed.\r\n     * If any error is encountered, stops and calls the error handler.\r\n     *\r\n     * <pre>\r\n     *   Parse.Object.fetchAllIfNeeded([object1, ...])\r\n     *    .then((list) => {\r\n     *      // Objects were fetched and updated.\r\n     *    }, (error) => {\r\n     *      // An error occurred while fetching one of the objects.\r\n     *    });\r\n     * </pre>\r\n     *\r\n     * @param {Array} list A list of <code>Parse.Object</code>.\r\n     * @param {object} options\r\n     * @static\r\n     * @returns {Parse.Object[]}\r\n     */\n\n  }, {\n    key: \"fetchAllIfNeeded\",\n    value: function value(list\n    /*: Array<ParseObject>*/\n    , options) {\n      options = options || {};\n      var queryOptions = {};\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        queryOptions.useMasterKey = options.useMasterKey;\n      }\n\n      if (options.hasOwnProperty('sessionToken')) {\n        queryOptions.sessionToken = options.sessionToken;\n      }\n\n      if (options.hasOwnProperty('include')) {\n        queryOptions.include = ParseObject.handleIncludeOptions(options);\n      }\n\n      return _CoreManager.default.getObjectController().fetch(list, false, queryOptions);\n    }\n  }, {\n    key: \"handleIncludeOptions\",\n    value: function value(options) {\n      var include = [];\n\n      if ((0, _isArray.default)(options.include)) {\n        var _context8;\n\n        (0, _forEach.default)(_context8 = options.include).call(_context8, function (key) {\n          if ((0, _isArray.default)(key)) {\n            include = (0, _concat.default)(include).call(include, key);\n          } else {\n            include.push(key);\n          }\n        });\n      } else {\n        include.push(options.include);\n      }\n\n      return include;\n    }\n    /**\r\n     * Destroy the given list of models on the server if it was already persisted.\r\n     *\r\n     * <p>Unlike saveAll, if an error occurs while deleting an individual model,\r\n     * this method will continue trying to delete the rest of the models if\r\n     * possible, except in the case of a fatal error like a connection error.\r\n     *\r\n     * <p>In particular, the Parse.Error object returned in the case of error may\r\n     * be one of two types:\r\n     *\r\n     * <ul>\r\n     * <li>A Parse.Error.AGGREGATE_ERROR. This object's \"errors\" property is an\r\n     * array of other Parse.Error objects. Each error object in this array\r\n     * has an \"object\" property that references the object that could not be\r\n     * deleted (for instance, because that object could not be found).</li>\r\n     * <li>A non-aggregate Parse.Error. This indicates a serious error that\r\n     * caused the delete operation to be aborted partway through (for\r\n     * instance, a connection failure in the middle of the delete).</li>\r\n     * </ul>\r\n     *\r\n     * <pre>\r\n     * Parse.Object.destroyAll([object1, object2, ...])\r\n     * .then((list) => {\r\n     * // All the objects were deleted.\r\n     * }, (error) => {\r\n     * // An error occurred while deleting one or more of the objects.\r\n     * // If this is an aggregate error, then we can inspect each error\r\n     * // object individually to determine the reason why a particular\r\n     * // object was not deleted.\r\n     * if (error.code === Parse.Error.AGGREGATE_ERROR) {\r\n     * for (var i = 0; i < error.errors.length; i++) {\r\n     * console.log(\"Couldn't delete \" + error.errors[i].object.id +\r\n     * \"due to \" + error.errors[i].message);\r\n     * }\r\n     * } else {\r\n     * console.log(\"Delete aborted because of \" + error.message);\r\n     * }\r\n     * });\r\n     * </pre>\r\n     *\r\n     * @param {Array} list A list of <code>Parse.Object</code>.\r\n     * @param {object} options\r\n     * @static\r\n     * @returns {Promise} A promise that is fulfilled when the destroyAll\r\n     * completes.\r\n     */\n\n  }, {\n    key: \"destroyAll\",\n    value: function value(list\n    /*: Array<ParseObject>*/\n    ) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var destroyOptions = {};\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        destroyOptions.useMasterKey = options.useMasterKey;\n      }\n\n      if (options.hasOwnProperty('sessionToken')) {\n        destroyOptions.sessionToken = options.sessionToken;\n      }\n\n      if (options.hasOwnProperty('batchSize') && typeof options.batchSize === 'number') {\n        destroyOptions.batchSize = options.batchSize;\n      }\n\n      if (options.hasOwnProperty('context') && (0, _typeof2.default)(options.context) === 'object') {\n        destroyOptions.context = options.context;\n      }\n\n      return _CoreManager.default.getObjectController().destroy(list, destroyOptions);\n    }\n    /**\r\n     * Saves the given list of Parse.Object.\r\n     * If any error is encountered, stops and calls the error handler.\r\n     *\r\n     * <pre>\r\n     * Parse.Object.saveAll([object1, object2, ...])\r\n     * .then((list) => {\r\n     * // All the objects were saved.\r\n     * }, (error) => {\r\n     * // An error occurred while saving one of the objects.\r\n     * });\r\n     * </pre>\r\n     *\r\n     * @param {Array} list A list of <code>Parse.Object</code>.\r\n     * @param {object} options\r\n     * @static\r\n     * @returns {Parse.Object[]}\r\n     */\n\n  }, {\n    key: \"saveAll\",\n    value: function value(list\n    /*: Array<ParseObject>*/\n    ) {\n      var options\n      /*: RequestOptions*/\n      = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var saveOptions = {};\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        saveOptions.useMasterKey = options.useMasterKey;\n      }\n\n      if (options.hasOwnProperty('sessionToken')) {\n        saveOptions.sessionToken = options.sessionToken;\n      }\n\n      if (options.hasOwnProperty('batchSize') && typeof options.batchSize === 'number') {\n        saveOptions.batchSize = options.batchSize;\n      }\n\n      if (options.hasOwnProperty('context') && (0, _typeof2.default)(options.context) === 'object') {\n        saveOptions.context = options.context;\n      }\n\n      return _CoreManager.default.getObjectController().save(list, saveOptions);\n    }\n    /**\r\n     * Creates a reference to a subclass of Parse.Object with the given id. This\r\n     * does not exist on Parse.Object, only on subclasses.\r\n     *\r\n     * <p>A shortcut for: <pre>\r\n     *  var Foo = Parse.Object.extend(\"Foo\");\r\n     *  var pointerToFoo = new Foo();\r\n     *  pointerToFoo.id = \"myObjectId\";\r\n     * </pre>\r\n     *\r\n     * @param {string} id The ID of the object to create a reference to.\r\n     * @static\r\n     * @returns {Parse.Object} A Parse.Object reference.\r\n     */\n\n  }, {\n    key: \"createWithoutData\",\n    value: function value(id\n    /*: string*/\n    ) {\n      var obj = new this();\n      obj.id = id;\n      return obj;\n    }\n    /**\r\n     * Creates a new instance of a Parse Object from a JSON representation.\r\n     *\r\n     * @param {object} json The JSON map of the Object's data\r\n     * @param {boolean} override In single instance mode, all old server data\r\n     *   is overwritten if this is set to true\r\n     * @param {boolean} dirty Whether the Parse.Object should set JSON keys to dirty\r\n     * @static\r\n     * @returns {Parse.Object} A Parse.Object reference\r\n     */\n\n  }, {\n    key: \"fromJSON\",\n    value: function value(json\n    /*: any*/\n    , override\n    /*:: ?: boolean*/\n    , dirty\n    /*:: ?: boolean*/\n    ) {\n      if (!json.className) {\n        throw new Error('Cannot create an object without a className');\n      }\n\n      var constructor = classMap[json.className];\n      var o = constructor ? new constructor(json.className) : new ParseObject(json.className);\n      var otherAttributes = {};\n\n      for (var _attr12 in json) {\n        if (_attr12 !== 'className' && _attr12 !== '__type') {\n          otherAttributes[_attr12] = json[_attr12];\n\n          if (dirty) {\n            o.set(_attr12, json[_attr12]);\n          }\n        }\n      }\n\n      if (override) {\n        // id needs to be set before clearServerData can work\n        if (otherAttributes.objectId) {\n          o.id = otherAttributes.objectId;\n        }\n\n        var preserved = null;\n\n        if (typeof o._preserveFieldsOnFetch === 'function') {\n          preserved = o._preserveFieldsOnFetch();\n        }\n\n        o._clearServerData();\n\n        if (preserved) {\n          o._finishFetch(preserved);\n        }\n      }\n\n      o._finishFetch(otherAttributes);\n\n      if (json.objectId) {\n        o._setExisted(true);\n      }\n\n      return o;\n    }\n    /**\r\n     * Registers a subclass of Parse.Object with a specific class name.\r\n     * When objects of that class are retrieved from a query, they will be\r\n     * instantiated with this subclass.\r\n     * This is only necessary when using ES6 subclassing.\r\n     *\r\n     * @param {string} className The class name of the subclass\r\n     * @param {Function} constructor The subclass\r\n     */\n\n  }, {\n    key: \"registerSubclass\",\n    value: function value(className\n    /*: string*/\n    , constructor\n    /*: any*/\n    ) {\n      if (typeof className !== 'string') {\n        throw new TypeError('The first argument must be a valid class name.');\n      }\n\n      if (typeof constructor === 'undefined') {\n        throw new TypeError('You must supply a subclass constructor.');\n      }\n\n      if (typeof constructor !== 'function') {\n        throw new TypeError('You must register the subclass constructor. ' + 'Did you attempt to register an instance of the subclass?');\n      }\n\n      classMap[className] = constructor;\n\n      if (!constructor.className) {\n        constructor.className = className;\n      }\n    }\n    /**\r\n     * Unegisters a subclass of Parse.Object with a specific class name.\r\n     *\r\n     * @param {string} className The class name of the subclass\r\n     */\n\n  }, {\n    key: \"unregisterSubclass\",\n    value: function value(className\n    /*: string*/\n    ) {\n      if (typeof className !== 'string') {\n        throw new TypeError('The first argument must be a valid class name.');\n      }\n\n      delete classMap[className];\n    }\n    /**\r\n     * Creates a new subclass of Parse.Object for the given Parse class name.\r\n     *\r\n     * <p>Every extension of a Parse class will inherit from the most recent\r\n     * previous extension of that class. When a Parse.Object is automatically\r\n     * created by parsing JSON, it will use the most recent extension of that\r\n     * class.</p>\r\n     *\r\n     * <p>You should call either:<pre>\r\n     *     var MyClass = Parse.Object.extend(\"MyClass\", {\r\n     *         <i>Instance methods</i>,\r\n     *         initialize: function(attrs, options) {\r\n     *             this.someInstanceProperty = [],\r\n     *             <i>Other instance properties</i>\r\n     *         }\r\n     *     }, {\r\n     *         <i>Class properties</i>\r\n     *     });</pre>\r\n     * or, for Backbone compatibility:<pre>\r\n     *     var MyClass = Parse.Object.extend({\r\n     *         className: \"MyClass\",\r\n     *         <i>Instance methods</i>,\r\n     *         initialize: function(attrs, options) {\r\n     *             this.someInstanceProperty = [],\r\n     *             <i>Other instance properties</i>\r\n     *         }\r\n     *     }, {\r\n     *         <i>Class properties</i>\r\n     *     });</pre></p>\r\n     *\r\n     * @param {string} className The name of the Parse class backing this model.\r\n     * @param {object} protoProps Instance properties to add to instances of the\r\n     *     class returned from this method.\r\n     * @param {object} classProps Class properties to add the class returned from\r\n     *     this method.\r\n     * @returns {Parse.Object} A new subclass of Parse.Object.\r\n     */\n\n  }, {\n    key: \"extend\",\n    value: function value(className\n    /*: any*/\n    , protoProps\n    /*: any*/\n    , classProps\n    /*: any*/\n    ) {\n      if (typeof className !== 'string') {\n        if (className && typeof className.className === 'string') {\n          return ParseObject.extend(className.className, className, protoProps);\n        } else {\n          throw new Error(\"Parse.Object.extend's first argument should be the className.\");\n        }\n      }\n\n      var adjustedClassName = className;\n\n      if (adjustedClassName === 'User' && _CoreManager.default.get('PERFORM_USER_REWRITE')) {\n        adjustedClassName = '_User';\n      }\n\n      var parentProto = ParseObject.prototype;\n\n      if (this.hasOwnProperty('__super__') && this.__super__) {\n        parentProto = this.prototype;\n      } else if (classMap[adjustedClassName]) {\n        parentProto = classMap[adjustedClassName].prototype;\n      }\n\n      var ParseObjectSubclass = function ParseObjectSubclass(attributes, options) {\n        this.className = adjustedClassName;\n        this._objCount = objectCount++; // Enable legacy initializers\n\n        if (typeof this.initialize === 'function') {\n          this.initialize.apply(this, arguments);\n        }\n\n        if (attributes && (0, _typeof2.default)(attributes) === 'object') {\n          if (!this.set(attributes || {}, options)) {\n            throw new Error(\"Can't create an invalid Parse Object\");\n          }\n        }\n      };\n\n      ParseObjectSubclass.className = adjustedClassName;\n      ParseObjectSubclass.__super__ = parentProto;\n      ParseObjectSubclass.prototype = (0, _create.default)(parentProto, {\n        constructor: {\n          value: ParseObjectSubclass,\n          enumerable: false,\n          writable: true,\n          configurable: true\n        }\n      });\n\n      if (protoProps) {\n        for (var prop in protoProps) {\n          if (prop !== 'className') {\n            (0, _defineProperty2.default)(ParseObjectSubclass.prototype, prop, {\n              value: protoProps[prop],\n              enumerable: false,\n              writable: true,\n              configurable: true\n            });\n          }\n        }\n      }\n\n      if (classProps) {\n        for (var _prop in classProps) {\n          if (_prop !== 'className') {\n            (0, _defineProperty2.default)(ParseObjectSubclass, _prop, {\n              value: classProps[_prop],\n              enumerable: false,\n              writable: true,\n              configurable: true\n            });\n          }\n        }\n      }\n\n      ParseObjectSubclass.extend = function (name, protoProps, classProps) {\n        if (typeof name === 'string') {\n          return ParseObject.extend.call(ParseObjectSubclass, name, protoProps, classProps);\n        }\n\n        return ParseObject.extend.call(ParseObjectSubclass, adjustedClassName, name, protoProps);\n      };\n\n      ParseObjectSubclass.createWithoutData = ParseObject.createWithoutData;\n      classMap[adjustedClassName] = ParseObjectSubclass;\n      return ParseObjectSubclass;\n    }\n    /**\r\n     * Enable single instance objects, where any local objects with the same Id\r\n     * share the same attributes, and stay synchronized with each other.\r\n     * This is disabled by default in server environments, since it can lead to\r\n     * security issues.\r\n     *\r\n     * @static\r\n     */\n\n  }, {\n    key: \"enableSingleInstance\",\n    value: function value() {\n      singleInstance = true;\n\n      _CoreManager.default.setObjectStateController(SingleInstanceStateController);\n    }\n    /**\r\n     * Disable single instance objects, where any local objects with the same Id\r\n     * share the same attributes, and stay synchronized with each other.\r\n     * When disabled, you can have two instances of the same object in memory\r\n     * without them sharing attributes.\r\n     *\r\n     * @static\r\n     */\n\n  }, {\n    key: \"disableSingleInstance\",\n    value: function value() {\n      singleInstance = false;\n\n      _CoreManager.default.setObjectStateController(UniqueInstanceStateController);\n    }\n    /**\r\n     * Asynchronously stores the objects and every object they point to in the local datastore,\r\n     * recursively, using a default pin name: _default.\r\n     *\r\n     * If those other objects have not been fetched from Parse, they will not be stored.\r\n     * However, if they have changed data, all the changes will be retained.\r\n     *\r\n     * <pre>\r\n     * await Parse.Object.pinAll([...]);\r\n     * </pre>\r\n     *\r\n     * To retrieve object:\r\n     * <code>query.fromLocalDatastore()</code> or <code>query.fromPin()</code>\r\n     *\r\n     * @param {Array} objects A list of <code>Parse.Object</code>.\r\n     * @returns {Promise} A promise that is fulfilled when the pin completes.\r\n     * @static\r\n     */\n\n  }, {\n    key: \"pinAll\",\n    value: function value(objects\n    /*: Array<ParseObject>*/\n    )\n    /*: Promise<void>*/\n    {\n      var localDatastore = _CoreManager.default.getLocalDatastore();\n\n      if (!localDatastore.isEnabled) {\n        return _promise.default.reject('Parse.enableLocalDatastore() must be called first');\n      }\n\n      return ParseObject.pinAllWithName(_LocalDatastoreUtils.DEFAULT_PIN, objects);\n    }\n    /**\r\n     * Asynchronously stores the objects and every object they point to in the local datastore, recursively.\r\n     *\r\n     * If those other objects have not been fetched from Parse, they will not be stored.\r\n     * However, if they have changed data, all the changes will be retained.\r\n     *\r\n     * <pre>\r\n     * await Parse.Object.pinAllWithName(name, [obj1, obj2, ...]);\r\n     * </pre>\r\n     *\r\n     * To retrieve object:\r\n     * <code>query.fromLocalDatastore()</code> or <code>query.fromPinWithName(name)</code>\r\n     *\r\n     * @param {string} name Name of Pin.\r\n     * @param {Array} objects A list of <code>Parse.Object</code>.\r\n     * @returns {Promise} A promise that is fulfilled when the pin completes.\r\n     * @static\r\n     */\n\n  }, {\n    key: \"pinAllWithName\",\n    value: function value(name\n    /*: string*/\n    , objects\n    /*: Array<ParseObject>*/\n    )\n    /*: Promise<void>*/\n    {\n      var localDatastore = _CoreManager.default.getLocalDatastore();\n\n      if (!localDatastore.isEnabled) {\n        return _promise.default.reject('Parse.enableLocalDatastore() must be called first');\n      }\n\n      return localDatastore._handlePinAllWithName(name, objects);\n    }\n    /**\r\n     * Asynchronously removes the objects and every object they point to in the local datastore,\r\n     * recursively, using a default pin name: _default.\r\n     *\r\n     * <pre>\r\n     * await Parse.Object.unPinAll([...]);\r\n     * </pre>\r\n     *\r\n     * @param {Array} objects A list of <code>Parse.Object</code>.\r\n     * @returns {Promise} A promise that is fulfilled when the unPin completes.\r\n     * @static\r\n     */\n\n  }, {\n    key: \"unPinAll\",\n    value: function value(objects\n    /*: Array<ParseObject>*/\n    )\n    /*: Promise<void>*/\n    {\n      var localDatastore = _CoreManager.default.getLocalDatastore();\n\n      if (!localDatastore.isEnabled) {\n        return _promise.default.reject('Parse.enableLocalDatastore() must be called first');\n      }\n\n      return ParseObject.unPinAllWithName(_LocalDatastoreUtils.DEFAULT_PIN, objects);\n    }\n    /**\r\n     * Asynchronously removes the objects and every object they point to in the local datastore, recursively.\r\n     *\r\n     * <pre>\r\n     * await Parse.Object.unPinAllWithName(name, [obj1, obj2, ...]);\r\n     * </pre>\r\n     *\r\n     * @param {string} name Name of Pin.\r\n     * @param {Array} objects A list of <code>Parse.Object</code>.\r\n     * @returns {Promise} A promise that is fulfilled when the unPin completes.\r\n     * @static\r\n     */\n\n  }, {\n    key: \"unPinAllWithName\",\n    value: function value(name\n    /*: string*/\n    , objects\n    /*: Array<ParseObject>*/\n    )\n    /*: Promise<void>*/\n    {\n      var localDatastore = _CoreManager.default.getLocalDatastore();\n\n      if (!localDatastore.isEnabled) {\n        return _promise.default.reject('Parse.enableLocalDatastore() must be called first');\n      }\n\n      return localDatastore._handleUnPinAllWithName(name, objects);\n    }\n    /**\r\n     * Asynchronously removes all objects in the local datastore using a default pin name: _default.\r\n     *\r\n     * <pre>\r\n     * await Parse.Object.unPinAllObjects();\r\n     * </pre>\r\n     *\r\n     * @returns {Promise} A promise that is fulfilled when the unPin completes.\r\n     * @static\r\n     */\n\n  }, {\n    key: \"unPinAllObjects\",\n    value: function value()\n    /*: Promise<void>*/\n    {\n      var localDatastore = _CoreManager.default.getLocalDatastore();\n\n      if (!localDatastore.isEnabled) {\n        return _promise.default.reject('Parse.enableLocalDatastore() must be called first');\n      }\n\n      return localDatastore.unPinWithName(_LocalDatastoreUtils.DEFAULT_PIN);\n    }\n    /**\r\n     * Asynchronously removes all objects with the specified pin name.\r\n     * Deletes the pin name also.\r\n     *\r\n     * <pre>\r\n     * await Parse.Object.unPinAllObjectsWithName(name);\r\n     * </pre>\r\n     *\r\n     * @param {string} name Name of Pin.\r\n     * @returns {Promise} A promise that is fulfilled when the unPin completes.\r\n     * @static\r\n     */\n\n  }, {\n    key: \"unPinAllObjectsWithName\",\n    value: function value(name\n    /*: string*/\n    )\n    /*: Promise<void>*/\n    {\n      var localDatastore = _CoreManager.default.getLocalDatastore();\n\n      if (!localDatastore.isEnabled) {\n        return _promise.default.reject('Parse.enableLocalDatastore() must be called first');\n      }\n\n      return localDatastore.unPinWithName(_LocalDatastoreUtils.PIN_PREFIX + name);\n    }\n  }]);\n  return ParseObject;\n}();\n\nvar DefaultController = {\n  fetch: function fetch(target\n  /*: ParseObject | Array<ParseObject>*/\n  , forceFetch\n  /*: boolean*/\n  , options\n  /*: RequestOptions*/\n  )\n  /*: Promise<Array<void> | ParseObject>*/\n  {\n    var localDatastore = _CoreManager.default.getLocalDatastore();\n\n    if ((0, _isArray.default)(target)) {\n      if (target.length < 1) {\n        return _promise.default.resolve([]);\n      }\n\n      var objs = [];\n      var ids = [];\n      var className = null;\n      var results = [];\n      var error = null;\n      (0, _forEach.default)(target).call(target, function (el) {\n        if (error) {\n          return;\n        }\n\n        if (!className) {\n          className = el.className;\n        }\n\n        if (className !== el.className) {\n          error = new _ParseError.default(_ParseError.default.INVALID_CLASS_NAME, 'All objects should be of the same class');\n        }\n\n        if (!el.id) {\n          error = new _ParseError.default(_ParseError.default.MISSING_OBJECT_ID, 'All objects must have an ID');\n        }\n\n        if (forceFetch || !el.isDataAvailable()) {\n          ids.push(el.id);\n          objs.push(el);\n        }\n\n        results.push(el);\n      });\n\n      if (error) {\n        return _promise.default.reject(error);\n      }\n\n      var query = new _ParseQuery.default(className);\n      query.containedIn('objectId', ids);\n\n      if (options && options.include) {\n        query.include(options.include);\n      }\n\n      query._limit = ids.length;\n      return (0, _find.default)(query).call(query, options).then( /*#__PURE__*/function () {\n        var _ref = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee6(objects) {\n          var idMap, i, obj, _i, _obj, id, _iterator2, _step2, object;\n\n          return _regenerator.default.wrap(function (_context9) {\n            while (1) {\n              switch (_context9.prev = _context9.next) {\n                case 0:\n                  idMap = {};\n                  (0, _forEach.default)(objects).call(objects, function (o) {\n                    idMap[o.id] = o;\n                  });\n                  i = 0;\n\n                case 3:\n                  if (!(i < objs.length)) {\n                    _context9.next = 11;\n                    break;\n                  }\n\n                  obj = objs[i];\n\n                  if (!(!obj || !obj.id || !idMap[obj.id])) {\n                    _context9.next = 8;\n                    break;\n                  }\n\n                  if (!forceFetch) {\n                    _context9.next = 8;\n                    break;\n                  }\n\n                  return _context9.abrupt(\"return\", _promise.default.reject(new _ParseError.default(_ParseError.default.OBJECT_NOT_FOUND, 'All objects must exist on the server.')));\n\n                case 8:\n                  i++;\n                  _context9.next = 3;\n                  break;\n\n                case 11:\n                  if (!singleInstance) {\n                    // If single instance objects are disabled, we need to replace the\n                    for (_i = 0; _i < results.length; _i++) {\n                      _obj = results[_i];\n\n                      if (_obj && _obj.id && idMap[_obj.id]) {\n                        id = _obj.id;\n\n                        _obj._finishFetch(idMap[id].toJSON());\n\n                        results[_i] = idMap[id];\n                      }\n                    }\n                  }\n\n                  _iterator2 = _createForOfIteratorHelper(results);\n                  _context9.prev = 13;\n\n                  _iterator2.s();\n\n                case 15:\n                  if ((_step2 = _iterator2.n()).done) {\n                    _context9.next = 21;\n                    break;\n                  }\n\n                  object = _step2.value;\n                  _context9.next = 19;\n                  return localDatastore._updateObjectIfPinned(object);\n\n                case 19:\n                  _context9.next = 15;\n                  break;\n\n                case 21:\n                  _context9.next = 26;\n                  break;\n\n                case 23:\n                  _context9.prev = 23;\n                  _context9.t0 = _context9[\"catch\"](13);\n\n                  _iterator2.e(_context9.t0);\n\n                case 26:\n                  _context9.prev = 26;\n\n                  _iterator2.f();\n\n                  return _context9.finish(26);\n\n                case 29:\n                  return _context9.abrupt(\"return\", _promise.default.resolve(results));\n\n                case 30:\n                case \"end\":\n                  return _context9.stop();\n              }\n            }\n          }, _callee6, null, [[13, 23, 26, 29]]);\n        }));\n\n        return function () {\n          return _ref.apply(this, arguments);\n        };\n      }());\n    } else if (target instanceof ParseObject) {\n      if (!target.id) {\n        return _promise.default.reject(new _ParseError.default(_ParseError.default.MISSING_OBJECT_ID, 'Object does not have an ID'));\n      }\n\n      var RESTController = _CoreManager.default.getRESTController();\n\n      var params = {};\n\n      if (options && options.include) {\n        params.include = options.include.join();\n      }\n\n      return RESTController.request('GET', 'classes/' + target.className + '/' + target._getId(), params, options).then( /*#__PURE__*/function () {\n        var _ref2 = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee7(response) {\n          return _regenerator.default.wrap(function (_context10) {\n            while (1) {\n              switch (_context10.prev = _context10.next) {\n                case 0:\n                  target._clearPendingOps();\n\n                  target._clearServerData();\n\n                  target._finishFetch(response);\n\n                  _context10.next = 5;\n                  return localDatastore._updateObjectIfPinned(target);\n\n                case 5:\n                  return _context10.abrupt(\"return\", target);\n\n                case 6:\n                case \"end\":\n                  return _context10.stop();\n              }\n            }\n          }, _callee7);\n        }));\n\n        return function () {\n          return _ref2.apply(this, arguments);\n        };\n      }());\n    }\n\n    return _promise.default.resolve();\n  },\n  destroy: function destroy(target\n  /*: ParseObject | Array<ParseObject>*/\n  , options\n  /*: RequestOptions*/\n  )\n  /*: Promise<Array<void> | ParseObject>*/\n  {\n    return (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee10() {\n      var batchSize, localDatastore, RESTController, batches, deleteCompleted, errors;\n      return _regenerator.default.wrap(function (_context13) {\n        while (1) {\n          switch (_context13.prev = _context13.next) {\n            case 0:\n              batchSize = options && options.batchSize ? options.batchSize : _CoreManager.default.get('REQUEST_BATCH_SIZE');\n              localDatastore = _CoreManager.default.getLocalDatastore();\n              RESTController = _CoreManager.default.getRESTController();\n\n              if (!(0, _isArray.default)(target)) {\n                _context13.next = 15;\n                break;\n              }\n\n              if (!(target.length < 1)) {\n                _context13.next = 6;\n                break;\n              }\n\n              return _context13.abrupt(\"return\", _promise.default.resolve([]));\n\n            case 6:\n              batches = [[]];\n              (0, _forEach.default)(target).call(target, function (obj) {\n                if (!obj.id) {\n                  return;\n                }\n\n                batches[batches.length - 1].push(obj);\n\n                if (batches[batches.length - 1].length >= batchSize) {\n                  batches.push([]);\n                }\n              });\n\n              if (batches[batches.length - 1].length === 0) {\n                // If the last batch is empty, remove it\n                batches.pop();\n              }\n\n              deleteCompleted = _promise.default.resolve();\n              errors = [];\n              (0, _forEach.default)(batches).call(batches, function (batch) {\n                deleteCompleted = deleteCompleted.then(function () {\n                  return RESTController.request('POST', 'batch', {\n                    requests: (0, _map.default)(batch).call(batch, function (obj) {\n                      return {\n                        method: 'DELETE',\n                        path: getServerUrlPath() + 'classes/' + obj.className + '/' + obj._getId(),\n                        body: {}\n                      };\n                    })\n                  }, options).then(function (results) {\n                    for (var i = 0; i < results.length; i++) {\n                      if (results[i] && results[i].hasOwnProperty('error')) {\n                        var err = new _ParseError.default(results[i].error.code, results[i].error.error);\n                        err.object = batch[i];\n                        errors.push(err);\n                      }\n                    }\n                  });\n                });\n              });\n              return _context13.abrupt(\"return\", deleteCompleted.then( /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee8() {\n                var aggregate, _iterator3, _step3, object;\n\n                return _regenerator.default.wrap(function (_context11) {\n                  while (1) {\n                    switch (_context11.prev = _context11.next) {\n                      case 0:\n                        if (!errors.length) {\n                          _context11.next = 4;\n                          break;\n                        }\n\n                        aggregate = new _ParseError.default(_ParseError.default.AGGREGATE_ERROR);\n                        aggregate.errors = errors;\n                        return _context11.abrupt(\"return\", _promise.default.reject(aggregate));\n\n                      case 4:\n                        _iterator3 = _createForOfIteratorHelper(target);\n                        _context11.prev = 5;\n\n                        _iterator3.s();\n\n                      case 7:\n                        if ((_step3 = _iterator3.n()).done) {\n                          _context11.next = 13;\n                          break;\n                        }\n\n                        object = _step3.value;\n                        _context11.next = 11;\n                        return localDatastore._destroyObjectIfPinned(object);\n\n                      case 11:\n                        _context11.next = 7;\n                        break;\n\n                      case 13:\n                        _context11.next = 18;\n                        break;\n\n                      case 15:\n                        _context11.prev = 15;\n                        _context11.t0 = _context11[\"catch\"](5);\n\n                        _iterator3.e(_context11.t0);\n\n                      case 18:\n                        _context11.prev = 18;\n\n                        _iterator3.f();\n\n                        return _context11.finish(18);\n\n                      case 21:\n                        return _context11.abrupt(\"return\", _promise.default.resolve(target));\n\n                      case 22:\n                      case \"end\":\n                        return _context11.stop();\n                    }\n                  }\n                }, _callee8, null, [[5, 15, 18, 21]]);\n              }))));\n\n            case 15:\n              if (!(target instanceof ParseObject)) {\n                _context13.next = 17;\n                break;\n              }\n\n              return _context13.abrupt(\"return\", RESTController.request('DELETE', 'classes/' + target.className + '/' + target._getId(), {}, options).then( /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee9() {\n                return _regenerator.default.wrap(function (_context12) {\n                  while (1) {\n                    switch (_context12.prev = _context12.next) {\n                      case 0:\n                        _context12.next = 2;\n                        return localDatastore._destroyObjectIfPinned(target);\n\n                      case 2:\n                        return _context12.abrupt(\"return\", _promise.default.resolve(target));\n\n                      case 3:\n                      case \"end\":\n                        return _context12.stop();\n                    }\n                  }\n                }, _callee9);\n              }))));\n\n            case 17:\n              return _context13.abrupt(\"return\", _promise.default.resolve(target));\n\n            case 18:\n            case \"end\":\n              return _context13.stop();\n          }\n        }\n      }, _callee10);\n    }))();\n  },\n  save: function save(target\n  /*: ParseObject | Array<ParseObject | ParseFile>*/\n  , options\n  /*: RequestOptions*/\n  ) {\n    var batchSize = options && options.batchSize ? options.batchSize : _CoreManager.default.get('REQUEST_BATCH_SIZE');\n\n    var localDatastore = _CoreManager.default.getLocalDatastore();\n\n    var mapIdForPin = {};\n\n    var RESTController = _CoreManager.default.getRESTController();\n\n    var stateController = _CoreManager.default.getObjectStateController();\n\n    var allowCustomObjectId = _CoreManager.default.get('ALLOW_CUSTOM_OBJECT_ID');\n\n    options = options || {};\n    options.returnStatus = options.returnStatus || true;\n\n    if ((0, _isArray.default)(target)) {\n      if (target.length < 1) {\n        return _promise.default.resolve([]);\n      }\n\n      var unsaved = (0, _concat.default)(target).call(target);\n\n      for (var i = 0; i < target.length; i++) {\n        if (target[i] instanceof ParseObject) {\n          unsaved = (0, _concat.default)(unsaved).call(unsaved, (0, _unsavedChildren.default)(target[i], true));\n        }\n      }\n\n      unsaved = (0, _unique.default)(unsaved);\n      var filesSaved\n      /*: Array<ParseFile>*/\n      = [];\n      var pending\n      /*: Array<ParseObject>*/\n      = [];\n      (0, _forEach.default)(unsaved).call(unsaved, function (el) {\n        if (el instanceof _ParseFile.default) {\n          filesSaved.push(el.save(options));\n        } else if (el instanceof ParseObject) {\n          if (allowCustomObjectId && !el.id) {\n            throw new _ParseError.default(_ParseError.default.MISSING_OBJECT_ID, 'objectId must not be empty, null or undefined');\n          }\n\n          pending.push(el);\n        }\n      });\n      return _promise.default.all(filesSaved).then(function () {\n        var objectError = null;\n        return (0, _promiseUtils.continueWhile)(function () {\n          return pending.length > 0;\n        }, function () {\n          var batch = [];\n          var nextPending = [];\n          (0, _forEach.default)(pending).call(pending, function (el) {\n            if (batch.length < batchSize && (0, _canBeSerialized.default)(el)) {\n              batch.push(el);\n            } else {\n              nextPending.push(el);\n            }\n          });\n          pending = nextPending;\n\n          if (batch.length < 1) {\n            return _promise.default.reject(new _ParseError.default(_ParseError.default.OTHER_CAUSE, 'Tried to save a batch with a cycle.'));\n          } // Queue up tasks for each object in the batch.\n          // When every task is ready, the API request will execute\n\n\n          var batchReturned = new _promiseUtils.resolvingPromise();\n          var batchReady = [];\n          var batchTasks = [];\n          (0, _forEach.default)(batch).call(batch, function (obj, index) {\n            var ready = new _promiseUtils.resolvingPromise();\n            batchReady.push(ready);\n            stateController.pushPendingState(obj._getStateIdentifier());\n            batchTasks.push(stateController.enqueueTask(obj._getStateIdentifier(), function () {\n              ready.resolve();\n              return batchReturned.then(function (responses) {\n                if (responses[index].hasOwnProperty('success')) {\n                  var objectId = responses[index].success.objectId;\n                  var status = responses[index]._status;\n                  delete responses[index]._status;\n                  mapIdForPin[objectId] = obj._localId;\n\n                  obj._handleSaveResponse(responses[index].success, status);\n                } else {\n                  if (!objectError && responses[index].hasOwnProperty('error')) {\n                    var serverError = responses[index].error;\n                    objectError = new _ParseError.default(serverError.code, serverError.error); // Cancel the rest of the save\n\n                    pending = [];\n                  }\n\n                  obj._handleSaveError();\n                }\n              });\n            }));\n          });\n          (0, _promiseUtils.when)(batchReady).then(function () {\n            // Kick off the batch request\n            return RESTController.request('POST', 'batch', {\n              requests: (0, _map.default)(batch).call(batch, function (obj) {\n                var params = obj._getSaveParams();\n\n                params.path = getServerUrlPath() + params.path;\n                return params;\n              })\n            }, options);\n          }).then(batchReturned.resolve, function (error) {\n            batchReturned.reject(new _ParseError.default(_ParseError.default.INCORRECT_TYPE, error.message));\n          });\n          return (0, _promiseUtils.when)(batchTasks);\n        }).then( /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee11() {\n          var _iterator4, _step4, object;\n\n          return _regenerator.default.wrap(function (_context14) {\n            while (1) {\n              switch (_context14.prev = _context14.next) {\n                case 0:\n                  if (!objectError) {\n                    _context14.next = 2;\n                    break;\n                  }\n\n                  return _context14.abrupt(\"return\", _promise.default.reject(objectError));\n\n                case 2:\n                  _iterator4 = _createForOfIteratorHelper(target);\n                  _context14.prev = 3;\n\n                  _iterator4.s();\n\n                case 5:\n                  if ((_step4 = _iterator4.n()).done) {\n                    _context14.next = 13;\n                    break;\n                  }\n\n                  object = _step4.value;\n                  _context14.next = 9;\n                  return localDatastore._updateLocalIdForObject(mapIdForPin[object.id], object);\n\n                case 9:\n                  _context14.next = 11;\n                  return localDatastore._updateObjectIfPinned(object);\n\n                case 11:\n                  _context14.next = 5;\n                  break;\n\n                case 13:\n                  _context14.next = 18;\n                  break;\n\n                case 15:\n                  _context14.prev = 15;\n                  _context14.t0 = _context14[\"catch\"](3);\n\n                  _iterator4.e(_context14.t0);\n\n                case 18:\n                  _context14.prev = 18;\n\n                  _iterator4.f();\n\n                  return _context14.finish(18);\n\n                case 21:\n                  return _context14.abrupt(\"return\", _promise.default.resolve(target));\n\n                case 22:\n                case \"end\":\n                  return _context14.stop();\n              }\n            }\n          }, _callee11, null, [[3, 15, 18, 21]]);\n        })));\n      });\n    } else if (target instanceof ParseObject) {\n      if (allowCustomObjectId && !target.id) {\n        throw new _ParseError.default(_ParseError.default.MISSING_OBJECT_ID, 'objectId must not be empty, null or undefined');\n      } // generate _localId in case if cascadeSave=false\n\n\n      target._getId();\n\n      var localId = target._localId; // copying target lets Flow guarantee the pointer isn't modified elsewhere\n\n      var targetCopy = target;\n\n      var task = function task() {\n        var params = targetCopy._getSaveParams();\n\n        return RESTController.request(params.method, params.path, params.body, options).then(function (response) {\n          var status = response._status;\n          delete response._status;\n\n          targetCopy._handleSaveResponse(response, status);\n        }, function (error) {\n          targetCopy._handleSaveError();\n\n          return _promise.default.reject(error);\n        });\n      };\n\n      stateController.pushPendingState(target._getStateIdentifier());\n      return stateController.enqueueTask(target._getStateIdentifier(), task).then( /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee12() {\n        return _regenerator.default.wrap(function (_context15) {\n          while (1) {\n            switch (_context15.prev = _context15.next) {\n              case 0:\n                _context15.next = 2;\n                return localDatastore._updateLocalIdForObject(localId, target);\n\n              case 2:\n                _context15.next = 4;\n                return localDatastore._updateObjectIfPinned(target);\n\n              case 4:\n                return _context15.abrupt(\"return\", target);\n\n              case 5:\n              case \"end\":\n                return _context15.stop();\n            }\n          }\n        }, _callee12);\n      })), function (error) {\n        return _promise.default.reject(error);\n      });\n    }\n\n    return _promise.default.resolve();\n  }\n};\n\n_CoreManager.default.setObjectController(DefaultController);\n\nvar _default = ParseObject;\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}