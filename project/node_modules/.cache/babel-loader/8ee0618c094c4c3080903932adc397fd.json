{"ast":null,"code":"import safariFix from 'safari-14-idb-fix';\n\nfunction promisifyRequest(request) {\n  return new Promise((resolve, reject) => {\n    // @ts-ignore - file size hacks\n    request.oncomplete = request.onsuccess = () => resolve(request.result); // @ts-ignore - file size hacks\n\n\n    request.onabort = request.onerror = () => reject(request.error);\n  });\n}\n\nfunction createStore(dbName, storeName) {\n  const dbp = safariFix().then(() => {\n    const request = indexedDB.open(dbName);\n\n    request.onupgradeneeded = () => request.result.createObjectStore(storeName);\n\n    return promisifyRequest(request);\n  });\n  return (txMode, callback) => dbp.then(db => callback(db.transaction(storeName, txMode).objectStore(storeName)));\n}\n\nlet defaultGetStoreFunc;\n\nfunction defaultGetStore() {\n  if (!defaultGetStoreFunc) {\n    defaultGetStoreFunc = createStore('keyval-store', 'keyval');\n  }\n\n  return defaultGetStoreFunc;\n}\n/**\r\n * Get a value by its key.\r\n *\r\n * @param key\r\n * @param customStore Method to get a custom store. Use with caution (see the docs).\r\n */\n\n\nfunction get(key) {\n  let customStore = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultGetStore();\n  return customStore('readonly', store => promisifyRequest(store.get(key)));\n}\n/**\r\n * Set a value with a key.\r\n *\r\n * @param key\r\n * @param value\r\n * @param customStore Method to get a custom store. Use with caution (see the docs).\r\n */\n\n\nfunction set(key, value) {\n  let customStore = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : defaultGetStore();\n  return customStore('readwrite', store => {\n    store.put(value, key);\n    return promisifyRequest(store.transaction);\n  });\n}\n/**\r\n * Set multiple values at once. This is faster than calling set() multiple times.\r\n * It's also atomic – if one of the pairs can't be added, none will be added.\r\n *\r\n * @param entries Array of entries, where each entry is an array of `[key, value]`.\r\n * @param customStore Method to get a custom store. Use with caution (see the docs).\r\n */\n\n\nfunction setMany(entries) {\n  let customStore = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultGetStore();\n  return customStore('readwrite', store => {\n    entries.forEach(entry => store.put(entry[1], entry[0]));\n    return promisifyRequest(store.transaction);\n  });\n}\n/**\r\n * Get multiple values by their keys\r\n *\r\n * @param keys\r\n * @param customStore Method to get a custom store. Use with caution (see the docs).\r\n */\n\n\nfunction getMany(keys) {\n  let customStore = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultGetStore();\n  return customStore('readonly', store => Promise.all(keys.map(key => promisifyRequest(store.get(key)))));\n}\n/**\r\n * Update a value. This lets you see the old value and update it as an atomic operation.\r\n *\r\n * @param key\r\n * @param updater A callback that takes the old value and returns a new value.\r\n * @param customStore Method to get a custom store. Use with caution (see the docs).\r\n */\n\n\nfunction update(key, updater) {\n  let customStore = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : defaultGetStore();\n  return customStore('readwrite', store => // Need to create the promise manually.\n  // If I try to chain promises, the transaction closes in browsers\n  // that use a promise polyfill (IE10/11).\n  new Promise((resolve, reject) => {\n    store.get(key).onsuccess = function () {\n      try {\n        store.put(updater(this.result), key);\n        resolve(promisifyRequest(store.transaction));\n      } catch (err) {\n        reject(err);\n      }\n    };\n  }));\n}\n/**\r\n * Delete a particular key from the store.\r\n *\r\n * @param key\r\n * @param customStore Method to get a custom store. Use with caution (see the docs).\r\n */\n\n\nfunction del(key) {\n  let customStore = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultGetStore();\n  return customStore('readwrite', store => {\n    store.delete(key);\n    return promisifyRequest(store.transaction);\n  });\n}\n/**\r\n * Delete multiple keys at once.\r\n *\r\n * @param keys List of keys to delete.\r\n * @param customStore Method to get a custom store. Use with caution (see the docs).\r\n */\n\n\nfunction delMany(keys) {\n  let customStore = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultGetStore();\n  return customStore('readwrite', store => {\n    keys.forEach(key => store.delete(key));\n    return promisifyRequest(store.transaction);\n  });\n}\n/**\r\n * Clear all values in the store.\r\n *\r\n * @param customStore Method to get a custom store. Use with caution (see the docs).\r\n */\n\n\nfunction clear() {\n  let customStore = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultGetStore();\n  return customStore('readwrite', store => {\n    store.clear();\n    return promisifyRequest(store.transaction);\n  });\n}\n\nfunction eachCursor(customStore, callback) {\n  return customStore('readonly', store => {\n    // This would be store.getAllKeys(), but it isn't supported by Edge or Safari.\n    // And openKeyCursor isn't supported by Safari.\n    store.openCursor().onsuccess = function () {\n      if (!this.result) return;\n      callback(this.result);\n      this.result.continue();\n    };\n\n    return promisifyRequest(store.transaction);\n  });\n}\n/**\r\n * Get all keys in the store.\r\n *\r\n * @param customStore Method to get a custom store. Use with caution (see the docs).\r\n */\n\n\nfunction keys() {\n  let customStore = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultGetStore();\n  const items = [];\n  return eachCursor(customStore, cursor => items.push(cursor.key)).then(() => items);\n}\n/**\r\n * Get all values in the store.\r\n *\r\n * @param customStore Method to get a custom store. Use with caution (see the docs).\r\n */\n\n\nfunction values() {\n  let customStore = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultGetStore();\n  const items = [];\n  return eachCursor(customStore, cursor => items.push(cursor.value)).then(() => items);\n}\n/**\r\n * Get all entries in the store. Each entry is an array of `[key, value]`.\r\n *\r\n * @param customStore Method to get a custom store. Use with caution (see the docs).\r\n */\n\n\nfunction entries() {\n  let customStore = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultGetStore();\n  const items = [];\n  return eachCursor(customStore, cursor => items.push([cursor.key, cursor.value])).then(() => items);\n}\n\nexport { clear, createStore, del, delMany, entries, get, getMany, keys, promisifyRequest, set, setMany, update, values };","map":{"version":3,"names":["safariFix","promisifyRequest","request","Promise","resolve","reject","oncomplete","onsuccess","result","onabort","onerror","error","createStore","dbName","storeName","dbp","then","indexedDB","open","onupgradeneeded","createObjectStore","txMode","callback","db","transaction","objectStore","defaultGetStoreFunc","defaultGetStore","get","key","customStore","store","set","value","put","setMany","entries","forEach","entry","getMany","keys","all","map","update","updater","err","del","delete","delMany","clear","eachCursor","openCursor","continue","items","cursor","push","values"],"sources":["C:/Users/brosk/Documents/Web Dev/modern-web-development-project/project/node_modules/idb-keyval/dist/index.js"],"sourcesContent":["import safariFix from 'safari-14-idb-fix';\r\n\r\nfunction promisifyRequest(request) {\r\n    return new Promise((resolve, reject) => {\r\n        // @ts-ignore - file size hacks\r\n        request.oncomplete = request.onsuccess = () => resolve(request.result);\r\n        // @ts-ignore - file size hacks\r\n        request.onabort = request.onerror = () => reject(request.error);\r\n    });\r\n}\r\nfunction createStore(dbName, storeName) {\r\n    const dbp = safariFix().then(() => {\r\n        const request = indexedDB.open(dbName);\r\n        request.onupgradeneeded = () => request.result.createObjectStore(storeName);\r\n        return promisifyRequest(request);\r\n    });\r\n    return (txMode, callback) => dbp.then((db) => callback(db.transaction(storeName, txMode).objectStore(storeName)));\r\n}\r\nlet defaultGetStoreFunc;\r\nfunction defaultGetStore() {\r\n    if (!defaultGetStoreFunc) {\r\n        defaultGetStoreFunc = createStore('keyval-store', 'keyval');\r\n    }\r\n    return defaultGetStoreFunc;\r\n}\r\n/**\r\n * Get a value by its key.\r\n *\r\n * @param key\r\n * @param customStore Method to get a custom store. Use with caution (see the docs).\r\n */\r\nfunction get(key, customStore = defaultGetStore()) {\r\n    return customStore('readonly', (store) => promisifyRequest(store.get(key)));\r\n}\r\n/**\r\n * Set a value with a key.\r\n *\r\n * @param key\r\n * @param value\r\n * @param customStore Method to get a custom store. Use with caution (see the docs).\r\n */\r\nfunction set(key, value, customStore = defaultGetStore()) {\r\n    return customStore('readwrite', (store) => {\r\n        store.put(value, key);\r\n        return promisifyRequest(store.transaction);\r\n    });\r\n}\r\n/**\r\n * Set multiple values at once. This is faster than calling set() multiple times.\r\n * It's also atomic – if one of the pairs can't be added, none will be added.\r\n *\r\n * @param entries Array of entries, where each entry is an array of `[key, value]`.\r\n * @param customStore Method to get a custom store. Use with caution (see the docs).\r\n */\r\nfunction setMany(entries, customStore = defaultGetStore()) {\r\n    return customStore('readwrite', (store) => {\r\n        entries.forEach((entry) => store.put(entry[1], entry[0]));\r\n        return promisifyRequest(store.transaction);\r\n    });\r\n}\r\n/**\r\n * Get multiple values by their keys\r\n *\r\n * @param keys\r\n * @param customStore Method to get a custom store. Use with caution (see the docs).\r\n */\r\nfunction getMany(keys, customStore = defaultGetStore()) {\r\n    return customStore('readonly', (store) => Promise.all(keys.map((key) => promisifyRequest(store.get(key)))));\r\n}\r\n/**\r\n * Update a value. This lets you see the old value and update it as an atomic operation.\r\n *\r\n * @param key\r\n * @param updater A callback that takes the old value and returns a new value.\r\n * @param customStore Method to get a custom store. Use with caution (see the docs).\r\n */\r\nfunction update(key, updater, customStore = defaultGetStore()) {\r\n    return customStore('readwrite', (store) => \r\n    // Need to create the promise manually.\r\n    // If I try to chain promises, the transaction closes in browsers\r\n    // that use a promise polyfill (IE10/11).\r\n    new Promise((resolve, reject) => {\r\n        store.get(key).onsuccess = function () {\r\n            try {\r\n                store.put(updater(this.result), key);\r\n                resolve(promisifyRequest(store.transaction));\r\n            }\r\n            catch (err) {\r\n                reject(err);\r\n            }\r\n        };\r\n    }));\r\n}\r\n/**\r\n * Delete a particular key from the store.\r\n *\r\n * @param key\r\n * @param customStore Method to get a custom store. Use with caution (see the docs).\r\n */\r\nfunction del(key, customStore = defaultGetStore()) {\r\n    return customStore('readwrite', (store) => {\r\n        store.delete(key);\r\n        return promisifyRequest(store.transaction);\r\n    });\r\n}\r\n/**\r\n * Delete multiple keys at once.\r\n *\r\n * @param keys List of keys to delete.\r\n * @param customStore Method to get a custom store. Use with caution (see the docs).\r\n */\r\nfunction delMany(keys, customStore = defaultGetStore()) {\r\n    return customStore('readwrite', (store) => {\r\n        keys.forEach((key) => store.delete(key));\r\n        return promisifyRequest(store.transaction);\r\n    });\r\n}\r\n/**\r\n * Clear all values in the store.\r\n *\r\n * @param customStore Method to get a custom store. Use with caution (see the docs).\r\n */\r\nfunction clear(customStore = defaultGetStore()) {\r\n    return customStore('readwrite', (store) => {\r\n        store.clear();\r\n        return promisifyRequest(store.transaction);\r\n    });\r\n}\r\nfunction eachCursor(customStore, callback) {\r\n    return customStore('readonly', (store) => {\r\n        // This would be store.getAllKeys(), but it isn't supported by Edge or Safari.\r\n        // And openKeyCursor isn't supported by Safari.\r\n        store.openCursor().onsuccess = function () {\r\n            if (!this.result)\r\n                return;\r\n            callback(this.result);\r\n            this.result.continue();\r\n        };\r\n        return promisifyRequest(store.transaction);\r\n    });\r\n}\r\n/**\r\n * Get all keys in the store.\r\n *\r\n * @param customStore Method to get a custom store. Use with caution (see the docs).\r\n */\r\nfunction keys(customStore = defaultGetStore()) {\r\n    const items = [];\r\n    return eachCursor(customStore, (cursor) => items.push(cursor.key)).then(() => items);\r\n}\r\n/**\r\n * Get all values in the store.\r\n *\r\n * @param customStore Method to get a custom store. Use with caution (see the docs).\r\n */\r\nfunction values(customStore = defaultGetStore()) {\r\n    const items = [];\r\n    return eachCursor(customStore, (cursor) => items.push(cursor.value)).then(() => items);\r\n}\r\n/**\r\n * Get all entries in the store. Each entry is an array of `[key, value]`.\r\n *\r\n * @param customStore Method to get a custom store. Use with caution (see the docs).\r\n */\r\nfunction entries(customStore = defaultGetStore()) {\r\n    const items = [];\r\n    return eachCursor(customStore, (cursor) => items.push([cursor.key, cursor.value])).then(() => items);\r\n}\r\n\r\nexport { clear, createStore, del, delMany, entries, get, getMany, keys, promisifyRequest, set, setMany, update, values };\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}