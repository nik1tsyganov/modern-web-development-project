{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs3/helpers/interopRequireDefault\");\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs3/core-js-stable/object/define-property\");\n\nvar _Reflect$construct = require(\"@babel/runtime-corejs3/core-js-stable/reflect/construct\");\n\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/createClass\"));\n\nvar _get2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/get\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/getPrototypeOf\"));\n\nvar _ParseACL = _interopRequireDefault(require(\"./ParseACL\"));\n\nvar _ParseError = _interopRequireDefault(require(\"./ParseError\"));\n\nvar _ParseObject2 = _interopRequireDefault(require(\"./ParseObject\"));\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function () {\n    var Super = (0, _getPrototypeOf2.default)(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;\n      result = _Reflect$construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return (0, _possibleConstructorReturn2.default)(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !_Reflect$construct) return false;\n  if (_Reflect$construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(_Reflect$construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n/**\r\n * Represents a Role on the Parse server. Roles represent groupings of\r\n * Users for the purposes of granting permissions (e.g. specifying an ACL\r\n * for an Object). Roles are specified by their sets of child users and\r\n * child roles, all of which are granted any permissions that the parent\r\n * role has.\r\n *\r\n * <p>Roles must have a name (which cannot be changed after creation of the\r\n * role), and must specify an ACL.</p>\r\n *\r\n * @alias Parse.Role\r\n * @augments Parse.Object\r\n */\n\n\nvar ParseRole = /*#__PURE__*/function (_ParseObject) {\n  (0, _inherits2.default)(ParseRole, _ParseObject);\n\n  var _super = _createSuper(ParseRole);\n  /**\r\n   * @param {string} name The name of the Role to create.\r\n   * @param {Parse.ACL} acl The ACL for this role. Roles must have an ACL.\r\n   * A Parse.Role is a local representation of a role persisted to the Parse\r\n   * cloud.\r\n   */\n\n\n  function ParseRole(name\n  /*: string*/\n  , acl\n  /*: ParseACL*/\n  ) {\n    var _this;\n\n    (0, _classCallCheck2.default)(this, ParseRole);\n    _this = _super.call(this, '_Role');\n\n    if (typeof name === 'string' && acl instanceof _ParseACL.default) {\n      _this.setName(name);\n\n      _this.setACL(acl);\n    }\n\n    return _this;\n  }\n  /**\r\n   * Gets the name of the role.  You can alternatively call role.get(\"name\")\r\n   *\r\n   * @returns {string} the name of the role.\r\n   */\n\n\n  (0, _createClass2.default)(ParseRole, [{\n    key: \"getName\",\n    value: function ()\n    /*: ?string*/\n    {\n      var name = this.get('name');\n\n      if (name == null || typeof name === 'string') {\n        return name;\n      }\n\n      return '';\n    }\n    /**\r\n     * Sets the name for a role. This value must be set before the role has\r\n     * been saved to the server, and cannot be set once the role has been\r\n     * saved.\r\n     *\r\n     * <p>\r\n     *   A role's name can only contain alphanumeric characters, _, -, and\r\n     *   spaces.\r\n     * </p>\r\n     *\r\n     * <p>This is equivalent to calling role.set(\"name\", name)</p>\r\n     *\r\n     * @param {string} name The name of the role.\r\n     * @param {object} options Standard options object with success and error\r\n     *     callbacks.\r\n     * @returns {(ParseObject|boolean)} true if the set succeeded.\r\n     */\n\n  }, {\n    key: \"setName\",\n    value: function (name\n    /*: string*/\n    , options\n    /*:: ?: mixed*/\n    )\n    /*: ParseObject | boolean*/\n    {\n      return this.set('name', name, options);\n    }\n    /**\r\n     * Gets the Parse.Relation for the Parse.Users that are direct\r\n     * children of this role. These users are granted any privileges that this\r\n     * role has been granted (e.g. read or write access through ACLs). You can\r\n     * add or remove users from the role through this relation.\r\n     *\r\n     * <p>This is equivalent to calling role.relation(\"users\")</p>\r\n     *\r\n     * @returns {Parse.Relation} the relation for the users belonging to this\r\n     *     role.\r\n     */\n\n  }, {\n    key: \"getUsers\",\n    value: function ()\n    /*: ParseRelation*/\n    {\n      return this.relation('users');\n    }\n    /**\r\n     * Gets the Parse.Relation for the Parse.Roles that are direct\r\n     * children of this role. These roles' users are granted any privileges that\r\n     * this role has been granted (e.g. read or write access through ACLs). You\r\n     * can add or remove child roles from this role through this relation.\r\n     *\r\n     * <p>This is equivalent to calling role.relation(\"roles\")</p>\r\n     *\r\n     * @returns {Parse.Relation} the relation for the roles belonging to this\r\n     *     role.\r\n     */\n\n  }, {\n    key: \"getRoles\",\n    value: function ()\n    /*: ParseRelation*/\n    {\n      return this.relation('roles');\n    }\n  }, {\n    key: \"validate\",\n    value: function (attrs\n    /*: AttributeMap*/\n    , options\n    /*:: ?: mixed*/\n    )\n    /*: ParseError | boolean*/\n    {\n      var isInvalid = (0, _get2.default)((0, _getPrototypeOf2.default)(ParseRole.prototype), \"validate\", this).call(this, attrs, options);\n\n      if (isInvalid) {\n        return isInvalid;\n      }\n\n      if ('name' in attrs && attrs.name !== this.getName()) {\n        var newName = attrs.name;\n\n        if (this.id && this.id !== attrs.objectId) {\n          // Check to see if the objectId being set matches this.id\n          // This happens during a fetch -- the id is set before calling fetch\n          // Let the name be set in this case\n          return new _ParseError.default(_ParseError.default.OTHER_CAUSE, \"A role's name can only be set before it has been saved.\");\n        }\n\n        if (typeof newName !== 'string') {\n          return new _ParseError.default(_ParseError.default.OTHER_CAUSE, \"A role's name must be a String.\");\n        }\n\n        if (!/^[0-9a-zA-Z\\-_ ]+$/.test(newName)) {\n          return new _ParseError.default(_ParseError.default.OTHER_CAUSE, \"A role's name can be only contain alphanumeric characters, _, \" + '-, and spaces.');\n        }\n      }\n\n      return false;\n    }\n  }]);\n  return ParseRole;\n}(_ParseObject2.default);\n\n_ParseObject2.default.registerSubclass('_Role', ParseRole);\n\nvar _default = ParseRole;\nexports.default = _default;","map":{"version":3,"names":["_interopRequireDefault","require","_Object$defineProperty","_Reflect$construct","exports","value","default","_classCallCheck2","_createClass2","_get2","_inherits2","_possibleConstructorReturn2","_getPrototypeOf2","_ParseACL","_ParseError","_ParseObject2","_createSuper","Derived","hasNativeReflectConstruct","_isNativeReflectConstruct","Super","result","NewTarget","constructor","arguments","apply","Reflect","sham","Proxy","Boolean","prototype","valueOf","call","e","ParseRole","_ParseObject","_super","name","acl","_this","setName","setACL","key","get","options","set","relation","attrs","isInvalid","getName","newName","id","objectId","OTHER_CAUSE","test","registerSubclass","_default"],"sources":["C:/Users/brosk/Documents/Web Dev/modern-web-development-project/project/node_modules/parse/lib/browser/ParseRole.js"],"sourcesContent":["\"use strict\";\r\n\r\nvar _interopRequireDefault = require(\"@babel/runtime-corejs3/helpers/interopRequireDefault\");\r\n\r\nvar _Object$defineProperty = require(\"@babel/runtime-corejs3/core-js-stable/object/define-property\");\r\n\r\nvar _Reflect$construct = require(\"@babel/runtime-corejs3/core-js-stable/reflect/construct\");\r\n\r\n_Object$defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nexports.default = void 0;\r\n\r\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/classCallCheck\"));\r\n\r\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/createClass\"));\r\n\r\nvar _get2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/get\"));\r\n\r\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/inherits\"));\r\n\r\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/possibleConstructorReturn\"));\r\n\r\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/getPrototypeOf\"));\r\n\r\nvar _ParseACL = _interopRequireDefault(require(\"./ParseACL\"));\r\n\r\nvar _ParseError = _interopRequireDefault(require(\"./ParseError\"));\r\n\r\nvar _ParseObject2 = _interopRequireDefault(require(\"./ParseObject\"));\r\n\r\nfunction _createSuper(Derived) {\r\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\r\n\r\n  return function () {\r\n    var Super = (0, _getPrototypeOf2.default)(Derived),\r\n        result;\r\n\r\n    if (hasNativeReflectConstruct) {\r\n      var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;\r\n      result = _Reflect$construct(Super, arguments, NewTarget);\r\n    } else {\r\n      result = Super.apply(this, arguments);\r\n    }\r\n\r\n    return (0, _possibleConstructorReturn2.default)(this, result);\r\n  };\r\n}\r\n\r\nfunction _isNativeReflectConstruct() {\r\n  if (typeof Reflect === \"undefined\" || !_Reflect$construct) return false;\r\n  if (_Reflect$construct.sham) return false;\r\n  if (typeof Proxy === \"function\") return true;\r\n\r\n  try {\r\n    Boolean.prototype.valueOf.call(_Reflect$construct(Boolean, [], function () {}));\r\n    return true;\r\n  } catch (e) {\r\n    return false;\r\n  }\r\n}\r\n/**\r\n * Represents a Role on the Parse server. Roles represent groupings of\r\n * Users for the purposes of granting permissions (e.g. specifying an ACL\r\n * for an Object). Roles are specified by their sets of child users and\r\n * child roles, all of which are granted any permissions that the parent\r\n * role has.\r\n *\r\n * <p>Roles must have a name (which cannot be changed after creation of the\r\n * role), and must specify an ACL.</p>\r\n *\r\n * @alias Parse.Role\r\n * @augments Parse.Object\r\n */\r\n\r\n\r\nvar ParseRole = /*#__PURE__*/function (_ParseObject) {\r\n  (0, _inherits2.default)(ParseRole, _ParseObject);\r\n\r\n  var _super = _createSuper(ParseRole);\r\n  /**\r\n   * @param {string} name The name of the Role to create.\r\n   * @param {Parse.ACL} acl The ACL for this role. Roles must have an ACL.\r\n   * A Parse.Role is a local representation of a role persisted to the Parse\r\n   * cloud.\r\n   */\r\n\r\n\r\n  function ParseRole(name\r\n  /*: string*/\r\n  , acl\r\n  /*: ParseACL*/\r\n  ) {\r\n    var _this;\r\n\r\n    (0, _classCallCheck2.default)(this, ParseRole);\r\n    _this = _super.call(this, '_Role');\r\n\r\n    if (typeof name === 'string' && acl instanceof _ParseACL.default) {\r\n      _this.setName(name);\r\n\r\n      _this.setACL(acl);\r\n    }\r\n\r\n    return _this;\r\n  }\r\n  /**\r\n   * Gets the name of the role.  You can alternatively call role.get(\"name\")\r\n   *\r\n   * @returns {string} the name of the role.\r\n   */\r\n\r\n\r\n  (0, _createClass2.default)(ParseRole, [{\r\n    key: \"getName\",\r\n    value: function ()\r\n    /*: ?string*/\r\n    {\r\n      var name = this.get('name');\r\n\r\n      if (name == null || typeof name === 'string') {\r\n        return name;\r\n      }\r\n\r\n      return '';\r\n    }\r\n    /**\r\n     * Sets the name for a role. This value must be set before the role has\r\n     * been saved to the server, and cannot be set once the role has been\r\n     * saved.\r\n     *\r\n     * <p>\r\n     *   A role's name can only contain alphanumeric characters, _, -, and\r\n     *   spaces.\r\n     * </p>\r\n     *\r\n     * <p>This is equivalent to calling role.set(\"name\", name)</p>\r\n     *\r\n     * @param {string} name The name of the role.\r\n     * @param {object} options Standard options object with success and error\r\n     *     callbacks.\r\n     * @returns {(ParseObject|boolean)} true if the set succeeded.\r\n     */\r\n\r\n  }, {\r\n    key: \"setName\",\r\n    value: function (name\r\n    /*: string*/\r\n    , options\r\n    /*:: ?: mixed*/\r\n    )\r\n    /*: ParseObject | boolean*/\r\n    {\r\n      return this.set('name', name, options);\r\n    }\r\n    /**\r\n     * Gets the Parse.Relation for the Parse.Users that are direct\r\n     * children of this role. These users are granted any privileges that this\r\n     * role has been granted (e.g. read or write access through ACLs). You can\r\n     * add or remove users from the role through this relation.\r\n     *\r\n     * <p>This is equivalent to calling role.relation(\"users\")</p>\r\n     *\r\n     * @returns {Parse.Relation} the relation for the users belonging to this\r\n     *     role.\r\n     */\r\n\r\n  }, {\r\n    key: \"getUsers\",\r\n    value: function ()\r\n    /*: ParseRelation*/\r\n    {\r\n      return this.relation('users');\r\n    }\r\n    /**\r\n     * Gets the Parse.Relation for the Parse.Roles that are direct\r\n     * children of this role. These roles' users are granted any privileges that\r\n     * this role has been granted (e.g. read or write access through ACLs). You\r\n     * can add or remove child roles from this role through this relation.\r\n     *\r\n     * <p>This is equivalent to calling role.relation(\"roles\")</p>\r\n     *\r\n     * @returns {Parse.Relation} the relation for the roles belonging to this\r\n     *     role.\r\n     */\r\n\r\n  }, {\r\n    key: \"getRoles\",\r\n    value: function ()\r\n    /*: ParseRelation*/\r\n    {\r\n      return this.relation('roles');\r\n    }\r\n  }, {\r\n    key: \"validate\",\r\n    value: function (attrs\r\n    /*: AttributeMap*/\r\n    , options\r\n    /*:: ?: mixed*/\r\n    )\r\n    /*: ParseError | boolean*/\r\n    {\r\n      var isInvalid = (0, _get2.default)((0, _getPrototypeOf2.default)(ParseRole.prototype), \"validate\", this).call(this, attrs, options);\r\n\r\n      if (isInvalid) {\r\n        return isInvalid;\r\n      }\r\n\r\n      if ('name' in attrs && attrs.name !== this.getName()) {\r\n        var newName = attrs.name;\r\n\r\n        if (this.id && this.id !== attrs.objectId) {\r\n          // Check to see if the objectId being set matches this.id\r\n          // This happens during a fetch -- the id is set before calling fetch\r\n          // Let the name be set in this case\r\n          return new _ParseError.default(_ParseError.default.OTHER_CAUSE, \"A role's name can only be set before it has been saved.\");\r\n        }\r\n\r\n        if (typeof newName !== 'string') {\r\n          return new _ParseError.default(_ParseError.default.OTHER_CAUSE, \"A role's name must be a String.\");\r\n        }\r\n\r\n        if (!/^[0-9a-zA-Z\\-_ ]+$/.test(newName)) {\r\n          return new _ParseError.default(_ParseError.default.OTHER_CAUSE, \"A role's name can be only contain alphanumeric characters, _, \" + '-, and spaces.');\r\n        }\r\n      }\r\n\r\n      return false;\r\n    }\r\n  }]);\r\n  return ParseRole;\r\n}(_ParseObject2.default);\r\n\r\n_ParseObject2.default.registerSubclass('_Role', ParseRole);\r\n\r\nvar _default = ParseRole;\r\nexports.default = _default;"],"mappings":"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"},"metadata":{},"sourceType":"script"}