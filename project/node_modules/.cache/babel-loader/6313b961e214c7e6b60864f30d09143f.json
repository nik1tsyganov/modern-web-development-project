{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs3/helpers/interopRequireDefault\");\n\nvar _concat = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/concat\"));\n\nvar _forEach = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/for-each\"));\n/*\r\n * Copyright (c) 2015-present, Parse, LLC.\r\n * All rights reserved.\r\n *\r\n * This source code is licensed under the BSD-style license found in the\r\n * LICENSE file in the root directory of this source tree. An additional grant\r\n * of patent rights can be found in the PATENTS file in the same directory.\r\n *\r\n * @flow\r\n */\n\n/*:: import type { AttributeMap, ObjectCache, OpsMap, State } from './ObjectStateMutations';*/\n\n/*:: import type ParseFile from './ParseFile';*/\n\n/*:: import type { FileSource } from './ParseFile';*/\n\n/*:: import type { Op } from './ParseOp';*/\n\n/*:: import type ParseObject from './ParseObject';*/\n\n/*:: import type { QueryJSON } from './ParseQuery';*/\n\n/*:: import type ParseUser from './ParseUser';*/\n\n/*:: import type { AuthData } from './ParseUser';*/\n\n/*:: import type { PushData } from './Push';*/\n\n/*:: import type { RequestOptions, FullOptions } from './RESTController';*/\n\n/*:: type AnalyticsController = {\r\n  track: (name: string, dimensions: { [key: string]: string }) => Promise,\r\n};*/\n\n/*:: type CloudController = {\r\n  run: (name: string, data: mixed, options: RequestOptions) => Promise,\r\n  getJobsData: (options: RequestOptions) => Promise,\r\n  startJob: (name: string, data: mixed, options: RequestOptions) => Promise,\r\n};*/\n\n/*:: type ConfigController = {\r\n  current: () => Promise,\r\n  get: () => Promise,\r\n  save: (attrs: { [key: string]: any }) => Promise,\r\n};*/\n\n/*:: type CryptoController = {\r\n  encrypt: (obj: any, secretKey: string) => string,\r\n  decrypt: (encryptedText: string, secretKey: any) => string,\r\n};*/\n\n/*:: type FileController = {\r\n  saveFile: (name: string, source: FileSource, options: FullOptions) => Promise,\r\n  saveBase64: (name: string, source: FileSource, options: FullOptions) => Promise,\r\n  download: (uri: string) => Promise,\r\n};*/\n\n/*:: type InstallationController = {\r\n  currentInstallationId: () => Promise,\r\n};*/\n\n/*:: type ObjectController = {\r\n  fetch: (\r\n    object: ParseObject | Array<ParseObject>,\r\n    forceFetch: boolean,\r\n    options: RequestOptions\r\n  ) => Promise,\r\n  save: (object: ParseObject | Array<ParseObject | ParseFile>, options: RequestOptions) => Promise,\r\n  destroy: (object: ParseObject | Array<ParseObject>, options: RequestOptions) => Promise,\r\n};*/\n\n/*:: type ObjectStateController = {\r\n  getState: (obj: any) => ?State,\r\n  initializeState: (obj: any, initial?: State) => State,\r\n  removeState: (obj: any) => ?State,\r\n  getServerData: (obj: any) => AttributeMap,\r\n  setServerData: (obj: any, attributes: AttributeMap) => void,\r\n  getPendingOps: (obj: any) => Array<OpsMap>,\r\n  setPendingOp: (obj: any, attr: string, op: ?Op) => void,\r\n  pushPendingState: (obj: any) => void,\r\n  popPendingState: (obj: any) => OpsMap,\r\n  mergeFirstPendingState: (obj: any) => void,\r\n  getObjectCache: (obj: any) => ObjectCache,\r\n  estimateAttribute: (obj: any, attr: string) => mixed,\r\n  estimateAttributes: (obj: any) => AttributeMap,\r\n  commitServerChanges: (obj: any, changes: AttributeMap) => void,\r\n  enqueueTask: (obj: any, task: () => Promise) => Promise,\r\n  clearAllState: () => void,\r\n  duplicateState: (source: any, dest: any) => void,\r\n};*/\n\n/*:: type PushController = {\r\n  send: (data: PushData) => Promise,\r\n};*/\n\n/*:: type QueryController = {\r\n  find: (className: string, params: QueryJSON, options: RequestOptions) => Promise,\r\n  aggregate: (className: string, params: any, options: RequestOptions) => Promise,\r\n};*/\n\n/*:: type RESTController = {\r\n  request: (method: string, path: string, data: mixed, options: RequestOptions) => Promise,\r\n  ajax: (method: string, url: string, data: any, headers?: any, options: FullOptions) => Promise,\r\n};*/\n\n/*:: type SchemaController = {\r\n  purge: (className: string) => Promise,\r\n  get: (className: string, options: RequestOptions) => Promise,\r\n  delete: (className: string, options: RequestOptions) => Promise,\r\n  create: (className: string, params: any, options: RequestOptions) => Promise,\r\n  update: (className: string, params: any, options: RequestOptions) => Promise,\r\n  send(className: string, method: string, params: any, options: RequestOptions): Promise,\r\n};*/\n\n/*:: type SessionController = {\r\n  getSession: (token: RequestOptions) => Promise,\r\n};*/\n\n/*:: type StorageController =\r\n  | {\r\n      async: 0,\r\n      getItem: (path: string) => ?string,\r\n      setItem: (path: string, value: string) => void,\r\n      removeItem: (path: string) => void,\r\n      getItemAsync?: (path: string) => Promise,\r\n      setItemAsync?: (path: string, value: string) => Promise,\r\n      removeItemAsync?: (path: string) => Promise,\r\n      clear: () => void,\r\n    }\r\n  | {\r\n      async: 1,\r\n      getItem?: (path: string) => ?string,\r\n      setItem?: (path: string, value: string) => void,\r\n      removeItem?: (path: string) => void,\r\n      getItemAsync: (path: string) => Promise,\r\n      setItemAsync: (path: string, value: string) => Promise,\r\n      removeItemAsync: (path: string) => Promise,\r\n      clear: () => void,\r\n    };*/\n\n/*:: type LocalDatastoreController = {\r\n  fromPinWithName: (name: string) => ?any,\r\n  pinWithName: (name: string, objects: any) => void,\r\n  unPinWithName: (name: string) => void,\r\n  getAllContents: () => ?any,\r\n  clear: () => void,\r\n};*/\n\n/*:: type UserController = {\r\n  setCurrentUser: (user: ParseUser) => Promise,\r\n  currentUser: () => ?ParseUser,\r\n  currentUserAsync: () => Promise,\r\n  signUp: (user: ParseUser, attrs: AttributeMap, options: RequestOptions) => Promise,\r\n  logIn: (user: ParseUser, options: RequestOptions) => Promise,\r\n  become: (options: RequestOptions) => Promise,\r\n  hydrate: (userJSON: AttributeMap) => Promise,\r\n  logOut: (options: RequestOptions) => Promise,\r\n  me: (options: RequestOptions) => Promise,\r\n  requestPasswordReset: (email: string, options: RequestOptions) => Promise,\r\n  updateUserOnDisk: (user: ParseUser) => Promise,\r\n  upgradeToRevocableSession: (user: ParseUser, options: RequestOptions) => Promise,\r\n  linkWith: (user: ParseUser, authData: AuthData) => Promise,\r\n  removeUserFromDisk: () => Promise,\r\n  verifyPassword: (username: string, password: string, options: RequestOptions) => Promise,\r\n  requestEmailVerification: (email: string, options: RequestOptions) => Promise,\r\n};*/\n\n/*:: type HooksController = {\r\n  get: (type: string, functionName?: string, triggerName?: string) => Promise,\r\n  create: (hook: mixed) => Promise,\r\n  delete: (hook: mixed) => Promise,\r\n  update: (hook: mixed) => Promise,\r\n  send: (method: string, path: string, body?: mixed) => Promise,\r\n};*/\n\n/*:: type WebSocketController = {\r\n  onopen: () => void,\r\n  onmessage: (message: any) => void,\r\n  onclose: () => void,\r\n  onerror: (error: any) => void,\r\n  send: (data: any) => void,\r\n  close: () => void,\r\n};*/\n\n/*:: type Config = {\r\n  AnalyticsController?: AnalyticsController,\r\n  CloudController?: CloudController,\r\n  ConfigController?: ConfigController,\r\n  FileController?: FileController,\r\n  InstallationController?: InstallationController,\r\n  ObjectController?: ObjectController,\r\n  ObjectStateController?: ObjectStateController,\r\n  PushController?: PushController,\r\n  QueryController?: QueryController,\r\n  RESTController?: RESTController,\r\n  SchemaController?: SchemaController,\r\n  SessionController?: SessionController,\r\n  StorageController?: StorageController,\r\n  LocalDatastoreController?: LocalDatastoreController,\r\n  UserController?: UserController,\r\n  HooksController?: HooksController,\r\n  WebSocketController?: WebSocketController,\r\n};*/\n\n\nvar config\n/*: Config & { [key: string]: mixed }*/\n= {\n  // Defaults\n  IS_NODE: typeof process !== 'undefined' && !!process.versions && !!process.versions.node && !process.versions.electron,\n  REQUEST_ATTEMPT_LIMIT: 5,\n  REQUEST_BATCH_SIZE: 20,\n  REQUEST_HEADERS: {},\n  SERVER_URL: 'https://api.parse.com/1',\n  SERVER_AUTH_TYPE: null,\n  SERVER_AUTH_TOKEN: null,\n  LIVEQUERY_SERVER_URL: null,\n  ENCRYPTED_KEY: null,\n  VERSION: 'js' + \"3.4.2\",\n  APPLICATION_ID: null,\n  JAVASCRIPT_KEY: null,\n  MASTER_KEY: null,\n  USE_MASTER_KEY: false,\n  PERFORM_USER_REWRITE: true,\n  FORCE_REVOCABLE_SESSION: false,\n  ENCRYPTED_USER: false,\n  IDEMPOTENCY: false,\n  ALLOW_CUSTOM_OBJECT_ID: false\n};\n\nfunction requireMethods(name\n/*: string*/\n, methods\n/*: Array<string>*/\n, controller\n/*: any*/\n) {\n  (0, _forEach.default)(methods).call(methods, function (func) {\n    if (typeof controller[func] !== 'function') {\n      var _context;\n\n      throw new Error((0, _concat.default)(_context = \"\".concat(name, \" must implement \")).call(_context, func, \"()\"));\n    }\n  });\n}\n\nmodule.exports = {\n  get: function get(key\n  /*: string*/\n  )\n  /*: any*/\n  {\n    if (config.hasOwnProperty(key)) {\n      return config[key];\n    }\n\n    throw new Error('Configuration key not found: ' + key);\n  },\n  set: function set(key\n  /*: string*/\n  , value\n  /*: any*/\n  )\n  /*: void*/\n  {\n    config[key] = value;\n  },\n\n  /* Specialized Controller Setters/Getters */\n  setAnalyticsController: function setAnalyticsController(controller\n  /*: AnalyticsController*/\n  ) {\n    requireMethods('AnalyticsController', ['track'], controller);\n    config['AnalyticsController'] = controller;\n  },\n  getAnalyticsController: function getAnalyticsController()\n  /*: AnalyticsController*/\n  {\n    return config['AnalyticsController'];\n  },\n  setCloudController: function setCloudController(controller\n  /*: CloudController*/\n  ) {\n    requireMethods('CloudController', ['run', 'getJobsData', 'startJob'], controller);\n    config['CloudController'] = controller;\n  },\n  getCloudController: function getCloudController()\n  /*: CloudController*/\n  {\n    return config['CloudController'];\n  },\n  setConfigController: function setConfigController(controller\n  /*: ConfigController*/\n  ) {\n    requireMethods('ConfigController', ['current', 'get', 'save'], controller);\n    config['ConfigController'] = controller;\n  },\n  getConfigController: function getConfigController()\n  /*: ConfigController*/\n  {\n    return config['ConfigController'];\n  },\n  setCryptoController: function setCryptoController(controller\n  /*: CryptoController*/\n  ) {\n    requireMethods('CryptoController', ['encrypt', 'decrypt'], controller);\n    config['CryptoController'] = controller;\n  },\n  getCryptoController: function getCryptoController()\n  /*: CryptoController*/\n  {\n    return config['CryptoController'];\n  },\n  setFileController: function setFileController(controller\n  /*: FileController*/\n  ) {\n    requireMethods('FileController', ['saveFile', 'saveBase64'], controller);\n    config['FileController'] = controller;\n  },\n  getFileController: function getFileController()\n  /*: FileController*/\n  {\n    return config['FileController'];\n  },\n  setInstallationController: function setInstallationController(controller\n  /*: InstallationController*/\n  ) {\n    requireMethods('InstallationController', ['currentInstallationId'], controller);\n    config['InstallationController'] = controller;\n  },\n  getInstallationController: function getInstallationController()\n  /*: InstallationController*/\n  {\n    return config['InstallationController'];\n  },\n  setObjectController: function setObjectController(controller\n  /*: ObjectController*/\n  ) {\n    requireMethods('ObjectController', ['save', 'fetch', 'destroy'], controller);\n    config['ObjectController'] = controller;\n  },\n  getObjectController: function getObjectController()\n  /*: ObjectController*/\n  {\n    return config['ObjectController'];\n  },\n  setObjectStateController: function setObjectStateController(controller\n  /*: ObjectStateController*/\n  ) {\n    requireMethods('ObjectStateController', ['getState', 'initializeState', 'removeState', 'getServerData', 'setServerData', 'getPendingOps', 'setPendingOp', 'pushPendingState', 'popPendingState', 'mergeFirstPendingState', 'getObjectCache', 'estimateAttribute', 'estimateAttributes', 'commitServerChanges', 'enqueueTask', 'clearAllState'], controller);\n    config['ObjectStateController'] = controller;\n  },\n  getObjectStateController: function getObjectStateController()\n  /*: ObjectStateController*/\n  {\n    return config['ObjectStateController'];\n  },\n  setPushController: function setPushController(controller\n  /*: PushController*/\n  ) {\n    requireMethods('PushController', ['send'], controller);\n    config['PushController'] = controller;\n  },\n  getPushController: function getPushController()\n  /*: PushController*/\n  {\n    return config['PushController'];\n  },\n  setQueryController: function setQueryController(controller\n  /*: QueryController*/\n  ) {\n    requireMethods('QueryController', ['find', 'aggregate'], controller);\n    config['QueryController'] = controller;\n  },\n  getQueryController: function getQueryController()\n  /*: QueryController*/\n  {\n    return config['QueryController'];\n  },\n  setRESTController: function setRESTController(controller\n  /*: RESTController*/\n  ) {\n    requireMethods('RESTController', ['request', 'ajax'], controller);\n    config['RESTController'] = controller;\n  },\n  getRESTController: function getRESTController()\n  /*: RESTController*/\n  {\n    return config['RESTController'];\n  },\n  setSchemaController: function setSchemaController(controller\n  /*: SchemaController*/\n  ) {\n    requireMethods('SchemaController', ['get', 'create', 'update', 'delete', 'send', 'purge'], controller);\n    config['SchemaController'] = controller;\n  },\n  getSchemaController: function getSchemaController()\n  /*: SchemaController*/\n  {\n    return config['SchemaController'];\n  },\n  setSessionController: function setSessionController(controller\n  /*: SessionController*/\n  ) {\n    requireMethods('SessionController', ['getSession'], controller);\n    config['SessionController'] = controller;\n  },\n  getSessionController: function getSessionController()\n  /*: SessionController*/\n  {\n    return config['SessionController'];\n  },\n  setStorageController: function setStorageController(controller\n  /*: StorageController*/\n  ) {\n    if (controller.async) {\n      requireMethods('An async StorageController', ['getItemAsync', 'setItemAsync', 'removeItemAsync', 'getAllKeysAsync'], controller);\n    } else {\n      requireMethods('A synchronous StorageController', ['getItem', 'setItem', 'removeItem', 'getAllKeys'], controller);\n    }\n\n    config['StorageController'] = controller;\n  },\n  setLocalDatastoreController: function setLocalDatastoreController(controller\n  /*: LocalDatastoreController*/\n  ) {\n    requireMethods('LocalDatastoreController', ['pinWithName', 'fromPinWithName', 'unPinWithName', 'getAllContents', 'clear'], controller);\n    config['LocalDatastoreController'] = controller;\n  },\n  getLocalDatastoreController: function getLocalDatastoreController()\n  /*: LocalDatastoreController*/\n  {\n    return config['LocalDatastoreController'];\n  },\n  setLocalDatastore: function setLocalDatastore(store\n  /*: any*/\n  ) {\n    config['LocalDatastore'] = store;\n  },\n  getLocalDatastore: function getLocalDatastore() {\n    return config['LocalDatastore'];\n  },\n  getStorageController: function getStorageController()\n  /*: StorageController*/\n  {\n    return config['StorageController'];\n  },\n  setAsyncStorage: function setAsyncStorage(storage\n  /*: any*/\n  ) {\n    config['AsyncStorage'] = storage;\n  },\n  getAsyncStorage: function getAsyncStorage() {\n    return config['AsyncStorage'];\n  },\n  setWebSocketController: function setWebSocketController(controller\n  /*: WebSocketController*/\n  ) {\n    config['WebSocketController'] = controller;\n  },\n  getWebSocketController: function getWebSocketController()\n  /*: WebSocketController*/\n  {\n    return config['WebSocketController'];\n  },\n  setUserController: function setUserController(controller\n  /*: UserController*/\n  ) {\n    requireMethods('UserController', ['setCurrentUser', 'currentUser', 'currentUserAsync', 'signUp', 'logIn', 'become', 'logOut', 'me', 'requestPasswordReset', 'upgradeToRevocableSession', 'requestEmailVerification', 'verifyPassword', 'linkWith'], controller);\n    config['UserController'] = controller;\n  },\n  getUserController: function getUserController()\n  /*: UserController*/\n  {\n    return config['UserController'];\n  },\n  setLiveQueryController: function setLiveQueryController(controller\n  /*: any*/\n  ) {\n    requireMethods('LiveQueryController', ['setDefaultLiveQueryClient', 'getDefaultLiveQueryClient', '_clearCachedDefaultClient'], controller);\n    config['LiveQueryController'] = controller;\n  },\n  getLiveQueryController: function getLiveQueryController()\n  /*: any*/\n  {\n    return config['LiveQueryController'];\n  },\n  setHooksController: function setHooksController(controller\n  /*: HooksController*/\n  ) {\n    requireMethods('HooksController', ['create', 'get', 'update', 'remove'], controller);\n    config['HooksController'] = controller;\n  },\n  getHooksController: function getHooksController()\n  /*: HooksController*/\n  {\n    return config['HooksController'];\n  }\n};","map":null,"metadata":{},"sourceType":"script"}