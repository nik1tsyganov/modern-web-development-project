{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs3/helpers/interopRequireDefault\");\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs3/core-js-stable/object/define-property\");\n\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = void 0;\n\nvar _entries = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/object/entries\"));\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/slicedToArray\"));\n\nvar _isArray = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/array/is-array\"));\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/toConsumableArray\"));\n\nvar _find = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/find\"));\n\nvar _promise = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/promise\"));\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime-corejs3/regenerator\"));\n\nvar _splice = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/splice\"));\n\nvar _sort = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/sort\"));\n\nvar _includes = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/includes\"));\n\nvar _concat = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/concat\"));\n\nvar _keys = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/keys\"));\n\nvar _filter2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/filter\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/asyncToGenerator\"));\n\nvar _map2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/map\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/createClass\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/defineProperty\"));\n\nvar _slice = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/slice\"));\n\nvar _keys2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/object/keys\"));\n\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/typeof\"));\n\nvar _indexOf = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/index-of\"));\n\nvar _forEach = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/for-each\"));\n\nvar _CoreManager = _interopRequireDefault(require(\"./CoreManager\"));\n\nvar _encode = _interopRequireDefault(require(\"./encode\"));\n\nvar _promiseUtils = require(\"./promiseUtils\");\n\nvar _ParseError = _interopRequireDefault(require(\"./ParseError\"));\n\nvar _ParseGeoPoint = _interopRequireDefault(require(\"./ParseGeoPoint\"));\n\nvar _ParseObject = _interopRequireDefault(require(\"./ParseObject\"));\n\nvar _OfflineQuery = _interopRequireDefault(require(\"./OfflineQuery\"));\n\nvar _LocalDatastoreUtils = require(\"./LocalDatastoreUtils\");\n/*\n * Copyright (c) 2015-present, Parse, LLC.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @flow\n */\n\n/**\n * Converts a string into a regex that matches it.\n * Surrounding with \\Q .. \\E does this, we just need to escape any \\E's in\n * the text separately.\n *\n * @param s\n * @private\n * @returns {string}\n */\n\n\nfunction quote(s\n/*: string*/\n)\n/*: string*/\n{\n  return '\\\\Q' + s.replace('\\\\E', '\\\\E\\\\\\\\E\\\\Q') + '\\\\E';\n}\n/**\n * Extracts the class name from queries. If not all queries have the same\n * class name an error will be thrown.\n *\n * @param queries\n * @private\n * @returns {string}\n */\n\n\nfunction _getClassNameFromQueries(queries\n/*: Array<ParseQuery>*/\n)\n/*: ?string*/\n{\n  var className = null;\n  (0, _forEach.default)(queries).call(queries, function (q) {\n    if (!className) {\n      className = q.className;\n    }\n\n    if (className !== q.className) {\n      throw new Error('All queries must be for the same class.');\n    }\n  });\n  return className;\n}\n/*\n * Handles pre-populating the result data of a query with select fields,\n * making sure that the data object contains keys for all objects that have\n * been requested with a select, so that our cached state updates correctly.\n */\n\n\nfunction handleSelectResult(data\n/*: any*/\n, select\n/*: Array<string>*/\n) {\n  var serverDataMask = {};\n  (0, _forEach.default)(select).call(select, function (field) {\n    var hasSubObjectSelect = (0, _indexOf.default)(field).call(field, '.') !== -1;\n\n    if (!hasSubObjectSelect && !data.hasOwnProperty(field)) {\n      // this field was selected, but is missing from the retrieved data\n      data[field] = undefined;\n    } else if (hasSubObjectSelect) {\n      // this field references a sub-object,\n      // so we need to walk down the path components\n      var pathComponents = field.split('.');\n      var _obj = data;\n      var serverMask = serverDataMask;\n      (0, _forEach.default)(pathComponents).call(pathComponents, function (component, index, arr) {\n        // add keys if the expected data is missing\n        if (_obj && !_obj.hasOwnProperty(component)) {\n          _obj[component] = undefined;\n        }\n\n        if (_obj && (0, _typeof2.default)(_obj) === 'object') {\n          _obj = _obj[component];\n        } //add this path component to the server mask so we can fill it in later if needed\n\n\n        if (index < arr.length - 1) {\n          if (!serverMask[component]) {\n            serverMask[component] = {};\n          }\n\n          serverMask = serverMask[component];\n        }\n      });\n    }\n  });\n\n  if ((0, _keys2.default)(serverDataMask).length > 0) {\n    // When selecting from sub-objects, we don't want to blow away the missing\n    // information that we may have retrieved before. We've already added any\n    // missing selected keys to sub-objects, but we still need to add in the\n    // data for any previously retrieved sub-objects that were not selected.\n    var serverData = _CoreManager.default.getObjectStateController().getServerData({\n      id: data.objectId,\n      className: data.className\n    });\n\n    copyMissingDataWithMask(serverData, data, serverDataMask, false);\n  }\n}\n\nfunction copyMissingDataWithMask(src, dest, mask, copyThisLevel) {\n  //copy missing elements at this level\n  if (copyThisLevel) {\n    for (var _key in src) {\n      if (src.hasOwnProperty(_key) && !dest.hasOwnProperty(_key)) {\n        dest[_key] = src[_key];\n      }\n    }\n  }\n\n  for (var _key2 in mask) {\n    if (dest[_key2] !== undefined && dest[_key2] !== null && src !== undefined && src !== null) {\n      //traverse into objects as needed\n      copyMissingDataWithMask(src[_key2], dest[_key2], mask[_key2], true);\n    }\n  }\n}\n\nfunction handleOfflineSort(a, b, sorts) {\n  var order = sorts[0];\n  var operator = (0, _slice.default)(order).call(order, 0, 1);\n  var isDescending = operator === '-';\n\n  if (isDescending) {\n    order = order.substring(1);\n  }\n\n  if (order === '_created_at') {\n    order = 'createdAt';\n  }\n\n  if (order === '_updated_at') {\n    order = 'updatedAt';\n  }\n\n  if (!/^[A-Za-z][0-9A-Za-z_]*$/.test(order) || order === 'password') {\n    throw new _ParseError.default(_ParseError.default.INVALID_KEY_NAME, \"Invalid Key: \".concat(order));\n  }\n\n  var field1 = a.get(order);\n  var field2 = b.get(order);\n\n  if (field1 < field2) {\n    return isDescending ? 1 : -1;\n  }\n\n  if (field1 > field2) {\n    return isDescending ? -1 : 1;\n  }\n\n  if (sorts.length > 1) {\n    var remainingSorts = (0, _slice.default)(sorts).call(sorts, 1);\n    return handleOfflineSort(a, b, remainingSorts);\n  }\n\n  return 0;\n}\n/**\n * Creates a new parse Parse.Query for the given Parse.Object subclass.\n *\n * <p>Parse.Query defines a query that is used to fetch Parse.Objects. The\n * most common use case is finding all objects that match a query through the\n * <code>find</code> method. for example, this sample code fetches all objects\n * of class <code>myclass</code>. it calls a different function depending on\n * whether the fetch succeeded or not.\n *\n * <pre>\n * var query = new Parse.Query(myclass);\n * query.find().then((results) => {\n *   // results is an array of parse.object.\n * }).catch((error) =>  {\n *  // error is an instance of parse.error.\n * });</pre></p>\n *\n * <p>a Parse.Query can also be used to retrieve a single object whose id is\n * known, through the get method. for example, this sample code fetches an\n * object of class <code>myclass</code> and id <code>myid</code>. it calls a\n * different function depending on whether the fetch succeeded or not.\n *\n * <pre>\n * var query = new Parse.Query(myclass);\n * query.get(myid).then((object) => {\n *     // object is an instance of parse.object.\n * }).catch((error) =>  {\n *  // error is an instance of parse.error.\n * });</pre></p>\n *\n * <p>a Parse.Query can also be used to count the number of objects that match\n * the query without retrieving all of those objects. for example, this\n * sample code counts the number of objects of the class <code>myclass</code>\n * <pre>\n * var query = new Parse.Query(myclass);\n * query.count().then((number) => {\n *     // there are number instances of myclass.\n * }).catch((error) => {\n *     // error is an instance of Parse.Error.\n * });</pre></p>\n *\n * @alias Parse.Query\n */\n\n\nvar ParseQuery = /*#__PURE__*/function () {\n  /**\n   * @property {string} className\n   */\n\n  /**\n   * @param {(string | Parse.Object)} objectClass An instance of a subclass of Parse.Object, or a Parse className string.\n   */\n  function ParseQuery(objectClass\n  /*: string | ParseObject*/\n  ) {\n    (0, _classCallCheck2.default)(this, ParseQuery);\n    (0, _defineProperty2.default)(this, \"className\", void 0);\n    (0, _defineProperty2.default)(this, \"_where\", void 0);\n    (0, _defineProperty2.default)(this, \"_include\", void 0);\n    (0, _defineProperty2.default)(this, \"_exclude\", void 0);\n    (0, _defineProperty2.default)(this, \"_select\", void 0);\n    (0, _defineProperty2.default)(this, \"_limit\", void 0);\n    (0, _defineProperty2.default)(this, \"_skip\", void 0);\n    (0, _defineProperty2.default)(this, \"_count\", void 0);\n    (0, _defineProperty2.default)(this, \"_order\", void 0);\n    (0, _defineProperty2.default)(this, \"_readPreference\", void 0);\n    (0, _defineProperty2.default)(this, \"_includeReadPreference\", void 0);\n    (0, _defineProperty2.default)(this, \"_subqueryReadPreference\", void 0);\n    (0, _defineProperty2.default)(this, \"_queriesLocalDatastore\", void 0);\n    (0, _defineProperty2.default)(this, \"_localDatastorePinName\", void 0);\n    (0, _defineProperty2.default)(this, \"_extraOptions\", void 0);\n    (0, _defineProperty2.default)(this, \"_hint\", void 0);\n    (0, _defineProperty2.default)(this, \"_explain\", void 0);\n    (0, _defineProperty2.default)(this, \"_xhrRequest\", void 0);\n\n    if (typeof objectClass === 'string') {\n      if (objectClass === 'User' && _CoreManager.default.get('PERFORM_USER_REWRITE')) {\n        this.className = '_User';\n      } else {\n        this.className = objectClass;\n      }\n    } else if (objectClass instanceof _ParseObject.default) {\n      this.className = objectClass.className;\n    } else if (typeof objectClass === 'function') {\n      if (typeof objectClass.className === 'string') {\n        this.className = objectClass.className;\n      } else {\n        var _obj2 = new objectClass();\n\n        this.className = _obj2.className;\n      }\n    } else {\n      throw new TypeError('A ParseQuery must be constructed with a ParseObject or class name.');\n    }\n\n    this._where = {};\n    this._include = [];\n    this._exclude = [];\n    this._count = false;\n    this._limit = -1; // negative limit is not sent in the server request\n\n    this._skip = 0;\n    this._readPreference = null;\n    this._includeReadPreference = null;\n    this._subqueryReadPreference = null;\n    this._queriesLocalDatastore = false;\n    this._localDatastorePinName = null;\n    this._extraOptions = {};\n    this._xhrRequest = {\n      task: null,\n      onchange: function () {}\n    };\n  }\n  /**\n   * Adds constraint that at least one of the passed in queries matches.\n   *\n   * @param {Array} queries\n   * @returns {Parse.Query} Returns the query, so you can chain this call.\n   */\n\n\n  (0, _createClass2.default)(ParseQuery, [{\n    key: \"_orQuery\",\n    value: function (queries\n    /*: Array<ParseQuery>*/\n    )\n    /*: ParseQuery*/\n    {\n      var queryJSON = (0, _map2.default)(queries).call(queries, function (q) {\n        return q.toJSON().where;\n      });\n      this._where.$or = queryJSON;\n      return this;\n    }\n    /**\n     * Adds constraint that all of the passed in queries match.\n     *\n     * @param {Array} queries\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"_andQuery\",\n    value: function (queries\n    /*: Array<ParseQuery>*/\n    )\n    /*: ParseQuery*/\n    {\n      var queryJSON = (0, _map2.default)(queries).call(queries, function (q) {\n        return q.toJSON().where;\n      });\n      this._where.$and = queryJSON;\n      return this;\n    }\n    /**\n     * Adds constraint that none of the passed in queries match.\n     *\n     * @param {Array} queries\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"_norQuery\",\n    value: function (queries\n    /*: Array<ParseQuery>*/\n    )\n    /*: ParseQuery*/\n    {\n      var queryJSON = (0, _map2.default)(queries).call(queries, function (q) {\n        return q.toJSON().where;\n      });\n      this._where.$nor = queryJSON;\n      return this;\n    }\n    /**\n     * Helper for condition queries\n     *\n     * @param key\n     * @param condition\n     * @param value\n     * @returns {Parse.Query}\n     */\n\n  }, {\n    key: \"_addCondition\",\n    value: function (key\n    /*: string*/\n    , condition\n    /*: string*/\n    , value\n    /*: mixed*/\n    )\n    /*: ParseQuery*/\n    {\n      if (!this._where[key] || typeof this._where[key] === 'string') {\n        this._where[key] = {};\n      }\n\n      this._where[key][condition] = (0, _encode.default)(value, false, true);\n      return this;\n    }\n    /**\n     * Converts string for regular expression at the beginning\n     *\n     * @param string\n     * @returns {string}\n     */\n\n  }, {\n    key: \"_regexStartWith\",\n    value: function (string\n    /*: string*/\n    )\n    /*: string*/\n    {\n      return '^' + quote(string);\n    }\n  }, {\n    key: \"_handleOfflineQuery\",\n    value: function () {\n      var _handleOfflineQuery2 = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee(params\n      /*: any*/\n      ) {\n        var _context,\n            _this2 = this;\n\n        var localDatastore, objects, results, keys, alwaysSelectedKeys, sorts, count, limit;\n        return _regenerator.default.wrap(function (_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _OfflineQuery.default.validateQuery(this);\n\n                localDatastore = _CoreManager.default.getLocalDatastore();\n                _context3.next = 4;\n                return localDatastore._serializeObjectsFromPinName(this._localDatastorePinName);\n\n              case 4:\n                objects = _context3.sent;\n                results = (0, _filter2.default)(_context = (0, _map2.default)(objects).call(objects, function (json, index, arr) {\n                  var object = _ParseObject.default.fromJSON(json, false);\n\n                  if (json._localId && !json.objectId) {\n                    object._localId = json._localId;\n                  }\n\n                  if (!_OfflineQuery.default.matchesQuery(_this2.className, object, arr, _this2)) {\n                    return null;\n                  }\n\n                  return object;\n                })).call(_context, function (object) {\n                  return object !== null;\n                });\n\n                if ((0, _keys.default)(params)) {\n                  keys = (0, _keys.default)(params).split(',');\n                  alwaysSelectedKeys = ['className', 'objectId', 'createdAt', 'updatedAt', 'ACL'];\n                  keys = (0, _concat.default)(keys).call(keys, alwaysSelectedKeys);\n                  results = (0, _map2.default)(results).call(results, function (object) {\n                    var _context2;\n\n                    var json = object._toFullJSON();\n\n                    (0, _forEach.default)(_context2 = (0, _keys2.default)(json)).call(_context2, function (key) {\n                      if (!(0, _includes.default)(keys).call(keys, key)) {\n                        delete json[key];\n                      }\n                    });\n                    return _ParseObject.default.fromJSON(json, false);\n                  });\n                }\n\n                if (params.order) {\n                  sorts = params.order.split(',');\n                  (0, _sort.default)(results).call(results, function (a, b) {\n                    return handleOfflineSort(a, b, sorts);\n                  });\n                } // count total before applying limit/skip\n\n\n                if (params.count) {\n                  count = results.length; // total count from response\n                }\n\n                if (params.skip) {\n                  if (params.skip >= results.length) {\n                    results = [];\n                  } else {\n                    results = (0, _splice.default)(results).call(results, params.skip, results.length);\n                  }\n                }\n\n                limit = results.length;\n\n                if (params.limit !== 0 && params.limit < results.length) {\n                  limit = params.limit;\n                }\n\n                results = (0, _splice.default)(results).call(results, 0, limit);\n\n                if (!(typeof count === 'number')) {\n                  _context3.next = 15;\n                  break;\n                }\n\n                return _context3.abrupt(\"return\", {\n                  results: results,\n                  count: count\n                });\n\n              case 15:\n                return _context3.abrupt(\"return\", results);\n\n              case 16:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function () {\n        return _handleOfflineQuery2.apply(this, arguments);\n      };\n    }()\n    /**\n     * Returns a JSON representation of this query.\n     *\n     * @returns {object} The JSON representation of the query.\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function ()\n    /*: QueryJSON*/\n    {\n      var params\n      /*: QueryJSON*/\n      = {\n        where: this._where\n      };\n\n      if (this._include.length) {\n        params.include = this._include.join(',');\n      }\n\n      if (this._exclude.length) {\n        params.excludeKeys = this._exclude.join(',');\n      }\n\n      if (this._select) {\n        params.keys = this._select.join(',');\n      }\n\n      if (this._count) {\n        params.count = 1;\n      }\n\n      if (this._limit >= 0) {\n        params.limit = this._limit;\n      }\n\n      if (this._skip > 0) {\n        params.skip = this._skip;\n      }\n\n      if (this._order) {\n        params.order = this._order.join(',');\n      }\n\n      if (this._readPreference) {\n        params.readPreference = this._readPreference;\n      }\n\n      if (this._includeReadPreference) {\n        params.includeReadPreference = this._includeReadPreference;\n      }\n\n      if (this._subqueryReadPreference) {\n        params.subqueryReadPreference = this._subqueryReadPreference;\n      }\n\n      if (this._hint) {\n        params.hint = this._hint;\n      }\n\n      if (this._explain) {\n        params.explain = true;\n      }\n\n      for (var _key3 in this._extraOptions) {\n        params[_key3] = this._extraOptions[_key3];\n      }\n\n      return params;\n    }\n    /**\n     * Return a query with conditions from json, can be useful to send query from server side to client\n     * Not static, all query conditions was set before calling this method will be deleted.\n     * For example on the server side we have\n     * var query = new Parse.Query(\"className\");\n     * query.equalTo(key: value);\n     * query.limit(100);\n     * ... (others queries)\n     * Create JSON representation of Query Object\n     * var jsonFromServer = query.fromJSON();\n     *\n     * On client side getting query:\n     * var query = new Parse.Query(\"className\");\n     * query.fromJSON(jsonFromServer);\n     *\n     * and continue to query...\n     * query.skip(100).find().then(...);\n     *\n     * @param {QueryJSON} json from Parse.Query.toJSON() method\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"withJSON\",\n    value: function (json\n    /*: QueryJSON*/\n    )\n    /*: ParseQuery*/\n    {\n      if (json.where) {\n        this._where = json.where;\n      }\n\n      if (json.include) {\n        this._include = json.include.split(',');\n      }\n\n      if ((0, _keys.default)(json)) {\n        this._select = (0, _keys.default)(json).split(',');\n      }\n\n      if (json.excludeKeys) {\n        this._exclude = json.excludeKeys.split(',');\n      }\n\n      if (json.count) {\n        this._count = json.count === 1;\n      }\n\n      if (json.limit) {\n        this._limit = json.limit;\n      }\n\n      if (json.skip) {\n        this._skip = json.skip;\n      }\n\n      if (json.order) {\n        this._order = json.order.split(',');\n      }\n\n      if (json.readPreference) {\n        this._readPreference = json.readPreference;\n      }\n\n      if (json.includeReadPreference) {\n        this._includeReadPreference = json.includeReadPreference;\n      }\n\n      if (json.subqueryReadPreference) {\n        this._subqueryReadPreference = json.subqueryReadPreference;\n      }\n\n      if (json.hint) {\n        this._hint = json.hint;\n      }\n\n      if (json.explain) {\n        this._explain = !!json.explain;\n      }\n\n      for (var _key4 in json) {\n        if (json.hasOwnProperty(_key4)) {\n          var _context4;\n\n          if ((0, _indexOf.default)(_context4 = ['where', 'include', 'keys', 'count', 'limit', 'skip', 'order', 'readPreference', 'includeReadPreference', 'subqueryReadPreference', 'hint', 'explain']).call(_context4, _key4) === -1) {\n            this._extraOptions[_key4] = json[_key4];\n          }\n        }\n      }\n\n      return this;\n    }\n    /**\n     * Static method to restore Parse.Query by json representation\n     * Internally calling Parse.Query.withJSON\n     *\n     * @param {string} className\n     * @param {QueryJSON} json from Parse.Query.toJSON() method\n     * @returns {Parse.Query} new created query\n     */\n\n  }, {\n    key: \"get\",\n    value:\n    /**\n     * Constructs a Parse.Object whose id is already known by fetching data from\n     * the server. Unlike the <code>first</code> method, it never returns undefined.\n     *\n     * @param {string} objectId The id of the object to be fetched.\n     * @param {object} options\n     * Valid options are:<ul>\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n     *     be used for this request.\n     *   <li>sessionToken: A valid session token, used for making a request on\n     *       behalf of a specific user.\n     *   <li>context: A dictionary that is accessible in Cloud Code `beforeFind` trigger.\n     *   <li>json: Return raw json without converting to Parse.Object\n     * </ul>\n     *\n     * @returns {Promise} A promise that is resolved with the result when\n     * the query completes.\n     */\n    function (objectId\n    /*: string*/\n    , options\n    /*:: ?: FullOptions*/\n    )\n    /*: Promise<ParseObject>*/\n    {\n      this.equalTo('objectId', objectId);\n      var firstOptions = {};\n\n      if (options && options.hasOwnProperty('useMasterKey')) {\n        firstOptions.useMasterKey = options.useMasterKey;\n      }\n\n      if (options && options.hasOwnProperty('sessionToken')) {\n        firstOptions.sessionToken = options.sessionToken;\n      }\n\n      if (options && options.hasOwnProperty('context') && (0, _typeof2.default)(options.context) === 'object') {\n        firstOptions.context = options.context;\n      }\n\n      if (options && options.hasOwnProperty('json')) {\n        firstOptions.json = options.json;\n      }\n\n      return this.first(firstOptions).then(function (response) {\n        if (response) {\n          return response;\n        }\n\n        var errorObject = new _ParseError.default(_ParseError.default.OBJECT_NOT_FOUND, 'Object not found.');\n        return _promise.default.reject(errorObject);\n      });\n    }\n    /**\n     * Retrieves a list of ParseObjects that satisfy this query.\n     *\n     * @param {object} options Valid options\n     * are:<ul>\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n     *     be used for this request.\n     *   <li>sessionToken: A valid session token, used for making a request on\n     *       behalf of a specific user.\n     *   <li>context: A dictionary that is accessible in Cloud Code `beforeFind` trigger.\n     *   <li>json: Return raw json without converting to Parse.Object\n     * </ul>\n     *\n     * @returns {Promise} A promise that is resolved with the results when\n     * the query completes.\n     */\n\n  }, {\n    key: \"find\",\n    value: function (options\n    /*:: ?: FullOptions*/\n    )\n    /*: Promise<Array<ParseObject>>*/\n    {\n      var _this3 = this;\n\n      options = options || {};\n      var findOptions = {};\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        findOptions.useMasterKey = options.useMasterKey;\n      }\n\n      if (options.hasOwnProperty('sessionToken')) {\n        findOptions.sessionToken = options.sessionToken;\n      }\n\n      if (options.hasOwnProperty('context') && (0, _typeof2.default)(options.context) === 'object') {\n        findOptions.context = options.context;\n      }\n\n      this._setRequestTask(findOptions);\n\n      var controller = _CoreManager.default.getQueryController();\n\n      var select = this._select;\n\n      if (this._queriesLocalDatastore) {\n        return this._handleOfflineQuery(this.toJSON());\n      }\n\n      return (0, _find.default)(controller).call(controller, this.className, this.toJSON(), findOptions).then(function (response) {\n        var _context5; // Return generic object when explain is used\n\n\n        if (_this3._explain) {\n          return response.results;\n        }\n\n        var results = (0, _map2.default)(_context5 = response.results).call(_context5, function (data) {\n          // In cases of relations, the server may send back a className\n          // on the top level of the payload\n          var override = response.className || _this3.className;\n\n          if (!data.className) {\n            data.className = override;\n          } // Make sure the data object contains keys for all objects that\n          // have been requested with a select, so that our cached state\n          // updates correctly.\n\n\n          if (select) {\n            handleSelectResult(data, select);\n          }\n\n          if (options.json) {\n            return data;\n          } else {\n            return _ParseObject.default.fromJSON(data, !select);\n          }\n        });\n        var count = response.count;\n\n        if (typeof count === 'number') {\n          return {\n            results: results,\n            count: count\n          };\n        } else {\n          return results;\n        }\n      });\n    }\n    /**\n     * Retrieves a complete list of ParseObjects that satisfy this query.\n     * Using `eachBatch` under the hood to fetch all the valid objects.\n     *\n     * @param {object} options Valid options are:<ul>\n     *   <li>batchSize: How many objects to yield in each batch (default: 100)\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n     *     be used for this request.\n     *   <li>sessionToken: A valid session token, used for making a request on\n     *       behalf of a specific user.\n     * </ul>\n     * @returns {Promise} A promise that is resolved with the results when\n     * the query completes.\n     */\n\n  }, {\n    key: \"findAll\",\n    value: function () {\n      var _findAll = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee2(options\n      /*:: ?: BatchOptions*/\n      ) {\n        var result;\n        return _regenerator.default.wrap(function (_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                result\n                /*: ParseObject[]*/\n                = [];\n                _context7.next = 3;\n                return this.eachBatch(function (objects\n                /*: ParseObject[]*/\n                ) {\n                  var _context6;\n\n                  result = (0, _concat.default)(_context6 = []).call(_context6, (0, _toConsumableArray2.default)(result), (0, _toConsumableArray2.default)(objects));\n                }, options);\n\n              case 3:\n                return _context7.abrupt(\"return\", result);\n\n              case 4:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function () {\n        return _findAll.apply(this, arguments);\n      };\n    }()\n    /**\n     * Counts the number of objects that match this query.\n     *\n     * @param {object} options\n     * Valid options are:<ul>\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n     *     be used for this request.\n     *   <li>sessionToken: A valid session token, used for making a request on\n     *       behalf of a specific user.\n     * </ul>\n     *\n     * @returns {Promise} A promise that is resolved with the count when\n     * the query completes.\n     */\n\n  }, {\n    key: \"count\",\n    value: function (options\n    /*:: ?: FullOptions*/\n    )\n    /*: Promise<number>*/\n    {\n      options = options || {};\n      var findOptions = {};\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        findOptions.useMasterKey = options.useMasterKey;\n      }\n\n      if (options.hasOwnProperty('sessionToken')) {\n        findOptions.sessionToken = options.sessionToken;\n      }\n\n      this._setRequestTask(findOptions);\n\n      var controller = _CoreManager.default.getQueryController();\n\n      var params = this.toJSON();\n      params.limit = 0;\n      params.count = 1;\n      return (0, _find.default)(controller).call(controller, this.className, params, findOptions).then(function (result) {\n        return result.count;\n      });\n    }\n    /**\n     * Executes a distinct query and returns unique values\n     *\n     * @param {string} key A field to find distinct values\n     * @param {object} options\n     * Valid options are:<ul>\n     *   <li>sessionToken: A valid session token, used for making a request on\n     *       behalf of a specific user.\n     * </ul>\n     *\n     * @returns {Promise} A promise that is resolved with the query completes.\n     */\n\n  }, {\n    key: \"distinct\",\n    value: function (key\n    /*: string*/\n    , options\n    /*:: ?: FullOptions*/\n    )\n    /*: Promise<Array<mixed>>*/\n    {\n      options = options || {};\n      var distinctOptions = {};\n      distinctOptions.useMasterKey = true;\n\n      if (options.hasOwnProperty('sessionToken')) {\n        distinctOptions.sessionToken = options.sessionToken;\n      }\n\n      this._setRequestTask(distinctOptions);\n\n      var controller = _CoreManager.default.getQueryController();\n\n      var params = {\n        distinct: key,\n        where: this._where,\n        hint: this._hint\n      };\n      return controller.aggregate(this.className, params, distinctOptions).then(function (results) {\n        return results.results;\n      });\n    }\n    /**\n     * Executes an aggregate query and returns aggregate results\n     *\n     * @param {(Array|object)} pipeline Array or Object of stages to process query\n     * @param {object} options Valid options are:<ul>\n     *   <li>sessionToken: A valid session token, used for making a request on\n     *       behalf of a specific user.\n     * </ul>\n     *\n     * @returns {Promise} A promise that is resolved with the query completes.\n     */\n\n  }, {\n    key: \"aggregate\",\n    value: function (pipeline\n    /*: mixed*/\n    , options\n    /*:: ?: FullOptions*/\n    )\n    /*: Promise<Array<mixed>>*/\n    {\n      options = options || {};\n      var aggregateOptions = {};\n      aggregateOptions.useMasterKey = true;\n\n      if (options.hasOwnProperty('sessionToken')) {\n        aggregateOptions.sessionToken = options.sessionToken;\n      }\n\n      this._setRequestTask(aggregateOptions);\n\n      var controller = _CoreManager.default.getQueryController();\n\n      if (!(0, _isArray.default)(pipeline) && (0, _typeof2.default)(pipeline) !== 'object') {\n        throw new Error('Invalid pipeline must be Array or Object');\n      }\n\n      if ((0, _keys2.default)(this._where || {}).length) {\n        if (!(0, _isArray.default)(pipeline)) {\n          pipeline = [pipeline];\n        }\n\n        pipeline.unshift({\n          match: this._where\n        });\n      }\n\n      var params = {\n        pipeline: pipeline,\n        hint: this._hint,\n        explain: this._explain,\n        readPreference: this._readPreference\n      };\n      return controller.aggregate(this.className, params, aggregateOptions).then(function (results) {\n        return results.results;\n      });\n    }\n    /**\n     * Retrieves at most one Parse.Object that satisfies this query.\n     *\n     * Returns the object if there is one, otherwise undefined.\n     *\n     * @param {object} options Valid options are:<ul>\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n     *     be used for this request.\n     *   <li>sessionToken: A valid session token, used for making a request on\n     *       behalf of a specific user.\n     *   <li>context: A dictionary that is accessible in Cloud Code `beforeFind` trigger.\n     *   <li>json: Return raw json without converting to Parse.Object\n     * </ul>\n     *\n     * @returns {Promise} A promise that is resolved with the object when\n     * the query completes.\n     */\n\n  }, {\n    key: \"first\",\n    value: function (options\n    /*:: ?: FullOptions*/\n    )\n    /*: Promise<ParseObject | void>*/\n    {\n      var _this4 = this;\n\n      options = options || {};\n      var findOptions = {};\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        findOptions.useMasterKey = options.useMasterKey;\n      }\n\n      if (options.hasOwnProperty('sessionToken')) {\n        findOptions.sessionToken = options.sessionToken;\n      }\n\n      if (options.hasOwnProperty('context') && (0, _typeof2.default)(options.context) === 'object') {\n        findOptions.context = options.context;\n      }\n\n      this._setRequestTask(findOptions);\n\n      var controller = _CoreManager.default.getQueryController();\n\n      var params = this.toJSON();\n      params.limit = 1;\n      var select = this._select;\n\n      if (this._queriesLocalDatastore) {\n        return this._handleOfflineQuery(params).then(function (objects) {\n          if (!objects[0]) {\n            return undefined;\n          }\n\n          return objects[0];\n        });\n      }\n\n      return (0, _find.default)(controller).call(controller, this.className, params, findOptions).then(function (response) {\n        var objects = response.results;\n\n        if (!objects[0]) {\n          return undefined;\n        }\n\n        if (!objects[0].className) {\n          objects[0].className = _this4.className;\n        } // Make sure the data object contains keys for all objects that\n        // have been requested with a select, so that our cached state\n        // updates correctly.\n\n\n        if (select) {\n          handleSelectResult(objects[0], select);\n        }\n\n        if (options.json) {\n          return objects[0];\n        } else {\n          return _ParseObject.default.fromJSON(objects[0], !select);\n        }\n      });\n    }\n    /**\n     * Iterates over objects matching a query, calling a callback for each batch.\n     * If the callback returns a promise, the iteration will not continue until\n     * that promise has been fulfilled. If the callback returns a rejected\n     * promise, then iteration will stop with that error. The items are processed\n     * in an unspecified order. The query may not have any sort order, and may\n     * not use limit or skip.\n     *\n     * @param {Function} callback Callback that will be called with each result\n     *     of the query.\n     * @param {object} options Valid options are:<ul>\n     *   <li>batchSize: How many objects to yield in each batch (default: 100)\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n     *     be used for this request.\n     *   <li>sessionToken: A valid session token, used for making a request on\n     *       behalf of a specific user.\n     *   <li>context: A dictionary that is accessible in Cloud Code `beforeFind` trigger.\n     * </ul>\n     * @returns {Promise} A promise that will be fulfilled once the\n     *     iteration has completed.\n     */\n\n  }, {\n    key: \"eachBatch\",\n    value: function (callback\n    /*: (objs: Array<ParseObject>) => Promise<*>*/\n    , options\n    /*:: ?: BatchOptions*/\n    )\n    /*: Promise<void>*/\n    {\n      var _context8;\n\n      options = options || {};\n\n      if (this._order || this._skip || this._limit >= 0) {\n        return _promise.default.reject('Cannot iterate on a query with sort, skip, or limit.');\n      }\n\n      var query = new ParseQuery(this.className);\n      query._limit = options.batchSize || 100;\n      query._include = (0, _map2.default)(_context8 = this._include).call(_context8, function (i) {\n        return i;\n      });\n\n      if (this._select) {\n        var _context9;\n\n        query._select = (0, _map2.default)(_context9 = this._select).call(_context9, function (s) {\n          return s;\n        });\n      }\n\n      query._hint = this._hint;\n      query._where = {};\n\n      for (var _attr in this._where) {\n        var val = this._where[_attr];\n\n        if ((0, _isArray.default)(val)) {\n          query._where[_attr] = (0, _map2.default)(val).call(val, function (v) {\n            return v;\n          });\n        } else if (val && (0, _typeof2.default)(val) === 'object') {\n          var conditionMap = {};\n          query._where[_attr] = conditionMap;\n\n          for (var cond in val) {\n            conditionMap[cond] = val[cond];\n          }\n        } else {\n          query._where[_attr] = val;\n        }\n      }\n\n      query.ascending('objectId');\n      var findOptions = {};\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        findOptions.useMasterKey = options.useMasterKey;\n      }\n\n      if (options.hasOwnProperty('sessionToken')) {\n        findOptions.sessionToken = options.sessionToken;\n      }\n\n      if (options.hasOwnProperty('context') && (0, _typeof2.default)(options.context) === 'object') {\n        findOptions.context = options.context;\n      }\n\n      var finished = false;\n      var previousResults = [];\n      return (0, _promiseUtils.continueWhile)(function () {\n        return !finished;\n      }, /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee3() {\n        var _yield$Promise$all, _yield$Promise$all2, results;\n\n        return _regenerator.default.wrap(function (_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                _context10.next = 2;\n                return _promise.default.all([(0, _find.default)(query).call(query, findOptions), _promise.default.resolve(previousResults.length > 0 && callback(previousResults))]);\n\n              case 2:\n                _yield$Promise$all = _context10.sent;\n                _yield$Promise$all2 = (0, _slicedToArray2.default)(_yield$Promise$all, 1);\n                results = _yield$Promise$all2[0];\n\n                if (!(results.length >= query._limit)) {\n                  _context10.next = 10;\n                  break;\n                }\n\n                query.greaterThan('objectId', results[results.length - 1].id);\n                previousResults = results;\n                _context10.next = 17;\n                break;\n\n              case 10:\n                if (!(results.length > 0)) {\n                  _context10.next = 16;\n                  break;\n                }\n\n                _context10.next = 13;\n                return _promise.default.resolve(callback(results));\n\n              case 13:\n                finished = true;\n                _context10.next = 17;\n                break;\n\n              case 16:\n                finished = true;\n\n              case 17:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee3);\n      })));\n    }\n    /**\n     * Iterates over each result of a query, calling a callback for each one. If\n     * the callback returns a promise, the iteration will not continue until\n     * that promise has been fulfilled. If the callback returns a rejected\n     * promise, then iteration will stop with that error. The items are\n     * processed in an unspecified order. The query may not have any sort order,\n     * and may not use limit or skip.\n     *\n     * @param {Function} callback Callback that will be called with each result\n     *     of the query.\n     * @param {object} options Valid options are:<ul>\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n     *     be used for this request.\n     *   <li>sessionToken: A valid session token, used for making a request on\n     *       behalf of a specific user.\n     * </ul>\n     * @returns {Promise} A promise that will be fulfilled once the\n     *     iteration has completed.\n     */\n\n  }, {\n    key: \"each\",\n    value: function (callback\n    /*: (obj: ParseObject) => any*/\n    , options\n    /*:: ?: BatchOptions*/\n    )\n    /*: Promise<void>*/\n    {\n      return this.eachBatch(function (results) {\n        var callbacksDone = _promise.default.resolve();\n\n        (0, _forEach.default)(results).call(results, function (result) {\n          callbacksDone = callbacksDone.then(function () {\n            return callback(result);\n          });\n        });\n        return callbacksDone;\n      }, options);\n    }\n    /**\n     * Adds a hint to force index selection. (https://docs.mongodb.com/manual/reference/operator/meta/hint/)\n     *\n     * @param {(string|object)} value String or Object of index that should be used when executing query\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"hint\",\n    value: function (value\n    /*: mixed*/\n    )\n    /*: ParseQuery*/\n    {\n      if (typeof value === 'undefined') {\n        delete this._hint;\n      }\n\n      this._hint = value;\n      return this;\n    }\n    /**\n     * Investigates the query execution plan. Useful for optimizing queries. (https://docs.mongodb.com/manual/reference/operator/meta/explain/)\n     *\n     * @param {boolean} explain Used to toggle the information on the query plan.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"explain\",\n    value: function ()\n    /*: ParseQuery*/\n    {\n      var _explain\n      /*: boolean*/\n      = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n\n      if (typeof _explain !== 'boolean') {\n        throw new Error('You can only set explain to a boolean value');\n      }\n\n      this._explain = _explain;\n      return this;\n    }\n    /**\n     * Iterates over each result of a query, calling a callback for each one. If\n     * the callback returns a promise, the iteration will not continue until\n     * that promise has been fulfilled. If the callback returns a rejected\n     * promise, then iteration will stop with that error. The items are\n     * processed in an unspecified order. The query may not have any sort order,\n     * and may not use limit or skip.\n     *\n     * @param {Function} callback Callback <ul>\n     *   <li>currentObject: The current Parse.Object being processed in the array.</li>\n     *   <li>index: The index of the current Parse.Object being processed in the array.</li>\n     *   <li>query: The query map was called upon.</li>\n     * </ul>\n     *\n     * @param {object} options Valid options are:<ul>\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n     *     be used for this request.\n     *   <li>sessionToken: A valid session token, used for making a request on\n     *       behalf of a specific user.\n     * </ul>\n     * @returns {Promise} A promise that will be fulfilled once the\n     *     iteration has completed.\n     */\n\n  }, {\n    key: \"map\",\n    value: function () {\n      var _map = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee4(callback\n      /*: (currentObject: ParseObject, index: number, query: ParseQuery) => any*/\n      , options\n      /*:: ?: BatchOptions*/\n      ) {\n        var _this5 = this;\n\n        var array, index;\n        return _regenerator.default.wrap(function (_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                array = [];\n                index = 0;\n                _context11.next = 4;\n                return this.each(function (object) {\n                  return _promise.default.resolve(callback(object, index, _this5)).then(function (result) {\n                    array.push(result);\n                    index += 1;\n                  });\n                }, options);\n\n              case 4:\n                return _context11.abrupt(\"return\", array);\n\n              case 5:\n              case \"end\":\n                return _context11.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      return function () {\n        return _map.apply(this, arguments);\n      };\n    }()\n    /**\n     * Iterates over each result of a query, calling a callback for each one. If\n     * the callback returns a promise, the iteration will not continue until\n     * that promise has been fulfilled. If the callback returns a rejected\n     * promise, then iteration will stop with that error. The items are\n     * processed in an unspecified order. The query may not have any sort order,\n     * and may not use limit or skip.\n     *\n     * @param {Function} callback Callback <ul>\n     *   <li>accumulator: The accumulator accumulates the callback's return values. It is the accumulated value previously returned in the last invocation of the callback.</li>\n     *   <li>currentObject: The current Parse.Object being processed in the array.</li>\n     *   <li>index: The index of the current Parse.Object being processed in the array.</li>\n     * </ul>\n     * @param {*} initialValue A value to use as the first argument to the first call of the callback. If no initialValue is supplied, the first object in the query will be used and skipped.\n     * @param {object} options Valid options are:<ul>\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n     *     be used for this request.\n     *   <li>sessionToken: A valid session token, used for making a request on\n     *       behalf of a specific user.\n     * </ul>\n     * @returns {Promise} A promise that will be fulfilled once the\n     *     iteration has completed.\n     */\n\n  }, {\n    key: \"reduce\",\n    value: function () {\n      var _reduce = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee5(callback\n      /*: (accumulator: any, currentObject: ParseObject, index: number) => any*/\n      , initialValue\n      /*: any*/\n      , options\n      /*:: ?: BatchOptions*/\n      ) {\n        var accumulator, index;\n        return _regenerator.default.wrap(function (_context12) {\n          while (1) {\n            switch (_context12.prev = _context12.next) {\n              case 0:\n                accumulator = initialValue;\n                index = 0;\n                _context12.next = 4;\n                return this.each(function (object) {\n                  // If no initial value was given, we take the first object from the query\n                  // as the initial value and don't call the callback with it.\n                  if (index === 0 && initialValue === undefined) {\n                    accumulator = object;\n                    index += 1;\n                    return;\n                  }\n\n                  return _promise.default.resolve(callback(accumulator, object, index)).then(function (result) {\n                    accumulator = result;\n                    index += 1;\n                  });\n                }, options);\n\n              case 4:\n                if (!(index === 0 && initialValue === undefined)) {\n                  _context12.next = 6;\n                  break;\n                }\n\n                throw new TypeError('Reducing empty query result set with no initial value');\n\n              case 6:\n                return _context12.abrupt(\"return\", accumulator);\n\n              case 7:\n              case \"end\":\n                return _context12.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      return function () {\n        return _reduce.apply(this, arguments);\n      };\n    }()\n    /**\n     * Iterates over each result of a query, calling a callback for each one. If\n     * the callback returns a promise, the iteration will not continue until\n     * that promise has been fulfilled. If the callback returns a rejected\n     * promise, then iteration will stop with that error. The items are\n     * processed in an unspecified order. The query may not have any sort order,\n     * and may not use limit or skip.\n     *\n     * @param {Function} callback Callback <ul>\n     *   <li>currentObject: The current Parse.Object being processed in the array.</li>\n     *   <li>index: The index of the current Parse.Object being processed in the array.</li>\n     *   <li>query: The query filter was called upon.</li>\n     * </ul>\n     *\n     * @param {object} options Valid options are:<ul>\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n     *     be used for this request.\n     *   <li>sessionToken: A valid session token, used for making a request on\n     *       behalf of a specific user.\n     * </ul>\n     * @returns {Promise} A promise that will be fulfilled once the\n     *     iteration has completed.\n     */\n\n  }, {\n    key: \"filter\",\n    value: function () {\n      var _filter = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee6(callback\n      /*: (currentObject: ParseObject, index: number, query: ParseQuery) => boolean*/\n      , options\n      /*:: ?: BatchOptions*/\n      ) {\n        var _this6 = this;\n\n        var array, index;\n        return _regenerator.default.wrap(function (_context13) {\n          while (1) {\n            switch (_context13.prev = _context13.next) {\n              case 0:\n                array = [];\n                index = 0;\n                _context13.next = 4;\n                return this.each(function (object) {\n                  return _promise.default.resolve(callback(object, index, _this6)).then(function (flag) {\n                    if (flag) {\n                      array.push(object);\n                    }\n\n                    index += 1;\n                  });\n                }, options);\n\n              case 4:\n                return _context13.abrupt(\"return\", array);\n\n              case 5:\n              case \"end\":\n                return _context13.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      return function () {\n        return _filter.apply(this, arguments);\n      };\n    }()\n    /** Query Conditions **/\n\n    /**\n     * Adds a constraint to the query that requires a particular key's value to\n     * be equal to the provided value.\n     *\n     * @param {string} key The key to check.\n     * @param value The value that the Parse.Object must contain.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"equalTo\",\n    value: function (key\n    /*: string | { [key: string]: any }*/\n    , value\n    /*: ?mixed*/\n    )\n    /*: ParseQuery*/\n    {\n      var _this7 = this;\n\n      if (key && (0, _typeof2.default)(key) === 'object') {\n        var _context14;\n\n        (0, _forEach.default)(_context14 = (0, _entries.default)(key)).call(_context14, function (_ref2) {\n          var _ref3 = (0, _slicedToArray2.default)(_ref2, 2),\n              k = _ref3[0],\n              val = _ref3[1];\n\n          return _this7.equalTo(k, val);\n        });\n        return this;\n      }\n\n      if (typeof value === 'undefined') {\n        return this.doesNotExist(key);\n      }\n\n      this._where[key] = (0, _encode.default)(value, false, true);\n      return this;\n    }\n    /**\n     * Adds a constraint to the query that requires a particular key's value to\n     * be not equal to the provided value.\n     *\n     * @param {string} key The key to check.\n     * @param value The value that must not be equalled.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"notEqualTo\",\n    value: function (key\n    /*: string | { [key: string]: any }*/\n    , value\n    /*: ?mixed*/\n    )\n    /*: ParseQuery*/\n    {\n      var _this8 = this;\n\n      if (key && (0, _typeof2.default)(key) === 'object') {\n        var _context15;\n\n        (0, _forEach.default)(_context15 = (0, _entries.default)(key)).call(_context15, function (_ref4) {\n          var _ref5 = (0, _slicedToArray2.default)(_ref4, 2),\n              k = _ref5[0],\n              val = _ref5[1];\n\n          return _this8.notEqualTo(k, val);\n        });\n        return this;\n      }\n\n      return this._addCondition(key, '$ne', value);\n    }\n    /**\n     * Adds a constraint to the query that requires a particular key's value to\n     * be less than the provided value.\n     *\n     * @param {string} key The key to check.\n     * @param value The value that provides an upper bound.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"lessThan\",\n    value: function (key\n    /*: string*/\n    , value\n    /*: mixed*/\n    )\n    /*: ParseQuery*/\n    {\n      return this._addCondition(key, '$lt', value);\n    }\n    /**\n     * Adds a constraint to the query that requires a particular key's value to\n     * be greater than the provided value.\n     *\n     * @param {string} key The key to check.\n     * @param value The value that provides an lower bound.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"greaterThan\",\n    value: function (key\n    /*: string*/\n    , value\n    /*: mixed*/\n    )\n    /*: ParseQuery*/\n    {\n      return this._addCondition(key, '$gt', value);\n    }\n    /**\n     * Adds a constraint to the query that requires a particular key's value to\n     * be less than or equal to the provided value.\n     *\n     * @param {string} key The key to check.\n     * @param value The value that provides an upper bound.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"lessThanOrEqualTo\",\n    value: function (key\n    /*: string*/\n    , value\n    /*: mixed*/\n    )\n    /*: ParseQuery*/\n    {\n      return this._addCondition(key, '$lte', value);\n    }\n    /**\n     * Adds a constraint to the query that requires a particular key's value to\n     * be greater than or equal to the provided value.\n     *\n     * @param {string} key The key to check.\n     * @param {*} value The value that provides an lower bound.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"greaterThanOrEqualTo\",\n    value: function (key\n    /*: string*/\n    , value\n    /*: mixed*/\n    )\n    /*: ParseQuery*/\n    {\n      return this._addCondition(key, '$gte', value);\n    }\n    /**\n     * Adds a constraint to the query that requires a particular key's value to\n     * be contained in the provided list of values.\n     *\n     * @param {string} key The key to check.\n     * @param {*} value The values that will match.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"containedIn\",\n    value: function (key\n    /*: string*/\n    , value\n    /*: mixed*/\n    )\n    /*: ParseQuery*/\n    {\n      return this._addCondition(key, '$in', value);\n    }\n    /**\n     * Adds a constraint to the query that requires a particular key's value to\n     * not be contained in the provided list of values.\n     *\n     * @param {string} key The key to check.\n     * @param {*} value The values that will not match.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"notContainedIn\",\n    value: function (key\n    /*: string*/\n    , value\n    /*: mixed*/\n    )\n    /*: ParseQuery*/\n    {\n      return this._addCondition(key, '$nin', value);\n    }\n    /**\n     * Adds a constraint to the query that requires a particular key's value to\n     * be contained by the provided list of values. Get objects where all array elements match.\n     *\n     * @param {string} key The key to check.\n     * @param {Array} values The values that will match.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"containedBy\",\n    value: function (key\n    /*: string*/\n    , values\n    /*: Array<mixed>*/\n    )\n    /*: ParseQuery*/\n    {\n      return this._addCondition(key, '$containedBy', values);\n    }\n    /**\n     * Adds a constraint to the query that requires a particular key's value to\n     * contain each one of the provided list of values.\n     *\n     * @param {string} key The key to check.  This key's value must be an array.\n     * @param {Array} values The values that will match.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"containsAll\",\n    value: function (key\n    /*: string*/\n    , values\n    /*: Array<mixed>*/\n    )\n    /*: ParseQuery*/\n    {\n      return this._addCondition(key, '$all', values);\n    }\n    /**\n     * Adds a constraint to the query that requires a particular key's value to\n     * contain each one of the provided list of values starting with given strings.\n     *\n     * @param {string} key The key to check.  This key's value must be an array.\n     * @param {Array<string>} values The string values that will match as starting string.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"containsAllStartingWith\",\n    value: function (key\n    /*: string*/\n    , values\n    /*: Array<string>*/\n    )\n    /*: ParseQuery*/\n    {\n      var _this = this;\n\n      if (!(0, _isArray.default)(values)) {\n        values = [values];\n      }\n\n      var regexObject = (0, _map2.default)(values).call(values, function (value) {\n        return {\n          $regex: _this._regexStartWith(value)\n        };\n      });\n      return this.containsAll(key, regexObject);\n    }\n    /**\n     * Adds a constraint for finding objects that contain the given key.\n     *\n     * @param {string} key The key that should exist.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"exists\",\n    value: function (key\n    /*: string*/\n    )\n    /*: ParseQuery*/\n    {\n      return this._addCondition(key, '$exists', true);\n    }\n    /**\n     * Adds a constraint for finding objects that do not contain a given key.\n     *\n     * @param {string} key The key that should not exist\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"doesNotExist\",\n    value: function (key\n    /*: string*/\n    )\n    /*: ParseQuery*/\n    {\n      return this._addCondition(key, '$exists', false);\n    }\n    /**\n     * Adds a regular expression constraint for finding string values that match\n     * the provided regular expression.\n     * This may be slow for large datasets.\n     *\n     * @param {string} key The key that the string to match is stored in.\n     * @param {RegExp} regex The regular expression pattern to match.\n     * @param {string} modifiers The regular expression mode.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"matches\",\n    value: function (key\n    /*: string*/\n    , regex\n    /*: RegExp*/\n    , modifiers\n    /*: string*/\n    )\n    /*: ParseQuery*/\n    {\n      this._addCondition(key, '$regex', regex);\n\n      if (!modifiers) {\n        modifiers = '';\n      }\n\n      if (regex.ignoreCase) {\n        modifiers += 'i';\n      }\n\n      if (regex.multiline) {\n        modifiers += 'm';\n      }\n\n      if (modifiers.length) {\n        this._addCondition(key, '$options', modifiers);\n      }\n\n      return this;\n    }\n    /**\n     * Adds a constraint that requires that a key's value matches a Parse.Query\n     * constraint.\n     *\n     * @param {string} key The key that the contains the object to match the\n     *                     query.\n     * @param {Parse.Query} query The query that should match.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"matchesQuery\",\n    value: function (key\n    /*: string*/\n    , query\n    /*: ParseQuery*/\n    )\n    /*: ParseQuery*/\n    {\n      var queryJSON = query.toJSON();\n      queryJSON.className = query.className;\n      return this._addCondition(key, '$inQuery', queryJSON);\n    }\n    /**\n     * Adds a constraint that requires that a key's value not matches a\n     * Parse.Query constraint.\n     *\n     * @param {string} key The key that the contains the object to match the\n     *                     query.\n     * @param {Parse.Query} query The query that should not match.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"doesNotMatchQuery\",\n    value: function (key\n    /*: string*/\n    , query\n    /*: ParseQuery*/\n    )\n    /*: ParseQuery*/\n    {\n      var queryJSON = query.toJSON();\n      queryJSON.className = query.className;\n      return this._addCondition(key, '$notInQuery', queryJSON);\n    }\n    /**\n     * Adds a constraint that requires that a key's value matches a value in\n     * an object returned by a different Parse.Query.\n     *\n     * @param {string} key The key that contains the value that is being\n     *                     matched.\n     * @param {string} queryKey The key in the objects returned by the query to\n     *                          match against.\n     * @param {Parse.Query} query The query to run.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"matchesKeyInQuery\",\n    value: function (key\n    /*: string*/\n    , queryKey\n    /*: string*/\n    , query\n    /*: ParseQuery*/\n    )\n    /*: ParseQuery*/\n    {\n      var queryJSON = query.toJSON();\n      queryJSON.className = query.className;\n      return this._addCondition(key, '$select', {\n        key: queryKey,\n        query: queryJSON\n      });\n    }\n    /**\n     * Adds a constraint that requires that a key's value not match a value in\n     * an object returned by a different Parse.Query.\n     *\n     * @param {string} key The key that contains the value that is being\n     *                     excluded.\n     * @param {string} queryKey The key in the objects returned by the query to\n     *                          match against.\n     * @param {Parse.Query} query The query to run.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"doesNotMatchKeyInQuery\",\n    value: function (key\n    /*: string*/\n    , queryKey\n    /*: string*/\n    , query\n    /*: ParseQuery*/\n    )\n    /*: ParseQuery*/\n    {\n      var queryJSON = query.toJSON();\n      queryJSON.className = query.className;\n      return this._addCondition(key, '$dontSelect', {\n        key: queryKey,\n        query: queryJSON\n      });\n    }\n    /**\n     * Adds a constraint for finding string values that contain a provided\n     * string.  This may be slow for large datasets.\n     *\n     * @param {string} key The key that the string to match is stored in.\n     * @param {string} substring The substring that the value must contain.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"contains\",\n    value: function (key\n    /*: string*/\n    , substring\n    /*: string*/\n    )\n    /*: ParseQuery*/\n    {\n      if (typeof substring !== 'string') {\n        throw new Error('The value being searched for must be a string.');\n      }\n\n      return this._addCondition(key, '$regex', quote(substring));\n    }\n    /**\n     * Adds a constraint for finding string values that contain a provided\n     * string. This may be slow for large datasets. Requires Parse-Server > 2.5.0\n     *\n     * In order to sort you must use select and ascending ($score is required)\n     *  <pre>\n     *   query.fullText('field', 'term');\n     *   query.ascending('$score');\n     *   query.select('$score');\n     *  </pre>\n     *\n     * To retrieve the weight / rank\n     *  <pre>\n     *   object->get('score');\n     *  </pre>\n     *\n     * You can define optionals by providing an object as a third parameter\n     *  <pre>\n     *   query.fullText('field', 'term', { language: 'es', diacriticSensitive: true });\n     *  </pre>\n     *\n     * @param {string} key The key that the string to match is stored in.\n     * @param {string} value The string to search\n     * @param {object} options (Optional)\n     * @param {string} options.language The language that determines the list of stop words for the search and the rules for the stemmer and tokenizer.\n     * @param {boolean} options.caseSensitive A boolean flag to enable or disable case sensitive search.\n     * @param {boolean} options.diacriticSensitive A boolean flag to enable or disable diacritic sensitive search.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"fullText\",\n    value: function (key\n    /*: string*/\n    , value\n    /*: string*/\n    , options\n    /*: ?Object*/\n    )\n    /*: ParseQuery*/\n    {\n      options = options || {};\n\n      if (!key) {\n        throw new Error('A key is required.');\n      }\n\n      if (!value) {\n        throw new Error('A search term is required');\n      }\n\n      if (typeof value !== 'string') {\n        throw new Error('The value being searched for must be a string.');\n      }\n\n      var fullOptions = {};\n      fullOptions.$term = value;\n\n      for (var option in options) {\n        switch (option) {\n          case 'language':\n            fullOptions.$language = options[option];\n            break;\n\n          case 'caseSensitive':\n            fullOptions.$caseSensitive = options[option];\n            break;\n\n          case 'diacriticSensitive':\n            fullOptions.$diacriticSensitive = options[option];\n            break;\n\n          default:\n            throw new Error(\"Unknown option: \".concat(option));\n        }\n      }\n\n      return this._addCondition(key, '$text', {\n        $search: fullOptions\n      });\n    }\n    /**\n     * Method to sort the full text search by text score\n     *\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"sortByTextScore\",\n    value: function () {\n      this.ascending('$score');\n      this.select(['$score']);\n      return this;\n    }\n    /**\n     * Adds a constraint for finding string values that start with a provided\n     * string.  This query will use the backend index, so it will be fast even\n     * for large datasets.\n     *\n     * @param {string} key The key that the string to match is stored in.\n     * @param {string} prefix The substring that the value must start with.\n     * @param {string} modifiers The regular expression mode.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"startsWith\",\n    value: function (key\n    /*: string*/\n    , prefix\n    /*: string*/\n    , modifiers\n    /*: string*/\n    )\n    /*: ParseQuery*/\n    {\n      if (typeof prefix !== 'string') {\n        throw new Error('The value being searched for must be a string.');\n      }\n\n      return this.matches(key, this._regexStartWith(prefix), modifiers);\n    }\n    /**\n     * Adds a constraint for finding string values that end with a provided\n     * string.  This will be slow for large datasets.\n     *\n     * @param {string} key The key that the string to match is stored in.\n     * @param {string} suffix The substring that the value must end with.\n     * @param {string} modifiers The regular expression mode.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"endsWith\",\n    value: function (key\n    /*: string*/\n    , suffix\n    /*: string*/\n    , modifiers\n    /*: string*/\n    )\n    /*: ParseQuery*/\n    {\n      if (typeof suffix !== 'string') {\n        throw new Error('The value being searched for must be a string.');\n      }\n\n      return this.matches(key, quote(suffix) + '$', modifiers);\n    }\n    /**\n     * Adds a proximity based constraint for finding objects with key point\n     * values near the point given.\n     *\n     * @param {string} key The key that the Parse.GeoPoint is stored in.\n     * @param {Parse.GeoPoint} point The reference Parse.GeoPoint that is used.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"near\",\n    value: function (key\n    /*: string*/\n    , point\n    /*: ParseGeoPoint*/\n    )\n    /*: ParseQuery*/\n    {\n      if (!(point instanceof _ParseGeoPoint.default)) {\n        // Try to cast it as a GeoPoint\n        point = new _ParseGeoPoint.default(point);\n      }\n\n      return this._addCondition(key, '$nearSphere', point);\n    }\n    /**\n     * Adds a proximity based constraint for finding objects with key point\n     * values near the point given and within the maximum distance given.\n     *\n     * @param {string} key The key that the Parse.GeoPoint is stored in.\n     * @param {Parse.GeoPoint} point The reference Parse.GeoPoint that is used.\n     * @param {number} maxDistance Maximum distance (in radians) of results to return.\n     * @param {boolean} sorted A Bool value that is true if results should be\n     * sorted by distance ascending, false is no sorting is required,\n     * defaults to true.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"withinRadians\",\n    value: function (key\n    /*: string*/\n    , point\n    /*: ParseGeoPoint*/\n    , maxDistance\n    /*: number*/\n    , sorted\n    /*: boolean*/\n    )\n    /*: ParseQuery*/\n    {\n      if (sorted || sorted === undefined) {\n        this.near(key, point);\n        return this._addCondition(key, '$maxDistance', maxDistance);\n      } else {\n        return this._addCondition(key, '$geoWithin', {\n          $centerSphere: [[point.longitude, point.latitude], maxDistance]\n        });\n      }\n    }\n    /**\n     * Adds a proximity based constraint for finding objects with key point\n     * values near the point given and within the maximum distance given.\n     * Radius of earth used is 3958.8 miles.\n     *\n     * @param {string} key The key that the Parse.GeoPoint is stored in.\n     * @param {Parse.GeoPoint} point The reference Parse.GeoPoint that is used.\n     * @param {number} maxDistance Maximum distance (in miles) of results to return.\n     * @param {boolean} sorted A Bool value that is true if results should be\n     * sorted by distance ascending, false is no sorting is required,\n     * defaults to true.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"withinMiles\",\n    value: function (key\n    /*: string*/\n    , point\n    /*: ParseGeoPoint*/\n    , maxDistance\n    /*: number*/\n    , sorted\n    /*: boolean*/\n    )\n    /*: ParseQuery*/\n    {\n      return this.withinRadians(key, point, maxDistance / 3958.8, sorted);\n    }\n    /**\n     * Adds a proximity based constraint for finding objects with key point\n     * values near the point given and within the maximum distance given.\n     * Radius of earth used is 6371.0 kilometers.\n     *\n     * @param {string} key The key that the Parse.GeoPoint is stored in.\n     * @param {Parse.GeoPoint} point The reference Parse.GeoPoint that is used.\n     * @param {number} maxDistance Maximum distance (in kilometers) of results to return.\n     * @param {boolean} sorted A Bool value that is true if results should be\n     * sorted by distance ascending, false is no sorting is required,\n     * defaults to true.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"withinKilometers\",\n    value: function (key\n    /*: string*/\n    , point\n    /*: ParseGeoPoint*/\n    , maxDistance\n    /*: number*/\n    , sorted\n    /*: boolean*/\n    )\n    /*: ParseQuery*/\n    {\n      return this.withinRadians(key, point, maxDistance / 6371.0, sorted);\n    }\n    /**\n     * Adds a constraint to the query that requires a particular key's\n     * coordinates be contained within a given rectangular geographic bounding\n     * box.\n     *\n     * @param {string} key The key to be constrained.\n     * @param {Parse.GeoPoint} southwest\n     *     The lower-left inclusive corner of the box.\n     * @param {Parse.GeoPoint} northeast\n     *     The upper-right inclusive corner of the box.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"withinGeoBox\",\n    value: function (key\n    /*: string*/\n    , southwest\n    /*: ParseGeoPoint*/\n    , northeast\n    /*: ParseGeoPoint*/\n    )\n    /*: ParseQuery*/\n    {\n      if (!(southwest instanceof _ParseGeoPoint.default)) {\n        southwest = new _ParseGeoPoint.default(southwest);\n      }\n\n      if (!(northeast instanceof _ParseGeoPoint.default)) {\n        northeast = new _ParseGeoPoint.default(northeast);\n      }\n\n      this._addCondition(key, '$within', {\n        $box: [southwest, northeast]\n      });\n\n      return this;\n    }\n    /**\n     * Adds a constraint to the query that requires a particular key's\n     * coordinates be contained within and on the bounds of a given polygon.\n     * Supports closed and open (last point is connected to first) paths\n     *\n     * Polygon must have at least 3 points\n     *\n     * @param {string} key The key to be constrained.\n     * @param {Array} points Array of Coordinates / GeoPoints\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"withinPolygon\",\n    value: function (key\n    /*: string*/\n    , points\n    /*: Array<Array<number>>*/\n    )\n    /*: ParseQuery*/\n    {\n      return this._addCondition(key, '$geoWithin', {\n        $polygon: points\n      });\n    }\n    /**\n     * Add a constraint to the query that requires a particular key's\n     * coordinates that contains a ParseGeoPoint\n     *\n     * @param {string} key The key to be constrained.\n     * @param {Parse.GeoPoint} point\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"polygonContains\",\n    value: function (key\n    /*: string*/\n    , point\n    /*: ParseGeoPoint*/\n    )\n    /*: ParseQuery*/\n    {\n      return this._addCondition(key, '$geoIntersects', {\n        $point: point\n      });\n    }\n    /** Query Orderings **/\n\n    /**\n     * Sorts the results in ascending order by the given key.\n     *\n     * @param {(string|string[])} keys The key to order by, which is a\n     * string of comma separated values, or an Array of keys, or multiple keys.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"ascending\",\n    value: function ()\n    /*: ParseQuery*/\n    {\n      this._order = [];\n\n      for (var _len = arguments.length, keys = new Array(_len), _key5 = 0; _key5 < _len; _key5++) {\n        keys[_key5] = arguments[_key5];\n      }\n\n      return this.addAscending.apply(this, keys);\n    }\n    /**\n     * Sorts the results in ascending order by the given key,\n     * but can also add secondary sort descriptors without overwriting _order.\n     *\n     * @param {(string|string[])} keys The key to order by, which is a\n     * string of comma separated values, or an Array of keys, or multiple keys.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"addAscending\",\n    value: function ()\n    /*: ParseQuery*/\n    {\n      var _this9 = this;\n\n      if (!this._order) {\n        this._order = [];\n      }\n\n      for (var _len2 = arguments.length, keys = new Array(_len2), _key6 = 0; _key6 < _len2; _key6++) {\n        keys[_key6] = arguments[_key6];\n      }\n\n      (0, _forEach.default)(keys).call(keys, function (key) {\n        var _context16;\n\n        if ((0, _isArray.default)(key)) {\n          key = key.join();\n        }\n\n        _this9._order = (0, _concat.default)(_context16 = _this9._order).call(_context16, key.replace(/\\s/g, '').split(','));\n      });\n      return this;\n    }\n    /**\n     * Sorts the results in descending order by the given key.\n     *\n     * @param {(string|string[])} keys The key to order by, which is a\n     * string of comma separated values, or an Array of keys, or multiple keys.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"descending\",\n    value: function ()\n    /*: ParseQuery*/\n    {\n      this._order = [];\n\n      for (var _len3 = arguments.length, keys = new Array(_len3), _key7 = 0; _key7 < _len3; _key7++) {\n        keys[_key7] = arguments[_key7];\n      }\n\n      return this.addDescending.apply(this, keys);\n    }\n    /**\n     * Sorts the results in descending order by the given key,\n     * but can also add secondary sort descriptors without overwriting _order.\n     *\n     * @param {(string|string[])} keys The key to order by, which is a\n     * string of comma separated values, or an Array of keys, or multiple keys.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"addDescending\",\n    value: function ()\n    /*: ParseQuery*/\n    {\n      var _this10 = this;\n\n      if (!this._order) {\n        this._order = [];\n      }\n\n      for (var _len4 = arguments.length, keys = new Array(_len4), _key8 = 0; _key8 < _len4; _key8++) {\n        keys[_key8] = arguments[_key8];\n      }\n\n      (0, _forEach.default)(keys).call(keys, function (key) {\n        var _context17, _context18;\n\n        if ((0, _isArray.default)(key)) {\n          key = key.join();\n        }\n\n        _this10._order = (0, _concat.default)(_context17 = _this10._order).call(_context17, (0, _map2.default)(_context18 = key.replace(/\\s/g, '').split(',')).call(_context18, function (k) {\n          return '-' + k;\n        }));\n      });\n      return this;\n    }\n    /** Query Options **/\n\n    /**\n     * Sets the number of results to skip before returning any results.\n     * This is useful for pagination.\n     * Default is to skip zero results.\n     *\n     * @param {number} n the number of results to skip.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"skip\",\n    value: function (n\n    /*: number*/\n    )\n    /*: ParseQuery*/\n    {\n      if (typeof n !== 'number' || n < 0) {\n        throw new Error('You can only skip by a positive number');\n      }\n\n      this._skip = n;\n      return this;\n    }\n    /**\n     * Sets the limit of the number of results to return. The default limit is 100.\n     *\n     * @param {number} n the number of results to limit to.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"limit\",\n    value: function (n\n    /*: number*/\n    )\n    /*: ParseQuery*/\n    {\n      if (typeof n !== 'number') {\n        throw new Error('You can only set the limit to a numeric value');\n      }\n\n      this._limit = n;\n      return this;\n    }\n    /**\n     * Sets the flag to include with response the total number of objects satisfying this query,\n     * despite limits/skip. Might be useful for pagination.\n     * Note that result of this query will be wrapped as an object with\n     * `results`: holding {ParseObject} array and `count`: integer holding total number\n     *\n     * @param {boolean} includeCount false - disable, true - enable.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"withCount\",\n    value: function ()\n    /*: ParseQuery*/\n    {\n      var includeCount\n      /*: boolean*/\n      = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n\n      if (typeof includeCount !== 'boolean') {\n        throw new Error('You can only set withCount to a boolean value');\n      }\n\n      this._count = includeCount;\n      return this;\n    }\n    /**\n     * Includes nested Parse.Objects for the provided key.  You can use dot\n     * notation to specify which fields in the included object are also fetched.\n     *\n     * You can include all nested Parse.Objects by passing in '*'.\n     * Requires Parse Server 3.0.0+\n     * <pre>query.include('*');</pre>\n     *\n     * @param {...string|Array<string>} keys The name(s) of the key(s) to include.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"include\",\n    value: function ()\n    /*: ParseQuery*/\n    {\n      var _this11 = this;\n\n      for (var _len5 = arguments.length, keys = new Array(_len5), _key9 = 0; _key9 < _len5; _key9++) {\n        keys[_key9] = arguments[_key9];\n      }\n\n      (0, _forEach.default)(keys).call(keys, function (key) {\n        if ((0, _isArray.default)(key)) {\n          var _context19;\n\n          _this11._include = (0, _concat.default)(_context19 = _this11._include).call(_context19, key);\n        } else {\n          _this11._include.push(key);\n        }\n      });\n      return this;\n    }\n    /**\n     * Includes all nested Parse.Objects one level deep.\n     *\n     * Requires Parse Server 3.0.0+\n     *\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"includeAll\",\n    value: function ()\n    /*: ParseQuery*/\n    {\n      return this.include('*');\n    }\n    /**\n     * Restricts the fields of the returned Parse.Objects to include only the\n     * provided keys.  If this is called multiple times, then all of the keys\n     * specified in each of the calls will be included.\n     *\n     * @param {...string|Array<string>} keys The name(s) of the key(s) to include.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"select\",\n    value: function ()\n    /*: ParseQuery*/\n    {\n      var _this12 = this;\n\n      if (!this._select) {\n        this._select = [];\n      }\n\n      for (var _len6 = arguments.length, keys = new Array(_len6), _key10 = 0; _key10 < _len6; _key10++) {\n        keys[_key10] = arguments[_key10];\n      }\n\n      (0, _forEach.default)(keys).call(keys, function (key) {\n        if ((0, _isArray.default)(key)) {\n          var _context20;\n\n          _this12._select = (0, _concat.default)(_context20 = _this12._select).call(_context20, key);\n        } else {\n          _this12._select.push(key);\n        }\n      });\n      return this;\n    }\n    /**\n     * Restricts the fields of the returned Parse.Objects to all keys except the\n     * provided keys. Exclude takes precedence over select and include.\n     *\n     * Requires Parse Server 3.6.0+\n     *\n     * @param {...string|Array<string>} keys The name(s) of the key(s) to exclude.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"exclude\",\n    value: function ()\n    /*: ParseQuery*/\n    {\n      var _this13 = this;\n\n      for (var _len7 = arguments.length, keys = new Array(_len7), _key11 = 0; _key11 < _len7; _key11++) {\n        keys[_key11] = arguments[_key11];\n      }\n\n      (0, _forEach.default)(keys).call(keys, function (key) {\n        if ((0, _isArray.default)(key)) {\n          var _context21;\n\n          _this13._exclude = (0, _concat.default)(_context21 = _this13._exclude).call(_context21, key);\n        } else {\n          _this13._exclude.push(key);\n        }\n      });\n      return this;\n    }\n    /**\n     * Changes the read preference that the backend will use when performing the query to the database.\n     *\n     * @param {string} readPreference The read preference for the main query.\n     * @param {string} includeReadPreference The read preference for the queries to include pointers.\n     * @param {string} subqueryReadPreference The read preference for the sub queries.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"readPreference\",\n    value: function (_readPreference\n    /*: string*/\n    , includeReadPreference\n    /*:: ?: string*/\n    , subqueryReadPreference\n    /*:: ?: string*/\n    )\n    /*: ParseQuery*/\n    {\n      this._readPreference = _readPreference;\n      this._includeReadPreference = includeReadPreference;\n      this._subqueryReadPreference = subqueryReadPreference;\n      return this;\n    }\n    /**\n     * Subscribe this query to get liveQuery updates\n     *\n     * @param {string} sessionToken (optional) Defaults to the currentUser\n     * @returns {Promise<LiveQuerySubscription>} Returns the liveQuerySubscription, it's an event emitter\n     * which can be used to get liveQuery updates.\n     */\n\n  }, {\n    key: \"subscribe\",\n    value: function () {\n      var _subscribe = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee7(sessionToken\n      /*:: ?: string*/\n      ) {\n        var currentUser, liveQueryClient, subscription;\n        return _regenerator.default.wrap(function (_context22) {\n          while (1) {\n            switch (_context22.prev = _context22.next) {\n              case 0:\n                _context22.next = 2;\n                return _CoreManager.default.getUserController().currentUserAsync();\n\n              case 2:\n                currentUser = _context22.sent;\n\n                if (!sessionToken) {\n                  sessionToken = currentUser ? currentUser.getSessionToken() : undefined;\n                }\n\n                _context22.next = 6;\n                return _CoreManager.default.getLiveQueryController().getDefaultLiveQueryClient();\n\n              case 6:\n                liveQueryClient = _context22.sent;\n\n                if (liveQueryClient.shouldOpen()) {\n                  liveQueryClient.open();\n                }\n\n                subscription = liveQueryClient.subscribe(this, sessionToken);\n                return _context22.abrupt(\"return\", subscription.subscribePromise.then(function () {\n                  return subscription;\n                }));\n\n              case 10:\n              case \"end\":\n                return _context22.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      return function () {\n        return _subscribe.apply(this, arguments);\n      };\n    }()\n    /**\n     * Constructs a Parse.Query that is the OR of the passed in queries.  For\n     * example:\n     * <pre>var compoundQuery = Parse.Query.or(query1, query2, query3);</pre>\n     *\n     * will create a compoundQuery that is an or of the query1, query2, and\n     * query3.\n     *\n     * @param {...Parse.Query} queries The list of queries to OR.\n     * @static\n     * @returns {Parse.Query} The query that is the OR of the passed in queries.\n     */\n\n  }, {\n    key: \"fromNetwork\",\n    value:\n    /**\n     * Change the source of this query to the server.\n     *\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n    function ()\n    /*: ParseQuery*/\n    {\n      this._queriesLocalDatastore = false;\n      this._localDatastorePinName = null;\n      return this;\n    }\n    /**\n     * Changes the source of this query to all pinned objects.\n     *\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"fromLocalDatastore\",\n    value: function ()\n    /*: ParseQuery*/\n    {\n      return this.fromPinWithName(null);\n    }\n    /**\n     * Changes the source of this query to the default group of pinned objects.\n     *\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"fromPin\",\n    value: function ()\n    /*: ParseQuery*/\n    {\n      return this.fromPinWithName(_LocalDatastoreUtils.DEFAULT_PIN);\n    }\n    /**\n     * Changes the source of this query to a specific group of pinned objects.\n     *\n     * @param {string} name The name of query source.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"fromPinWithName\",\n    value: function (name\n    /*:: ?: string*/\n    )\n    /*: ParseQuery*/\n    {\n      var localDatastore = _CoreManager.default.getLocalDatastore();\n\n      if (localDatastore.checkIfEnabled()) {\n        this._queriesLocalDatastore = true;\n        this._localDatastorePinName = name;\n      }\n\n      return this;\n    }\n    /**\n     * Cancels the current network request (if any is running).\n     *\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"cancel\",\n    value: function ()\n    /*: ParseQuery*/\n    {\n      var _this14 = this;\n\n      if (this._xhrRequest.task && typeof this._xhrRequest.task.abort === 'function') {\n        this._xhrRequest.task._aborted = true;\n\n        this._xhrRequest.task.abort();\n\n        this._xhrRequest.task = null;\n\n        this._xhrRequest.onchange = function () {};\n\n        return this;\n      }\n\n      return this._xhrRequest.onchange = function () {\n        return _this14.cancel();\n      };\n    }\n  }, {\n    key: \"_setRequestTask\",\n    value: function (options) {\n      var _this15 = this;\n\n      options.requestTask = function (task) {\n        _this15._xhrRequest.task = task;\n\n        _this15._xhrRequest.onchange();\n      };\n    }\n  }], [{\n    key: \"fromJSON\",\n    value: function (className\n    /*: string*/\n    , json\n    /*: QueryJSON*/\n    )\n    /*: ParseQuery*/\n    {\n      var query = new ParseQuery(className);\n      return query.withJSON(json);\n    }\n  }, {\n    key: \"or\",\n    value: function ()\n    /*: ParseQuery*/\n    {\n      for (var _len8 = arguments.length, queries = new Array(_len8), _key12 = 0; _key12 < _len8; _key12++) {\n        queries[_key12] = arguments[_key12];\n      }\n\n      var className = _getClassNameFromQueries(queries);\n\n      var query = new ParseQuery(className);\n\n      query._orQuery(queries);\n\n      return query;\n    }\n    /**\n     * Constructs a Parse.Query that is the AND of the passed in queries.  For\n     * example:\n     * <pre>var compoundQuery = Parse.Query.and(query1, query2, query3);</pre>\n     *\n     * will create a compoundQuery that is an and of the query1, query2, and\n     * query3.\n     *\n     * @param {...Parse.Query} queries The list of queries to AND.\n     * @static\n     * @returns {Parse.Query} The query that is the AND of the passed in queries.\n     */\n\n  }, {\n    key: \"and\",\n    value: function ()\n    /*: ParseQuery*/\n    {\n      for (var _len9 = arguments.length, queries = new Array(_len9), _key13 = 0; _key13 < _len9; _key13++) {\n        queries[_key13] = arguments[_key13];\n      }\n\n      var className = _getClassNameFromQueries(queries);\n\n      var query = new ParseQuery(className);\n\n      query._andQuery(queries);\n\n      return query;\n    }\n    /**\n     * Constructs a Parse.Query that is the NOR of the passed in queries.  For\n     * example:\n     * <pre>const compoundQuery = Parse.Query.nor(query1, query2, query3);</pre>\n     *\n     * will create a compoundQuery that is a nor of the query1, query2, and\n     * query3.\n     *\n     * @param {...Parse.Query} queries The list of queries to NOR.\n     * @static\n     * @returns {Parse.Query} The query that is the NOR of the passed in queries.\n     */\n\n  }, {\n    key: \"nor\",\n    value: function ()\n    /*: ParseQuery*/\n    {\n      for (var _len10 = arguments.length, queries = new Array(_len10), _key14 = 0; _key14 < _len10; _key14++) {\n        queries[_key14] = arguments[_key14];\n      }\n\n      var className = _getClassNameFromQueries(queries);\n\n      var query = new ParseQuery(className);\n\n      query._norQuery(queries);\n\n      return query;\n    }\n  }]);\n  return ParseQuery;\n}();\n\nvar DefaultController = {\n  find: function (className\n  /*: string*/\n  , params\n  /*: QueryJSON*/\n  , options\n  /*: RequestOptions*/\n  )\n  /*: Promise<Array<ParseObject>>*/\n  {\n    var RESTController = _CoreManager.default.getRESTController();\n\n    return RESTController.request('GET', 'classes/' + className, params, options);\n  },\n  aggregate: function (className\n  /*: string*/\n  , params\n  /*: any*/\n  , options\n  /*: RequestOptions*/\n  )\n  /*: Promise<Array<mixed>>*/\n  {\n    var RESTController = _CoreManager.default.getRESTController();\n\n    return RESTController.request('GET', 'aggregate/' + className, params, options);\n  }\n};\n\n_CoreManager.default.setQueryController(DefaultController);\n\nvar _default = ParseQuery;\nexports.default = _default;","map":{"version":3,"names":["_interopRequireDefault","require","_Object$defineProperty","exports","value","default","_entries","_slicedToArray2","_isArray","_toConsumableArray2","_find","_promise","_regenerator","_splice","_sort","_includes","_concat","_keys","_filter2","_asyncToGenerator2","_map2","_classCallCheck2","_createClass2","_defineProperty2","_slice","_keys2","_typeof2","_indexOf","_forEach","_CoreManager","_encode","_promiseUtils","_ParseError","_ParseGeoPoint","_ParseObject","_OfflineQuery","_LocalDatastoreUtils","quote","s","replace","_getClassNameFromQueries","queries","className","call","q","Error","handleSelectResult","data","select","serverDataMask","field","hasSubObjectSelect","hasOwnProperty","undefined","pathComponents","split","_obj","serverMask","component","index","arr","length","serverData","getObjectStateController","getServerData","id","objectId","copyMissingDataWithMask","src","dest","mask","copyThisLevel","_key","_key2","handleOfflineSort","a","b","sorts","order","operator","isDescending","substring","test","INVALID_KEY_NAME","concat","field1","get","field2","remainingSorts","ParseQuery","objectClass","_obj2","TypeError","_where","_include","_exclude","_count","_limit","_skip","_readPreference","_includeReadPreference","_subqueryReadPreference","_queriesLocalDatastore","_localDatastorePinName","_extraOptions","_xhrRequest","task","onchange","key","queryJSON","toJSON","where","$or","$and","$nor","condition","string","_handleOfflineQuery2","mark","_callee","params","_context","_this2","localDatastore","objects","results","keys","alwaysSelectedKeys","count","limit","wrap","_context3","prev","next","validateQuery","getLocalDatastore","_serializeObjectsFromPinName","sent","json","object","fromJSON","_localId","matchesQuery","_context2","_toFullJSON","skip","abrupt","stop","apply","arguments","include","join","excludeKeys","_select","_order","readPreference","includeReadPreference","subqueryReadPreference","_hint","hint","_explain","explain","_key3","_key4","_context4","options","equalTo","firstOptions","useMasterKey","sessionToken","context","first","then","response","errorObject","OBJECT_NOT_FOUND","reject","_this3","findOptions","_setRequestTask","controller","getQueryController","_handleOfflineQuery","_context5","override","_findAll","_callee2","result","_context7","eachBatch","_context6","distinctOptions","distinct","aggregate","pipeline","aggregateOptions","unshift","match","_this4","callback","_context8","query","batchSize","i","_context9","_attr","val","v","conditionMap","cond","ascending","finished","previousResults","continueWhile","_callee3","_yield$Promise$all","_yield$Promise$all2","_context10","all","resolve","greaterThan","callbacksDone","_map","_callee4","_this5","array","_context11","each","push","_reduce","_callee5","initialValue","accumulator","_context12","_filter","_callee6","_this6","_context13","flag","_this7","_context14","_ref2","_ref3","k","doesNotExist","_this8","_context15","_ref4","_ref5","notEqualTo","_addCondition","values","_this","regexObject","$regex","_regexStartWith","containsAll","regex","modifiers","ignoreCase","multiline","queryKey","fullOptions","$term","option","$language","$caseSensitive","$diacriticSensitive","$search","prefix","matches","suffix","point","maxDistance","sorted","near","$centerSphere","longitude","latitude","withinRadians","southwest","northeast","$box","points","$polygon","$point","_len","Array","_key5","addAscending","_this9","_len2","_key6","_context16","_len3","_key7","addDescending","_this10","_len4","_key8","_context17","_context18","n","includeCount","_this11","_len5","_key9","_context19","_this12","_len6","_key10","_context20","_this13","_len7","_key11","_context21","_subscribe","_callee7","currentUser","liveQueryClient","subscription","_context22","getUserController","currentUserAsync","getSessionToken","getLiveQueryController","getDefaultLiveQueryClient","shouldOpen","open","subscribe","subscribePromise","fromPinWithName","DEFAULT_PIN","name","checkIfEnabled","_this14","abort","_aborted","cancel","_this15","requestTask","withJSON","_len8","_key12","_orQuery","_len9","_key13","_andQuery","_len10","_key14","_norQuery","DefaultController","find","RESTController","getRESTController","request","setQueryController","_default"],"sources":["/Users/NikitaMac/Desktop/Modern Web Development/Homework/modern-web-development-project/project/node_modules/parse/lib/browser/ParseQuery.js"],"sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs3/helpers/interopRequireDefault\");\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs3/core-js-stable/object/define-property\");\n\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = void 0;\n\nvar _entries = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/object/entries\"));\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/slicedToArray\"));\n\nvar _isArray = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/array/is-array\"));\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/toConsumableArray\"));\n\nvar _find = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/find\"));\n\nvar _promise = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/promise\"));\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime-corejs3/regenerator\"));\n\nvar _splice = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/splice\"));\n\nvar _sort = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/sort\"));\n\nvar _includes = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/includes\"));\n\nvar _concat = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/concat\"));\n\nvar _keys = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/keys\"));\n\nvar _filter2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/filter\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/asyncToGenerator\"));\n\nvar _map2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/map\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/createClass\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/defineProperty\"));\n\nvar _slice = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/slice\"));\n\nvar _keys2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/object/keys\"));\n\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/typeof\"));\n\nvar _indexOf = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/index-of\"));\n\nvar _forEach = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/for-each\"));\n\nvar _CoreManager = _interopRequireDefault(require(\"./CoreManager\"));\n\nvar _encode = _interopRequireDefault(require(\"./encode\"));\n\nvar _promiseUtils = require(\"./promiseUtils\");\n\nvar _ParseError = _interopRequireDefault(require(\"./ParseError\"));\n\nvar _ParseGeoPoint = _interopRequireDefault(require(\"./ParseGeoPoint\"));\n\nvar _ParseObject = _interopRequireDefault(require(\"./ParseObject\"));\n\nvar _OfflineQuery = _interopRequireDefault(require(\"./OfflineQuery\"));\n\nvar _LocalDatastoreUtils = require(\"./LocalDatastoreUtils\");\n/*\n * Copyright (c) 2015-present, Parse, LLC.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @flow\n */\n\n/**\n * Converts a string into a regex that matches it.\n * Surrounding with \\Q .. \\E does this, we just need to escape any \\E's in\n * the text separately.\n *\n * @param s\n * @private\n * @returns {string}\n */\n\n\nfunction quote(s\n/*: string*/\n)\n/*: string*/\n{\n  return '\\\\Q' + s.replace('\\\\E', '\\\\E\\\\\\\\E\\\\Q') + '\\\\E';\n}\n/**\n * Extracts the class name from queries. If not all queries have the same\n * class name an error will be thrown.\n *\n * @param queries\n * @private\n * @returns {string}\n */\n\n\nfunction _getClassNameFromQueries(queries\n/*: Array<ParseQuery>*/\n)\n/*: ?string*/\n{\n  var className = null;\n  (0, _forEach.default)(queries).call(queries, function (q) {\n    if (!className) {\n      className = q.className;\n    }\n\n    if (className !== q.className) {\n      throw new Error('All queries must be for the same class.');\n    }\n  });\n  return className;\n}\n/*\n * Handles pre-populating the result data of a query with select fields,\n * making sure that the data object contains keys for all objects that have\n * been requested with a select, so that our cached state updates correctly.\n */\n\n\nfunction handleSelectResult(data\n/*: any*/\n, select\n/*: Array<string>*/\n) {\n  var serverDataMask = {};\n  (0, _forEach.default)(select).call(select, function (field) {\n    var hasSubObjectSelect = (0, _indexOf.default)(field).call(field, '.') !== -1;\n\n    if (!hasSubObjectSelect && !data.hasOwnProperty(field)) {\n      // this field was selected, but is missing from the retrieved data\n      data[field] = undefined;\n    } else if (hasSubObjectSelect) {\n      // this field references a sub-object,\n      // so we need to walk down the path components\n      var pathComponents = field.split('.');\n      var _obj = data;\n      var serverMask = serverDataMask;\n      (0, _forEach.default)(pathComponents).call(pathComponents, function (component, index, arr) {\n        // add keys if the expected data is missing\n        if (_obj && !_obj.hasOwnProperty(component)) {\n          _obj[component] = undefined;\n        }\n\n        if (_obj && (0, _typeof2.default)(_obj) === 'object') {\n          _obj = _obj[component];\n        } //add this path component to the server mask so we can fill it in later if needed\n\n\n        if (index < arr.length - 1) {\n          if (!serverMask[component]) {\n            serverMask[component] = {};\n          }\n\n          serverMask = serverMask[component];\n        }\n      });\n    }\n  });\n\n  if ((0, _keys2.default)(serverDataMask).length > 0) {\n    // When selecting from sub-objects, we don't want to blow away the missing\n    // information that we may have retrieved before. We've already added any\n    // missing selected keys to sub-objects, but we still need to add in the\n    // data for any previously retrieved sub-objects that were not selected.\n    var serverData = _CoreManager.default.getObjectStateController().getServerData({\n      id: data.objectId,\n      className: data.className\n    });\n\n    copyMissingDataWithMask(serverData, data, serverDataMask, false);\n  }\n}\n\nfunction copyMissingDataWithMask(src, dest, mask, copyThisLevel) {\n  //copy missing elements at this level\n  if (copyThisLevel) {\n    for (var _key in src) {\n      if (src.hasOwnProperty(_key) && !dest.hasOwnProperty(_key)) {\n        dest[_key] = src[_key];\n      }\n    }\n  }\n\n  for (var _key2 in mask) {\n    if (dest[_key2] !== undefined && dest[_key2] !== null && src !== undefined && src !== null) {\n      //traverse into objects as needed\n      copyMissingDataWithMask(src[_key2], dest[_key2], mask[_key2], true);\n    }\n  }\n}\n\nfunction handleOfflineSort(a, b, sorts) {\n  var order = sorts[0];\n  var operator = (0, _slice.default)(order).call(order, 0, 1);\n  var isDescending = operator === '-';\n\n  if (isDescending) {\n    order = order.substring(1);\n  }\n\n  if (order === '_created_at') {\n    order = 'createdAt';\n  }\n\n  if (order === '_updated_at') {\n    order = 'updatedAt';\n  }\n\n  if (!/^[A-Za-z][0-9A-Za-z_]*$/.test(order) || order === 'password') {\n    throw new _ParseError.default(_ParseError.default.INVALID_KEY_NAME, \"Invalid Key: \".concat(order));\n  }\n\n  var field1 = a.get(order);\n  var field2 = b.get(order);\n\n  if (field1 < field2) {\n    return isDescending ? 1 : -1;\n  }\n\n  if (field1 > field2) {\n    return isDescending ? -1 : 1;\n  }\n\n  if (sorts.length > 1) {\n    var remainingSorts = (0, _slice.default)(sorts).call(sorts, 1);\n    return handleOfflineSort(a, b, remainingSorts);\n  }\n\n  return 0;\n}\n/**\n * Creates a new parse Parse.Query for the given Parse.Object subclass.\n *\n * <p>Parse.Query defines a query that is used to fetch Parse.Objects. The\n * most common use case is finding all objects that match a query through the\n * <code>find</code> method. for example, this sample code fetches all objects\n * of class <code>myclass</code>. it calls a different function depending on\n * whether the fetch succeeded or not.\n *\n * <pre>\n * var query = new Parse.Query(myclass);\n * query.find().then((results) => {\n *   // results is an array of parse.object.\n * }).catch((error) =>  {\n *  // error is an instance of parse.error.\n * });</pre></p>\n *\n * <p>a Parse.Query can also be used to retrieve a single object whose id is\n * known, through the get method. for example, this sample code fetches an\n * object of class <code>myclass</code> and id <code>myid</code>. it calls a\n * different function depending on whether the fetch succeeded or not.\n *\n * <pre>\n * var query = new Parse.Query(myclass);\n * query.get(myid).then((object) => {\n *     // object is an instance of parse.object.\n * }).catch((error) =>  {\n *  // error is an instance of parse.error.\n * });</pre></p>\n *\n * <p>a Parse.Query can also be used to count the number of objects that match\n * the query without retrieving all of those objects. for example, this\n * sample code counts the number of objects of the class <code>myclass</code>\n * <pre>\n * var query = new Parse.Query(myclass);\n * query.count().then((number) => {\n *     // there are number instances of myclass.\n * }).catch((error) => {\n *     // error is an instance of Parse.Error.\n * });</pre></p>\n *\n * @alias Parse.Query\n */\n\n\nvar ParseQuery = /*#__PURE__*/function () {\n  /**\n   * @property {string} className\n   */\n\n  /**\n   * @param {(string | Parse.Object)} objectClass An instance of a subclass of Parse.Object, or a Parse className string.\n   */\n  function ParseQuery(objectClass\n  /*: string | ParseObject*/\n  ) {\n    (0, _classCallCheck2.default)(this, ParseQuery);\n    (0, _defineProperty2.default)(this, \"className\", void 0);\n    (0, _defineProperty2.default)(this, \"_where\", void 0);\n    (0, _defineProperty2.default)(this, \"_include\", void 0);\n    (0, _defineProperty2.default)(this, \"_exclude\", void 0);\n    (0, _defineProperty2.default)(this, \"_select\", void 0);\n    (0, _defineProperty2.default)(this, \"_limit\", void 0);\n    (0, _defineProperty2.default)(this, \"_skip\", void 0);\n    (0, _defineProperty2.default)(this, \"_count\", void 0);\n    (0, _defineProperty2.default)(this, \"_order\", void 0);\n    (0, _defineProperty2.default)(this, \"_readPreference\", void 0);\n    (0, _defineProperty2.default)(this, \"_includeReadPreference\", void 0);\n    (0, _defineProperty2.default)(this, \"_subqueryReadPreference\", void 0);\n    (0, _defineProperty2.default)(this, \"_queriesLocalDatastore\", void 0);\n    (0, _defineProperty2.default)(this, \"_localDatastorePinName\", void 0);\n    (0, _defineProperty2.default)(this, \"_extraOptions\", void 0);\n    (0, _defineProperty2.default)(this, \"_hint\", void 0);\n    (0, _defineProperty2.default)(this, \"_explain\", void 0);\n    (0, _defineProperty2.default)(this, \"_xhrRequest\", void 0);\n\n    if (typeof objectClass === 'string') {\n      if (objectClass === 'User' && _CoreManager.default.get('PERFORM_USER_REWRITE')) {\n        this.className = '_User';\n      } else {\n        this.className = objectClass;\n      }\n    } else if (objectClass instanceof _ParseObject.default) {\n      this.className = objectClass.className;\n    } else if (typeof objectClass === 'function') {\n      if (typeof objectClass.className === 'string') {\n        this.className = objectClass.className;\n      } else {\n        var _obj2 = new objectClass();\n\n        this.className = _obj2.className;\n      }\n    } else {\n      throw new TypeError('A ParseQuery must be constructed with a ParseObject or class name.');\n    }\n\n    this._where = {};\n    this._include = [];\n    this._exclude = [];\n    this._count = false;\n    this._limit = -1; // negative limit is not sent in the server request\n\n    this._skip = 0;\n    this._readPreference = null;\n    this._includeReadPreference = null;\n    this._subqueryReadPreference = null;\n    this._queriesLocalDatastore = false;\n    this._localDatastorePinName = null;\n    this._extraOptions = {};\n    this._xhrRequest = {\n      task: null,\n      onchange: function () {}\n    };\n  }\n  /**\n   * Adds constraint that at least one of the passed in queries matches.\n   *\n   * @param {Array} queries\n   * @returns {Parse.Query} Returns the query, so you can chain this call.\n   */\n\n\n  (0, _createClass2.default)(ParseQuery, [{\n    key: \"_orQuery\",\n    value: function (queries\n    /*: Array<ParseQuery>*/\n    )\n    /*: ParseQuery*/\n    {\n      var queryJSON = (0, _map2.default)(queries).call(queries, function (q) {\n        return q.toJSON().where;\n      });\n      this._where.$or = queryJSON;\n      return this;\n    }\n    /**\n     * Adds constraint that all of the passed in queries match.\n     *\n     * @param {Array} queries\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"_andQuery\",\n    value: function (queries\n    /*: Array<ParseQuery>*/\n    )\n    /*: ParseQuery*/\n    {\n      var queryJSON = (0, _map2.default)(queries).call(queries, function (q) {\n        return q.toJSON().where;\n      });\n      this._where.$and = queryJSON;\n      return this;\n    }\n    /**\n     * Adds constraint that none of the passed in queries match.\n     *\n     * @param {Array} queries\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"_norQuery\",\n    value: function (queries\n    /*: Array<ParseQuery>*/\n    )\n    /*: ParseQuery*/\n    {\n      var queryJSON = (0, _map2.default)(queries).call(queries, function (q) {\n        return q.toJSON().where;\n      });\n      this._where.$nor = queryJSON;\n      return this;\n    }\n    /**\n     * Helper for condition queries\n     *\n     * @param key\n     * @param condition\n     * @param value\n     * @returns {Parse.Query}\n     */\n\n  }, {\n    key: \"_addCondition\",\n    value: function (key\n    /*: string*/\n    , condition\n    /*: string*/\n    , value\n    /*: mixed*/\n    )\n    /*: ParseQuery*/\n    {\n      if (!this._where[key] || typeof this._where[key] === 'string') {\n        this._where[key] = {};\n      }\n\n      this._where[key][condition] = (0, _encode.default)(value, false, true);\n      return this;\n    }\n    /**\n     * Converts string for regular expression at the beginning\n     *\n     * @param string\n     * @returns {string}\n     */\n\n  }, {\n    key: \"_regexStartWith\",\n    value: function (string\n    /*: string*/\n    )\n    /*: string*/\n    {\n      return '^' + quote(string);\n    }\n  }, {\n    key: \"_handleOfflineQuery\",\n    value: function () {\n      var _handleOfflineQuery2 = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee(params\n      /*: any*/\n      ) {\n        var _context,\n            _this2 = this;\n\n        var localDatastore, objects, results, keys, alwaysSelectedKeys, sorts, count, limit;\n        return _regenerator.default.wrap(function (_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _OfflineQuery.default.validateQuery(this);\n\n                localDatastore = _CoreManager.default.getLocalDatastore();\n                _context3.next = 4;\n                return localDatastore._serializeObjectsFromPinName(this._localDatastorePinName);\n\n              case 4:\n                objects = _context3.sent;\n                results = (0, _filter2.default)(_context = (0, _map2.default)(objects).call(objects, function (json, index, arr) {\n                  var object = _ParseObject.default.fromJSON(json, false);\n\n                  if (json._localId && !json.objectId) {\n                    object._localId = json._localId;\n                  }\n\n                  if (!_OfflineQuery.default.matchesQuery(_this2.className, object, arr, _this2)) {\n                    return null;\n                  }\n\n                  return object;\n                })).call(_context, function (object) {\n                  return object !== null;\n                });\n\n                if ((0, _keys.default)(params)) {\n                  keys = (0, _keys.default)(params).split(',');\n                  alwaysSelectedKeys = ['className', 'objectId', 'createdAt', 'updatedAt', 'ACL'];\n                  keys = (0, _concat.default)(keys).call(keys, alwaysSelectedKeys);\n                  results = (0, _map2.default)(results).call(results, function (object) {\n                    var _context2;\n\n                    var json = object._toFullJSON();\n\n                    (0, _forEach.default)(_context2 = (0, _keys2.default)(json)).call(_context2, function (key) {\n                      if (!(0, _includes.default)(keys).call(keys, key)) {\n                        delete json[key];\n                      }\n                    });\n                    return _ParseObject.default.fromJSON(json, false);\n                  });\n                }\n\n                if (params.order) {\n                  sorts = params.order.split(',');\n                  (0, _sort.default)(results).call(results, function (a, b) {\n                    return handleOfflineSort(a, b, sorts);\n                  });\n                } // count total before applying limit/skip\n\n\n                if (params.count) {\n                  count = results.length; // total count from response\n                }\n\n                if (params.skip) {\n                  if (params.skip >= results.length) {\n                    results = [];\n                  } else {\n                    results = (0, _splice.default)(results).call(results, params.skip, results.length);\n                  }\n                }\n\n                limit = results.length;\n\n                if (params.limit !== 0 && params.limit < results.length) {\n                  limit = params.limit;\n                }\n\n                results = (0, _splice.default)(results).call(results, 0, limit);\n\n                if (!(typeof count === 'number')) {\n                  _context3.next = 15;\n                  break;\n                }\n\n                return _context3.abrupt(\"return\", {\n                  results: results,\n                  count: count\n                });\n\n              case 15:\n                return _context3.abrupt(\"return\", results);\n\n              case 16:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function () {\n        return _handleOfflineQuery2.apply(this, arguments);\n      };\n    }()\n    /**\n     * Returns a JSON representation of this query.\n     *\n     * @returns {object} The JSON representation of the query.\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function ()\n    /*: QueryJSON*/\n    {\n      var params\n      /*: QueryJSON*/\n      = {\n        where: this._where\n      };\n\n      if (this._include.length) {\n        params.include = this._include.join(',');\n      }\n\n      if (this._exclude.length) {\n        params.excludeKeys = this._exclude.join(',');\n      }\n\n      if (this._select) {\n        params.keys = this._select.join(',');\n      }\n\n      if (this._count) {\n        params.count = 1;\n      }\n\n      if (this._limit >= 0) {\n        params.limit = this._limit;\n      }\n\n      if (this._skip > 0) {\n        params.skip = this._skip;\n      }\n\n      if (this._order) {\n        params.order = this._order.join(',');\n      }\n\n      if (this._readPreference) {\n        params.readPreference = this._readPreference;\n      }\n\n      if (this._includeReadPreference) {\n        params.includeReadPreference = this._includeReadPreference;\n      }\n\n      if (this._subqueryReadPreference) {\n        params.subqueryReadPreference = this._subqueryReadPreference;\n      }\n\n      if (this._hint) {\n        params.hint = this._hint;\n      }\n\n      if (this._explain) {\n        params.explain = true;\n      }\n\n      for (var _key3 in this._extraOptions) {\n        params[_key3] = this._extraOptions[_key3];\n      }\n\n      return params;\n    }\n    /**\n     * Return a query with conditions from json, can be useful to send query from server side to client\n     * Not static, all query conditions was set before calling this method will be deleted.\n     * For example on the server side we have\n     * var query = new Parse.Query(\"className\");\n     * query.equalTo(key: value);\n     * query.limit(100);\n     * ... (others queries)\n     * Create JSON representation of Query Object\n     * var jsonFromServer = query.fromJSON();\n     *\n     * On client side getting query:\n     * var query = new Parse.Query(\"className\");\n     * query.fromJSON(jsonFromServer);\n     *\n     * and continue to query...\n     * query.skip(100).find().then(...);\n     *\n     * @param {QueryJSON} json from Parse.Query.toJSON() method\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"withJSON\",\n    value: function (json\n    /*: QueryJSON*/\n    )\n    /*: ParseQuery*/\n    {\n      if (json.where) {\n        this._where = json.where;\n      }\n\n      if (json.include) {\n        this._include = json.include.split(',');\n      }\n\n      if ((0, _keys.default)(json)) {\n        this._select = (0, _keys.default)(json).split(',');\n      }\n\n      if (json.excludeKeys) {\n        this._exclude = json.excludeKeys.split(',');\n      }\n\n      if (json.count) {\n        this._count = json.count === 1;\n      }\n\n      if (json.limit) {\n        this._limit = json.limit;\n      }\n\n      if (json.skip) {\n        this._skip = json.skip;\n      }\n\n      if (json.order) {\n        this._order = json.order.split(',');\n      }\n\n      if (json.readPreference) {\n        this._readPreference = json.readPreference;\n      }\n\n      if (json.includeReadPreference) {\n        this._includeReadPreference = json.includeReadPreference;\n      }\n\n      if (json.subqueryReadPreference) {\n        this._subqueryReadPreference = json.subqueryReadPreference;\n      }\n\n      if (json.hint) {\n        this._hint = json.hint;\n      }\n\n      if (json.explain) {\n        this._explain = !!json.explain;\n      }\n\n      for (var _key4 in json) {\n        if (json.hasOwnProperty(_key4)) {\n          var _context4;\n\n          if ((0, _indexOf.default)(_context4 = ['where', 'include', 'keys', 'count', 'limit', 'skip', 'order', 'readPreference', 'includeReadPreference', 'subqueryReadPreference', 'hint', 'explain']).call(_context4, _key4) === -1) {\n            this._extraOptions[_key4] = json[_key4];\n          }\n        }\n      }\n\n      return this;\n    }\n    /**\n     * Static method to restore Parse.Query by json representation\n     * Internally calling Parse.Query.withJSON\n     *\n     * @param {string} className\n     * @param {QueryJSON} json from Parse.Query.toJSON() method\n     * @returns {Parse.Query} new created query\n     */\n\n  }, {\n    key: \"get\",\n    value:\n    /**\n     * Constructs a Parse.Object whose id is already known by fetching data from\n     * the server. Unlike the <code>first</code> method, it never returns undefined.\n     *\n     * @param {string} objectId The id of the object to be fetched.\n     * @param {object} options\n     * Valid options are:<ul>\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n     *     be used for this request.\n     *   <li>sessionToken: A valid session token, used for making a request on\n     *       behalf of a specific user.\n     *   <li>context: A dictionary that is accessible in Cloud Code `beforeFind` trigger.\n     *   <li>json: Return raw json without converting to Parse.Object\n     * </ul>\n     *\n     * @returns {Promise} A promise that is resolved with the result when\n     * the query completes.\n     */\n    function (objectId\n    /*: string*/\n    , options\n    /*:: ?: FullOptions*/\n    )\n    /*: Promise<ParseObject>*/\n    {\n      this.equalTo('objectId', objectId);\n      var firstOptions = {};\n\n      if (options && options.hasOwnProperty('useMasterKey')) {\n        firstOptions.useMasterKey = options.useMasterKey;\n      }\n\n      if (options && options.hasOwnProperty('sessionToken')) {\n        firstOptions.sessionToken = options.sessionToken;\n      }\n\n      if (options && options.hasOwnProperty('context') && (0, _typeof2.default)(options.context) === 'object') {\n        firstOptions.context = options.context;\n      }\n\n      if (options && options.hasOwnProperty('json')) {\n        firstOptions.json = options.json;\n      }\n\n      return this.first(firstOptions).then(function (response) {\n        if (response) {\n          return response;\n        }\n\n        var errorObject = new _ParseError.default(_ParseError.default.OBJECT_NOT_FOUND, 'Object not found.');\n        return _promise.default.reject(errorObject);\n      });\n    }\n    /**\n     * Retrieves a list of ParseObjects that satisfy this query.\n     *\n     * @param {object} options Valid options\n     * are:<ul>\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n     *     be used for this request.\n     *   <li>sessionToken: A valid session token, used for making a request on\n     *       behalf of a specific user.\n     *   <li>context: A dictionary that is accessible in Cloud Code `beforeFind` trigger.\n     *   <li>json: Return raw json without converting to Parse.Object\n     * </ul>\n     *\n     * @returns {Promise} A promise that is resolved with the results when\n     * the query completes.\n     */\n\n  }, {\n    key: \"find\",\n    value: function (options\n    /*:: ?: FullOptions*/\n    )\n    /*: Promise<Array<ParseObject>>*/\n    {\n      var _this3 = this;\n\n      options = options || {};\n      var findOptions = {};\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        findOptions.useMasterKey = options.useMasterKey;\n      }\n\n      if (options.hasOwnProperty('sessionToken')) {\n        findOptions.sessionToken = options.sessionToken;\n      }\n\n      if (options.hasOwnProperty('context') && (0, _typeof2.default)(options.context) === 'object') {\n        findOptions.context = options.context;\n      }\n\n      this._setRequestTask(findOptions);\n\n      var controller = _CoreManager.default.getQueryController();\n\n      var select = this._select;\n\n      if (this._queriesLocalDatastore) {\n        return this._handleOfflineQuery(this.toJSON());\n      }\n\n      return (0, _find.default)(controller).call(controller, this.className, this.toJSON(), findOptions).then(function (response) {\n        var _context5; // Return generic object when explain is used\n\n\n        if (_this3._explain) {\n          return response.results;\n        }\n\n        var results = (0, _map2.default)(_context5 = response.results).call(_context5, function (data) {\n          // In cases of relations, the server may send back a className\n          // on the top level of the payload\n          var override = response.className || _this3.className;\n\n          if (!data.className) {\n            data.className = override;\n          } // Make sure the data object contains keys for all objects that\n          // have been requested with a select, so that our cached state\n          // updates correctly.\n\n\n          if (select) {\n            handleSelectResult(data, select);\n          }\n\n          if (options.json) {\n            return data;\n          } else {\n            return _ParseObject.default.fromJSON(data, !select);\n          }\n        });\n        var count = response.count;\n\n        if (typeof count === 'number') {\n          return {\n            results: results,\n            count: count\n          };\n        } else {\n          return results;\n        }\n      });\n    }\n    /**\n     * Retrieves a complete list of ParseObjects that satisfy this query.\n     * Using `eachBatch` under the hood to fetch all the valid objects.\n     *\n     * @param {object} options Valid options are:<ul>\n     *   <li>batchSize: How many objects to yield in each batch (default: 100)\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n     *     be used for this request.\n     *   <li>sessionToken: A valid session token, used for making a request on\n     *       behalf of a specific user.\n     * </ul>\n     * @returns {Promise} A promise that is resolved with the results when\n     * the query completes.\n     */\n\n  }, {\n    key: \"findAll\",\n    value: function () {\n      var _findAll = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee2(options\n      /*:: ?: BatchOptions*/\n      ) {\n        var result;\n        return _regenerator.default.wrap(function (_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                result\n                /*: ParseObject[]*/\n                = [];\n                _context7.next = 3;\n                return this.eachBatch(function (objects\n                /*: ParseObject[]*/\n                ) {\n                  var _context6;\n\n                  result = (0, _concat.default)(_context6 = []).call(_context6, (0, _toConsumableArray2.default)(result), (0, _toConsumableArray2.default)(objects));\n                }, options);\n\n              case 3:\n                return _context7.abrupt(\"return\", result);\n\n              case 4:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function () {\n        return _findAll.apply(this, arguments);\n      };\n    }()\n    /**\n     * Counts the number of objects that match this query.\n     *\n     * @param {object} options\n     * Valid options are:<ul>\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n     *     be used for this request.\n     *   <li>sessionToken: A valid session token, used for making a request on\n     *       behalf of a specific user.\n     * </ul>\n     *\n     * @returns {Promise} A promise that is resolved with the count when\n     * the query completes.\n     */\n\n  }, {\n    key: \"count\",\n    value: function (options\n    /*:: ?: FullOptions*/\n    )\n    /*: Promise<number>*/\n    {\n      options = options || {};\n      var findOptions = {};\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        findOptions.useMasterKey = options.useMasterKey;\n      }\n\n      if (options.hasOwnProperty('sessionToken')) {\n        findOptions.sessionToken = options.sessionToken;\n      }\n\n      this._setRequestTask(findOptions);\n\n      var controller = _CoreManager.default.getQueryController();\n\n      var params = this.toJSON();\n      params.limit = 0;\n      params.count = 1;\n      return (0, _find.default)(controller).call(controller, this.className, params, findOptions).then(function (result) {\n        return result.count;\n      });\n    }\n    /**\n     * Executes a distinct query and returns unique values\n     *\n     * @param {string} key A field to find distinct values\n     * @param {object} options\n     * Valid options are:<ul>\n     *   <li>sessionToken: A valid session token, used for making a request on\n     *       behalf of a specific user.\n     * </ul>\n     *\n     * @returns {Promise} A promise that is resolved with the query completes.\n     */\n\n  }, {\n    key: \"distinct\",\n    value: function (key\n    /*: string*/\n    , options\n    /*:: ?: FullOptions*/\n    )\n    /*: Promise<Array<mixed>>*/\n    {\n      options = options || {};\n      var distinctOptions = {};\n      distinctOptions.useMasterKey = true;\n\n      if (options.hasOwnProperty('sessionToken')) {\n        distinctOptions.sessionToken = options.sessionToken;\n      }\n\n      this._setRequestTask(distinctOptions);\n\n      var controller = _CoreManager.default.getQueryController();\n\n      var params = {\n        distinct: key,\n        where: this._where,\n        hint: this._hint\n      };\n      return controller.aggregate(this.className, params, distinctOptions).then(function (results) {\n        return results.results;\n      });\n    }\n    /**\n     * Executes an aggregate query and returns aggregate results\n     *\n     * @param {(Array|object)} pipeline Array or Object of stages to process query\n     * @param {object} options Valid options are:<ul>\n     *   <li>sessionToken: A valid session token, used for making a request on\n     *       behalf of a specific user.\n     * </ul>\n     *\n     * @returns {Promise} A promise that is resolved with the query completes.\n     */\n\n  }, {\n    key: \"aggregate\",\n    value: function (pipeline\n    /*: mixed*/\n    , options\n    /*:: ?: FullOptions*/\n    )\n    /*: Promise<Array<mixed>>*/\n    {\n      options = options || {};\n      var aggregateOptions = {};\n      aggregateOptions.useMasterKey = true;\n\n      if (options.hasOwnProperty('sessionToken')) {\n        aggregateOptions.sessionToken = options.sessionToken;\n      }\n\n      this._setRequestTask(aggregateOptions);\n\n      var controller = _CoreManager.default.getQueryController();\n\n      if (!(0, _isArray.default)(pipeline) && (0, _typeof2.default)(pipeline) !== 'object') {\n        throw new Error('Invalid pipeline must be Array or Object');\n      }\n\n      if ((0, _keys2.default)(this._where || {}).length) {\n        if (!(0, _isArray.default)(pipeline)) {\n          pipeline = [pipeline];\n        }\n\n        pipeline.unshift({\n          match: this._where\n        });\n      }\n\n      var params = {\n        pipeline: pipeline,\n        hint: this._hint,\n        explain: this._explain,\n        readPreference: this._readPreference\n      };\n      return controller.aggregate(this.className, params, aggregateOptions).then(function (results) {\n        return results.results;\n      });\n    }\n    /**\n     * Retrieves at most one Parse.Object that satisfies this query.\n     *\n     * Returns the object if there is one, otherwise undefined.\n     *\n     * @param {object} options Valid options are:<ul>\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n     *     be used for this request.\n     *   <li>sessionToken: A valid session token, used for making a request on\n     *       behalf of a specific user.\n     *   <li>context: A dictionary that is accessible in Cloud Code `beforeFind` trigger.\n     *   <li>json: Return raw json without converting to Parse.Object\n     * </ul>\n     *\n     * @returns {Promise} A promise that is resolved with the object when\n     * the query completes.\n     */\n\n  }, {\n    key: \"first\",\n    value: function (options\n    /*:: ?: FullOptions*/\n    )\n    /*: Promise<ParseObject | void>*/\n    {\n      var _this4 = this;\n\n      options = options || {};\n      var findOptions = {};\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        findOptions.useMasterKey = options.useMasterKey;\n      }\n\n      if (options.hasOwnProperty('sessionToken')) {\n        findOptions.sessionToken = options.sessionToken;\n      }\n\n      if (options.hasOwnProperty('context') && (0, _typeof2.default)(options.context) === 'object') {\n        findOptions.context = options.context;\n      }\n\n      this._setRequestTask(findOptions);\n\n      var controller = _CoreManager.default.getQueryController();\n\n      var params = this.toJSON();\n      params.limit = 1;\n      var select = this._select;\n\n      if (this._queriesLocalDatastore) {\n        return this._handleOfflineQuery(params).then(function (objects) {\n          if (!objects[0]) {\n            return undefined;\n          }\n\n          return objects[0];\n        });\n      }\n\n      return (0, _find.default)(controller).call(controller, this.className, params, findOptions).then(function (response) {\n        var objects = response.results;\n\n        if (!objects[0]) {\n          return undefined;\n        }\n\n        if (!objects[0].className) {\n          objects[0].className = _this4.className;\n        } // Make sure the data object contains keys for all objects that\n        // have been requested with a select, so that our cached state\n        // updates correctly.\n\n\n        if (select) {\n          handleSelectResult(objects[0], select);\n        }\n\n        if (options.json) {\n          return objects[0];\n        } else {\n          return _ParseObject.default.fromJSON(objects[0], !select);\n        }\n      });\n    }\n    /**\n     * Iterates over objects matching a query, calling a callback for each batch.\n     * If the callback returns a promise, the iteration will not continue until\n     * that promise has been fulfilled. If the callback returns a rejected\n     * promise, then iteration will stop with that error. The items are processed\n     * in an unspecified order. The query may not have any sort order, and may\n     * not use limit or skip.\n     *\n     * @param {Function} callback Callback that will be called with each result\n     *     of the query.\n     * @param {object} options Valid options are:<ul>\n     *   <li>batchSize: How many objects to yield in each batch (default: 100)\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n     *     be used for this request.\n     *   <li>sessionToken: A valid session token, used for making a request on\n     *       behalf of a specific user.\n     *   <li>context: A dictionary that is accessible in Cloud Code `beforeFind` trigger.\n     * </ul>\n     * @returns {Promise} A promise that will be fulfilled once the\n     *     iteration has completed.\n     */\n\n  }, {\n    key: \"eachBatch\",\n    value: function (callback\n    /*: (objs: Array<ParseObject>) => Promise<*>*/\n    , options\n    /*:: ?: BatchOptions*/\n    )\n    /*: Promise<void>*/\n    {\n      var _context8;\n\n      options = options || {};\n\n      if (this._order || this._skip || this._limit >= 0) {\n        return _promise.default.reject('Cannot iterate on a query with sort, skip, or limit.');\n      }\n\n      var query = new ParseQuery(this.className);\n      query._limit = options.batchSize || 100;\n      query._include = (0, _map2.default)(_context8 = this._include).call(_context8, function (i) {\n        return i;\n      });\n\n      if (this._select) {\n        var _context9;\n\n        query._select = (0, _map2.default)(_context9 = this._select).call(_context9, function (s) {\n          return s;\n        });\n      }\n\n      query._hint = this._hint;\n      query._where = {};\n\n      for (var _attr in this._where) {\n        var val = this._where[_attr];\n\n        if ((0, _isArray.default)(val)) {\n          query._where[_attr] = (0, _map2.default)(val).call(val, function (v) {\n            return v;\n          });\n        } else if (val && (0, _typeof2.default)(val) === 'object') {\n          var conditionMap = {};\n          query._where[_attr] = conditionMap;\n\n          for (var cond in val) {\n            conditionMap[cond] = val[cond];\n          }\n        } else {\n          query._where[_attr] = val;\n        }\n      }\n\n      query.ascending('objectId');\n      var findOptions = {};\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        findOptions.useMasterKey = options.useMasterKey;\n      }\n\n      if (options.hasOwnProperty('sessionToken')) {\n        findOptions.sessionToken = options.sessionToken;\n      }\n\n      if (options.hasOwnProperty('context') && (0, _typeof2.default)(options.context) === 'object') {\n        findOptions.context = options.context;\n      }\n\n      var finished = false;\n      var previousResults = [];\n      return (0, _promiseUtils.continueWhile)(function () {\n        return !finished;\n      }, /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee3() {\n        var _yield$Promise$all, _yield$Promise$all2, results;\n\n        return _regenerator.default.wrap(function (_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                _context10.next = 2;\n                return _promise.default.all([(0, _find.default)(query).call(query, findOptions), _promise.default.resolve(previousResults.length > 0 && callback(previousResults))]);\n\n              case 2:\n                _yield$Promise$all = _context10.sent;\n                _yield$Promise$all2 = (0, _slicedToArray2.default)(_yield$Promise$all, 1);\n                results = _yield$Promise$all2[0];\n\n                if (!(results.length >= query._limit)) {\n                  _context10.next = 10;\n                  break;\n                }\n\n                query.greaterThan('objectId', results[results.length - 1].id);\n                previousResults = results;\n                _context10.next = 17;\n                break;\n\n              case 10:\n                if (!(results.length > 0)) {\n                  _context10.next = 16;\n                  break;\n                }\n\n                _context10.next = 13;\n                return _promise.default.resolve(callback(results));\n\n              case 13:\n                finished = true;\n                _context10.next = 17;\n                break;\n\n              case 16:\n                finished = true;\n\n              case 17:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee3);\n      })));\n    }\n    /**\n     * Iterates over each result of a query, calling a callback for each one. If\n     * the callback returns a promise, the iteration will not continue until\n     * that promise has been fulfilled. If the callback returns a rejected\n     * promise, then iteration will stop with that error. The items are\n     * processed in an unspecified order. The query may not have any sort order,\n     * and may not use limit or skip.\n     *\n     * @param {Function} callback Callback that will be called with each result\n     *     of the query.\n     * @param {object} options Valid options are:<ul>\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n     *     be used for this request.\n     *   <li>sessionToken: A valid session token, used for making a request on\n     *       behalf of a specific user.\n     * </ul>\n     * @returns {Promise} A promise that will be fulfilled once the\n     *     iteration has completed.\n     */\n\n  }, {\n    key: \"each\",\n    value: function (callback\n    /*: (obj: ParseObject) => any*/\n    , options\n    /*:: ?: BatchOptions*/\n    )\n    /*: Promise<void>*/\n    {\n      return this.eachBatch(function (results) {\n        var callbacksDone = _promise.default.resolve();\n\n        (0, _forEach.default)(results).call(results, function (result) {\n          callbacksDone = callbacksDone.then(function () {\n            return callback(result);\n          });\n        });\n        return callbacksDone;\n      }, options);\n    }\n    /**\n     * Adds a hint to force index selection. (https://docs.mongodb.com/manual/reference/operator/meta/hint/)\n     *\n     * @param {(string|object)} value String or Object of index that should be used when executing query\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"hint\",\n    value: function (value\n    /*: mixed*/\n    )\n    /*: ParseQuery*/\n    {\n      if (typeof value === 'undefined') {\n        delete this._hint;\n      }\n\n      this._hint = value;\n      return this;\n    }\n    /**\n     * Investigates the query execution plan. Useful for optimizing queries. (https://docs.mongodb.com/manual/reference/operator/meta/explain/)\n     *\n     * @param {boolean} explain Used to toggle the information on the query plan.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"explain\",\n    value: function ()\n    /*: ParseQuery*/\n    {\n      var _explain\n      /*: boolean*/\n      = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n\n      if (typeof _explain !== 'boolean') {\n        throw new Error('You can only set explain to a boolean value');\n      }\n\n      this._explain = _explain;\n      return this;\n    }\n    /**\n     * Iterates over each result of a query, calling a callback for each one. If\n     * the callback returns a promise, the iteration will not continue until\n     * that promise has been fulfilled. If the callback returns a rejected\n     * promise, then iteration will stop with that error. The items are\n     * processed in an unspecified order. The query may not have any sort order,\n     * and may not use limit or skip.\n     *\n     * @param {Function} callback Callback <ul>\n     *   <li>currentObject: The current Parse.Object being processed in the array.</li>\n     *   <li>index: The index of the current Parse.Object being processed in the array.</li>\n     *   <li>query: The query map was called upon.</li>\n     * </ul>\n     *\n     * @param {object} options Valid options are:<ul>\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n     *     be used for this request.\n     *   <li>sessionToken: A valid session token, used for making a request on\n     *       behalf of a specific user.\n     * </ul>\n     * @returns {Promise} A promise that will be fulfilled once the\n     *     iteration has completed.\n     */\n\n  }, {\n    key: \"map\",\n    value: function () {\n      var _map = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee4(callback\n      /*: (currentObject: ParseObject, index: number, query: ParseQuery) => any*/\n      , options\n      /*:: ?: BatchOptions*/\n      ) {\n        var _this5 = this;\n\n        var array, index;\n        return _regenerator.default.wrap(function (_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                array = [];\n                index = 0;\n                _context11.next = 4;\n                return this.each(function (object) {\n                  return _promise.default.resolve(callback(object, index, _this5)).then(function (result) {\n                    array.push(result);\n                    index += 1;\n                  });\n                }, options);\n\n              case 4:\n                return _context11.abrupt(\"return\", array);\n\n              case 5:\n              case \"end\":\n                return _context11.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      return function () {\n        return _map.apply(this, arguments);\n      };\n    }()\n    /**\n     * Iterates over each result of a query, calling a callback for each one. If\n     * the callback returns a promise, the iteration will not continue until\n     * that promise has been fulfilled. If the callback returns a rejected\n     * promise, then iteration will stop with that error. The items are\n     * processed in an unspecified order. The query may not have any sort order,\n     * and may not use limit or skip.\n     *\n     * @param {Function} callback Callback <ul>\n     *   <li>accumulator: The accumulator accumulates the callback's return values. It is the accumulated value previously returned in the last invocation of the callback.</li>\n     *   <li>currentObject: The current Parse.Object being processed in the array.</li>\n     *   <li>index: The index of the current Parse.Object being processed in the array.</li>\n     * </ul>\n     * @param {*} initialValue A value to use as the first argument to the first call of the callback. If no initialValue is supplied, the first object in the query will be used and skipped.\n     * @param {object} options Valid options are:<ul>\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n     *     be used for this request.\n     *   <li>sessionToken: A valid session token, used for making a request on\n     *       behalf of a specific user.\n     * </ul>\n     * @returns {Promise} A promise that will be fulfilled once the\n     *     iteration has completed.\n     */\n\n  }, {\n    key: \"reduce\",\n    value: function () {\n      var _reduce = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee5(callback\n      /*: (accumulator: any, currentObject: ParseObject, index: number) => any*/\n      , initialValue\n      /*: any*/\n      , options\n      /*:: ?: BatchOptions*/\n      ) {\n        var accumulator, index;\n        return _regenerator.default.wrap(function (_context12) {\n          while (1) {\n            switch (_context12.prev = _context12.next) {\n              case 0:\n                accumulator = initialValue;\n                index = 0;\n                _context12.next = 4;\n                return this.each(function (object) {\n                  // If no initial value was given, we take the first object from the query\n                  // as the initial value and don't call the callback with it.\n                  if (index === 0 && initialValue === undefined) {\n                    accumulator = object;\n                    index += 1;\n                    return;\n                  }\n\n                  return _promise.default.resolve(callback(accumulator, object, index)).then(function (result) {\n                    accumulator = result;\n                    index += 1;\n                  });\n                }, options);\n\n              case 4:\n                if (!(index === 0 && initialValue === undefined)) {\n                  _context12.next = 6;\n                  break;\n                }\n\n                throw new TypeError('Reducing empty query result set with no initial value');\n\n              case 6:\n                return _context12.abrupt(\"return\", accumulator);\n\n              case 7:\n              case \"end\":\n                return _context12.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      return function () {\n        return _reduce.apply(this, arguments);\n      };\n    }()\n    /**\n     * Iterates over each result of a query, calling a callback for each one. If\n     * the callback returns a promise, the iteration will not continue until\n     * that promise has been fulfilled. If the callback returns a rejected\n     * promise, then iteration will stop with that error. The items are\n     * processed in an unspecified order. The query may not have any sort order,\n     * and may not use limit or skip.\n     *\n     * @param {Function} callback Callback <ul>\n     *   <li>currentObject: The current Parse.Object being processed in the array.</li>\n     *   <li>index: The index of the current Parse.Object being processed in the array.</li>\n     *   <li>query: The query filter was called upon.</li>\n     * </ul>\n     *\n     * @param {object} options Valid options are:<ul>\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n     *     be used for this request.\n     *   <li>sessionToken: A valid session token, used for making a request on\n     *       behalf of a specific user.\n     * </ul>\n     * @returns {Promise} A promise that will be fulfilled once the\n     *     iteration has completed.\n     */\n\n  }, {\n    key: \"filter\",\n    value: function () {\n      var _filter = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee6(callback\n      /*: (currentObject: ParseObject, index: number, query: ParseQuery) => boolean*/\n      , options\n      /*:: ?: BatchOptions*/\n      ) {\n        var _this6 = this;\n\n        var array, index;\n        return _regenerator.default.wrap(function (_context13) {\n          while (1) {\n            switch (_context13.prev = _context13.next) {\n              case 0:\n                array = [];\n                index = 0;\n                _context13.next = 4;\n                return this.each(function (object) {\n                  return _promise.default.resolve(callback(object, index, _this6)).then(function (flag) {\n                    if (flag) {\n                      array.push(object);\n                    }\n\n                    index += 1;\n                  });\n                }, options);\n\n              case 4:\n                return _context13.abrupt(\"return\", array);\n\n              case 5:\n              case \"end\":\n                return _context13.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      return function () {\n        return _filter.apply(this, arguments);\n      };\n    }()\n    /** Query Conditions **/\n\n    /**\n     * Adds a constraint to the query that requires a particular key's value to\n     * be equal to the provided value.\n     *\n     * @param {string} key The key to check.\n     * @param value The value that the Parse.Object must contain.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"equalTo\",\n    value: function (key\n    /*: string | { [key: string]: any }*/\n    , value\n    /*: ?mixed*/\n    )\n    /*: ParseQuery*/\n    {\n      var _this7 = this;\n\n      if (key && (0, _typeof2.default)(key) === 'object') {\n        var _context14;\n\n        (0, _forEach.default)(_context14 = (0, _entries.default)(key)).call(_context14, function (_ref2) {\n          var _ref3 = (0, _slicedToArray2.default)(_ref2, 2),\n              k = _ref3[0],\n              val = _ref3[1];\n\n          return _this7.equalTo(k, val);\n        });\n        return this;\n      }\n\n      if (typeof value === 'undefined') {\n        return this.doesNotExist(key);\n      }\n\n      this._where[key] = (0, _encode.default)(value, false, true);\n      return this;\n    }\n    /**\n     * Adds a constraint to the query that requires a particular key's value to\n     * be not equal to the provided value.\n     *\n     * @param {string} key The key to check.\n     * @param value The value that must not be equalled.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"notEqualTo\",\n    value: function (key\n    /*: string | { [key: string]: any }*/\n    , value\n    /*: ?mixed*/\n    )\n    /*: ParseQuery*/\n    {\n      var _this8 = this;\n\n      if (key && (0, _typeof2.default)(key) === 'object') {\n        var _context15;\n\n        (0, _forEach.default)(_context15 = (0, _entries.default)(key)).call(_context15, function (_ref4) {\n          var _ref5 = (0, _slicedToArray2.default)(_ref4, 2),\n              k = _ref5[0],\n              val = _ref5[1];\n\n          return _this8.notEqualTo(k, val);\n        });\n        return this;\n      }\n\n      return this._addCondition(key, '$ne', value);\n    }\n    /**\n     * Adds a constraint to the query that requires a particular key's value to\n     * be less than the provided value.\n     *\n     * @param {string} key The key to check.\n     * @param value The value that provides an upper bound.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"lessThan\",\n    value: function (key\n    /*: string*/\n    , value\n    /*: mixed*/\n    )\n    /*: ParseQuery*/\n    {\n      return this._addCondition(key, '$lt', value);\n    }\n    /**\n     * Adds a constraint to the query that requires a particular key's value to\n     * be greater than the provided value.\n     *\n     * @param {string} key The key to check.\n     * @param value The value that provides an lower bound.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"greaterThan\",\n    value: function (key\n    /*: string*/\n    , value\n    /*: mixed*/\n    )\n    /*: ParseQuery*/\n    {\n      return this._addCondition(key, '$gt', value);\n    }\n    /**\n     * Adds a constraint to the query that requires a particular key's value to\n     * be less than or equal to the provided value.\n     *\n     * @param {string} key The key to check.\n     * @param value The value that provides an upper bound.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"lessThanOrEqualTo\",\n    value: function (key\n    /*: string*/\n    , value\n    /*: mixed*/\n    )\n    /*: ParseQuery*/\n    {\n      return this._addCondition(key, '$lte', value);\n    }\n    /**\n     * Adds a constraint to the query that requires a particular key's value to\n     * be greater than or equal to the provided value.\n     *\n     * @param {string} key The key to check.\n     * @param {*} value The value that provides an lower bound.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"greaterThanOrEqualTo\",\n    value: function (key\n    /*: string*/\n    , value\n    /*: mixed*/\n    )\n    /*: ParseQuery*/\n    {\n      return this._addCondition(key, '$gte', value);\n    }\n    /**\n     * Adds a constraint to the query that requires a particular key's value to\n     * be contained in the provided list of values.\n     *\n     * @param {string} key The key to check.\n     * @param {*} value The values that will match.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"containedIn\",\n    value: function (key\n    /*: string*/\n    , value\n    /*: mixed*/\n    )\n    /*: ParseQuery*/\n    {\n      return this._addCondition(key, '$in', value);\n    }\n    /**\n     * Adds a constraint to the query that requires a particular key's value to\n     * not be contained in the provided list of values.\n     *\n     * @param {string} key The key to check.\n     * @param {*} value The values that will not match.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"notContainedIn\",\n    value: function (key\n    /*: string*/\n    , value\n    /*: mixed*/\n    )\n    /*: ParseQuery*/\n    {\n      return this._addCondition(key, '$nin', value);\n    }\n    /**\n     * Adds a constraint to the query that requires a particular key's value to\n     * be contained by the provided list of values. Get objects where all array elements match.\n     *\n     * @param {string} key The key to check.\n     * @param {Array} values The values that will match.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"containedBy\",\n    value: function (key\n    /*: string*/\n    , values\n    /*: Array<mixed>*/\n    )\n    /*: ParseQuery*/\n    {\n      return this._addCondition(key, '$containedBy', values);\n    }\n    /**\n     * Adds a constraint to the query that requires a particular key's value to\n     * contain each one of the provided list of values.\n     *\n     * @param {string} key The key to check.  This key's value must be an array.\n     * @param {Array} values The values that will match.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"containsAll\",\n    value: function (key\n    /*: string*/\n    , values\n    /*: Array<mixed>*/\n    )\n    /*: ParseQuery*/\n    {\n      return this._addCondition(key, '$all', values);\n    }\n    /**\n     * Adds a constraint to the query that requires a particular key's value to\n     * contain each one of the provided list of values starting with given strings.\n     *\n     * @param {string} key The key to check.  This key's value must be an array.\n     * @param {Array<string>} values The string values that will match as starting string.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"containsAllStartingWith\",\n    value: function (key\n    /*: string*/\n    , values\n    /*: Array<string>*/\n    )\n    /*: ParseQuery*/\n    {\n      var _this = this;\n\n      if (!(0, _isArray.default)(values)) {\n        values = [values];\n      }\n\n      var regexObject = (0, _map2.default)(values).call(values, function (value) {\n        return {\n          $regex: _this._regexStartWith(value)\n        };\n      });\n      return this.containsAll(key, regexObject);\n    }\n    /**\n     * Adds a constraint for finding objects that contain the given key.\n     *\n     * @param {string} key The key that should exist.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"exists\",\n    value: function (key\n    /*: string*/\n    )\n    /*: ParseQuery*/\n    {\n      return this._addCondition(key, '$exists', true);\n    }\n    /**\n     * Adds a constraint for finding objects that do not contain a given key.\n     *\n     * @param {string} key The key that should not exist\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"doesNotExist\",\n    value: function (key\n    /*: string*/\n    )\n    /*: ParseQuery*/\n    {\n      return this._addCondition(key, '$exists', false);\n    }\n    /**\n     * Adds a regular expression constraint for finding string values that match\n     * the provided regular expression.\n     * This may be slow for large datasets.\n     *\n     * @param {string} key The key that the string to match is stored in.\n     * @param {RegExp} regex The regular expression pattern to match.\n     * @param {string} modifiers The regular expression mode.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"matches\",\n    value: function (key\n    /*: string*/\n    , regex\n    /*: RegExp*/\n    , modifiers\n    /*: string*/\n    )\n    /*: ParseQuery*/\n    {\n      this._addCondition(key, '$regex', regex);\n\n      if (!modifiers) {\n        modifiers = '';\n      }\n\n      if (regex.ignoreCase) {\n        modifiers += 'i';\n      }\n\n      if (regex.multiline) {\n        modifiers += 'm';\n      }\n\n      if (modifiers.length) {\n        this._addCondition(key, '$options', modifiers);\n      }\n\n      return this;\n    }\n    /**\n     * Adds a constraint that requires that a key's value matches a Parse.Query\n     * constraint.\n     *\n     * @param {string} key The key that the contains the object to match the\n     *                     query.\n     * @param {Parse.Query} query The query that should match.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"matchesQuery\",\n    value: function (key\n    /*: string*/\n    , query\n    /*: ParseQuery*/\n    )\n    /*: ParseQuery*/\n    {\n      var queryJSON = query.toJSON();\n      queryJSON.className = query.className;\n      return this._addCondition(key, '$inQuery', queryJSON);\n    }\n    /**\n     * Adds a constraint that requires that a key's value not matches a\n     * Parse.Query constraint.\n     *\n     * @param {string} key The key that the contains the object to match the\n     *                     query.\n     * @param {Parse.Query} query The query that should not match.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"doesNotMatchQuery\",\n    value: function (key\n    /*: string*/\n    , query\n    /*: ParseQuery*/\n    )\n    /*: ParseQuery*/\n    {\n      var queryJSON = query.toJSON();\n      queryJSON.className = query.className;\n      return this._addCondition(key, '$notInQuery', queryJSON);\n    }\n    /**\n     * Adds a constraint that requires that a key's value matches a value in\n     * an object returned by a different Parse.Query.\n     *\n     * @param {string} key The key that contains the value that is being\n     *                     matched.\n     * @param {string} queryKey The key in the objects returned by the query to\n     *                          match against.\n     * @param {Parse.Query} query The query to run.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"matchesKeyInQuery\",\n    value: function (key\n    /*: string*/\n    , queryKey\n    /*: string*/\n    , query\n    /*: ParseQuery*/\n    )\n    /*: ParseQuery*/\n    {\n      var queryJSON = query.toJSON();\n      queryJSON.className = query.className;\n      return this._addCondition(key, '$select', {\n        key: queryKey,\n        query: queryJSON\n      });\n    }\n    /**\n     * Adds a constraint that requires that a key's value not match a value in\n     * an object returned by a different Parse.Query.\n     *\n     * @param {string} key The key that contains the value that is being\n     *                     excluded.\n     * @param {string} queryKey The key in the objects returned by the query to\n     *                          match against.\n     * @param {Parse.Query} query The query to run.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"doesNotMatchKeyInQuery\",\n    value: function (key\n    /*: string*/\n    , queryKey\n    /*: string*/\n    , query\n    /*: ParseQuery*/\n    )\n    /*: ParseQuery*/\n    {\n      var queryJSON = query.toJSON();\n      queryJSON.className = query.className;\n      return this._addCondition(key, '$dontSelect', {\n        key: queryKey,\n        query: queryJSON\n      });\n    }\n    /**\n     * Adds a constraint for finding string values that contain a provided\n     * string.  This may be slow for large datasets.\n     *\n     * @param {string} key The key that the string to match is stored in.\n     * @param {string} substring The substring that the value must contain.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"contains\",\n    value: function (key\n    /*: string*/\n    , substring\n    /*: string*/\n    )\n    /*: ParseQuery*/\n    {\n      if (typeof substring !== 'string') {\n        throw new Error('The value being searched for must be a string.');\n      }\n\n      return this._addCondition(key, '$regex', quote(substring));\n    }\n    /**\n     * Adds a constraint for finding string values that contain a provided\n     * string. This may be slow for large datasets. Requires Parse-Server > 2.5.0\n     *\n     * In order to sort you must use select and ascending ($score is required)\n     *  <pre>\n     *   query.fullText('field', 'term');\n     *   query.ascending('$score');\n     *   query.select('$score');\n     *  </pre>\n     *\n     * To retrieve the weight / rank\n     *  <pre>\n     *   object->get('score');\n     *  </pre>\n     *\n     * You can define optionals by providing an object as a third parameter\n     *  <pre>\n     *   query.fullText('field', 'term', { language: 'es', diacriticSensitive: true });\n     *  </pre>\n     *\n     * @param {string} key The key that the string to match is stored in.\n     * @param {string} value The string to search\n     * @param {object} options (Optional)\n     * @param {string} options.language The language that determines the list of stop words for the search and the rules for the stemmer and tokenizer.\n     * @param {boolean} options.caseSensitive A boolean flag to enable or disable case sensitive search.\n     * @param {boolean} options.diacriticSensitive A boolean flag to enable or disable diacritic sensitive search.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"fullText\",\n    value: function (key\n    /*: string*/\n    , value\n    /*: string*/\n    , options\n    /*: ?Object*/\n    )\n    /*: ParseQuery*/\n    {\n      options = options || {};\n\n      if (!key) {\n        throw new Error('A key is required.');\n      }\n\n      if (!value) {\n        throw new Error('A search term is required');\n      }\n\n      if (typeof value !== 'string') {\n        throw new Error('The value being searched for must be a string.');\n      }\n\n      var fullOptions = {};\n      fullOptions.$term = value;\n\n      for (var option in options) {\n        switch (option) {\n          case 'language':\n            fullOptions.$language = options[option];\n            break;\n\n          case 'caseSensitive':\n            fullOptions.$caseSensitive = options[option];\n            break;\n\n          case 'diacriticSensitive':\n            fullOptions.$diacriticSensitive = options[option];\n            break;\n\n          default:\n            throw new Error(\"Unknown option: \".concat(option));\n        }\n      }\n\n      return this._addCondition(key, '$text', {\n        $search: fullOptions\n      });\n    }\n    /**\n     * Method to sort the full text search by text score\n     *\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"sortByTextScore\",\n    value: function () {\n      this.ascending('$score');\n      this.select(['$score']);\n      return this;\n    }\n    /**\n     * Adds a constraint for finding string values that start with a provided\n     * string.  This query will use the backend index, so it will be fast even\n     * for large datasets.\n     *\n     * @param {string} key The key that the string to match is stored in.\n     * @param {string} prefix The substring that the value must start with.\n     * @param {string} modifiers The regular expression mode.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"startsWith\",\n    value: function (key\n    /*: string*/\n    , prefix\n    /*: string*/\n    , modifiers\n    /*: string*/\n    )\n    /*: ParseQuery*/\n    {\n      if (typeof prefix !== 'string') {\n        throw new Error('The value being searched for must be a string.');\n      }\n\n      return this.matches(key, this._regexStartWith(prefix), modifiers);\n    }\n    /**\n     * Adds a constraint for finding string values that end with a provided\n     * string.  This will be slow for large datasets.\n     *\n     * @param {string} key The key that the string to match is stored in.\n     * @param {string} suffix The substring that the value must end with.\n     * @param {string} modifiers The regular expression mode.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"endsWith\",\n    value: function (key\n    /*: string*/\n    , suffix\n    /*: string*/\n    , modifiers\n    /*: string*/\n    )\n    /*: ParseQuery*/\n    {\n      if (typeof suffix !== 'string') {\n        throw new Error('The value being searched for must be a string.');\n      }\n\n      return this.matches(key, quote(suffix) + '$', modifiers);\n    }\n    /**\n     * Adds a proximity based constraint for finding objects with key point\n     * values near the point given.\n     *\n     * @param {string} key The key that the Parse.GeoPoint is stored in.\n     * @param {Parse.GeoPoint} point The reference Parse.GeoPoint that is used.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"near\",\n    value: function (key\n    /*: string*/\n    , point\n    /*: ParseGeoPoint*/\n    )\n    /*: ParseQuery*/\n    {\n      if (!(point instanceof _ParseGeoPoint.default)) {\n        // Try to cast it as a GeoPoint\n        point = new _ParseGeoPoint.default(point);\n      }\n\n      return this._addCondition(key, '$nearSphere', point);\n    }\n    /**\n     * Adds a proximity based constraint for finding objects with key point\n     * values near the point given and within the maximum distance given.\n     *\n     * @param {string} key The key that the Parse.GeoPoint is stored in.\n     * @param {Parse.GeoPoint} point The reference Parse.GeoPoint that is used.\n     * @param {number} maxDistance Maximum distance (in radians) of results to return.\n     * @param {boolean} sorted A Bool value that is true if results should be\n     * sorted by distance ascending, false is no sorting is required,\n     * defaults to true.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"withinRadians\",\n    value: function (key\n    /*: string*/\n    , point\n    /*: ParseGeoPoint*/\n    , maxDistance\n    /*: number*/\n    , sorted\n    /*: boolean*/\n    )\n    /*: ParseQuery*/\n    {\n      if (sorted || sorted === undefined) {\n        this.near(key, point);\n        return this._addCondition(key, '$maxDistance', maxDistance);\n      } else {\n        return this._addCondition(key, '$geoWithin', {\n          $centerSphere: [[point.longitude, point.latitude], maxDistance]\n        });\n      }\n    }\n    /**\n     * Adds a proximity based constraint for finding objects with key point\n     * values near the point given and within the maximum distance given.\n     * Radius of earth used is 3958.8 miles.\n     *\n     * @param {string} key The key that the Parse.GeoPoint is stored in.\n     * @param {Parse.GeoPoint} point The reference Parse.GeoPoint that is used.\n     * @param {number} maxDistance Maximum distance (in miles) of results to return.\n     * @param {boolean} sorted A Bool value that is true if results should be\n     * sorted by distance ascending, false is no sorting is required,\n     * defaults to true.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"withinMiles\",\n    value: function (key\n    /*: string*/\n    , point\n    /*: ParseGeoPoint*/\n    , maxDistance\n    /*: number*/\n    , sorted\n    /*: boolean*/\n    )\n    /*: ParseQuery*/\n    {\n      return this.withinRadians(key, point, maxDistance / 3958.8, sorted);\n    }\n    /**\n     * Adds a proximity based constraint for finding objects with key point\n     * values near the point given and within the maximum distance given.\n     * Radius of earth used is 6371.0 kilometers.\n     *\n     * @param {string} key The key that the Parse.GeoPoint is stored in.\n     * @param {Parse.GeoPoint} point The reference Parse.GeoPoint that is used.\n     * @param {number} maxDistance Maximum distance (in kilometers) of results to return.\n     * @param {boolean} sorted A Bool value that is true if results should be\n     * sorted by distance ascending, false is no sorting is required,\n     * defaults to true.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"withinKilometers\",\n    value: function (key\n    /*: string*/\n    , point\n    /*: ParseGeoPoint*/\n    , maxDistance\n    /*: number*/\n    , sorted\n    /*: boolean*/\n    )\n    /*: ParseQuery*/\n    {\n      return this.withinRadians(key, point, maxDistance / 6371.0, sorted);\n    }\n    /**\n     * Adds a constraint to the query that requires a particular key's\n     * coordinates be contained within a given rectangular geographic bounding\n     * box.\n     *\n     * @param {string} key The key to be constrained.\n     * @param {Parse.GeoPoint} southwest\n     *     The lower-left inclusive corner of the box.\n     * @param {Parse.GeoPoint} northeast\n     *     The upper-right inclusive corner of the box.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"withinGeoBox\",\n    value: function (key\n    /*: string*/\n    , southwest\n    /*: ParseGeoPoint*/\n    , northeast\n    /*: ParseGeoPoint*/\n    )\n    /*: ParseQuery*/\n    {\n      if (!(southwest instanceof _ParseGeoPoint.default)) {\n        southwest = new _ParseGeoPoint.default(southwest);\n      }\n\n      if (!(northeast instanceof _ParseGeoPoint.default)) {\n        northeast = new _ParseGeoPoint.default(northeast);\n      }\n\n      this._addCondition(key, '$within', {\n        $box: [southwest, northeast]\n      });\n\n      return this;\n    }\n    /**\n     * Adds a constraint to the query that requires a particular key's\n     * coordinates be contained within and on the bounds of a given polygon.\n     * Supports closed and open (last point is connected to first) paths\n     *\n     * Polygon must have at least 3 points\n     *\n     * @param {string} key The key to be constrained.\n     * @param {Array} points Array of Coordinates / GeoPoints\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"withinPolygon\",\n    value: function (key\n    /*: string*/\n    , points\n    /*: Array<Array<number>>*/\n    )\n    /*: ParseQuery*/\n    {\n      return this._addCondition(key, '$geoWithin', {\n        $polygon: points\n      });\n    }\n    /**\n     * Add a constraint to the query that requires a particular key's\n     * coordinates that contains a ParseGeoPoint\n     *\n     * @param {string} key The key to be constrained.\n     * @param {Parse.GeoPoint} point\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"polygonContains\",\n    value: function (key\n    /*: string*/\n    , point\n    /*: ParseGeoPoint*/\n    )\n    /*: ParseQuery*/\n    {\n      return this._addCondition(key, '$geoIntersects', {\n        $point: point\n      });\n    }\n    /** Query Orderings **/\n\n    /**\n     * Sorts the results in ascending order by the given key.\n     *\n     * @param {(string|string[])} keys The key to order by, which is a\n     * string of comma separated values, or an Array of keys, or multiple keys.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"ascending\",\n    value: function ()\n    /*: ParseQuery*/\n    {\n      this._order = [];\n\n      for (var _len = arguments.length, keys = new Array(_len), _key5 = 0; _key5 < _len; _key5++) {\n        keys[_key5] = arguments[_key5];\n      }\n\n      return this.addAscending.apply(this, keys);\n    }\n    /**\n     * Sorts the results in ascending order by the given key,\n     * but can also add secondary sort descriptors without overwriting _order.\n     *\n     * @param {(string|string[])} keys The key to order by, which is a\n     * string of comma separated values, or an Array of keys, or multiple keys.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"addAscending\",\n    value: function ()\n    /*: ParseQuery*/\n    {\n      var _this9 = this;\n\n      if (!this._order) {\n        this._order = [];\n      }\n\n      for (var _len2 = arguments.length, keys = new Array(_len2), _key6 = 0; _key6 < _len2; _key6++) {\n        keys[_key6] = arguments[_key6];\n      }\n\n      (0, _forEach.default)(keys).call(keys, function (key) {\n        var _context16;\n\n        if ((0, _isArray.default)(key)) {\n          key = key.join();\n        }\n\n        _this9._order = (0, _concat.default)(_context16 = _this9._order).call(_context16, key.replace(/\\s/g, '').split(','));\n      });\n      return this;\n    }\n    /**\n     * Sorts the results in descending order by the given key.\n     *\n     * @param {(string|string[])} keys The key to order by, which is a\n     * string of comma separated values, or an Array of keys, or multiple keys.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"descending\",\n    value: function ()\n    /*: ParseQuery*/\n    {\n      this._order = [];\n\n      for (var _len3 = arguments.length, keys = new Array(_len3), _key7 = 0; _key7 < _len3; _key7++) {\n        keys[_key7] = arguments[_key7];\n      }\n\n      return this.addDescending.apply(this, keys);\n    }\n    /**\n     * Sorts the results in descending order by the given key,\n     * but can also add secondary sort descriptors without overwriting _order.\n     *\n     * @param {(string|string[])} keys The key to order by, which is a\n     * string of comma separated values, or an Array of keys, or multiple keys.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"addDescending\",\n    value: function ()\n    /*: ParseQuery*/\n    {\n      var _this10 = this;\n\n      if (!this._order) {\n        this._order = [];\n      }\n\n      for (var _len4 = arguments.length, keys = new Array(_len4), _key8 = 0; _key8 < _len4; _key8++) {\n        keys[_key8] = arguments[_key8];\n      }\n\n      (0, _forEach.default)(keys).call(keys, function (key) {\n        var _context17, _context18;\n\n        if ((0, _isArray.default)(key)) {\n          key = key.join();\n        }\n\n        _this10._order = (0, _concat.default)(_context17 = _this10._order).call(_context17, (0, _map2.default)(_context18 = key.replace(/\\s/g, '').split(',')).call(_context18, function (k) {\n          return '-' + k;\n        }));\n      });\n      return this;\n    }\n    /** Query Options **/\n\n    /**\n     * Sets the number of results to skip before returning any results.\n     * This is useful for pagination.\n     * Default is to skip zero results.\n     *\n     * @param {number} n the number of results to skip.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"skip\",\n    value: function (n\n    /*: number*/\n    )\n    /*: ParseQuery*/\n    {\n      if (typeof n !== 'number' || n < 0) {\n        throw new Error('You can only skip by a positive number');\n      }\n\n      this._skip = n;\n      return this;\n    }\n    /**\n     * Sets the limit of the number of results to return. The default limit is 100.\n     *\n     * @param {number} n the number of results to limit to.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"limit\",\n    value: function (n\n    /*: number*/\n    )\n    /*: ParseQuery*/\n    {\n      if (typeof n !== 'number') {\n        throw new Error('You can only set the limit to a numeric value');\n      }\n\n      this._limit = n;\n      return this;\n    }\n    /**\n     * Sets the flag to include with response the total number of objects satisfying this query,\n     * despite limits/skip. Might be useful for pagination.\n     * Note that result of this query will be wrapped as an object with\n     * `results`: holding {ParseObject} array and `count`: integer holding total number\n     *\n     * @param {boolean} includeCount false - disable, true - enable.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"withCount\",\n    value: function ()\n    /*: ParseQuery*/\n    {\n      var includeCount\n      /*: boolean*/\n      = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n\n      if (typeof includeCount !== 'boolean') {\n        throw new Error('You can only set withCount to a boolean value');\n      }\n\n      this._count = includeCount;\n      return this;\n    }\n    /**\n     * Includes nested Parse.Objects for the provided key.  You can use dot\n     * notation to specify which fields in the included object are also fetched.\n     *\n     * You can include all nested Parse.Objects by passing in '*'.\n     * Requires Parse Server 3.0.0+\n     * <pre>query.include('*');</pre>\n     *\n     * @param {...string|Array<string>} keys The name(s) of the key(s) to include.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"include\",\n    value: function ()\n    /*: ParseQuery*/\n    {\n      var _this11 = this;\n\n      for (var _len5 = arguments.length, keys = new Array(_len5), _key9 = 0; _key9 < _len5; _key9++) {\n        keys[_key9] = arguments[_key9];\n      }\n\n      (0, _forEach.default)(keys).call(keys, function (key) {\n        if ((0, _isArray.default)(key)) {\n          var _context19;\n\n          _this11._include = (0, _concat.default)(_context19 = _this11._include).call(_context19, key);\n        } else {\n          _this11._include.push(key);\n        }\n      });\n      return this;\n    }\n    /**\n     * Includes all nested Parse.Objects one level deep.\n     *\n     * Requires Parse Server 3.0.0+\n     *\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"includeAll\",\n    value: function ()\n    /*: ParseQuery*/\n    {\n      return this.include('*');\n    }\n    /**\n     * Restricts the fields of the returned Parse.Objects to include only the\n     * provided keys.  If this is called multiple times, then all of the keys\n     * specified in each of the calls will be included.\n     *\n     * @param {...string|Array<string>} keys The name(s) of the key(s) to include.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"select\",\n    value: function ()\n    /*: ParseQuery*/\n    {\n      var _this12 = this;\n\n      if (!this._select) {\n        this._select = [];\n      }\n\n      for (var _len6 = arguments.length, keys = new Array(_len6), _key10 = 0; _key10 < _len6; _key10++) {\n        keys[_key10] = arguments[_key10];\n      }\n\n      (0, _forEach.default)(keys).call(keys, function (key) {\n        if ((0, _isArray.default)(key)) {\n          var _context20;\n\n          _this12._select = (0, _concat.default)(_context20 = _this12._select).call(_context20, key);\n        } else {\n          _this12._select.push(key);\n        }\n      });\n      return this;\n    }\n    /**\n     * Restricts the fields of the returned Parse.Objects to all keys except the\n     * provided keys. Exclude takes precedence over select and include.\n     *\n     * Requires Parse Server 3.6.0+\n     *\n     * @param {...string|Array<string>} keys The name(s) of the key(s) to exclude.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"exclude\",\n    value: function ()\n    /*: ParseQuery*/\n    {\n      var _this13 = this;\n\n      for (var _len7 = arguments.length, keys = new Array(_len7), _key11 = 0; _key11 < _len7; _key11++) {\n        keys[_key11] = arguments[_key11];\n      }\n\n      (0, _forEach.default)(keys).call(keys, function (key) {\n        if ((0, _isArray.default)(key)) {\n          var _context21;\n\n          _this13._exclude = (0, _concat.default)(_context21 = _this13._exclude).call(_context21, key);\n        } else {\n          _this13._exclude.push(key);\n        }\n      });\n      return this;\n    }\n    /**\n     * Changes the read preference that the backend will use when performing the query to the database.\n     *\n     * @param {string} readPreference The read preference for the main query.\n     * @param {string} includeReadPreference The read preference for the queries to include pointers.\n     * @param {string} subqueryReadPreference The read preference for the sub queries.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"readPreference\",\n    value: function (_readPreference\n    /*: string*/\n    , includeReadPreference\n    /*:: ?: string*/\n    , subqueryReadPreference\n    /*:: ?: string*/\n    )\n    /*: ParseQuery*/\n    {\n      this._readPreference = _readPreference;\n      this._includeReadPreference = includeReadPreference;\n      this._subqueryReadPreference = subqueryReadPreference;\n      return this;\n    }\n    /**\n     * Subscribe this query to get liveQuery updates\n     *\n     * @param {string} sessionToken (optional) Defaults to the currentUser\n     * @returns {Promise<LiveQuerySubscription>} Returns the liveQuerySubscription, it's an event emitter\n     * which can be used to get liveQuery updates.\n     */\n\n  }, {\n    key: \"subscribe\",\n    value: function () {\n      var _subscribe = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee7(sessionToken\n      /*:: ?: string*/\n      ) {\n        var currentUser, liveQueryClient, subscription;\n        return _regenerator.default.wrap(function (_context22) {\n          while (1) {\n            switch (_context22.prev = _context22.next) {\n              case 0:\n                _context22.next = 2;\n                return _CoreManager.default.getUserController().currentUserAsync();\n\n              case 2:\n                currentUser = _context22.sent;\n\n                if (!sessionToken) {\n                  sessionToken = currentUser ? currentUser.getSessionToken() : undefined;\n                }\n\n                _context22.next = 6;\n                return _CoreManager.default.getLiveQueryController().getDefaultLiveQueryClient();\n\n              case 6:\n                liveQueryClient = _context22.sent;\n\n                if (liveQueryClient.shouldOpen()) {\n                  liveQueryClient.open();\n                }\n\n                subscription = liveQueryClient.subscribe(this, sessionToken);\n                return _context22.abrupt(\"return\", subscription.subscribePromise.then(function () {\n                  return subscription;\n                }));\n\n              case 10:\n              case \"end\":\n                return _context22.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      return function () {\n        return _subscribe.apply(this, arguments);\n      };\n    }()\n    /**\n     * Constructs a Parse.Query that is the OR of the passed in queries.  For\n     * example:\n     * <pre>var compoundQuery = Parse.Query.or(query1, query2, query3);</pre>\n     *\n     * will create a compoundQuery that is an or of the query1, query2, and\n     * query3.\n     *\n     * @param {...Parse.Query} queries The list of queries to OR.\n     * @static\n     * @returns {Parse.Query} The query that is the OR of the passed in queries.\n     */\n\n  }, {\n    key: \"fromNetwork\",\n    value:\n    /**\n     * Change the source of this query to the server.\n     *\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n    function ()\n    /*: ParseQuery*/\n    {\n      this._queriesLocalDatastore = false;\n      this._localDatastorePinName = null;\n      return this;\n    }\n    /**\n     * Changes the source of this query to all pinned objects.\n     *\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"fromLocalDatastore\",\n    value: function ()\n    /*: ParseQuery*/\n    {\n      return this.fromPinWithName(null);\n    }\n    /**\n     * Changes the source of this query to the default group of pinned objects.\n     *\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"fromPin\",\n    value: function ()\n    /*: ParseQuery*/\n    {\n      return this.fromPinWithName(_LocalDatastoreUtils.DEFAULT_PIN);\n    }\n    /**\n     * Changes the source of this query to a specific group of pinned objects.\n     *\n     * @param {string} name The name of query source.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"fromPinWithName\",\n    value: function (name\n    /*:: ?: string*/\n    )\n    /*: ParseQuery*/\n    {\n      var localDatastore = _CoreManager.default.getLocalDatastore();\n\n      if (localDatastore.checkIfEnabled()) {\n        this._queriesLocalDatastore = true;\n        this._localDatastorePinName = name;\n      }\n\n      return this;\n    }\n    /**\n     * Cancels the current network request (if any is running).\n     *\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"cancel\",\n    value: function ()\n    /*: ParseQuery*/\n    {\n      var _this14 = this;\n\n      if (this._xhrRequest.task && typeof this._xhrRequest.task.abort === 'function') {\n        this._xhrRequest.task._aborted = true;\n\n        this._xhrRequest.task.abort();\n\n        this._xhrRequest.task = null;\n\n        this._xhrRequest.onchange = function () {};\n\n        return this;\n      }\n\n      return this._xhrRequest.onchange = function () {\n        return _this14.cancel();\n      };\n    }\n  }, {\n    key: \"_setRequestTask\",\n    value: function (options) {\n      var _this15 = this;\n\n      options.requestTask = function (task) {\n        _this15._xhrRequest.task = task;\n\n        _this15._xhrRequest.onchange();\n      };\n    }\n  }], [{\n    key: \"fromJSON\",\n    value: function (className\n    /*: string*/\n    , json\n    /*: QueryJSON*/\n    )\n    /*: ParseQuery*/\n    {\n      var query = new ParseQuery(className);\n      return query.withJSON(json);\n    }\n  }, {\n    key: \"or\",\n    value: function ()\n    /*: ParseQuery*/\n    {\n      for (var _len8 = arguments.length, queries = new Array(_len8), _key12 = 0; _key12 < _len8; _key12++) {\n        queries[_key12] = arguments[_key12];\n      }\n\n      var className = _getClassNameFromQueries(queries);\n\n      var query = new ParseQuery(className);\n\n      query._orQuery(queries);\n\n      return query;\n    }\n    /**\n     * Constructs a Parse.Query that is the AND of the passed in queries.  For\n     * example:\n     * <pre>var compoundQuery = Parse.Query.and(query1, query2, query3);</pre>\n     *\n     * will create a compoundQuery that is an and of the query1, query2, and\n     * query3.\n     *\n     * @param {...Parse.Query} queries The list of queries to AND.\n     * @static\n     * @returns {Parse.Query} The query that is the AND of the passed in queries.\n     */\n\n  }, {\n    key: \"and\",\n    value: function ()\n    /*: ParseQuery*/\n    {\n      for (var _len9 = arguments.length, queries = new Array(_len9), _key13 = 0; _key13 < _len9; _key13++) {\n        queries[_key13] = arguments[_key13];\n      }\n\n      var className = _getClassNameFromQueries(queries);\n\n      var query = new ParseQuery(className);\n\n      query._andQuery(queries);\n\n      return query;\n    }\n    /**\n     * Constructs a Parse.Query that is the NOR of the passed in queries.  For\n     * example:\n     * <pre>const compoundQuery = Parse.Query.nor(query1, query2, query3);</pre>\n     *\n     * will create a compoundQuery that is a nor of the query1, query2, and\n     * query3.\n     *\n     * @param {...Parse.Query} queries The list of queries to NOR.\n     * @static\n     * @returns {Parse.Query} The query that is the NOR of the passed in queries.\n     */\n\n  }, {\n    key: \"nor\",\n    value: function ()\n    /*: ParseQuery*/\n    {\n      for (var _len10 = arguments.length, queries = new Array(_len10), _key14 = 0; _key14 < _len10; _key14++) {\n        queries[_key14] = arguments[_key14];\n      }\n\n      var className = _getClassNameFromQueries(queries);\n\n      var query = new ParseQuery(className);\n\n      query._norQuery(queries);\n\n      return query;\n    }\n  }]);\n  return ParseQuery;\n}();\n\nvar DefaultController = {\n  find: function (className\n  /*: string*/\n  , params\n  /*: QueryJSON*/\n  , options\n  /*: RequestOptions*/\n  )\n  /*: Promise<Array<ParseObject>>*/\n  {\n    var RESTController = _CoreManager.default.getRESTController();\n\n    return RESTController.request('GET', 'classes/' + className, params, options);\n  },\n  aggregate: function (className\n  /*: string*/\n  , params\n  /*: any*/\n  , options\n  /*: RequestOptions*/\n  )\n  /*: Promise<Array<mixed>>*/\n  {\n    var RESTController = _CoreManager.default.getRESTController();\n\n    return RESTController.request('GET', 'aggregate/' + className, params, options);\n  }\n};\n\n_CoreManager.default.setQueryController(DefaultController);\n\nvar _default = ParseQuery;\nexports.default = _default;"],"mappings":"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"},"metadata":{},"sourceType":"script"}