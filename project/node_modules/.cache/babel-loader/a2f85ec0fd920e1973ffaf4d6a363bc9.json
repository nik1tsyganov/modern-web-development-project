{"ast":null,"code":"import _asyncToGenerator from \"C:\\\\Users\\\\brosk\\\\Documents\\\\Web Dev\\\\modern-web-development-project\\\\project\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\n\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == typeof value && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, \"throw\" === context.method) { if (delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method)) return ContinueSentinel; context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a 'throw' method\"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, \"constructor\", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\n\nimport Parse from 'parse';\nexport var addFriend = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(friend) {\n    var currentUser, username, UserClass, query1, query2, user, friends;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            // This is so that the Creating: ... is displayed in the console and the user can see his/her input is recorded\n            currentUser = Parse.User.current();\n            username = currentUser.attributes.username;\n            UserClass = Parse.Object.extend(\"User\");\n            query1 = new Parse.Query(UserClass);\n            query2 = new Parse.Query(UserClass); // add query testing if user exists with that username\n\n            query1.equalTo(\"username\", username);\n            query2.equalTo(\"username\", friend);\n\n            query2._andQuery([query1]);\n\n            _context.next = 10;\n            return query2.first();\n\n          case 10:\n            user = _context.sent;\n            console.log(\"user\");\n            console.log(user);\n            friends = [];\n            console.log('typeof');\n            console.log(typeof user);\n\n            if (typeof friends !== 'undefined') {\n              if (user[0].attributes.username === username) {\n                friends = user[0].attributes.friendsList;\n              } else if (user[1].attributes.username === username) {\n                friends = user[1].attributes.friendsList;\n              }\n\n              if (typeof friends !== 'undefined') {\n                friends.push(friend);\n                console.log(\"hehehehe\");\n              } else {\n                friends = [friend];\n                console.log(\"hahahaha\");\n              }\n\n              console.log(\"friends\");\n              console.log(friends);\n              currentUser.set(\"friendsList\", friends);\n            }\n\n            return _context.abrupt(\"return\", currentUser.save().then(function (result) {\n              return result;\n            }));\n\n          case 18:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function addFriend(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();","map":{"version":3,"names":["Parse","addFriend","friend","currentUser","User","current","username","attributes","UserClass","Object","extend","query1","Query","query2","equalTo","_andQuery","first","user","console","log","friends","friendsList","push","set","save","then","result"],"sources":["C:/Users/brosk/Documents/Web Dev/modern-web-development-project/project/src/Common/Services/AddFriend.js"],"sourcesContent":["import Parse from 'parse';\r\n\r\nexport const addFriend = async (friend) => {\r\n    // This is so that the Creating: ... is displayed in the console and the user can see his/her input is recorded\r\n\r\n    var currentUser = Parse.User.current();\r\n\r\n    var username = currentUser.attributes.username;\r\n\r\n    const UserClass = Parse.Object.extend(\"User\")\r\n\r\n    let query1 = new Parse.Query(UserClass);\r\n    let query2 = new Parse.Query(UserClass);\r\n\r\n    // add query testing if user exists with that username\r\n    query1.equalTo(\"username\", username)\r\n    query2.equalTo(\"username\", friend)\r\n    query2._andQuery([query1])\r\n\r\n    let user = await query2.first()\r\n    console.log(\"user\")\r\n    console.log(user)\r\n\r\n    let friends = []\r\n\r\n    console.log('typeof')\r\n    console.log(typeof user)\r\n\r\n    if (typeof friends !== 'undefined') {\r\n        \r\n        if (user[0].attributes.username === username){\r\n            friends = user[0].attributes.friendsList\r\n        }\r\n        else if (user[1].attributes.username === username){\r\n            friends = user[1].attributes.friendsList\r\n        }\r\n\r\n\r\n        if (typeof friends !== 'undefined') {\r\n            friends.push(friend)\r\n            console.log(\"hehehehe\")\r\n        }\r\n        else {\r\n            friends = [friend]\r\n            console.log(\"hahahaha\")\r\n        }\r\n    \r\n    console.log(\"friends\")\r\n    console.log(friends)\r\n    currentUser.set(\"friendsList\", friends);\r\n\r\n}\r\n    \r\n    return currentUser.save().then((result) => {\r\n        return result;\r\n    });\r\n  };"],"mappings":";;+CACA,oJ;;AADA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAO,IAAMC,SAAS;EAAA,sEAAG,iBAAOC,MAAP;IAAA;IAAA;MAAA;QAAA;UAAA;YACrB;YAEIC,WAHiB,GAGHH,KAAK,CAACI,IAAN,CAAWC,OAAX,EAHG;YAKjBC,QALiB,GAKNH,WAAW,CAACI,UAAZ,CAAuBD,QALjB;YAOfE,SAPe,GAOHR,KAAK,CAACS,MAAN,CAAaC,MAAb,CAAoB,MAApB,CAPG;YASjBC,MATiB,GASR,IAAIX,KAAK,CAACY,KAAV,CAAgBJ,SAAhB,CATQ;YAUjBK,MAViB,GAUR,IAAIb,KAAK,CAACY,KAAV,CAAgBJ,SAAhB,CAVQ,EAYrB;;YACAG,MAAM,CAACG,OAAP,CAAe,UAAf,EAA2BR,QAA3B;YACAO,MAAM,CAACC,OAAP,CAAe,UAAf,EAA2BZ,MAA3B;;YACAW,MAAM,CAACE,SAAP,CAAiB,CAACJ,MAAD,CAAjB;;YAfqB;YAAA,OAiBJE,MAAM,CAACG,KAAP,EAjBI;;UAAA;YAiBjBC,IAjBiB;YAkBrBC,OAAO,CAACC,GAAR,CAAY,MAAZ;YACAD,OAAO,CAACC,GAAR,CAAYF,IAAZ;YAEIG,OArBiB,GAqBP,EArBO;YAuBrBF,OAAO,CAACC,GAAR,CAAY,QAAZ;YACAD,OAAO,CAACC,GAAR,CAAY,OAAOF,IAAnB;;YAEA,IAAI,OAAOG,OAAP,KAAmB,WAAvB,EAAoC;cAEhC,IAAIH,IAAI,CAAC,CAAD,CAAJ,CAAQV,UAAR,CAAmBD,QAAnB,KAAgCA,QAApC,EAA6C;gBACzCc,OAAO,GAAGH,IAAI,CAAC,CAAD,CAAJ,CAAQV,UAAR,CAAmBc,WAA7B;cACH,CAFD,MAGK,IAAIJ,IAAI,CAAC,CAAD,CAAJ,CAAQV,UAAR,CAAmBD,QAAnB,KAAgCA,QAApC,EAA6C;gBAC9Cc,OAAO,GAAGH,IAAI,CAAC,CAAD,CAAJ,CAAQV,UAAR,CAAmBc,WAA7B;cACH;;cAGD,IAAI,OAAOD,OAAP,KAAmB,WAAvB,EAAoC;gBAChCA,OAAO,CAACE,IAAR,CAAapB,MAAb;gBACAgB,OAAO,CAACC,GAAR,CAAY,UAAZ;cACH,CAHD,MAIK;gBACDC,OAAO,GAAG,CAAClB,MAAD,CAAV;gBACAgB,OAAO,CAACC,GAAR,CAAY,UAAZ;cACH;;cAELD,OAAO,CAACC,GAAR,CAAY,SAAZ;cACAD,OAAO,CAACC,GAAR,CAAYC,OAAZ;cACAjB,WAAW,CAACoB,GAAZ,CAAgB,aAAhB,EAA+BH,OAA/B;YAEH;;YAjDwB,iCAmDdjB,WAAW,CAACqB,IAAZ,GAAmBC,IAAnB,CAAwB,UAACC,MAAD,EAAY;cACvC,OAAOA,MAAP;YACH,CAFM,CAnDc;;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CAAH;;EAAA,gBAATzB,SAAS;IAAA;EAAA;AAAA,GAAf"},"metadata":{},"sourceType":"module"}