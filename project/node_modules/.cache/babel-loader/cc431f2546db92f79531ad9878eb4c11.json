{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs3/helpers/interopRequireDefault\");\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs3/core-js-stable/object/define-property\");\n\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = void 0;\n\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/typeof\"));\n\nvar _isArray = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/array/is-array\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/createClass\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/defineProperty\"));\n/**\r\n * Copyright (c) 2015-present, Parse, LLC.\r\n * All rights reserved.\r\n *\r\n * This source code is licensed under the BSD-style license found in the\r\n * LICENSE file in the root directory of this source tree. An additional grant\r\n * of patent rights can be found in the PATENTS file in the same directory.\r\n *\r\n * @flow\r\n */\n\n/**\r\n * Creates a new GeoPoint with any of the following forms:<br>\r\n *   <pre>\r\n *   new GeoPoint(otherGeoPoint)\r\n *   new GeoPoint(30, 30)\r\n *   new GeoPoint([30, 30])\r\n *   new GeoPoint({latitude: 30, longitude: 30})\r\n *   new GeoPoint()  // defaults to (0, 0)\r\n *   </pre>\r\n * <p>Represents a latitude / longitude point that may be associated\r\n * with a key in a ParseObject or used as a reference point for geo queries.\r\n * This allows proximity-based queries on the key.</p>\r\n *\r\n * <p>Only one key in a class may contain a GeoPoint.</p>\r\n *\r\n * <p>Example:<pre>\r\n *   var point = new Parse.GeoPoint(30.0, -20.0);\r\n *   var object = new Parse.Object(\"PlaceObject\");\r\n *   object.set(\"location\", point);\r\n *   object.save();</pre></p>\r\n *\r\n * @alias Parse.GeoPoint\r\n */\n\n/* global navigator */\n\n\nvar ParseGeoPoint = /*#__PURE__*/function () {\n  /**\r\n   * @param {(number[] | object | number)} arg1 Either a list of coordinate pairs, an object with `latitude`, `longitude`, or the latitude or the point.\r\n   * @param {number} arg2 The longitude of the GeoPoint\r\n   */\n  function ParseGeoPoint(arg1\n  /*: Array<number> | { latitude: number, longitude: number } | number*/\n  , arg2\n  /*:: ?: number*/\n  ) {\n    (0, _classCallCheck2.default)(this, ParseGeoPoint);\n    (0, _defineProperty2.default)(this, \"_latitude\", void 0);\n    (0, _defineProperty2.default)(this, \"_longitude\", void 0);\n\n    if ((0, _isArray.default)(arg1)) {\n      ParseGeoPoint._validate(arg1[0], arg1[1]);\n\n      this._latitude = arg1[0];\n      this._longitude = arg1[1];\n    } else if ((0, _typeof2.default)(arg1) === 'object') {\n      ParseGeoPoint._validate(arg1.latitude, arg1.longitude);\n\n      this._latitude = arg1.latitude;\n      this._longitude = arg1.longitude;\n    } else if (arg1 !== undefined && arg2 !== undefined) {\n      ParseGeoPoint._validate(arg1, arg2);\n\n      this._latitude = arg1;\n      this._longitude = arg2;\n    } else {\n      this._latitude = 0;\n      this._longitude = 0;\n    }\n  }\n  /**\r\n   * North-south portion of the coordinate, in range [-90, 90].\r\n   * Throws an exception if set out of range in a modern browser.\r\n   *\r\n   * @property {number} latitude\r\n   * @returns {number}\r\n   */\n\n\n  (0, _createClass2.default)(ParseGeoPoint, [{\n    key: \"latitude\",\n    get: function ()\n    /*: number*/\n    {\n      return this._latitude;\n    },\n    set: function (val\n    /*: number*/\n    ) {\n      ParseGeoPoint._validate(val, this.longitude);\n\n      this._latitude = val;\n    }\n    /**\r\n     * East-west portion of the coordinate, in range [-180, 180].\r\n     * Throws if set out of range in a modern browser.\r\n     *\r\n     * @property {number} longitude\r\n     * @returns {number}\r\n     */\n\n  }, {\n    key: \"longitude\",\n    get: function ()\n    /*: number*/\n    {\n      return this._longitude;\n    },\n    set: function (val\n    /*: number*/\n    ) {\n      ParseGeoPoint._validate(this.latitude, val);\n\n      this._longitude = val;\n    }\n    /**\r\n     * Returns a JSON representation of the GeoPoint, suitable for Parse.\r\n     *\r\n     * @returns {object}\r\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function ()\n    /*: { __type: string, latitude: number, longitude: number }*/\n    {\n      ParseGeoPoint._validate(this._latitude, this._longitude);\n\n      return {\n        __type: 'GeoPoint',\n        latitude: this._latitude,\n        longitude: this._longitude\n      };\n    }\n  }, {\n    key: \"equals\",\n    value: function (other\n    /*: mixed*/\n    )\n    /*: boolean*/\n    {\n      return other instanceof ParseGeoPoint && this.latitude === other.latitude && this.longitude === other.longitude;\n    }\n    /**\r\n     * Returns the distance from this GeoPoint to another in radians.\r\n     *\r\n     * @param {Parse.GeoPoint} point the other Parse.GeoPoint.\r\n     * @returns {number}\r\n     */\n\n  }, {\n    key: \"radiansTo\",\n    value: function (point\n    /*: ParseGeoPoint*/\n    )\n    /*: number*/\n    {\n      var d2r = Math.PI / 180.0;\n      var lat1rad = this.latitude * d2r;\n      var long1rad = this.longitude * d2r;\n      var lat2rad = point.latitude * d2r;\n      var long2rad = point.longitude * d2r;\n      var sinDeltaLatDiv2 = Math.sin((lat1rad - lat2rad) / 2);\n      var sinDeltaLongDiv2 = Math.sin((long1rad - long2rad) / 2); // Square of half the straight line chord distance between both points.\n\n      var a = sinDeltaLatDiv2 * sinDeltaLatDiv2 + Math.cos(lat1rad) * Math.cos(lat2rad) * sinDeltaLongDiv2 * sinDeltaLongDiv2;\n      a = Math.min(1.0, a);\n      return 2 * Math.asin(Math.sqrt(a));\n    }\n    /**\r\n     * Returns the distance from this GeoPoint to another in kilometers.\r\n     *\r\n     * @param {Parse.GeoPoint} point the other Parse.GeoPoint.\r\n     * @returns {number}\r\n     */\n\n  }, {\n    key: \"kilometersTo\",\n    value: function (point\n    /*: ParseGeoPoint*/\n    )\n    /*: number*/\n    {\n      return this.radiansTo(point) * 6371.0;\n    }\n    /**\r\n     * Returns the distance from this GeoPoint to another in miles.\r\n     *\r\n     * @param {Parse.GeoPoint} point the other Parse.GeoPoint.\r\n     * @returns {number}\r\n     */\n\n  }, {\n    key: \"milesTo\",\n    value: function (point\n    /*: ParseGeoPoint*/\n    )\n    /*: number*/\n    {\n      return this.radiansTo(point) * 3958.8;\n    }\n    /*\r\n     * Throws an exception if the given lat-long is out of bounds.\r\n     */\n\n  }], [{\n    key: \"_validate\",\n    value: function (latitude\n    /*: number*/\n    , longitude\n    /*: number*/\n    ) {\n      if (isNaN(latitude) || isNaN(longitude) || typeof latitude !== 'number' || typeof longitude !== 'number') {\n        throw new TypeError('GeoPoint latitude and longitude must be valid numbers');\n      }\n\n      if (latitude < -90.0) {\n        throw new TypeError('GeoPoint latitude out of bounds: ' + latitude + ' < -90.0.');\n      }\n\n      if (latitude > 90.0) {\n        throw new TypeError('GeoPoint latitude out of bounds: ' + latitude + ' > 90.0.');\n      }\n\n      if (longitude < -180.0) {\n        throw new TypeError('GeoPoint longitude out of bounds: ' + longitude + ' < -180.0.');\n      }\n\n      if (longitude > 180.0) {\n        throw new TypeError('GeoPoint longitude out of bounds: ' + longitude + ' > 180.0.');\n      }\n    }\n    /**\r\n     * Creates a GeoPoint with the user's current location, if available.\r\n     *\r\n     * @static\r\n     * @returns {Parse.GeoPoint} User's current location\r\n     */\n\n  }, {\n    key: \"current\",\n    value: function () {\n      return navigator.geolocation.getCurrentPosition(function (location) {\n        return new ParseGeoPoint(location.coords.latitude, location.coords.longitude);\n      });\n    }\n  }]);\n  return ParseGeoPoint;\n}();\n\nvar _default = ParseGeoPoint;\nexports.default = _default;","map":{"version":3,"names":["_interopRequireDefault","require","_Object$defineProperty","exports","value","default","_typeof2","_isArray","_classCallCheck2","_createClass2","_defineProperty2","ParseGeoPoint","arg1","arg2","_validate","_latitude","_longitude","latitude","longitude","undefined","key","get","set","val","__type","other","point","d2r","Math","PI","lat1rad","long1rad","lat2rad","long2rad","sinDeltaLatDiv2","sin","sinDeltaLongDiv2","a","cos","min","asin","sqrt","radiansTo","isNaN","TypeError","navigator","geolocation","getCurrentPosition","location","coords","_default"],"sources":["C:/Users/brosk/Documents/Web Dev/modern-web-development-project/project/node_modules/parse/lib/browser/ParseGeoPoint.js"],"sourcesContent":["\"use strict\";\r\n\r\nvar _interopRequireDefault = require(\"@babel/runtime-corejs3/helpers/interopRequireDefault\");\r\n\r\nvar _Object$defineProperty = require(\"@babel/runtime-corejs3/core-js-stable/object/define-property\");\r\n\r\n_Object$defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nexports.default = void 0;\r\n\r\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/typeof\"));\r\n\r\nvar _isArray = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/array/is-array\"));\r\n\r\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/classCallCheck\"));\r\n\r\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/createClass\"));\r\n\r\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/defineProperty\"));\r\n/**\r\n * Copyright (c) 2015-present, Parse, LLC.\r\n * All rights reserved.\r\n *\r\n * This source code is licensed under the BSD-style license found in the\r\n * LICENSE file in the root directory of this source tree. An additional grant\r\n * of patent rights can be found in the PATENTS file in the same directory.\r\n *\r\n * @flow\r\n */\r\n\r\n/**\r\n * Creates a new GeoPoint with any of the following forms:<br>\r\n *   <pre>\r\n *   new GeoPoint(otherGeoPoint)\r\n *   new GeoPoint(30, 30)\r\n *   new GeoPoint([30, 30])\r\n *   new GeoPoint({latitude: 30, longitude: 30})\r\n *   new GeoPoint()  // defaults to (0, 0)\r\n *   </pre>\r\n * <p>Represents a latitude / longitude point that may be associated\r\n * with a key in a ParseObject or used as a reference point for geo queries.\r\n * This allows proximity-based queries on the key.</p>\r\n *\r\n * <p>Only one key in a class may contain a GeoPoint.</p>\r\n *\r\n * <p>Example:<pre>\r\n *   var point = new Parse.GeoPoint(30.0, -20.0);\r\n *   var object = new Parse.Object(\"PlaceObject\");\r\n *   object.set(\"location\", point);\r\n *   object.save();</pre></p>\r\n *\r\n * @alias Parse.GeoPoint\r\n */\r\n\r\n/* global navigator */\r\n\r\n\r\nvar ParseGeoPoint = /*#__PURE__*/function () {\r\n  /**\r\n   * @param {(number[] | object | number)} arg1 Either a list of coordinate pairs, an object with `latitude`, `longitude`, or the latitude or the point.\r\n   * @param {number} arg2 The longitude of the GeoPoint\r\n   */\r\n  function ParseGeoPoint(arg1\r\n  /*: Array<number> | { latitude: number, longitude: number } | number*/\r\n  , arg2\r\n  /*:: ?: number*/\r\n  ) {\r\n    (0, _classCallCheck2.default)(this, ParseGeoPoint);\r\n    (0, _defineProperty2.default)(this, \"_latitude\", void 0);\r\n    (0, _defineProperty2.default)(this, \"_longitude\", void 0);\r\n\r\n    if ((0, _isArray.default)(arg1)) {\r\n      ParseGeoPoint._validate(arg1[0], arg1[1]);\r\n\r\n      this._latitude = arg1[0];\r\n      this._longitude = arg1[1];\r\n    } else if ((0, _typeof2.default)(arg1) === 'object') {\r\n      ParseGeoPoint._validate(arg1.latitude, arg1.longitude);\r\n\r\n      this._latitude = arg1.latitude;\r\n      this._longitude = arg1.longitude;\r\n    } else if (arg1 !== undefined && arg2 !== undefined) {\r\n      ParseGeoPoint._validate(arg1, arg2);\r\n\r\n      this._latitude = arg1;\r\n      this._longitude = arg2;\r\n    } else {\r\n      this._latitude = 0;\r\n      this._longitude = 0;\r\n    }\r\n  }\r\n  /**\r\n   * North-south portion of the coordinate, in range [-90, 90].\r\n   * Throws an exception if set out of range in a modern browser.\r\n   *\r\n   * @property {number} latitude\r\n   * @returns {number}\r\n   */\r\n\r\n\r\n  (0, _createClass2.default)(ParseGeoPoint, [{\r\n    key: \"latitude\",\r\n    get: function ()\r\n    /*: number*/\r\n    {\r\n      return this._latitude;\r\n    },\r\n    set: function (val\r\n    /*: number*/\r\n    ) {\r\n      ParseGeoPoint._validate(val, this.longitude);\r\n\r\n      this._latitude = val;\r\n    }\r\n    /**\r\n     * East-west portion of the coordinate, in range [-180, 180].\r\n     * Throws if set out of range in a modern browser.\r\n     *\r\n     * @property {number} longitude\r\n     * @returns {number}\r\n     */\r\n\r\n  }, {\r\n    key: \"longitude\",\r\n    get: function ()\r\n    /*: number*/\r\n    {\r\n      return this._longitude;\r\n    },\r\n    set: function (val\r\n    /*: number*/\r\n    ) {\r\n      ParseGeoPoint._validate(this.latitude, val);\r\n\r\n      this._longitude = val;\r\n    }\r\n    /**\r\n     * Returns a JSON representation of the GeoPoint, suitable for Parse.\r\n     *\r\n     * @returns {object}\r\n     */\r\n\r\n  }, {\r\n    key: \"toJSON\",\r\n    value: function ()\r\n    /*: { __type: string, latitude: number, longitude: number }*/\r\n    {\r\n      ParseGeoPoint._validate(this._latitude, this._longitude);\r\n\r\n      return {\r\n        __type: 'GeoPoint',\r\n        latitude: this._latitude,\r\n        longitude: this._longitude\r\n      };\r\n    }\r\n  }, {\r\n    key: \"equals\",\r\n    value: function (other\r\n    /*: mixed*/\r\n    )\r\n    /*: boolean*/\r\n    {\r\n      return other instanceof ParseGeoPoint && this.latitude === other.latitude && this.longitude === other.longitude;\r\n    }\r\n    /**\r\n     * Returns the distance from this GeoPoint to another in radians.\r\n     *\r\n     * @param {Parse.GeoPoint} point the other Parse.GeoPoint.\r\n     * @returns {number}\r\n     */\r\n\r\n  }, {\r\n    key: \"radiansTo\",\r\n    value: function (point\r\n    /*: ParseGeoPoint*/\r\n    )\r\n    /*: number*/\r\n    {\r\n      var d2r = Math.PI / 180.0;\r\n      var lat1rad = this.latitude * d2r;\r\n      var long1rad = this.longitude * d2r;\r\n      var lat2rad = point.latitude * d2r;\r\n      var long2rad = point.longitude * d2r;\r\n      var sinDeltaLatDiv2 = Math.sin((lat1rad - lat2rad) / 2);\r\n      var sinDeltaLongDiv2 = Math.sin((long1rad - long2rad) / 2); // Square of half the straight line chord distance between both points.\r\n\r\n      var a = sinDeltaLatDiv2 * sinDeltaLatDiv2 + Math.cos(lat1rad) * Math.cos(lat2rad) * sinDeltaLongDiv2 * sinDeltaLongDiv2;\r\n      a = Math.min(1.0, a);\r\n      return 2 * Math.asin(Math.sqrt(a));\r\n    }\r\n    /**\r\n     * Returns the distance from this GeoPoint to another in kilometers.\r\n     *\r\n     * @param {Parse.GeoPoint} point the other Parse.GeoPoint.\r\n     * @returns {number}\r\n     */\r\n\r\n  }, {\r\n    key: \"kilometersTo\",\r\n    value: function (point\r\n    /*: ParseGeoPoint*/\r\n    )\r\n    /*: number*/\r\n    {\r\n      return this.radiansTo(point) * 6371.0;\r\n    }\r\n    /**\r\n     * Returns the distance from this GeoPoint to another in miles.\r\n     *\r\n     * @param {Parse.GeoPoint} point the other Parse.GeoPoint.\r\n     * @returns {number}\r\n     */\r\n\r\n  }, {\r\n    key: \"milesTo\",\r\n    value: function (point\r\n    /*: ParseGeoPoint*/\r\n    )\r\n    /*: number*/\r\n    {\r\n      return this.radiansTo(point) * 3958.8;\r\n    }\r\n    /*\r\n     * Throws an exception if the given lat-long is out of bounds.\r\n     */\r\n\r\n  }], [{\r\n    key: \"_validate\",\r\n    value: function (latitude\r\n    /*: number*/\r\n    , longitude\r\n    /*: number*/\r\n    ) {\r\n      if (isNaN(latitude) || isNaN(longitude) || typeof latitude !== 'number' || typeof longitude !== 'number') {\r\n        throw new TypeError('GeoPoint latitude and longitude must be valid numbers');\r\n      }\r\n\r\n      if (latitude < -90.0) {\r\n        throw new TypeError('GeoPoint latitude out of bounds: ' + latitude + ' < -90.0.');\r\n      }\r\n\r\n      if (latitude > 90.0) {\r\n        throw new TypeError('GeoPoint latitude out of bounds: ' + latitude + ' > 90.0.');\r\n      }\r\n\r\n      if (longitude < -180.0) {\r\n        throw new TypeError('GeoPoint longitude out of bounds: ' + longitude + ' < -180.0.');\r\n      }\r\n\r\n      if (longitude > 180.0) {\r\n        throw new TypeError('GeoPoint longitude out of bounds: ' + longitude + ' > 180.0.');\r\n      }\r\n    }\r\n    /**\r\n     * Creates a GeoPoint with the user's current location, if available.\r\n     *\r\n     * @static\r\n     * @returns {Parse.GeoPoint} User's current location\r\n     */\r\n\r\n  }, {\r\n    key: \"current\",\r\n    value: function () {\r\n      return navigator.geolocation.getCurrentPosition(function (location) {\r\n        return new ParseGeoPoint(location.coords.latitude, location.coords.longitude);\r\n      });\r\n    }\r\n  }]);\r\n  return ParseGeoPoint;\r\n}();\r\n\r\nvar _default = ParseGeoPoint;\r\nexports.default = _default;"],"mappings":"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"},"metadata":{},"sourceType":"script"}