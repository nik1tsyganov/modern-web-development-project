{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs3/helpers/interopRequireDefault\");\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs3/core-js-stable/object/define-property\");\n\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = void 0;\n\nvar _indexOf = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/index-of\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/createClass\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/defineProperty\"));\n\nvar _CoreManager = _interopRequireDefault(require(\"./CoreManager\"));\n\nvar _ParseObject = _interopRequireDefault(require(\"./ParseObject\"));\n\nvar _ParseCLP = _interopRequireDefault(require(\"./ParseCLP\"));\n/**\n * Copyright (c) 2015-present, Parse, LLC.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @flow\n */\n\n\nvar FIELD_TYPES = ['String', 'Number', 'Boolean', 'Date', 'File', 'GeoPoint', 'Polygon', 'Array', 'Object', 'Pointer', 'Relation'];\n/*:: type FieldOptions = {\n  required: boolean,\n  defaultValue: mixed,\n};*/\n\n/**\n * A Parse.Schema object is for handling schema data from Parse.\n * <p>All the schemas methods require MasterKey.\n *\n * When adding fields, you may set required and default values. (Requires Parse Server 3.7.0+)\n *\n * <pre>\n * const options = { required: true, defaultValue: 'hello world' };\n * const schema = new Parse.Schema('MyClass');\n * schema.addString('field', options);\n * schema.addIndex('index_name', { 'field': 1 });\n * schema.save();\n * </pre>\n * </p>\n *\n * @alias Parse.Schema\n */\n\nvar ParseSchema = /*#__PURE__*/function () {\n  /**\n   * @param {string} className Parse Class string.\n   */\n  function ParseSchema(className\n  /*: string*/\n  ) {\n    (0, _classCallCheck2.default)(this, ParseSchema);\n    (0, _defineProperty2.default)(this, \"className\", void 0);\n    (0, _defineProperty2.default)(this, \"_fields\", void 0);\n    (0, _defineProperty2.default)(this, \"_indexes\", void 0);\n    (0, _defineProperty2.default)(this, \"_clp\", void 0);\n\n    if (typeof className === 'string') {\n      if (className === 'User' && _CoreManager.default.get('PERFORM_USER_REWRITE')) {\n        this.className = '_User';\n      } else {\n        this.className = className;\n      }\n    }\n\n    this._fields = {};\n    this._indexes = {};\n  }\n  /**\n   * Static method to get all schemas\n   *\n   * @returns {Promise} A promise that is resolved with the result when\n   * the query completes.\n   */\n\n\n  (0, _createClass2.default)(ParseSchema, [{\n    key: \"get\",\n    value:\n    /**\n     * Get the Schema from Parse\n     *\n     * @returns {Promise} A promise that is resolved with the result when\n     * the query completes.\n     */\n    function value() {\n      this.assertClassName();\n\n      var controller = _CoreManager.default.getSchemaController();\n\n      return controller.get(this.className).then(function (response) {\n        if (!response) {\n          throw new Error('Schema not found.');\n        }\n\n        return response;\n      });\n    }\n    /**\n     * Create a new Schema on Parse\n     *\n     * @returns {Promise} A promise that is resolved with the result when\n     * the query completes.\n     */\n\n  }, {\n    key: \"save\",\n    value: function value() {\n      this.assertClassName();\n\n      var controller = _CoreManager.default.getSchemaController();\n\n      var params = {\n        className: this.className,\n        fields: this._fields,\n        indexes: this._indexes,\n        classLevelPermissions: this._clp\n      };\n      return controller.create(this.className, params);\n    }\n    /**\n     * Update a Schema on Parse\n     *\n     * @returns {Promise} A promise that is resolved with the result when\n     * the query completes.\n     */\n\n  }, {\n    key: \"update\",\n    value: function value() {\n      this.assertClassName();\n\n      var controller = _CoreManager.default.getSchemaController();\n\n      var params = {\n        className: this.className,\n        fields: this._fields,\n        indexes: this._indexes,\n        classLevelPermissions: this._clp\n      };\n      this._fields = {};\n      this._indexes = {};\n      return controller.update(this.className, params);\n    }\n    /**\n     * Removing a Schema from Parse\n     * Can only be used on Schema without objects\n     *\n     * @returns {Promise} A promise that is resolved with the result when\n     * the query completes.\n     */\n\n  }, {\n    key: \"delete\",\n    value: function value() {\n      this.assertClassName();\n\n      var controller = _CoreManager.default.getSchemaController();\n\n      return controller.delete(this.className);\n    }\n    /**\n     * Removes all objects from a Schema (class) in Parse.\n     * EXERCISE CAUTION, running this will delete all objects for this schema and cannot be reversed\n     *\n     * @returns {Promise} A promise that is resolved with the result when\n     * the query completes.\n     */\n\n  }, {\n    key: \"purge\",\n    value: function value() {\n      this.assertClassName();\n\n      var controller = _CoreManager.default.getSchemaController();\n\n      return controller.purge(this.className);\n    }\n    /**\n     * Assert if ClassName has been filled\n     *\n     * @private\n     */\n\n  }, {\n    key: \"assertClassName\",\n    value: function value() {\n      if (!this.className) {\n        throw new Error('You must set a Class Name before making any request.');\n      }\n    }\n    /**\n     * Sets Class Level Permissions when creating / updating a Schema.\n     * EXERCISE CAUTION, running this may override CLP for this schema and cannot be reversed\n     *\n     * @param {object | Parse.CLP} clp Class Level Permissions\n     * @returns {Parse.Schema} Returns the schema, so you can chain this call.\n     */\n\n  }, {\n    key: \"setCLP\",\n    value: function value(clp\n    /*: PermissionsMap | ParseCLP*/\n    ) {\n      if (clp instanceof _ParseCLP.default) {\n        this._clp = clp.toJSON();\n      } else {\n        this._clp = clp;\n      }\n\n      return this;\n    }\n    /**\n     * Adding a Field to Create / Update a Schema\n     *\n     * @param {string} name Name of the field that will be created on Parse\n     * @param {string} type Can be a (String|Number|Boolean|Date|Parse.File|Parse.GeoPoint|Array|Object|Pointer|Parse.Relation)\n     * @param {object} options\n     * Valid options are:<ul>\n     *   <li>required: If field is not set, save operation fails (Requires Parse Server 3.7.0+)\n     *   <li>defaultValue: If field is not set, a default value is selected (Requires Parse Server 3.7.0+)\n     *   <li>targetClass: Required if type is Pointer or Parse.Relation\n     * </ul>\n     * @returns {Parse.Schema} Returns the schema, so you can chain this call.\n     */\n\n  }, {\n    key: \"addField\",\n    value: function value(name\n    /*: string*/\n    , type\n    /*: string*/\n    ) {\n      var options\n      /*: FieldOptions*/\n      = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      type = type || 'String';\n\n      if (!name) {\n        throw new Error('field name may not be null.');\n      }\n\n      if ((0, _indexOf.default)(FIELD_TYPES).call(FIELD_TYPES, type) === -1) {\n        throw new Error(\"\".concat(type, \" is not a valid type.\"));\n      }\n\n      if (type === 'Pointer') {\n        return this.addPointer(name, options.targetClass, options);\n      }\n\n      if (type === 'Relation') {\n        return this.addRelation(name, options.targetClass, options);\n      }\n\n      var fieldOptions = {\n        type: type\n      };\n\n      if (typeof options.required === 'boolean') {\n        fieldOptions.required = options.required;\n      }\n\n      if (options.defaultValue !== undefined) {\n        fieldOptions.defaultValue = options.defaultValue;\n      }\n\n      this._fields[name] = fieldOptions;\n      return this;\n    }\n    /**\n     * Adding an Index to Create / Update a Schema\n     *\n     * @param {string} name Name of the index\n     * @param {object} index { field: value }\n     * @returns {Parse.Schema} Returns the schema, so you can chain this call.\n     *\n     * <pre>\n     * schema.addIndex('index_name', { 'field': 1 });\n     * </pre>\n     */\n\n  }, {\n    key: \"addIndex\",\n    value: function value(name\n    /*: string*/\n    , index\n    /*: any*/\n    ) {\n      if (!name) {\n        throw new Error('index name may not be null.');\n      }\n\n      if (!index) {\n        throw new Error('index may not be null.');\n      }\n\n      this._indexes[name] = index;\n      return this;\n    }\n    /**\n     * Adding String Field\n     *\n     * @param {string} name Name of the field that will be created on Parse\n     * @param {object} options See {@link https://parseplatform.org/Parse-SDK-JS/api/master/Parse.Schema.html#addField addField}\n     * @returns {Parse.Schema} Returns the schema, so you can chain this call.\n     */\n\n  }, {\n    key: \"addString\",\n    value: function value(name\n    /*: string*/\n    , options\n    /*: FieldOptions*/\n    ) {\n      return this.addField(name, 'String', options);\n    }\n    /**\n     * Adding Number Field\n     *\n     * @param {string} name Name of the field that will be created on Parse\n     * @param {object} options See {@link https://parseplatform.org/Parse-SDK-JS/api/master/Parse.Schema.html#addField addField}\n     * @returns {Parse.Schema} Returns the schema, so you can chain this call.\n     */\n\n  }, {\n    key: \"addNumber\",\n    value: function value(name\n    /*: string*/\n    , options\n    /*: FieldOptions*/\n    ) {\n      return this.addField(name, 'Number', options);\n    }\n    /**\n     * Adding Boolean Field\n     *\n     * @param {string} name Name of the field that will be created on Parse\n     * @param {object} options See {@link https://parseplatform.org/Parse-SDK-JS/api/master/Parse.Schema.html#addField addField}\n     * @returns {Parse.Schema} Returns the schema, so you can chain this call.\n     */\n\n  }, {\n    key: \"addBoolean\",\n    value: function value(name\n    /*: string*/\n    , options\n    /*: FieldOptions*/\n    ) {\n      return this.addField(name, 'Boolean', options);\n    }\n    /**\n     * Adding Date Field\n     *\n     * @param {string} name Name of the field that will be created on Parse\n     * @param {object} options See {@link https://parseplatform.org/Parse-SDK-JS/api/master/Parse.Schema.html#addField addField}\n     * @returns {Parse.Schema} Returns the schema, so you can chain this call.\n     */\n\n  }, {\n    key: \"addDate\",\n    value: function value(name\n    /*: string*/\n    , options\n    /*: FieldOptions*/\n    ) {\n      if (options && options.defaultValue) {\n        options.defaultValue = {\n          __type: 'Date',\n          iso: new Date(options.defaultValue)\n        };\n      }\n\n      return this.addField(name, 'Date', options);\n    }\n    /**\n     * Adding File Field\n     *\n     * @param {string} name Name of the field that will be created on Parse\n     * @param {object} options See {@link https://parseplatform.org/Parse-SDK-JS/api/master/Parse.Schema.html#addField addField}\n     * @returns {Parse.Schema} Returns the schema, so you can chain this call.\n     */\n\n  }, {\n    key: \"addFile\",\n    value: function value(name\n    /*: string*/\n    , options\n    /*: FieldOptions*/\n    ) {\n      return this.addField(name, 'File', options);\n    }\n    /**\n     * Adding GeoPoint Field\n     *\n     * @param {string} name Name of the field that will be created on Parse\n     * @param {object} options See {@link https://parseplatform.org/Parse-SDK-JS/api/master/Parse.Schema.html#addField addField}\n     * @returns {Parse.Schema} Returns the schema, so you can chain this call.\n     */\n\n  }, {\n    key: \"addGeoPoint\",\n    value: function value(name\n    /*: string*/\n    , options\n    /*: FieldOptions*/\n    ) {\n      return this.addField(name, 'GeoPoint', options);\n    }\n    /**\n     * Adding Polygon Field\n     *\n     * @param {string} name Name of the field that will be created on Parse\n     * @param {object} options See {@link https://parseplatform.org/Parse-SDK-JS/api/master/Parse.Schema.html#addField addField}\n     * @returns {Parse.Schema} Returns the schema, so you can chain this call.\n     */\n\n  }, {\n    key: \"addPolygon\",\n    value: function value(name\n    /*: string*/\n    , options\n    /*: FieldOptions*/\n    ) {\n      return this.addField(name, 'Polygon', options);\n    }\n    /**\n     * Adding Array Field\n     *\n     * @param {string} name Name of the field that will be created on Parse\n     * @param {object} options See {@link https://parseplatform.org/Parse-SDK-JS/api/master/Parse.Schema.html#addField addField}\n     * @returns {Parse.Schema} Returns the schema, so you can chain this call.\n     */\n\n  }, {\n    key: \"addArray\",\n    value: function value(name\n    /*: string*/\n    , options\n    /*: FieldOptions*/\n    ) {\n      return this.addField(name, 'Array', options);\n    }\n    /**\n     * Adding Object Field\n     *\n     * @param {string} name Name of the field that will be created on Parse\n     * @param {object} options See {@link https://parseplatform.org/Parse-SDK-JS/api/master/Parse.Schema.html#addField addField}\n     * @returns {Parse.Schema} Returns the schema, so you can chain this call.\n     */\n\n  }, {\n    key: \"addObject\",\n    value: function value(name\n    /*: string*/\n    , options\n    /*: FieldOptions*/\n    ) {\n      return this.addField(name, 'Object', options);\n    }\n    /**\n     * Adding Pointer Field\n     *\n     * @param {string} name Name of the field that will be created on Parse\n     * @param {string} targetClass Name of the target Pointer Class\n     * @param {object} options See {@link https://parseplatform.org/Parse-SDK-JS/api/master/Parse.Schema.html#addField addField}\n     * @returns {Parse.Schema} Returns the schema, so you can chain this call.\n     */\n\n  }, {\n    key: \"addPointer\",\n    value: function value(name\n    /*: string*/\n    , targetClass\n    /*: string*/\n    ) {\n      var options\n      /*: FieldOptions*/\n      = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      if (!name) {\n        throw new Error('field name may not be null.');\n      }\n\n      if (!targetClass) {\n        throw new Error('You need to set the targetClass of the Pointer.');\n      }\n\n      var fieldOptions = {\n        type: 'Pointer',\n        targetClass: targetClass\n      };\n\n      if (typeof options.required === 'boolean') {\n        fieldOptions.required = options.required;\n      }\n\n      if (options.defaultValue !== undefined) {\n        fieldOptions.defaultValue = options.defaultValue;\n\n        if (options.defaultValue instanceof _ParseObject.default) {\n          fieldOptions.defaultValue = options.defaultValue.toPointer();\n        }\n      }\n\n      this._fields[name] = fieldOptions;\n      return this;\n    }\n    /**\n     * Adding Relation Field\n     *\n     * @param {string} name Name of the field that will be created on Parse\n     * @param {string} targetClass Name of the target Pointer Class\n     * @returns {Parse.Schema} Returns the schema, so you can chain this call.\n     */\n\n  }, {\n    key: \"addRelation\",\n    value: function value(name\n    /*: string*/\n    , targetClass\n    /*: string*/\n    ) {\n      if (!name) {\n        throw new Error('field name may not be null.');\n      }\n\n      if (!targetClass) {\n        throw new Error('You need to set the targetClass of the Relation.');\n      }\n\n      this._fields[name] = {\n        type: 'Relation',\n        targetClass: targetClass\n      };\n      return this;\n    }\n    /**\n     * Deleting a Field to Update on a Schema\n     *\n     * @param {string} name Name of the field\n     * @returns {Parse.Schema} Returns the schema, so you can chain this call.\n     */\n\n  }, {\n    key: \"deleteField\",\n    value: function value(name\n    /*: string*/\n    ) {\n      this._fields[name] = {\n        __op: 'Delete'\n      };\n      return this;\n    }\n    /**\n     * Deleting an Index to Update on a Schema\n     *\n     * @param {string} name Name of the field\n     * @returns {Parse.Schema} Returns the schema, so you can chain this call.\n     */\n\n  }, {\n    key: \"deleteIndex\",\n    value: function value(name\n    /*: string*/\n    ) {\n      this._indexes[name] = {\n        __op: 'Delete'\n      };\n      return this;\n    }\n  }], [{\n    key: \"all\",\n    value: function value() {\n      var controller = _CoreManager.default.getSchemaController();\n\n      return controller.get('').then(function (response) {\n        if (response.results.length === 0) {\n          throw new Error('Schema not found.');\n        }\n\n        return response.results;\n      });\n    }\n  }]);\n  return ParseSchema;\n}();\n\nvar DefaultController = {\n  send: function send(className\n  /*: string*/\n  , method\n  /*: string*/\n  )\n  /*: Promise*/\n  {\n    var params\n    /*: any*/\n    = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    var RESTController = _CoreManager.default.getRESTController();\n\n    return RESTController.request(method, \"schemas/\".concat(className), params, {\n      useMasterKey: true\n    });\n  },\n  get: function get(className\n  /*: string*/\n  )\n  /*: Promise*/\n  {\n    return this.send(className, 'GET');\n  },\n  create: function create(className\n  /*: string*/\n  , params\n  /*: any*/\n  )\n  /*: Promise*/\n  {\n    return this.send(className, 'POST', params);\n  },\n  update: function update(className\n  /*: string*/\n  , params\n  /*: any*/\n  )\n  /*: Promise*/\n  {\n    return this.send(className, 'PUT', params);\n  },\n  delete: function _delete(className\n  /*: string*/\n  )\n  /*: Promise*/\n  {\n    return this.send(className, 'DELETE');\n  },\n  purge: function purge(className\n  /*: string*/\n  )\n  /*: Promise*/\n  {\n    var RESTController = _CoreManager.default.getRESTController();\n\n    return RESTController.request('DELETE', \"purge/\".concat(className), {}, {\n      useMasterKey: true\n    });\n  }\n};\n\n_CoreManager.default.setSchemaController(DefaultController);\n\nvar _default = ParseSchema;\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}