{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\brosk\\\\Documents\\\\Web Dev\\\\modern-web-development-project\\\\project\\\\src\\\\Common\\\\AppTools\\\\ProtectedRoute.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { Navigate, useNavigate, useLocation } from \"react-router-dom\"; // Protected route allows for routing to be restricted to authorized users\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ProtectedRoute = _ref => {\n  _s();\n\n  let {\n    component: Component,\n    flag,\n    ...rest\n  } = _ref;\n  let navigate = useNavigate();\n  let location = useLocation();\n\n  const routeChange = () => {\n    let back = rest.redirectedPath;\n    navigate(back);\n  }; // tests flag set by user login\n\n\n  return flag ? /*#__PURE__*/_jsxDEV(Navigate, {\n    to: rest.desiredPath,\n    state: {\n      from: location\n    },\n    replace: true\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 5\n  }, this) // navigates to desired path on true flag, directs user to login page if false\n  : /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Unauthorized!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: routeChange,\n      children: \"Go login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 3\n  }, this);\n};\n\n_s(ProtectedRoute, \"VDZHUspDq9N5O9RWjniBrjgIdAA=\", false, function () {\n  return [useNavigate, useLocation];\n});\n\n_c = ProtectedRoute;\nexport default ProtectedRoute;\n\nvar _c;\n\n$RefreshReg$(_c, \"ProtectedRoute\");","map":{"version":3,"names":["React","Navigate","useNavigate","useLocation","ProtectedRoute","component","Component","flag","rest","navigate","location","routeChange","back","redirectedPath","desiredPath","from"],"sources":["C:/Users/brosk/Documents/Web Dev/modern-web-development-project/project/src/Common/AppTools/ProtectedRoute.js"],"sourcesContent":["import React from \"react\";\r\nimport { Navigate, useNavigate, useLocation } from \"react-router-dom\";\r\n\r\n// Protected route allows for routing to be restricted to authorized users\r\nconst ProtectedRoute = ({ component: Component, flag, ...rest }) => {\r\n  let navigate = useNavigate();\r\n  let location = useLocation();\r\n  const routeChange = () => {\r\n    let back = rest.redirectedPath;\r\n    navigate(back);\r\n  };\r\n  \r\n  // tests flag set by user login\r\n  return flag ? (\r\n    <Navigate to={rest.desiredPath} state={{ from: location }} replace /> // navigates to desired path on true flag, directs user to login page if false\r\n  ) : (\r\n  <div>\r\n    <p>Unauthorized!</p> \r\n    <button onClick={routeChange}>Go login</button>\r\n  </div>\r\n  )\r\n};\r\n\r\nexport default ProtectedRoute;\r\n"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,EAAmBC,WAAnB,EAAgCC,WAAhC,QAAmD,kBAAnD,C,CAEA;;;;AACA,MAAMC,cAAc,GAAG,QAA6C;EAAA;;EAAA,IAA5C;IAAEC,SAAS,EAAEC,SAAb;IAAwBC,IAAxB;IAA8B,GAAGC;EAAjC,CAA4C;EAClE,IAAIC,QAAQ,GAAGP,WAAW,EAA1B;EACA,IAAIQ,QAAQ,GAAGP,WAAW,EAA1B;;EACA,MAAMQ,WAAW,GAAG,MAAM;IACxB,IAAIC,IAAI,GAAGJ,IAAI,CAACK,cAAhB;IACAJ,QAAQ,CAACG,IAAD,CAAR;EACD,CAHD,CAHkE,CAQlE;;;EACA,OAAOL,IAAI,gBACT,QAAC,QAAD;IAAU,EAAE,EAAEC,IAAI,CAACM,WAAnB;IAAgC,KAAK,EAAE;MAAEC,IAAI,EAAEL;IAAR,CAAvC;IAA2D,OAAO;EAAlE;IAAA;IAAA;IAAA;EAAA,QADS,CAC6D;EAD7D,eAGX;IAAA,wBACE;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QADF,eAEE;MAAQ,OAAO,EAAEC,WAAjB;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAFF;EAAA;IAAA;IAAA;IAAA;EAAA,QAHA;AAQD,CAjBD;;GAAMP,c;UACWF,W,EACAC,W;;;KAFXC,c;AAmBN,eAAeA,cAAf"},"metadata":{},"sourceType":"module"}