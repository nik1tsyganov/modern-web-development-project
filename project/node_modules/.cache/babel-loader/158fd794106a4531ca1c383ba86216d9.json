{"ast":null,"code":"import _objectSpread from \"/Users/NikitaMac/Desktop/Modern Web Development/Homework/modern-web-development-project/project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _toConsumableArray from \"/Users/NikitaMac/Desktop/Modern Web Development/Homework/modern-web-development-project/project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"/Users/NikitaMac/Desktop/Modern Web Development/Homework/modern-web-development-project/project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/NikitaMac/Desktop/Modern Web Development/Homework/modern-web-development-project/project/src/Components/Comments/CommentList.js\";\n\nimport React, { useState, useEffect } from \"react\";\nimport CommentForm from \"./CommentForm\";\nimport Comment from \"./Comment\";\nimport { getComments as getCommentsApi, createComment as createCommentApi, updateComment as updateCommentApi, deleteComment as deleteCommentApi } from \"./../../Common/Services/CommentService\";\nimport Parse from \"parse\";\n\nvar Comments = function Comments(_ref) {\n  var commentsUrl = _ref.commentsUrl,\n      currentUserId = _ref.currentUserId;\n  return function (currentUserId) {\n    var _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        backendComments = _useState2[0],\n        setBackendComments = _useState2[1];\n\n    var _useState3 = useState(null),\n        _useState4 = _slicedToArray(_useState3, 2),\n        activeComment = _useState4[0],\n        setActiveComment = _useState4[1];\n\n    var rootComments = backendComments.filter(function (backendComment) {\n      return backendComment.parentId === null;\n    });\n    var currentUserId = Parse.User.current().id;\n    console.log(currentUserId);\n\n    var getReplies = function getReplies(commentId) {\n      return backendComments.filter(function (backendComment) {\n        return backendComment.parentId === commentId;\n      }).sort(function (a, b) {\n        return new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime();\n      });\n    };\n\n    var addComment = function addComment(text, parentId) {\n      createCommentApi(text, parentId).then(function (comment) {\n        setBackendComments([comment].concat(_toConsumableArray(backendComments)));\n        setActiveComment(null);\n      });\n    };\n\n    var updateComment = function updateComment(text, commentId) {\n      updateCommentApi(text).then(function () {\n        var updatedBackendComments = backendComments.map(function (backendComment) {\n          if (backendComment.id === commentId) {\n            return _objectSpread({}, backendComment, {\n              body: text\n            });\n          }\n\n          return backendComment;\n        });\n        setBackendComments(updatedBackendComments);\n        setActiveComment(null);\n      });\n    };\n\n    var deleteComment = function deleteComment(commentId) {\n      if (window.confirm(\"Are you sure you want to remove comment?\")) {\n        deleteCommentApi().then(function () {\n          var updatedBackendComments = backendComments.filter(function (backendComment) {\n            return backendComment.id !== commentId;\n          });\n          setBackendComments(updatedBackendComments);\n        });\n      }\n    };\n\n    useEffect(function () {\n      getCommentsApi().then(function (data) {\n        setBackendComments(data);\n      });\n    }, []);\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"comments\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      className: \"comments-title\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }\n    }, \"Comments\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"comment-form-title\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }\n    }, \"Write comment\"), /*#__PURE__*/React.createElement(CommentForm, {\n      submitLabel: \"Write\",\n      handleSubmit: addComment,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"comments-container\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }\n    }, rootComments.map(function (rootComment) {\n      return /*#__PURE__*/React.createElement(Comment, {\n        key: rootComment.id,\n        comment: rootComment,\n        replies: getReplies(rootComment.id),\n        activeComment: activeComment,\n        setActiveComment: setActiveComment,\n        addComment: addComment,\n        deleteComment: deleteComment,\n        updateComment: updateComment,\n        currentUserId: currentUserId,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 13\n        }\n      });\n    })));\n  }(currentUserId);\n};\n\nexport default Comments;","map":{"version":3,"names":["React","useState","useEffect","CommentForm","Comment","getComments","getCommentsApi","createComment","createCommentApi","updateComment","updateCommentApi","deleteComment","deleteCommentApi","Parse","Comments","commentsUrl","currentUserId","backendComments","setBackendComments","activeComment","setActiveComment","rootComments","filter","backendComment","parentId","User","current","id","console","log","getReplies","commentId","sort","a","b","Date","createdAt","getTime","addComment","text","then","comment","updatedBackendComments","map","body","window","confirm","data","rootComment"],"sources":["/Users/NikitaMac/Desktop/Modern Web Development/Homework/modern-web-development-project/project/src/Components/Comments/CommentList.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport CommentForm from \"./CommentForm\";\nimport Comment from \"./Comment\";\nimport {\n  getComments as getCommentsApi,\n  createComment as createCommentApi,\n  updateComment as updateCommentApi,\n  deleteComment as deleteCommentApi,\n} from \"./../../Common/Services/CommentService\";\nimport Parse from \"parse\";\n\nconst Comments = ({ commentsUrl, currentUserId }) => {\n\n\n    const [backendComments, setBackendComments] = useState([]);\n    const [activeComment, setActiveComment] = useState(null);\n    const rootComments = backendComments.filter(\n        (backendComment) => backendComment.parentId === null\n    );\n    var currentUserId = Parse.User.current().id;\n    console.log(currentUserId);\n\n    const getReplies = (commentId) =>\n        backendComments\n        .filter((backendComment) => backendComment.parentId === commentId)\n        .sort(\n            (a, b) =>\n            new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime()\n        );\n\n    const addComment = (text, parentId) => {\n        createCommentApi(text, parentId).then((comment) => {\n        setBackendComments([comment, ...backendComments]);\n        setActiveComment(null);\n        });\n    };\n\n    const updateComment = (text, commentId) => {\n        updateCommentApi(text).then(() => {\n        const updatedBackendComments = backendComments.map((backendComment) => {\n            if (backendComment.id === commentId) {\n            return { ...backendComment, body: text };\n            }\n            return backendComment;\n        });\n        setBackendComments(updatedBackendComments);\n        setActiveComment(null);\n        });\n    };\n\n    const deleteComment = (commentId) => {\n        if (window.confirm(\"Are you sure you want to remove comment?\")) {\n        deleteCommentApi().then(() => {\n            const updatedBackendComments = backendComments.filter(\n            (backendComment) => backendComment.id !== commentId\n            );\n            setBackendComments(updatedBackendComments);\n        });\n        }\n    };\n\n    useEffect(() => {\n        getCommentsApi().then((data) => {\n            setBackendComments(data);\n        });\n    }, []);\n\n    return (\n        <div className=\"comments\">\n        <h3 className=\"comments-title\">Comments</h3>\n        <div className=\"comment-form-title\">Write comment</div>\n        <CommentForm submitLabel=\"Write\" handleSubmit={addComment} />\n        <div className=\"comments-container\">\n            {rootComments.map((rootComment) => (\n            <Comment\n                key={rootComment.id}\n                comment={rootComment}\n                replies={getReplies(rootComment.id)}\n                activeComment={activeComment}\n                setActiveComment={setActiveComment}\n                addComment={addComment}\n                deleteComment={deleteComment}\n                updateComment={updateComment}\n                currentUserId={currentUserId}\n            />\n            ))}\n        </div>\n        </div>\n    );\n};\n\nexport default Comments;"],"mappings":"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"},"metadata":{},"sourceType":"module"}