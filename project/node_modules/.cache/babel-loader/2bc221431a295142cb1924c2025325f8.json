{"ast":null,"code":";\n\n(function (root, factory) {\n  if (typeof exports === \"object\") {\n    // CommonJS\n    module.exports = exports = factory(require(\"./core\"));\n  } else if (typeof define === \"function\" && define.amd) {\n    // AMD\n    define([\"./core\"], factory);\n  } else {\n    // Global (browser)\n    factory(root.CryptoJS);\n  }\n})(this, function (CryptoJS) {\n  (function () {\n    // Shortcuts\n    var C = CryptoJS;\n    var C_lib = C.lib;\n    var WordArray = C_lib.WordArray;\n    var C_enc = C.enc;\n    /**\r\n     * Base64 encoding strategy.\r\n     */\n\n    var Base64 = C_enc.Base64 = {\n      /**\r\n       * Converts a word array to a Base64 string.\r\n       *\r\n       * @param {WordArray} wordArray The word array.\r\n       *\r\n       * @return {string} The Base64 string.\r\n       *\r\n       * @static\r\n       *\r\n       * @example\r\n       *\r\n       *     var base64String = CryptoJS.enc.Base64.stringify(wordArray);\r\n       */\n      stringify: function (wordArray) {\n        // Shortcuts\n        var words = wordArray.words;\n        var sigBytes = wordArray.sigBytes;\n        var map = this._map; // Clamp excess bits\n\n        wordArray.clamp(); // Convert\n\n        var base64Chars = [];\n\n        for (var i = 0; i < sigBytes; i += 3) {\n          var byte1 = words[i >>> 2] >>> 24 - i % 4 * 8 & 0xff;\n          var byte2 = words[i + 1 >>> 2] >>> 24 - (i + 1) % 4 * 8 & 0xff;\n          var byte3 = words[i + 2 >>> 2] >>> 24 - (i + 2) % 4 * 8 & 0xff;\n          var triplet = byte1 << 16 | byte2 << 8 | byte3;\n\n          for (var j = 0; j < 4 && i + j * 0.75 < sigBytes; j++) {\n            base64Chars.push(map.charAt(triplet >>> 6 * (3 - j) & 0x3f));\n          }\n        } // Add padding\n\n\n        var paddingChar = map.charAt(64);\n\n        if (paddingChar) {\n          while (base64Chars.length % 4) {\n            base64Chars.push(paddingChar);\n          }\n        }\n\n        return base64Chars.join('');\n      },\n\n      /**\r\n       * Converts a Base64 string to a word array.\r\n       *\r\n       * @param {string} base64Str The Base64 string.\r\n       *\r\n       * @return {WordArray} The word array.\r\n       *\r\n       * @static\r\n       *\r\n       * @example\r\n       *\r\n       *     var wordArray = CryptoJS.enc.Base64.parse(base64String);\r\n       */\n      parse: function (base64Str) {\n        // Shortcuts\n        var base64StrLength = base64Str.length;\n        var map = this._map;\n        var reverseMap = this._reverseMap;\n\n        if (!reverseMap) {\n          reverseMap = this._reverseMap = [];\n\n          for (var j = 0; j < map.length; j++) {\n            reverseMap[map.charCodeAt(j)] = j;\n          }\n        } // Ignore padding\n\n\n        var paddingChar = map.charAt(64);\n\n        if (paddingChar) {\n          var paddingIndex = base64Str.indexOf(paddingChar);\n\n          if (paddingIndex !== -1) {\n            base64StrLength = paddingIndex;\n          }\n        } // Convert\n\n\n        return parseLoop(base64Str, base64StrLength, reverseMap);\n      },\n      _map: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='\n    };\n\n    function parseLoop(base64Str, base64StrLength, reverseMap) {\n      var words = [];\n      var nBytes = 0;\n\n      for (var i = 0; i < base64StrLength; i++) {\n        if (i % 4) {\n          var bits1 = reverseMap[base64Str.charCodeAt(i - 1)] << i % 4 * 2;\n          var bits2 = reverseMap[base64Str.charCodeAt(i)] >>> 6 - i % 4 * 2;\n          var bitsCombined = bits1 | bits2;\n          words[nBytes >>> 2] |= bitsCombined << 24 - nBytes % 4 * 8;\n          nBytes++;\n        }\n      }\n\n      return WordArray.create(words, nBytes);\n    }\n  })();\n\n  return CryptoJS.enc.Base64;\n});","map":{"version":3,"names":["root","factory","exports","module","require","define","amd","CryptoJS","C","C_lib","lib","WordArray","C_enc","enc","Base64","stringify","wordArray","words","sigBytes","map","_map","clamp","base64Chars","i","byte1","byte2","byte3","triplet","j","push","charAt","paddingChar","length","join","parse","base64Str","base64StrLength","reverseMap","_reverseMap","charCodeAt","paddingIndex","indexOf","parseLoop","nBytes","bits1","bits2","bitsCombined","create"],"sources":["C:/Users/brosk/Documents/Web Dev/modern-web-development-project/project/node_modules/crypto-js/enc-base64.js"],"sourcesContent":[";(function (root, factory) {\r\n\tif (typeof exports === \"object\") {\r\n\t\t// CommonJS\r\n\t\tmodule.exports = exports = factory(require(\"./core\"));\r\n\t}\r\n\telse if (typeof define === \"function\" && define.amd) {\r\n\t\t// AMD\r\n\t\tdefine([\"./core\"], factory);\r\n\t}\r\n\telse {\r\n\t\t// Global (browser)\r\n\t\tfactory(root.CryptoJS);\r\n\t}\r\n}(this, function (CryptoJS) {\r\n\r\n\t(function () {\r\n\t    // Shortcuts\r\n\t    var C = CryptoJS;\r\n\t    var C_lib = C.lib;\r\n\t    var WordArray = C_lib.WordArray;\r\n\t    var C_enc = C.enc;\r\n\r\n\t    /**\r\n\t     * Base64 encoding strategy.\r\n\t     */\r\n\t    var Base64 = C_enc.Base64 = {\r\n\t        /**\r\n\t         * Converts a word array to a Base64 string.\r\n\t         *\r\n\t         * @param {WordArray} wordArray The word array.\r\n\t         *\r\n\t         * @return {string} The Base64 string.\r\n\t         *\r\n\t         * @static\r\n\t         *\r\n\t         * @example\r\n\t         *\r\n\t         *     var base64String = CryptoJS.enc.Base64.stringify(wordArray);\r\n\t         */\r\n\t        stringify: function (wordArray) {\r\n\t            // Shortcuts\r\n\t            var words = wordArray.words;\r\n\t            var sigBytes = wordArray.sigBytes;\r\n\t            var map = this._map;\r\n\r\n\t            // Clamp excess bits\r\n\t            wordArray.clamp();\r\n\r\n\t            // Convert\r\n\t            var base64Chars = [];\r\n\t            for (var i = 0; i < sigBytes; i += 3) {\r\n\t                var byte1 = (words[i >>> 2]       >>> (24 - (i % 4) * 8))       & 0xff;\r\n\t                var byte2 = (words[(i + 1) >>> 2] >>> (24 - ((i + 1) % 4) * 8)) & 0xff;\r\n\t                var byte3 = (words[(i + 2) >>> 2] >>> (24 - ((i + 2) % 4) * 8)) & 0xff;\r\n\r\n\t                var triplet = (byte1 << 16) | (byte2 << 8) | byte3;\r\n\r\n\t                for (var j = 0; (j < 4) && (i + j * 0.75 < sigBytes); j++) {\r\n\t                    base64Chars.push(map.charAt((triplet >>> (6 * (3 - j))) & 0x3f));\r\n\t                }\r\n\t            }\r\n\r\n\t            // Add padding\r\n\t            var paddingChar = map.charAt(64);\r\n\t            if (paddingChar) {\r\n\t                while (base64Chars.length % 4) {\r\n\t                    base64Chars.push(paddingChar);\r\n\t                }\r\n\t            }\r\n\r\n\t            return base64Chars.join('');\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Converts a Base64 string to a word array.\r\n\t         *\r\n\t         * @param {string} base64Str The Base64 string.\r\n\t         *\r\n\t         * @return {WordArray} The word array.\r\n\t         *\r\n\t         * @static\r\n\t         *\r\n\t         * @example\r\n\t         *\r\n\t         *     var wordArray = CryptoJS.enc.Base64.parse(base64String);\r\n\t         */\r\n\t        parse: function (base64Str) {\r\n\t            // Shortcuts\r\n\t            var base64StrLength = base64Str.length;\r\n\t            var map = this._map;\r\n\t            var reverseMap = this._reverseMap;\r\n\r\n\t            if (!reverseMap) {\r\n\t                    reverseMap = this._reverseMap = [];\r\n\t                    for (var j = 0; j < map.length; j++) {\r\n\t                        reverseMap[map.charCodeAt(j)] = j;\r\n\t                    }\r\n\t            }\r\n\r\n\t            // Ignore padding\r\n\t            var paddingChar = map.charAt(64);\r\n\t            if (paddingChar) {\r\n\t                var paddingIndex = base64Str.indexOf(paddingChar);\r\n\t                if (paddingIndex !== -1) {\r\n\t                    base64StrLength = paddingIndex;\r\n\t                }\r\n\t            }\r\n\r\n\t            // Convert\r\n\t            return parseLoop(base64Str, base64StrLength, reverseMap);\r\n\r\n\t        },\r\n\r\n\t        _map: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='\r\n\t    };\r\n\r\n\t    function parseLoop(base64Str, base64StrLength, reverseMap) {\r\n\t      var words = [];\r\n\t      var nBytes = 0;\r\n\t      for (var i = 0; i < base64StrLength; i++) {\r\n\t          if (i % 4) {\r\n\t              var bits1 = reverseMap[base64Str.charCodeAt(i - 1)] << ((i % 4) * 2);\r\n\t              var bits2 = reverseMap[base64Str.charCodeAt(i)] >>> (6 - (i % 4) * 2);\r\n\t              var bitsCombined = bits1 | bits2;\r\n\t              words[nBytes >>> 2] |= bitsCombined << (24 - (nBytes % 4) * 8);\r\n\t              nBytes++;\r\n\t          }\r\n\t      }\r\n\t      return WordArray.create(words, nBytes);\r\n\t    }\r\n\t}());\r\n\r\n\r\n\treturn CryptoJS.enc.Base64;\r\n\r\n}));"],"mappings":"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"},"metadata":{},"sourceType":"script"}