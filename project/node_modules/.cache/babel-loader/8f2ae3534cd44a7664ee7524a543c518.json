{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs3/helpers/interopRequireDefault\");\n\nvar _concat = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/concat\"));\n\nvar _forEach = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/for-each\"));\n/*\n * Copyright (c) 2015-present, Parse, LLC.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @flow\n */\n\n/*:: import type { AttributeMap, ObjectCache, OpsMap, State } from './ObjectStateMutations';*/\n\n/*:: import type ParseFile from './ParseFile';*/\n\n/*:: import type { FileSource } from './ParseFile';*/\n\n/*:: import type { Op } from './ParseOp';*/\n\n/*:: import type ParseObject from './ParseObject';*/\n\n/*:: import type { QueryJSON } from './ParseQuery';*/\n\n/*:: import type ParseUser from './ParseUser';*/\n\n/*:: import type { AuthData } from './ParseUser';*/\n\n/*:: import type { PushData } from './Push';*/\n\n/*:: import type { RequestOptions, FullOptions } from './RESTController';*/\n\n/*:: type AnalyticsController = {\n  track: (name: string, dimensions: { [key: string]: string }) => Promise,\n};*/\n\n/*:: type CloudController = {\n  run: (name: string, data: mixed, options: RequestOptions) => Promise,\n  getJobsData: (options: RequestOptions) => Promise,\n  startJob: (name: string, data: mixed, options: RequestOptions) => Promise,\n};*/\n\n/*:: type ConfigController = {\n  current: () => Promise,\n  get: () => Promise,\n  save: (attrs: { [key: string]: any }) => Promise,\n};*/\n\n/*:: type CryptoController = {\n  encrypt: (obj: any, secretKey: string) => string,\n  decrypt: (encryptedText: string, secretKey: any) => string,\n};*/\n\n/*:: type FileController = {\n  saveFile: (name: string, source: FileSource, options: FullOptions) => Promise,\n  saveBase64: (name: string, source: FileSource, options: FullOptions) => Promise,\n  download: (uri: string) => Promise,\n};*/\n\n/*:: type InstallationController = {\n  currentInstallationId: () => Promise,\n};*/\n\n/*:: type ObjectController = {\n  fetch: (\n    object: ParseObject | Array<ParseObject>,\n    forceFetch: boolean,\n    options: RequestOptions\n  ) => Promise,\n  save: (object: ParseObject | Array<ParseObject | ParseFile>, options: RequestOptions) => Promise,\n  destroy: (object: ParseObject | Array<ParseObject>, options: RequestOptions) => Promise,\n};*/\n\n/*:: type ObjectStateController = {\n  getState: (obj: any) => ?State,\n  initializeState: (obj: any, initial?: State) => State,\n  removeState: (obj: any) => ?State,\n  getServerData: (obj: any) => AttributeMap,\n  setServerData: (obj: any, attributes: AttributeMap) => void,\n  getPendingOps: (obj: any) => Array<OpsMap>,\n  setPendingOp: (obj: any, attr: string, op: ?Op) => void,\n  pushPendingState: (obj: any) => void,\n  popPendingState: (obj: any) => OpsMap,\n  mergeFirstPendingState: (obj: any) => void,\n  getObjectCache: (obj: any) => ObjectCache,\n  estimateAttribute: (obj: any, attr: string) => mixed,\n  estimateAttributes: (obj: any) => AttributeMap,\n  commitServerChanges: (obj: any, changes: AttributeMap) => void,\n  enqueueTask: (obj: any, task: () => Promise) => Promise,\n  clearAllState: () => void,\n  duplicateState: (source: any, dest: any) => void,\n};*/\n\n/*:: type PushController = {\n  send: (data: PushData) => Promise,\n};*/\n\n/*:: type QueryController = {\n  find: (className: string, params: QueryJSON, options: RequestOptions) => Promise,\n  aggregate: (className: string, params: any, options: RequestOptions) => Promise,\n};*/\n\n/*:: type RESTController = {\n  request: (method: string, path: string, data: mixed, options: RequestOptions) => Promise,\n  ajax: (method: string, url: string, data: any, headers?: any, options: FullOptions) => Promise,\n};*/\n\n/*:: type SchemaController = {\n  purge: (className: string) => Promise,\n  get: (className: string, options: RequestOptions) => Promise,\n  delete: (className: string, options: RequestOptions) => Promise,\n  create: (className: string, params: any, options: RequestOptions) => Promise,\n  update: (className: string, params: any, options: RequestOptions) => Promise,\n  send(className: string, method: string, params: any, options: RequestOptions): Promise,\n};*/\n\n/*:: type SessionController = {\n  getSession: (token: RequestOptions) => Promise,\n};*/\n\n/*:: type StorageController =\n  | {\n      async: 0,\n      getItem: (path: string) => ?string,\n      setItem: (path: string, value: string) => void,\n      removeItem: (path: string) => void,\n      getItemAsync?: (path: string) => Promise,\n      setItemAsync?: (path: string, value: string) => Promise,\n      removeItemAsync?: (path: string) => Promise,\n      clear: () => void,\n    }\n  | {\n      async: 1,\n      getItem?: (path: string) => ?string,\n      setItem?: (path: string, value: string) => void,\n      removeItem?: (path: string) => void,\n      getItemAsync: (path: string) => Promise,\n      setItemAsync: (path: string, value: string) => Promise,\n      removeItemAsync: (path: string) => Promise,\n      clear: () => void,\n    };*/\n\n/*:: type LocalDatastoreController = {\n  fromPinWithName: (name: string) => ?any,\n  pinWithName: (name: string, objects: any) => void,\n  unPinWithName: (name: string) => void,\n  getAllContents: () => ?any,\n  clear: () => void,\n};*/\n\n/*:: type UserController = {\n  setCurrentUser: (user: ParseUser) => Promise,\n  currentUser: () => ?ParseUser,\n  currentUserAsync: () => Promise,\n  signUp: (user: ParseUser, attrs: AttributeMap, options: RequestOptions) => Promise,\n  logIn: (user: ParseUser, options: RequestOptions) => Promise,\n  become: (options: RequestOptions) => Promise,\n  hydrate: (userJSON: AttributeMap) => Promise,\n  logOut: (options: RequestOptions) => Promise,\n  me: (options: RequestOptions) => Promise,\n  requestPasswordReset: (email: string, options: RequestOptions) => Promise,\n  updateUserOnDisk: (user: ParseUser) => Promise,\n  upgradeToRevocableSession: (user: ParseUser, options: RequestOptions) => Promise,\n  linkWith: (user: ParseUser, authData: AuthData) => Promise,\n  removeUserFromDisk: () => Promise,\n  verifyPassword: (username: string, password: string, options: RequestOptions) => Promise,\n  requestEmailVerification: (email: string, options: RequestOptions) => Promise,\n};*/\n\n/*:: type HooksController = {\n  get: (type: string, functionName?: string, triggerName?: string) => Promise,\n  create: (hook: mixed) => Promise,\n  delete: (hook: mixed) => Promise,\n  update: (hook: mixed) => Promise,\n  send: (method: string, path: string, body?: mixed) => Promise,\n};*/\n\n/*:: type WebSocketController = {\n  onopen: () => void,\n  onmessage: (message: any) => void,\n  onclose: () => void,\n  onerror: (error: any) => void,\n  send: (data: any) => void,\n  close: () => void,\n};*/\n\n/*:: type Config = {\n  AnalyticsController?: AnalyticsController,\n  CloudController?: CloudController,\n  ConfigController?: ConfigController,\n  FileController?: FileController,\n  InstallationController?: InstallationController,\n  ObjectController?: ObjectController,\n  ObjectStateController?: ObjectStateController,\n  PushController?: PushController,\n  QueryController?: QueryController,\n  RESTController?: RESTController,\n  SchemaController?: SchemaController,\n  SessionController?: SessionController,\n  StorageController?: StorageController,\n  LocalDatastoreController?: LocalDatastoreController,\n  UserController?: UserController,\n  HooksController?: HooksController,\n  WebSocketController?: WebSocketController,\n};*/\n\n\nvar config\n/*: Config & { [key: string]: mixed }*/\n= {\n  // Defaults\n  IS_NODE: typeof process !== 'undefined' && !!process.versions && !!process.versions.node && !process.versions.electron,\n  REQUEST_ATTEMPT_LIMIT: 5,\n  REQUEST_BATCH_SIZE: 20,\n  REQUEST_HEADERS: {},\n  SERVER_URL: 'https://api.parse.com/1',\n  SERVER_AUTH_TYPE: null,\n  SERVER_AUTH_TOKEN: null,\n  LIVEQUERY_SERVER_URL: null,\n  ENCRYPTED_KEY: null,\n  VERSION: 'js' + \"3.4.2\",\n  APPLICATION_ID: null,\n  JAVASCRIPT_KEY: null,\n  MASTER_KEY: null,\n  USE_MASTER_KEY: false,\n  PERFORM_USER_REWRITE: true,\n  FORCE_REVOCABLE_SESSION: false,\n  ENCRYPTED_USER: false,\n  IDEMPOTENCY: false,\n  ALLOW_CUSTOM_OBJECT_ID: false\n};\n\nfunction requireMethods(name\n/*: string*/\n, methods\n/*: Array<string>*/\n, controller\n/*: any*/\n) {\n  (0, _forEach.default)(methods).call(methods, function (func) {\n    if (typeof controller[func] !== 'function') {\n      var _context;\n\n      throw new Error((0, _concat.default)(_context = \"\".concat(name, \" must implement \")).call(_context, func, \"()\"));\n    }\n  });\n}\n\nmodule.exports = {\n  get: function (key\n  /*: string*/\n  )\n  /*: any*/\n  {\n    if (config.hasOwnProperty(key)) {\n      return config[key];\n    }\n\n    throw new Error('Configuration key not found: ' + key);\n  },\n  set: function (key\n  /*: string*/\n  , value\n  /*: any*/\n  )\n  /*: void*/\n  {\n    config[key] = value;\n  },\n\n  /* Specialized Controller Setters/Getters */\n  setAnalyticsController: function (controller\n  /*: AnalyticsController*/\n  ) {\n    requireMethods('AnalyticsController', ['track'], controller);\n    config['AnalyticsController'] = controller;\n  },\n  getAnalyticsController: function ()\n  /*: AnalyticsController*/\n  {\n    return config['AnalyticsController'];\n  },\n  setCloudController: function (controller\n  /*: CloudController*/\n  ) {\n    requireMethods('CloudController', ['run', 'getJobsData', 'startJob'], controller);\n    config['CloudController'] = controller;\n  },\n  getCloudController: function ()\n  /*: CloudController*/\n  {\n    return config['CloudController'];\n  },\n  setConfigController: function (controller\n  /*: ConfigController*/\n  ) {\n    requireMethods('ConfigController', ['current', 'get', 'save'], controller);\n    config['ConfigController'] = controller;\n  },\n  getConfigController: function ()\n  /*: ConfigController*/\n  {\n    return config['ConfigController'];\n  },\n  setCryptoController: function (controller\n  /*: CryptoController*/\n  ) {\n    requireMethods('CryptoController', ['encrypt', 'decrypt'], controller);\n    config['CryptoController'] = controller;\n  },\n  getCryptoController: function ()\n  /*: CryptoController*/\n  {\n    return config['CryptoController'];\n  },\n  setFileController: function (controller\n  /*: FileController*/\n  ) {\n    requireMethods('FileController', ['saveFile', 'saveBase64'], controller);\n    config['FileController'] = controller;\n  },\n  getFileController: function ()\n  /*: FileController*/\n  {\n    return config['FileController'];\n  },\n  setInstallationController: function (controller\n  /*: InstallationController*/\n  ) {\n    requireMethods('InstallationController', ['currentInstallationId'], controller);\n    config['InstallationController'] = controller;\n  },\n  getInstallationController: function ()\n  /*: InstallationController*/\n  {\n    return config['InstallationController'];\n  },\n  setObjectController: function (controller\n  /*: ObjectController*/\n  ) {\n    requireMethods('ObjectController', ['save', 'fetch', 'destroy'], controller);\n    config['ObjectController'] = controller;\n  },\n  getObjectController: function ()\n  /*: ObjectController*/\n  {\n    return config['ObjectController'];\n  },\n  setObjectStateController: function (controller\n  /*: ObjectStateController*/\n  ) {\n    requireMethods('ObjectStateController', ['getState', 'initializeState', 'removeState', 'getServerData', 'setServerData', 'getPendingOps', 'setPendingOp', 'pushPendingState', 'popPendingState', 'mergeFirstPendingState', 'getObjectCache', 'estimateAttribute', 'estimateAttributes', 'commitServerChanges', 'enqueueTask', 'clearAllState'], controller);\n    config['ObjectStateController'] = controller;\n  },\n  getObjectStateController: function ()\n  /*: ObjectStateController*/\n  {\n    return config['ObjectStateController'];\n  },\n  setPushController: function (controller\n  /*: PushController*/\n  ) {\n    requireMethods('PushController', ['send'], controller);\n    config['PushController'] = controller;\n  },\n  getPushController: function ()\n  /*: PushController*/\n  {\n    return config['PushController'];\n  },\n  setQueryController: function (controller\n  /*: QueryController*/\n  ) {\n    requireMethods('QueryController', ['find', 'aggregate'], controller);\n    config['QueryController'] = controller;\n  },\n  getQueryController: function ()\n  /*: QueryController*/\n  {\n    return config['QueryController'];\n  },\n  setRESTController: function (controller\n  /*: RESTController*/\n  ) {\n    requireMethods('RESTController', ['request', 'ajax'], controller);\n    config['RESTController'] = controller;\n  },\n  getRESTController: function ()\n  /*: RESTController*/\n  {\n    return config['RESTController'];\n  },\n  setSchemaController: function (controller\n  /*: SchemaController*/\n  ) {\n    requireMethods('SchemaController', ['get', 'create', 'update', 'delete', 'send', 'purge'], controller);\n    config['SchemaController'] = controller;\n  },\n  getSchemaController: function ()\n  /*: SchemaController*/\n  {\n    return config['SchemaController'];\n  },\n  setSessionController: function (controller\n  /*: SessionController*/\n  ) {\n    requireMethods('SessionController', ['getSession'], controller);\n    config['SessionController'] = controller;\n  },\n  getSessionController: function ()\n  /*: SessionController*/\n  {\n    return config['SessionController'];\n  },\n  setStorageController: function (controller\n  /*: StorageController*/\n  ) {\n    if (controller.async) {\n      requireMethods('An async StorageController', ['getItemAsync', 'setItemAsync', 'removeItemAsync', 'getAllKeysAsync'], controller);\n    } else {\n      requireMethods('A synchronous StorageController', ['getItem', 'setItem', 'removeItem', 'getAllKeys'], controller);\n    }\n\n    config['StorageController'] = controller;\n  },\n  setLocalDatastoreController: function (controller\n  /*: LocalDatastoreController*/\n  ) {\n    requireMethods('LocalDatastoreController', ['pinWithName', 'fromPinWithName', 'unPinWithName', 'getAllContents', 'clear'], controller);\n    config['LocalDatastoreController'] = controller;\n  },\n  getLocalDatastoreController: function ()\n  /*: LocalDatastoreController*/\n  {\n    return config['LocalDatastoreController'];\n  },\n  setLocalDatastore: function (store\n  /*: any*/\n  ) {\n    config['LocalDatastore'] = store;\n  },\n  getLocalDatastore: function () {\n    return config['LocalDatastore'];\n  },\n  getStorageController: function ()\n  /*: StorageController*/\n  {\n    return config['StorageController'];\n  },\n  setAsyncStorage: function (storage\n  /*: any*/\n  ) {\n    config['AsyncStorage'] = storage;\n  },\n  getAsyncStorage: function () {\n    return config['AsyncStorage'];\n  },\n  setWebSocketController: function (controller\n  /*: WebSocketController*/\n  ) {\n    config['WebSocketController'] = controller;\n  },\n  getWebSocketController: function ()\n  /*: WebSocketController*/\n  {\n    return config['WebSocketController'];\n  },\n  setUserController: function (controller\n  /*: UserController*/\n  ) {\n    requireMethods('UserController', ['setCurrentUser', 'currentUser', 'currentUserAsync', 'signUp', 'logIn', 'become', 'logOut', 'me', 'requestPasswordReset', 'upgradeToRevocableSession', 'requestEmailVerification', 'verifyPassword', 'linkWith'], controller);\n    config['UserController'] = controller;\n  },\n  getUserController: function ()\n  /*: UserController*/\n  {\n    return config['UserController'];\n  },\n  setLiveQueryController: function (controller\n  /*: any*/\n  ) {\n    requireMethods('LiveQueryController', ['setDefaultLiveQueryClient', 'getDefaultLiveQueryClient', '_clearCachedDefaultClient'], controller);\n    config['LiveQueryController'] = controller;\n  },\n  getLiveQueryController: function ()\n  /*: any*/\n  {\n    return config['LiveQueryController'];\n  },\n  setHooksController: function (controller\n  /*: HooksController*/\n  ) {\n    requireMethods('HooksController', ['create', 'get', 'update', 'remove'], controller);\n    config['HooksController'] = controller;\n  },\n  getHooksController: function ()\n  /*: HooksController*/\n  {\n    return config['HooksController'];\n  }\n};","map":{"version":3,"names":["_interopRequireDefault","require","_concat","_forEach","config","IS_NODE","process","versions","node","electron","REQUEST_ATTEMPT_LIMIT","REQUEST_BATCH_SIZE","REQUEST_HEADERS","SERVER_URL","SERVER_AUTH_TYPE","SERVER_AUTH_TOKEN","LIVEQUERY_SERVER_URL","ENCRYPTED_KEY","VERSION","APPLICATION_ID","JAVASCRIPT_KEY","MASTER_KEY","USE_MASTER_KEY","PERFORM_USER_REWRITE","FORCE_REVOCABLE_SESSION","ENCRYPTED_USER","IDEMPOTENCY","ALLOW_CUSTOM_OBJECT_ID","requireMethods","name","methods","controller","default","call","func","_context","Error","concat","module","exports","get","key","hasOwnProperty","set","value","setAnalyticsController","getAnalyticsController","setCloudController","getCloudController","setConfigController","getConfigController","setCryptoController","getCryptoController","setFileController","getFileController","setInstallationController","getInstallationController","setObjectController","getObjectController","setObjectStateController","getObjectStateController","setPushController","getPushController","setQueryController","getQueryController","setRESTController","getRESTController","setSchemaController","getSchemaController","setSessionController","getSessionController","setStorageController","async","setLocalDatastoreController","getLocalDatastoreController","setLocalDatastore","store","getLocalDatastore","getStorageController","setAsyncStorage","storage","getAsyncStorage","setWebSocketController","getWebSocketController","setUserController","getUserController","setLiveQueryController","getLiveQueryController","setHooksController","getHooksController"],"sources":["/Users/NikitaMac/Desktop/Modern Web Development/Homework/modern-web-development-project/project/node_modules/parse/lib/browser/CoreManager.js"],"sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs3/helpers/interopRequireDefault\");\n\nvar _concat = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/concat\"));\n\nvar _forEach = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/for-each\"));\n/*\n * Copyright (c) 2015-present, Parse, LLC.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @flow\n */\n\n/*:: import type { AttributeMap, ObjectCache, OpsMap, State } from './ObjectStateMutations';*/\n\n/*:: import type ParseFile from './ParseFile';*/\n\n/*:: import type { FileSource } from './ParseFile';*/\n\n/*:: import type { Op } from './ParseOp';*/\n\n/*:: import type ParseObject from './ParseObject';*/\n\n/*:: import type { QueryJSON } from './ParseQuery';*/\n\n/*:: import type ParseUser from './ParseUser';*/\n\n/*:: import type { AuthData } from './ParseUser';*/\n\n/*:: import type { PushData } from './Push';*/\n\n/*:: import type { RequestOptions, FullOptions } from './RESTController';*/\n\n/*:: type AnalyticsController = {\n  track: (name: string, dimensions: { [key: string]: string }) => Promise,\n};*/\n\n/*:: type CloudController = {\n  run: (name: string, data: mixed, options: RequestOptions) => Promise,\n  getJobsData: (options: RequestOptions) => Promise,\n  startJob: (name: string, data: mixed, options: RequestOptions) => Promise,\n};*/\n\n/*:: type ConfigController = {\n  current: () => Promise,\n  get: () => Promise,\n  save: (attrs: { [key: string]: any }) => Promise,\n};*/\n\n/*:: type CryptoController = {\n  encrypt: (obj: any, secretKey: string) => string,\n  decrypt: (encryptedText: string, secretKey: any) => string,\n};*/\n\n/*:: type FileController = {\n  saveFile: (name: string, source: FileSource, options: FullOptions) => Promise,\n  saveBase64: (name: string, source: FileSource, options: FullOptions) => Promise,\n  download: (uri: string) => Promise,\n};*/\n\n/*:: type InstallationController = {\n  currentInstallationId: () => Promise,\n};*/\n\n/*:: type ObjectController = {\n  fetch: (\n    object: ParseObject | Array<ParseObject>,\n    forceFetch: boolean,\n    options: RequestOptions\n  ) => Promise,\n  save: (object: ParseObject | Array<ParseObject | ParseFile>, options: RequestOptions) => Promise,\n  destroy: (object: ParseObject | Array<ParseObject>, options: RequestOptions) => Promise,\n};*/\n\n/*:: type ObjectStateController = {\n  getState: (obj: any) => ?State,\n  initializeState: (obj: any, initial?: State) => State,\n  removeState: (obj: any) => ?State,\n  getServerData: (obj: any) => AttributeMap,\n  setServerData: (obj: any, attributes: AttributeMap) => void,\n  getPendingOps: (obj: any) => Array<OpsMap>,\n  setPendingOp: (obj: any, attr: string, op: ?Op) => void,\n  pushPendingState: (obj: any) => void,\n  popPendingState: (obj: any) => OpsMap,\n  mergeFirstPendingState: (obj: any) => void,\n  getObjectCache: (obj: any) => ObjectCache,\n  estimateAttribute: (obj: any, attr: string) => mixed,\n  estimateAttributes: (obj: any) => AttributeMap,\n  commitServerChanges: (obj: any, changes: AttributeMap) => void,\n  enqueueTask: (obj: any, task: () => Promise) => Promise,\n  clearAllState: () => void,\n  duplicateState: (source: any, dest: any) => void,\n};*/\n\n/*:: type PushController = {\n  send: (data: PushData) => Promise,\n};*/\n\n/*:: type QueryController = {\n  find: (className: string, params: QueryJSON, options: RequestOptions) => Promise,\n  aggregate: (className: string, params: any, options: RequestOptions) => Promise,\n};*/\n\n/*:: type RESTController = {\n  request: (method: string, path: string, data: mixed, options: RequestOptions) => Promise,\n  ajax: (method: string, url: string, data: any, headers?: any, options: FullOptions) => Promise,\n};*/\n\n/*:: type SchemaController = {\n  purge: (className: string) => Promise,\n  get: (className: string, options: RequestOptions) => Promise,\n  delete: (className: string, options: RequestOptions) => Promise,\n  create: (className: string, params: any, options: RequestOptions) => Promise,\n  update: (className: string, params: any, options: RequestOptions) => Promise,\n  send(className: string, method: string, params: any, options: RequestOptions): Promise,\n};*/\n\n/*:: type SessionController = {\n  getSession: (token: RequestOptions) => Promise,\n};*/\n\n/*:: type StorageController =\n  | {\n      async: 0,\n      getItem: (path: string) => ?string,\n      setItem: (path: string, value: string) => void,\n      removeItem: (path: string) => void,\n      getItemAsync?: (path: string) => Promise,\n      setItemAsync?: (path: string, value: string) => Promise,\n      removeItemAsync?: (path: string) => Promise,\n      clear: () => void,\n    }\n  | {\n      async: 1,\n      getItem?: (path: string) => ?string,\n      setItem?: (path: string, value: string) => void,\n      removeItem?: (path: string) => void,\n      getItemAsync: (path: string) => Promise,\n      setItemAsync: (path: string, value: string) => Promise,\n      removeItemAsync: (path: string) => Promise,\n      clear: () => void,\n    };*/\n\n/*:: type LocalDatastoreController = {\n  fromPinWithName: (name: string) => ?any,\n  pinWithName: (name: string, objects: any) => void,\n  unPinWithName: (name: string) => void,\n  getAllContents: () => ?any,\n  clear: () => void,\n};*/\n\n/*:: type UserController = {\n  setCurrentUser: (user: ParseUser) => Promise,\n  currentUser: () => ?ParseUser,\n  currentUserAsync: () => Promise,\n  signUp: (user: ParseUser, attrs: AttributeMap, options: RequestOptions) => Promise,\n  logIn: (user: ParseUser, options: RequestOptions) => Promise,\n  become: (options: RequestOptions) => Promise,\n  hydrate: (userJSON: AttributeMap) => Promise,\n  logOut: (options: RequestOptions) => Promise,\n  me: (options: RequestOptions) => Promise,\n  requestPasswordReset: (email: string, options: RequestOptions) => Promise,\n  updateUserOnDisk: (user: ParseUser) => Promise,\n  upgradeToRevocableSession: (user: ParseUser, options: RequestOptions) => Promise,\n  linkWith: (user: ParseUser, authData: AuthData) => Promise,\n  removeUserFromDisk: () => Promise,\n  verifyPassword: (username: string, password: string, options: RequestOptions) => Promise,\n  requestEmailVerification: (email: string, options: RequestOptions) => Promise,\n};*/\n\n/*:: type HooksController = {\n  get: (type: string, functionName?: string, triggerName?: string) => Promise,\n  create: (hook: mixed) => Promise,\n  delete: (hook: mixed) => Promise,\n  update: (hook: mixed) => Promise,\n  send: (method: string, path: string, body?: mixed) => Promise,\n};*/\n\n/*:: type WebSocketController = {\n  onopen: () => void,\n  onmessage: (message: any) => void,\n  onclose: () => void,\n  onerror: (error: any) => void,\n  send: (data: any) => void,\n  close: () => void,\n};*/\n\n/*:: type Config = {\n  AnalyticsController?: AnalyticsController,\n  CloudController?: CloudController,\n  ConfigController?: ConfigController,\n  FileController?: FileController,\n  InstallationController?: InstallationController,\n  ObjectController?: ObjectController,\n  ObjectStateController?: ObjectStateController,\n  PushController?: PushController,\n  QueryController?: QueryController,\n  RESTController?: RESTController,\n  SchemaController?: SchemaController,\n  SessionController?: SessionController,\n  StorageController?: StorageController,\n  LocalDatastoreController?: LocalDatastoreController,\n  UserController?: UserController,\n  HooksController?: HooksController,\n  WebSocketController?: WebSocketController,\n};*/\n\n\nvar config\n/*: Config & { [key: string]: mixed }*/\n= {\n  // Defaults\n  IS_NODE: typeof process !== 'undefined' && !!process.versions && !!process.versions.node && !process.versions.electron,\n  REQUEST_ATTEMPT_LIMIT: 5,\n  REQUEST_BATCH_SIZE: 20,\n  REQUEST_HEADERS: {},\n  SERVER_URL: 'https://api.parse.com/1',\n  SERVER_AUTH_TYPE: null,\n  SERVER_AUTH_TOKEN: null,\n  LIVEQUERY_SERVER_URL: null,\n  ENCRYPTED_KEY: null,\n  VERSION: 'js' + \"3.4.2\",\n  APPLICATION_ID: null,\n  JAVASCRIPT_KEY: null,\n  MASTER_KEY: null,\n  USE_MASTER_KEY: false,\n  PERFORM_USER_REWRITE: true,\n  FORCE_REVOCABLE_SESSION: false,\n  ENCRYPTED_USER: false,\n  IDEMPOTENCY: false,\n  ALLOW_CUSTOM_OBJECT_ID: false\n};\n\nfunction requireMethods(name\n/*: string*/\n, methods\n/*: Array<string>*/\n, controller\n/*: any*/\n) {\n  (0, _forEach.default)(methods).call(methods, function (func) {\n    if (typeof controller[func] !== 'function') {\n      var _context;\n\n      throw new Error((0, _concat.default)(_context = \"\".concat(name, \" must implement \")).call(_context, func, \"()\"));\n    }\n  });\n}\n\nmodule.exports = {\n  get: function (key\n  /*: string*/\n  )\n  /*: any*/\n  {\n    if (config.hasOwnProperty(key)) {\n      return config[key];\n    }\n\n    throw new Error('Configuration key not found: ' + key);\n  },\n  set: function (key\n  /*: string*/\n  , value\n  /*: any*/\n  )\n  /*: void*/\n  {\n    config[key] = value;\n  },\n\n  /* Specialized Controller Setters/Getters */\n  setAnalyticsController: function (controller\n  /*: AnalyticsController*/\n  ) {\n    requireMethods('AnalyticsController', ['track'], controller);\n    config['AnalyticsController'] = controller;\n  },\n  getAnalyticsController: function ()\n  /*: AnalyticsController*/\n  {\n    return config['AnalyticsController'];\n  },\n  setCloudController: function (controller\n  /*: CloudController*/\n  ) {\n    requireMethods('CloudController', ['run', 'getJobsData', 'startJob'], controller);\n    config['CloudController'] = controller;\n  },\n  getCloudController: function ()\n  /*: CloudController*/\n  {\n    return config['CloudController'];\n  },\n  setConfigController: function (controller\n  /*: ConfigController*/\n  ) {\n    requireMethods('ConfigController', ['current', 'get', 'save'], controller);\n    config['ConfigController'] = controller;\n  },\n  getConfigController: function ()\n  /*: ConfigController*/\n  {\n    return config['ConfigController'];\n  },\n  setCryptoController: function (controller\n  /*: CryptoController*/\n  ) {\n    requireMethods('CryptoController', ['encrypt', 'decrypt'], controller);\n    config['CryptoController'] = controller;\n  },\n  getCryptoController: function ()\n  /*: CryptoController*/\n  {\n    return config['CryptoController'];\n  },\n  setFileController: function (controller\n  /*: FileController*/\n  ) {\n    requireMethods('FileController', ['saveFile', 'saveBase64'], controller);\n    config['FileController'] = controller;\n  },\n  getFileController: function ()\n  /*: FileController*/\n  {\n    return config['FileController'];\n  },\n  setInstallationController: function (controller\n  /*: InstallationController*/\n  ) {\n    requireMethods('InstallationController', ['currentInstallationId'], controller);\n    config['InstallationController'] = controller;\n  },\n  getInstallationController: function ()\n  /*: InstallationController*/\n  {\n    return config['InstallationController'];\n  },\n  setObjectController: function (controller\n  /*: ObjectController*/\n  ) {\n    requireMethods('ObjectController', ['save', 'fetch', 'destroy'], controller);\n    config['ObjectController'] = controller;\n  },\n  getObjectController: function ()\n  /*: ObjectController*/\n  {\n    return config['ObjectController'];\n  },\n  setObjectStateController: function (controller\n  /*: ObjectStateController*/\n  ) {\n    requireMethods('ObjectStateController', ['getState', 'initializeState', 'removeState', 'getServerData', 'setServerData', 'getPendingOps', 'setPendingOp', 'pushPendingState', 'popPendingState', 'mergeFirstPendingState', 'getObjectCache', 'estimateAttribute', 'estimateAttributes', 'commitServerChanges', 'enqueueTask', 'clearAllState'], controller);\n    config['ObjectStateController'] = controller;\n  },\n  getObjectStateController: function ()\n  /*: ObjectStateController*/\n  {\n    return config['ObjectStateController'];\n  },\n  setPushController: function (controller\n  /*: PushController*/\n  ) {\n    requireMethods('PushController', ['send'], controller);\n    config['PushController'] = controller;\n  },\n  getPushController: function ()\n  /*: PushController*/\n  {\n    return config['PushController'];\n  },\n  setQueryController: function (controller\n  /*: QueryController*/\n  ) {\n    requireMethods('QueryController', ['find', 'aggregate'], controller);\n    config['QueryController'] = controller;\n  },\n  getQueryController: function ()\n  /*: QueryController*/\n  {\n    return config['QueryController'];\n  },\n  setRESTController: function (controller\n  /*: RESTController*/\n  ) {\n    requireMethods('RESTController', ['request', 'ajax'], controller);\n    config['RESTController'] = controller;\n  },\n  getRESTController: function ()\n  /*: RESTController*/\n  {\n    return config['RESTController'];\n  },\n  setSchemaController: function (controller\n  /*: SchemaController*/\n  ) {\n    requireMethods('SchemaController', ['get', 'create', 'update', 'delete', 'send', 'purge'], controller);\n    config['SchemaController'] = controller;\n  },\n  getSchemaController: function ()\n  /*: SchemaController*/\n  {\n    return config['SchemaController'];\n  },\n  setSessionController: function (controller\n  /*: SessionController*/\n  ) {\n    requireMethods('SessionController', ['getSession'], controller);\n    config['SessionController'] = controller;\n  },\n  getSessionController: function ()\n  /*: SessionController*/\n  {\n    return config['SessionController'];\n  },\n  setStorageController: function (controller\n  /*: StorageController*/\n  ) {\n    if (controller.async) {\n      requireMethods('An async StorageController', ['getItemAsync', 'setItemAsync', 'removeItemAsync', 'getAllKeysAsync'], controller);\n    } else {\n      requireMethods('A synchronous StorageController', ['getItem', 'setItem', 'removeItem', 'getAllKeys'], controller);\n    }\n\n    config['StorageController'] = controller;\n  },\n  setLocalDatastoreController: function (controller\n  /*: LocalDatastoreController*/\n  ) {\n    requireMethods('LocalDatastoreController', ['pinWithName', 'fromPinWithName', 'unPinWithName', 'getAllContents', 'clear'], controller);\n    config['LocalDatastoreController'] = controller;\n  },\n  getLocalDatastoreController: function ()\n  /*: LocalDatastoreController*/\n  {\n    return config['LocalDatastoreController'];\n  },\n  setLocalDatastore: function (store\n  /*: any*/\n  ) {\n    config['LocalDatastore'] = store;\n  },\n  getLocalDatastore: function () {\n    return config['LocalDatastore'];\n  },\n  getStorageController: function ()\n  /*: StorageController*/\n  {\n    return config['StorageController'];\n  },\n  setAsyncStorage: function (storage\n  /*: any*/\n  ) {\n    config['AsyncStorage'] = storage;\n  },\n  getAsyncStorage: function () {\n    return config['AsyncStorage'];\n  },\n  setWebSocketController: function (controller\n  /*: WebSocketController*/\n  ) {\n    config['WebSocketController'] = controller;\n  },\n  getWebSocketController: function ()\n  /*: WebSocketController*/\n  {\n    return config['WebSocketController'];\n  },\n  setUserController: function (controller\n  /*: UserController*/\n  ) {\n    requireMethods('UserController', ['setCurrentUser', 'currentUser', 'currentUserAsync', 'signUp', 'logIn', 'become', 'logOut', 'me', 'requestPasswordReset', 'upgradeToRevocableSession', 'requestEmailVerification', 'verifyPassword', 'linkWith'], controller);\n    config['UserController'] = controller;\n  },\n  getUserController: function ()\n  /*: UserController*/\n  {\n    return config['UserController'];\n  },\n  setLiveQueryController: function (controller\n  /*: any*/\n  ) {\n    requireMethods('LiveQueryController', ['setDefaultLiveQueryClient', 'getDefaultLiveQueryClient', '_clearCachedDefaultClient'], controller);\n    config['LiveQueryController'] = controller;\n  },\n  getLiveQueryController: function ()\n  /*: any*/\n  {\n    return config['LiveQueryController'];\n  },\n  setHooksController: function (controller\n  /*: HooksController*/\n  ) {\n    requireMethods('HooksController', ['create', 'get', 'update', 'remove'], controller);\n    config['HooksController'] = controller;\n  },\n  getHooksController: function ()\n  /*: HooksController*/\n  {\n    return config['HooksController'];\n  }\n};"],"mappings":"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"},"metadata":{},"sourceType":"script"}