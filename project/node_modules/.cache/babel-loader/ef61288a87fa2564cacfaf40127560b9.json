{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs3/helpers/interopRequireDefault\");\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs3/core-js-stable/object/define-property\");\n\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = void 0;\n\nvar _ParseUser = _interopRequireDefault(require(\"./ParseUser\"));\n/**\n * Copyright (c) 2015-present, Parse, LLC.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @flow-weak\n */\n\n/* global FB */\n\n\nvar initialized = false;\nvar requestedPermissions;\nvar initOptions;\nvar provider = {\n  authenticate: function authenticate(options) {\n    var _this = this;\n\n    if (typeof FB === 'undefined') {\n      options.error(this, 'Facebook SDK not found.');\n    }\n\n    FB.login(function (response) {\n      if (response.authResponse) {\n        if (options.success) {\n          options.success(_this, {\n            id: response.authResponse.userID,\n            access_token: response.authResponse.accessToken,\n            expiration_date: new Date(response.authResponse.expiresIn * 1000 + new Date().getTime()).toJSON()\n          });\n        }\n      } else {\n        if (options.error) {\n          options.error(_this, response);\n        }\n      }\n    }, {\n      scope: requestedPermissions\n    });\n  },\n  restoreAuthentication: function restoreAuthentication(authData) {\n    if (authData) {\n      var newOptions = {};\n\n      if (initOptions) {\n        for (var key in initOptions) {\n          newOptions[key] = initOptions[key];\n        }\n      } // Suppress checks for login status from the browser.\n\n\n      newOptions.status = false; // If the user doesn't match the one known by the FB SDK, log out.\n      // Most of the time, the users will match -- it's only in cases where\n      // the FB SDK knows of a different user than the one being restored\n      // from a Parse User that logged in with username/password.\n\n      var existingResponse = FB.getAuthResponse();\n\n      if (existingResponse && existingResponse.userID !== authData.id) {\n        FB.logout();\n      }\n\n      FB.init(newOptions);\n    }\n\n    return true;\n  },\n  getAuthType: function getAuthType() {\n    return 'facebook';\n  },\n  deauthenticate: function deauthenticate() {\n    this.restoreAuthentication(null);\n  }\n};\n/**\n * Provides a set of utilities for using Parse with Facebook.\n *\n * @class Parse.FacebookUtils\n * @static\n * @hideconstructor\n */\n\nvar FacebookUtils = {\n  /**\n   * Initializes Parse Facebook integration.  Call this function after you\n   * have loaded the Facebook Javascript SDK with the same parameters\n   * as you would pass to<code>\n   * <a href=\n   * \"https://developers.facebook.com/docs/reference/javascript/FB.init/\">\n   * FB.init()</a></code>.  Parse.FacebookUtils will invoke FB.init() for you\n   * with these arguments.\n   *\n   * @function init\n   * @name Parse.FacebookUtils.init\n   * @param {object} options Facebook options argument as described here:\n   *   <a href=\n   *   \"https://developers.facebook.com/docs/reference/javascript/FB.init/\">\n   *   FB.init()</a>. The status flag will be coerced to 'false' because it\n   *   interferes with Parse Facebook integration. Call FB.getLoginStatus()\n   *   explicitly if this behavior is required by your application.\n   */\n  init: function init(options) {\n    if (typeof FB === 'undefined') {\n      throw new Error('The Facebook JavaScript SDK must be loaded before calling init.');\n    }\n\n    initOptions = {};\n\n    if (options) {\n      for (var key in options) {\n        initOptions[key] = options[key];\n      }\n    }\n\n    if (initOptions.status && typeof console !== 'undefined') {\n      var warn = console.warn || console.log || function () {}; // eslint-disable-line no-console\n\n\n      warn.call(console, 'The \"status\" flag passed into' + ' FB.init, when set to true, can interfere with Parse Facebook' + ' integration, so it has been suppressed. Please call' + ' FB.getLoginStatus() explicitly if you require this behavior.');\n    }\n\n    initOptions.status = false;\n    FB.init(initOptions);\n\n    _ParseUser.default._registerAuthenticationProvider(provider);\n\n    initialized = true;\n  },\n\n  /**\n   * Gets whether the user has their account linked to Facebook.\n   *\n   * @function isLinked\n   * @name Parse.FacebookUtils.isLinked\n   * @param {Parse.User} user User to check for a facebook link.\n   *     The user must be logged in on this device.\n   * @returns {boolean} <code>true</code> if the user has their account\n   *     linked to Facebook.\n   */\n  isLinked: function isLinked(user) {\n    return user._isLinked('facebook');\n  },\n\n  /**\n   * Logs in a user using Facebook. This method delegates to the Facebook\n   * SDK to authenticate the user, and then automatically logs in (or\n   * creates, in the case where it is a new user) a Parse.User.\n   *\n   * Standard API:\n   *\n   * <code>logIn(permission: string, authData: Object);</code>\n   *\n   * Advanced API: Used for handling your own oAuth tokens\n   * {@link https://docs.parseplatform.org/rest/guide/#linking-users}\n   *\n   * <code>logIn(authData: Object, options?: Object);</code>\n   *\n   * @function logIn\n   * @name Parse.FacebookUtils.logIn\n   * @param {(string | object)} permissions The permissions required for Facebook\n   *    log in.  This is a comma-separated string of permissions.\n   *    Alternatively, supply a Facebook authData object as described in our\n   *    REST API docs if you want to handle getting facebook auth tokens\n   *    yourself.\n   * @param {object} options MasterKey / SessionToken. Alternatively can be used for authData if permissions is a string\n   * @returns {Promise}\n   */\n  logIn: function logIn(permissions, options) {\n    if (!permissions || typeof permissions === 'string') {\n      if (!initialized) {\n        throw new Error('You must initialize FacebookUtils before calling logIn.');\n      }\n\n      requestedPermissions = permissions;\n      return _ParseUser.default.logInWith('facebook', options);\n    }\n\n    return _ParseUser.default.logInWith('facebook', {\n      authData: permissions\n    }, options);\n  },\n\n  /**\n   * Links Facebook to an existing PFUser. This method delegates to the\n   * Facebook SDK to authenticate the user, and then automatically links\n   * the account to the Parse.User.\n   *\n   * Standard API:\n   *\n   * <code>link(user: Parse.User, permission: string, authData?: Object);</code>\n   *\n   * Advanced API: Used for handling your own oAuth tokens\n   * {@link https://docs.parseplatform.org/rest/guide/#linking-users}\n   *\n   * <code>link(user: Parse.User, authData: Object, options?: FullOptions);</code>\n   *\n   * @function link\n   * @name Parse.FacebookUtils.link\n   * @param {Parse.User} user User to link to Facebook. This must be the\n   *     current user.\n   * @param {(string | object)} permissions The permissions required for Facebook\n   *    log in.  This is a comma-separated string of permissions.\n   *    Alternatively, supply a Facebook authData object as described in our\n   *    REST API docs if you want to handle getting facebook auth tokens\n   *    yourself.\n   * @param {object} options MasterKey / SessionToken. Alternatively can be used for authData if permissions is a string\n   * @returns {Promise}\n   */\n  link: function link(user, permissions, options) {\n    if (!permissions || typeof permissions === 'string') {\n      if (!initialized) {\n        throw new Error('You must initialize FacebookUtils before calling link.');\n      }\n\n      requestedPermissions = permissions;\n      return user.linkWith('facebook', options);\n    }\n\n    return user.linkWith('facebook', {\n      authData: permissions\n    }, options);\n  },\n\n  /**\n   * Unlinks the Parse.User from a Facebook account.\n   *\n   * @function unlink\n   * @name Parse.FacebookUtils.unlink\n   * @param {Parse.User} user User to unlink from Facebook. This must be the\n   *     current user.\n   * @param {object} options Standard options object with success and error\n   *    callbacks.\n   * @returns {Promise}\n   */\n  unlink: function unlink(user, options) {\n    if (!initialized) {\n      throw new Error('You must initialize FacebookUtils before calling unlink.');\n    }\n\n    return user._unlinkFrom('facebook', options);\n  },\n  // Used for testing purposes\n  _getAuthProvider: function _getAuthProvider() {\n    return provider;\n  }\n};\nvar _default = FacebookUtils;\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}