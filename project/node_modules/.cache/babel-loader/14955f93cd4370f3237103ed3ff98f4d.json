{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs3/helpers/interopRequireDefault\");\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs3/core-js-stable/object/define-property\");\n\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = void 0;\n\nvar _isArray = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/array/is-array\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/createClass\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/defineProperty\"));\n\nvar _ParseOp = require(\"./ParseOp\");\n\nvar _ParseObject = _interopRequireDefault(require(\"./ParseObject\"));\n\nvar _ParseQuery = _interopRequireDefault(require(\"./ParseQuery\"));\n/**\r\n * Copyright (c) 2015-present, Parse, LLC.\r\n * All rights reserved.\r\n *\r\n * This source code is licensed under the BSD-style license found in the\r\n * LICENSE file in the root directory of this source tree. An additional grant\r\n * of patent rights can be found in the PATENTS file in the same directory.\r\n *\r\n * @flow\r\n */\n\n/**\r\n * Creates a new Relation for the given parent object and key. This\r\n * constructor should rarely be used directly, but rather created by\r\n * Parse.Object.relation.\r\n *\r\n * <p>\r\n * A class that is used to access all of the children of a many-to-many\r\n * relationship.  Each instance of Parse.Relation is associated with a\r\n * particular parent object and key.\r\n * </p>\r\n *\r\n * @alias Parse.Relation\r\n */\n\n\nvar ParseRelation = /*#__PURE__*/function () {\n  /**\r\n   * @param {Parse.Object} parent The parent of this relation.\r\n   * @param {string} key The key for this relation on the parent.\r\n   */\n  function ParseRelation(parent\n  /*: ?ParseObject*/\n  , key\n  /*: ?string*/\n  ) {\n    (0, _classCallCheck2.default)(this, ParseRelation);\n    (0, _defineProperty2.default)(this, \"parent\", void 0);\n    (0, _defineProperty2.default)(this, \"key\", void 0);\n    (0, _defineProperty2.default)(this, \"targetClassName\", void 0);\n    this.parent = parent;\n    this.key = key;\n    this.targetClassName = null;\n  }\n  /*\r\n   * Makes sure that this relation has the right parent and key.\r\n   */\n\n\n  (0, _createClass2.default)(ParseRelation, [{\n    key: \"_ensureParentAndKey\",\n    value: function (parent\n    /*: ParseObject*/\n    , key\n    /*: string*/\n    ) {\n      this.key = this.key || key;\n\n      if (this.key !== key) {\n        throw new Error('Internal Error. Relation retrieved from two different keys.');\n      }\n\n      if (this.parent) {\n        if (this.parent.className !== parent.className) {\n          throw new Error('Internal Error. Relation retrieved from two different Objects.');\n        }\n\n        if (this.parent.id) {\n          if (this.parent.id !== parent.id) {\n            throw new Error('Internal Error. Relation retrieved from two different Objects.');\n          }\n        } else if (parent.id) {\n          this.parent = parent;\n        }\n      } else {\n        this.parent = parent;\n      }\n    }\n    /**\r\n     * Adds a Parse.Object or an array of Parse.Objects to the relation.\r\n     *\r\n     * @param {(Parse.Object|Array)} objects The item or items to add.\r\n     * @returns {Parse.Object} The parent of the relation.\r\n     */\n\n  }, {\n    key: \"add\",\n    value: function (objects\n    /*: ParseObject | Array<ParseObject | string>*/\n    )\n    /*: ParseObject*/\n    {\n      if (!(0, _isArray.default)(objects)) {\n        objects = [objects];\n      }\n\n      var change = new _ParseOp.RelationOp(objects, []);\n      var parent = this.parent;\n\n      if (!parent) {\n        throw new Error('Cannot add to a Relation without a parent');\n      }\n\n      if (objects.length === 0) {\n        return parent;\n      }\n\n      parent.set(this.key, change);\n      this.targetClassName = change._targetClassName;\n      return parent;\n    }\n    /**\r\n     * Removes a Parse.Object or an array of Parse.Objects from this relation.\r\n     *\r\n     * @param {(Parse.Object|Array)} objects The item or items to remove.\r\n     */\n\n  }, {\n    key: \"remove\",\n    value: function (objects\n    /*: ParseObject | Array<ParseObject | string>*/\n    ) {\n      if (!(0, _isArray.default)(objects)) {\n        objects = [objects];\n      }\n\n      var change = new _ParseOp.RelationOp([], objects);\n\n      if (!this.parent) {\n        throw new Error('Cannot remove from a Relation without a parent');\n      }\n\n      if (objects.length === 0) {\n        return;\n      }\n\n      this.parent.set(this.key, change);\n      this.targetClassName = change._targetClassName;\n    }\n    /**\r\n     * Returns a JSON version of the object suitable for saving to disk.\r\n     *\r\n     * @returns {object} JSON representation of Relation\r\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function ()\n    /*: { __type: 'Relation', className: ?string }*/\n    {\n      return {\n        __type: 'Relation',\n        className: this.targetClassName\n      };\n    }\n    /**\r\n     * Returns a Parse.Query that is limited to objects in this\r\n     * relation.\r\n     *\r\n     * @returns {Parse.Query} Relation Query\r\n     */\n\n  }, {\n    key: \"query\",\n    value: function query()\n    /*: ParseQuery*/\n    {\n      var query;\n      var parent = this.parent;\n\n      if (!parent) {\n        throw new Error('Cannot construct a query for a Relation without a parent');\n      }\n\n      if (!this.targetClassName) {\n        query = new _ParseQuery.default(parent.className);\n        query._extraOptions.redirectClassNameForKey = this.key;\n      } else {\n        query = new _ParseQuery.default(this.targetClassName);\n      }\n\n      query._addCondition('$relatedTo', 'object', {\n        __type: 'Pointer',\n        className: parent.className,\n        objectId: parent.id\n      });\n\n      query._addCondition('$relatedTo', 'key', this.key);\n\n      return query;\n    }\n  }]);\n  return ParseRelation;\n}();\n\nvar _default = ParseRelation;\nexports.default = _default;","map":{"version":3,"names":["_interopRequireDefault","require","_Object$defineProperty","exports","value","default","_isArray","_classCallCheck2","_createClass2","_defineProperty2","_ParseOp","_ParseObject","_ParseQuery","ParseRelation","parent","key","targetClassName","Error","className","id","objects","change","RelationOp","length","set","_targetClassName","__type","query","_extraOptions","redirectClassNameForKey","_addCondition","objectId","_default"],"sources":["C:/Users/brosk/Documents/Web Dev/modern-web-development-project/project/node_modules/parse/lib/browser/ParseRelation.js"],"sourcesContent":["\"use strict\";\r\n\r\nvar _interopRequireDefault = require(\"@babel/runtime-corejs3/helpers/interopRequireDefault\");\r\n\r\nvar _Object$defineProperty = require(\"@babel/runtime-corejs3/core-js-stable/object/define-property\");\r\n\r\n_Object$defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nexports.default = void 0;\r\n\r\nvar _isArray = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/array/is-array\"));\r\n\r\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/classCallCheck\"));\r\n\r\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/createClass\"));\r\n\r\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/defineProperty\"));\r\n\r\nvar _ParseOp = require(\"./ParseOp\");\r\n\r\nvar _ParseObject = _interopRequireDefault(require(\"./ParseObject\"));\r\n\r\nvar _ParseQuery = _interopRequireDefault(require(\"./ParseQuery\"));\r\n/**\r\n * Copyright (c) 2015-present, Parse, LLC.\r\n * All rights reserved.\r\n *\r\n * This source code is licensed under the BSD-style license found in the\r\n * LICENSE file in the root directory of this source tree. An additional grant\r\n * of patent rights can be found in the PATENTS file in the same directory.\r\n *\r\n * @flow\r\n */\r\n\r\n/**\r\n * Creates a new Relation for the given parent object and key. This\r\n * constructor should rarely be used directly, but rather created by\r\n * Parse.Object.relation.\r\n *\r\n * <p>\r\n * A class that is used to access all of the children of a many-to-many\r\n * relationship.  Each instance of Parse.Relation is associated with a\r\n * particular parent object and key.\r\n * </p>\r\n *\r\n * @alias Parse.Relation\r\n */\r\n\r\n\r\nvar ParseRelation = /*#__PURE__*/function () {\r\n  /**\r\n   * @param {Parse.Object} parent The parent of this relation.\r\n   * @param {string} key The key for this relation on the parent.\r\n   */\r\n  function ParseRelation(parent\r\n  /*: ?ParseObject*/\r\n  , key\r\n  /*: ?string*/\r\n  ) {\r\n    (0, _classCallCheck2.default)(this, ParseRelation);\r\n    (0, _defineProperty2.default)(this, \"parent\", void 0);\r\n    (0, _defineProperty2.default)(this, \"key\", void 0);\r\n    (0, _defineProperty2.default)(this, \"targetClassName\", void 0);\r\n    this.parent = parent;\r\n    this.key = key;\r\n    this.targetClassName = null;\r\n  }\r\n  /*\r\n   * Makes sure that this relation has the right parent and key.\r\n   */\r\n\r\n\r\n  (0, _createClass2.default)(ParseRelation, [{\r\n    key: \"_ensureParentAndKey\",\r\n    value: function (parent\r\n    /*: ParseObject*/\r\n    , key\r\n    /*: string*/\r\n    ) {\r\n      this.key = this.key || key;\r\n\r\n      if (this.key !== key) {\r\n        throw new Error('Internal Error. Relation retrieved from two different keys.');\r\n      }\r\n\r\n      if (this.parent) {\r\n        if (this.parent.className !== parent.className) {\r\n          throw new Error('Internal Error. Relation retrieved from two different Objects.');\r\n        }\r\n\r\n        if (this.parent.id) {\r\n          if (this.parent.id !== parent.id) {\r\n            throw new Error('Internal Error. Relation retrieved from two different Objects.');\r\n          }\r\n        } else if (parent.id) {\r\n          this.parent = parent;\r\n        }\r\n      } else {\r\n        this.parent = parent;\r\n      }\r\n    }\r\n    /**\r\n     * Adds a Parse.Object or an array of Parse.Objects to the relation.\r\n     *\r\n     * @param {(Parse.Object|Array)} objects The item or items to add.\r\n     * @returns {Parse.Object} The parent of the relation.\r\n     */\r\n\r\n  }, {\r\n    key: \"add\",\r\n    value: function (objects\r\n    /*: ParseObject | Array<ParseObject | string>*/\r\n    )\r\n    /*: ParseObject*/\r\n    {\r\n      if (!(0, _isArray.default)(objects)) {\r\n        objects = [objects];\r\n      }\r\n\r\n      var change = new _ParseOp.RelationOp(objects, []);\r\n      var parent = this.parent;\r\n\r\n      if (!parent) {\r\n        throw new Error('Cannot add to a Relation without a parent');\r\n      }\r\n\r\n      if (objects.length === 0) {\r\n        return parent;\r\n      }\r\n\r\n      parent.set(this.key, change);\r\n      this.targetClassName = change._targetClassName;\r\n      return parent;\r\n    }\r\n    /**\r\n     * Removes a Parse.Object or an array of Parse.Objects from this relation.\r\n     *\r\n     * @param {(Parse.Object|Array)} objects The item or items to remove.\r\n     */\r\n\r\n  }, {\r\n    key: \"remove\",\r\n    value: function (objects\r\n    /*: ParseObject | Array<ParseObject | string>*/\r\n    ) {\r\n      if (!(0, _isArray.default)(objects)) {\r\n        objects = [objects];\r\n      }\r\n\r\n      var change = new _ParseOp.RelationOp([], objects);\r\n\r\n      if (!this.parent) {\r\n        throw new Error('Cannot remove from a Relation without a parent');\r\n      }\r\n\r\n      if (objects.length === 0) {\r\n        return;\r\n      }\r\n\r\n      this.parent.set(this.key, change);\r\n      this.targetClassName = change._targetClassName;\r\n    }\r\n    /**\r\n     * Returns a JSON version of the object suitable for saving to disk.\r\n     *\r\n     * @returns {object} JSON representation of Relation\r\n     */\r\n\r\n  }, {\r\n    key: \"toJSON\",\r\n    value: function ()\r\n    /*: { __type: 'Relation', className: ?string }*/\r\n    {\r\n      return {\r\n        __type: 'Relation',\r\n        className: this.targetClassName\r\n      };\r\n    }\r\n    /**\r\n     * Returns a Parse.Query that is limited to objects in this\r\n     * relation.\r\n     *\r\n     * @returns {Parse.Query} Relation Query\r\n     */\r\n\r\n  }, {\r\n    key: \"query\",\r\n    value: function query()\r\n    /*: ParseQuery*/\r\n    {\r\n      var query;\r\n      var parent = this.parent;\r\n\r\n      if (!parent) {\r\n        throw new Error('Cannot construct a query for a Relation without a parent');\r\n      }\r\n\r\n      if (!this.targetClassName) {\r\n        query = new _ParseQuery.default(parent.className);\r\n        query._extraOptions.redirectClassNameForKey = this.key;\r\n      } else {\r\n        query = new _ParseQuery.default(this.targetClassName);\r\n      }\r\n\r\n      query._addCondition('$relatedTo', 'object', {\r\n        __type: 'Pointer',\r\n        className: parent.className,\r\n        objectId: parent.id\r\n      });\r\n\r\n      query._addCondition('$relatedTo', 'key', this.key);\r\n\r\n      return query;\r\n    }\r\n  }]);\r\n  return ParseRelation;\r\n}();\r\n\r\nvar _default = ParseRelation;\r\nexports.default = _default;"],"mappings":"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"},"metadata":{},"sourceType":"script"}