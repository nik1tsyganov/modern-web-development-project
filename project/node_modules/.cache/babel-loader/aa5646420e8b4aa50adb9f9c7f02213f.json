{"ast":null,"code":"import _toConsumableArray from \"C:\\\\Users\\\\brosk\\\\Documents\\\\Web Dev\\\\modern-web-development-project\\\\project\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"C:\\\\Users\\\\brosk\\\\Documents\\\\Web Dev\\\\modern-web-development-project\\\\project\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\brosk\\\\Documents\\\\Web Dev\\\\modern-web-development-project\\\\project\\\\src\\\\Components\\\\Comments\\\\CommentList.js\";\n\nimport React, { useState, useEffect } from \"react\";\nimport CommentForm from \"./CommentForm\";\nimport Comment from \"./Comment\";\nimport SearchForm from \"./SearchForm\";\nimport { getComments as getCommentsService, createComment as createCommentService, updateComment as updateCommentService, deleteComment as deleteCommentService } from \"./../../Common/Services/CommentService\";\nimport { getUsername } from \"./../../Common/Services/MentionService\";\nimport { containsWord } from \"./../../Common/Services/SearchService\";\nimport Parse from \"parse\";\n\nvar Comments = function Comments() {\n  // The following state variables keep track of global and root comments in addition to words used in search / filtering\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      comments = _useState2[0],\n      setComments = _useState2[1];\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      activeComment = _useState4[0],\n      setActiveComment = _useState4[1];\n\n  var rootComments = comments.filter(function (comment) {\n    if (comment.attributes !== undefined) {\n      if (comment.attributes.parentId === null) return comment;\n    }\n  });\n\n  var _useState5 = useState([]),\n      _useState6 = _slicedToArray(_useState5, 2),\n      usersForMention = _useState6[0],\n      setUsersForMention = _useState6[1];\n\n  var _useState7 = useState(\"\"),\n      _useState8 = _slicedToArray(_useState7, 2),\n      reduxWord = _useState8[0],\n      setReduxWord = _useState8[1];\n\n  var _useState9 = useState(false),\n      _useState10 = _slicedToArray(_useState9, 2),\n      searchFlag = _useState10[0],\n      setSearchFlag = _useState10[1];\n\n  var _useState11 = useState([]),\n      _useState12 = _slicedToArray(_useState11, 2),\n      filteredIds = _useState12[0],\n      setFilteredIds = _useState12[1]; // We are getting the current user and if he/she isn't logged in we set it to defeault\n\n\n  var currentUser;\n\n  if (Parse.User.current() !== null) {\n    currentUser = Parse.User.current();\n  } else {\n    currentUser = {\n      id: \"0\",\n      attributes: {\n        username: \"Guest\"\n      }\n    };\n  } // Function allows to get replies to the so called root comment and sort them by created date and time\n\n\n  var getReplies = function getReplies(commentId) {\n    return comments.filter(function (comment) {\n      if (comment.attributes !== undefined) {\n        if (comment.attributes.parentId === commentId) {\n          return comment;\n        }\n      }\n    }).sort(function (a, b) {\n      return new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime();\n    });\n  }; // Function allows to add comments at the end of the state variable comments and uses the comments services\n  // the last comment which was just created is added at the end \n\n\n  var addComment = function addComment(text, userId, parentId, username) {\n    createCommentService(text, userId, parentId, username).then(function (comment) {\n      setComments([].concat(_toConsumableArray(comments), [comment]));\n      setActiveComment(null);\n    });\n  }; // The editted comment is updated in place using the desired id of the object and new text\n  // the comment object is changed in place so the order isn't messed up when rendered on the main page\n\n\n  var updateComment = function updateComment(commentId, text) {\n    updateCommentService(commentId, text).then(function (updatedComment) {\n      var updatedComments = comments.map(function (comment) {\n        if (comment.id === updatedComment.id) {\n          return updatedComment;\n        }\n\n        return comment;\n      });\n      setComments(updatedComments);\n      setActiveComment(null);\n    });\n  }; // Here we destroy the comment object and update the state array of comments to ommit the deleted one\n\n\n  var deleteComment = function deleteComment(commentId) {\n    if (window.confirm(\"Are you sure you want to remove comment?\")) {\n      deleteCommentService(commentId).then(function (deletedComment) {\n        var updatedComments = comments.filter(function (comment) {\n          return comment.id !== deletedComment.id;\n        });\n        setComments(updatedComments);\n        setActiveComment(null);\n      });\n    }\n  }; // This is technically not redux but when initially coded we used the redux library\n  // the word the user is looking for is compared to the body of each comment and the ones matching are displayed\n\n\n  var reduxCommentSearch = function reduxCommentSearch(word) {\n    var filteredCommentsIds = [];\n    comments.filter(function (comment) {\n      if (comment.attributes !== undefined) {\n        if (containsWord(comment.attributes.body, word) === true) {\n          filteredCommentsIds.push(comment.id);\n          return comment;\n        }\n      }\n    }); // We update the Ids array as a state variable for each new search \n\n    setFilteredIds(filteredCommentsIds);\n    setSearchFlag(false);\n  }; // Handles the click of the submit button on the search form and sets the flag \n\n\n  var onClickHandler = function onClickHandler(e) {\n    e.preventDefault();\n    setSearchFlag(true);\n  }; // This changes the search word and sets its state variable\n\n\n  var onChangeHandler = function onChangeHandler(e) {\n    e.preventDefault();\n    setReduxWord(e.target.value);\n  }; // Updates the comments array of objects to display the correct list of comments\n\n\n  useEffect(function () {\n    getCommentsService().then(function (data) {\n      setComments(data);\n    }); // Gets all the required user data for the mentions object creation with \"id\" and \"display\"\n\n    getUsername().then(function (results) {\n      var users = results.map(function (result) {\n        return {\n          id: result.attributes.username,\n          display: result.attributes.firstName\n        };\n      });\n      setUsersForMention(users);\n    }); // Checks if the search flag is true to start comment filtering\n\n    if (searchFlag) {\n      reduxCommentSearch(reduxWord);\n    } // If the word is \"\" it will reset the Ids and display all comments\n\n\n    if (reduxWord === \"\") {\n      setFilteredIds([]);\n    }\n  }, [searchFlag, reduxWord]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"comments\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    className: \"comments-search-title\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 13\n    }\n  }, \"Search the comment space\"), /*#__PURE__*/React.createElement(SearchForm, {\n    onSubmitForm: onClickHandler,\n    onChangeForm: onChangeHandler,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"h3\", {\n    className: \"comments-title\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 13\n    }\n  }, \"Comments\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"comments-submit-title\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 13\n    }\n  }, \"Write comment\"), /*#__PURE__*/React.createElement(CommentForm, {\n    submitLabel: \"Comment\",\n    usersForMention: usersForMention,\n    currentUser: currentUser,\n    handleSubmit: function handleSubmit(text) {\n      return addComment(text, currentUser.id, null, currentUser.attributes.username);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"comments-start-of-list\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 13\n    }\n  }, rootComments.map(function (rootComment) {\n    return filteredIds.includes(rootComment.id) || reduxWord === \"\" ? /*#__PURE__*/React.createElement(Comment, {\n      comment: rootComment,\n      key: rootComment.id,\n      setActiveComment: setActiveComment,\n      activeComment: activeComment,\n      currentUser: currentUser,\n      filteredIds: filteredIds,\n      reduxWord: reduxWord,\n      updateComment: updateComment,\n      deleteComment: deleteComment,\n      addComment: addComment,\n      getReplies: getReplies,\n      replies: getReplies(rootComment.id),\n      usersForMention: usersForMention,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 21\n      }\n    }) : /*#__PURE__*/React.createElement(\"div\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 26\n      }\n    });\n  })));\n};\n\nexport default Comments;","map":{"version":3,"names":["React","useState","useEffect","CommentForm","Comment","SearchForm","getComments","getCommentsService","createComment","createCommentService","updateComment","updateCommentService","deleteComment","deleteCommentService","getUsername","containsWord","Parse","Comments","comments","setComments","activeComment","setActiveComment","rootComments","filter","comment","attributes","undefined","parentId","usersForMention","setUsersForMention","reduxWord","setReduxWord","searchFlag","setSearchFlag","filteredIds","setFilteredIds","currentUser","User","current","id","username","getReplies","commentId","sort","a","b","Date","createdAt","getTime","addComment","text","userId","then","updatedComment","updatedComments","map","window","confirm","deletedComment","reduxCommentSearch","word","filteredCommentsIds","body","push","onClickHandler","e","preventDefault","onChangeHandler","target","value","data","results","users","result","display","firstName","rootComment","includes"],"sources":["C:/Users/brosk/Documents/Web Dev/modern-web-development-project/project/src/Components/Comments/CommentList.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport CommentForm from \"./CommentForm\";\r\nimport Comment from \"./Comment\";\r\nimport SearchForm from \"./SearchForm\";\r\nimport {\r\n  getComments as getCommentsService,\r\n  createComment as createCommentService,\r\n  updateComment as updateCommentService,\r\n  deleteComment as deleteCommentService,\r\n} from \"./../../Common/Services/CommentService\";\r\nimport { getUsername } from \"./../../Common/Services/MentionService\";\r\nimport { containsWord } from \"./../../Common/Services/SearchService\";\r\nimport Parse from \"parse\";\r\n\r\nconst Comments = () => {\r\n\r\n    // The following state variables keep track of global and root comments in addition to words used in search / filtering\r\n    const [comments, setComments] = useState([]);\r\n    const [activeComment, setActiveComment] = useState(null);\r\n    const rootComments = comments.filter(\r\n        (comment) => {\r\n            if (comment.attributes  !== undefined) {\r\n                if (comment.attributes.parentId === null)\r\n                    return comment;\r\n            }\r\n        });\r\n    const [usersForMention, setUsersForMention] = useState([]);\r\n    const [reduxWord, setReduxWord] = useState(\"\");\r\n    const [searchFlag, setSearchFlag] = useState(false);\r\n    const [filteredIds, setFilteredIds] = useState([]);\r\n\r\n    // We are getting the current user and if he/she isn't logged in we set it to defeault\r\n    var currentUser;\r\n    if (Parse.User.current() !== null) {\r\n        currentUser = Parse.User.current();\r\n    } else {\r\n        currentUser = {id: \"0\", attributes: {username: \"Guest\"}};\r\n    }\r\n\r\n    // Function allows to get replies to the so called root comment and sort them by created date and time\r\n    const getReplies = (commentId) =>\r\n        comments\r\n        .filter((comment) => {\r\n            if (comment.attributes !== undefined) {\r\n                if (comment.attributes.parentId === commentId) {\r\n                    return comment;\r\n                }\r\n            }\r\n        })\r\n        .sort((a, b) =>\r\n            new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime()\r\n        );\r\n\r\n    // Function allows to add comments at the end of the state variable comments and uses the comments services\r\n    // the last comment which was just created is added at the end \r\n    const addComment = (text, userId, parentId, username) => {\r\n        createCommentService(text, userId, parentId, username).then((comment) => {\r\n        setComments([...comments, comment]);\r\n        setActiveComment(null);\r\n        });\r\n    };\r\n\r\n    // The editted comment is updated in place using the desired id of the object and new text\r\n    // the comment object is changed in place so the order isn't messed up when rendered on the main page\r\n    const updateComment = (commentId, text) => {\r\n        updateCommentService(commentId, text).then((updatedComment) => {\r\n            const updatedComments = comments.map(\r\n                (comment) => {\r\n                    if (comment.id === updatedComment.id) {\r\n                        return updatedComment;\r\n                    }\r\n                    return comment;\r\n                });\r\n            setComments(updatedComments);\r\n            setActiveComment(null);\r\n        });\r\n    };\r\n\r\n    // Here we destroy the comment object and update the state array of comments to ommit the deleted one\r\n    const deleteComment = (commentId) => {\r\n        if (window.confirm(\"Are you sure you want to remove comment?\")) {\r\n            deleteCommentService(commentId).then((deletedComment) => {\r\n                const updatedComments = comments.filter(\r\n                (comment) => comment.id !== deletedComment.id\r\n                );\r\n                setComments(updatedComments);\r\n                setActiveComment(null);\r\n            });\r\n        }\r\n    };\r\n\r\n    // This is technically not redux but when initially coded we used the redux library\r\n    // the word the user is looking for is compared to the body of each comment and the ones matching are displayed\r\n    const reduxCommentSearch = (word) => {\r\n        var filteredCommentsIds = [];\r\n        comments\r\n        .filter((comment) =>  {\r\n            if (comment.attributes !== undefined) {\r\n                if (containsWord(comment.attributes.body, word) === true) {\r\n                    filteredCommentsIds.push(comment.id);\r\n                    return comment;\r\n                }\r\n            }\r\n        })\r\n        // We update the Ids array as a state variable for each new search \r\n        setFilteredIds(filteredCommentsIds);\r\n        setSearchFlag(false);\r\n    }\r\n\r\n    // Handles the click of the submit button on the search form and sets the flag \r\n    const onClickHandler = (e) => {\r\n        e.preventDefault();\r\n        setSearchFlag(true);\r\n      };\r\n  \r\n    // This changes the search word and sets its state variable\r\n    const onChangeHandler = (e) => {\r\n        e.preventDefault();\r\n        setReduxWord(e.target.value);\r\n    };\r\n\r\n    // Updates the comments array of objects to display the correct list of comments\r\n    useEffect(() => {\r\n        getCommentsService().then((data) => {\r\n            setComments(data);\r\n        });\r\n        // Gets all the required user data for the mentions object creation with \"id\" and \"display\"\r\n        getUsername().then((results) => {\r\n            var users = results.map((result) => {\r\n                return {id: result.attributes.username, display: result.attributes.firstName}\r\n            });\r\n            setUsersForMention(users);\r\n        })\r\n        // Checks if the search flag is true to start comment filtering\r\n        if (searchFlag) {\r\n            reduxCommentSearch(reduxWord);\r\n        }\r\n        // If the word is \"\" it will reset the Ids and display all comments\r\n        if (reduxWord === \"\") {\r\n            setFilteredIds([]);\r\n        }\r\n    }, [searchFlag, reduxWord]);\r\n    \r\n    return (\r\n        <div className=\"comments\">\r\n            {/* The Search Form */}\r\n            <h3 className=\"comments-search-title\">Search the comment space</h3>\r\n            <SearchForm onSubmitForm={onClickHandler} onChangeForm={onChangeHandler} />\r\n            <br />\r\n            {/* Comment form is created to set the comments and get the textarea value including the mentions */}\r\n            <h3 className=\"comments-title\">Comments</h3>\r\n            <div className=\"comments-submit-title\">Write comment</div>\r\n            <CommentForm \r\n                submitLabel=\"Comment\" \r\n                usersForMention={usersForMention} \r\n                currentUser={currentUser} \r\n                handleSubmit={(text) => addComment(text, currentUser.id, null, currentUser.attributes.username)} \r\n            />\r\n            <div className=\"comments-start-of-list\">\r\n                {/* The root comments are filtered and displayed depending on which Ids were selected by the search function */}\r\n                {/* Else nothing is displayed or everything is if the search word is empty */}\r\n                {rootComments.map((rootComment) => (\r\n                    (filteredIds.includes(rootComment.id) || (reduxWord === \"\")) ? \r\n                    <Comment\r\n                        comment={rootComment}\r\n                        key={rootComment.id}\r\n                        setActiveComment={setActiveComment}\r\n                        activeComment={activeComment}\r\n                        currentUser={currentUser}\r\n                        filteredIds={filteredIds}\r\n                        reduxWord={reduxWord}\r\n                        updateComment={updateComment}\r\n                        deleteComment={deleteComment}\r\n                        addComment={addComment}\r\n                        getReplies={getReplies}\r\n                        replies={getReplies(rootComment.id)}\r\n                        usersForMention={usersForMention}\r\n                    /> : <div></div>\r\n                ))}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Comments;"],"mappings":"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"},"metadata":{},"sourceType":"module"}