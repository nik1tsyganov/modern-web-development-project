{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs3/helpers/interopRequireDefault\");\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs3/core-js-stable/object/define-property\");\n\nvar _Object$defineProperties = require(\"@babel/runtime-corejs3/core-js-stable/object/define-properties\");\n\nvar _Object$getOwnPropertyDescriptors = require(\"@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptors\");\n\nvar _forEachInstanceProperty = require(\"@babel/runtime-corejs3/core-js-stable/instance/for-each\");\n\nvar _Object$getOwnPropertyDescriptor = require(\"@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor\");\n\nvar _filterInstanceProperty = require(\"@babel/runtime-corejs3/core-js-stable/instance/filter\");\n\nvar _Object$getOwnPropertySymbols = require(\"@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols\");\n\nvar _Object$keys = require(\"@babel/runtime-corejs3/core-js-stable/object/keys\");\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/defineProperty\"));\n\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/typeof\"));\n\nvar _setTimeout2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/set-timeout\"));\n\nvar _includes = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/includes\"));\n\nvar _stringify = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/json/stringify\"));\n\nvar _promise = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/promise\"));\n\nvar _CoreManager = _interopRequireDefault(require(\"./CoreManager\"));\n\nvar _ParseError = _interopRequireDefault(require(\"./ParseError\"));\n\nvar _promiseUtils = require(\"./promiseUtils\");\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = _Object$keys(object);\n\n  if (_Object$getOwnPropertySymbols) {\n    var symbols = _Object$getOwnPropertySymbols(object);\n\n    enumerableOnly && (symbols = _filterInstanceProperty(symbols).call(symbols, function (sym) {\n      return _Object$getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var _context4, _context5;\n\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? _forEachInstanceProperty(_context4 = ownKeys(Object(source), !0)).call(_context4, function (key) {\n      (0, _defineProperty2.default)(target, key, source[key]);\n    }) : _Object$getOwnPropertyDescriptors ? _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)) : _forEachInstanceProperty(_context5 = ownKeys(Object(source))).call(_context5, function (key) {\n      _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n/**\n * Copyright (c) 2015-present, Parse, LLC.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @flow\n */\n\n/* global XMLHttpRequest, XDomainRequest */\n\n\nvar uuidv4 = require('./uuid');\n\nvar XHR = null;\n\nif (typeof XMLHttpRequest !== 'undefined') {\n  XHR = XMLHttpRequest;\n}\n\nvar useXDomainRequest = false;\n\nif (typeof XDomainRequest !== 'undefined' && !('withCredentials' in new XMLHttpRequest())) {\n  useXDomainRequest = true;\n}\n\nfunction ajaxIE9(method\n/*: string*/\n, url\n/*: string*/\n, data\n/*: any*/\n, headers\n/*:: ?: any*/\n, options\n/*:: ?: FullOptions*/\n) {\n  return new _promise.default(function (resolve, reject) {\n    var xdr = new XDomainRequest();\n\n    xdr.onload = function () {\n      var response;\n\n      try {\n        response = JSON.parse(xdr.responseText);\n      } catch (e) {\n        reject(e);\n      }\n\n      if (response) {\n        resolve({\n          response: response\n        });\n      }\n    };\n\n    xdr.onerror = xdr.ontimeout = function () {\n      // Let's fake a real error message.\n      var fakeResponse = {\n        responseText: (0, _stringify.default)({\n          code: _ParseError.default.X_DOMAIN_REQUEST,\n          error: \"IE's XDomainRequest does not supply error info.\"\n        })\n      };\n      reject(fakeResponse);\n    };\n\n    xdr.onprogress = function () {\n      if (options && typeof options.progress === 'function') {\n        options.progress(xdr.responseText);\n      }\n    };\n\n    xdr.open(method, url);\n    xdr.send(data);\n\n    if (options && typeof options.requestTask === 'function') {\n      options.requestTask(xdr);\n    }\n  });\n}\n\nvar RESTController = {\n  ajax: function ajax(method\n  /*: string*/\n  , url\n  /*: string*/\n  , data\n  /*: any*/\n  , headers\n  /*:: ?: any*/\n  , options\n  /*:: ?: FullOptions*/\n  ) {\n    var _context;\n\n    if (useXDomainRequest) {\n      return ajaxIE9(method, url, data, headers, options);\n    }\n\n    var promise = (0, _promiseUtils.resolvingPromise)();\n    var isIdempotent = _CoreManager.default.get('IDEMPOTENCY') && (0, _includes.default)(_context = ['POST', 'PUT']).call(_context, method);\n    var requestId = isIdempotent ? uuidv4() : '';\n    var attempts = 0;\n\n    var dispatch = function dispatch() {\n      if (XHR == null) {\n        throw new Error('Cannot make a request: No definition of XMLHttpRequest was found.');\n      }\n\n      var handled = false;\n      var xhr = new XHR();\n\n      xhr.onreadystatechange = function () {\n        if (xhr.readyState !== 4 || handled || xhr._aborted) {\n          return;\n        }\n\n        handled = true;\n\n        if (xhr.status >= 200 && xhr.status < 300) {\n          var response;\n\n          try {\n            response = JSON.parse(xhr.responseText);\n\n            if (typeof xhr.getResponseHeader === 'function') {\n              var _context2, _context3;\n\n              if ((0, _includes.default)(_context2 = xhr.getAllResponseHeaders() || '').call(_context2, 'x-parse-job-status-id: ')) {\n                response = xhr.getResponseHeader('x-parse-job-status-id');\n              }\n\n              if ((0, _includes.default)(_context3 = xhr.getAllResponseHeaders() || '').call(_context3, 'x-parse-push-status-id: ')) {\n                response = xhr.getResponseHeader('x-parse-push-status-id');\n              }\n            }\n          } catch (e) {\n            promise.reject(e.toString());\n          }\n\n          if (response) {\n            promise.resolve({\n              response: response,\n              status: xhr.status,\n              xhr: xhr\n            });\n          }\n        } else if (xhr.status >= 500 || xhr.status === 0) {\n          // retry on 5XX or node-xmlhttprequest error\n          if (++attempts < _CoreManager.default.get('REQUEST_ATTEMPT_LIMIT')) {\n            // Exponentially-growing random delay\n            var delay = Math.round(Math.random() * 125 * Math.pow(2, attempts));\n            (0, _setTimeout2.default)(dispatch, delay);\n          } else if (xhr.status === 0) {\n            promise.reject('Unable to connect to the Parse API');\n          } else {\n            // After the retry limit is reached, fail\n            promise.reject(xhr);\n          }\n        } else {\n          promise.reject(xhr);\n        }\n      };\n\n      headers = headers || {};\n\n      if (typeof headers['Content-Type'] !== 'string') {\n        headers['Content-Type'] = 'text/plain'; // Avoid pre-flight\n      }\n\n      if (_CoreManager.default.get('IS_NODE')) {\n        headers['User-Agent'] = 'Parse/' + _CoreManager.default.get('VERSION') + ' (NodeJS ' + process.versions.node + ')';\n      }\n\n      if (isIdempotent) {\n        headers['X-Parse-Request-Id'] = requestId;\n      }\n\n      if (_CoreManager.default.get('SERVER_AUTH_TYPE') && _CoreManager.default.get('SERVER_AUTH_TOKEN')) {\n        headers['Authorization'] = _CoreManager.default.get('SERVER_AUTH_TYPE') + ' ' + _CoreManager.default.get('SERVER_AUTH_TOKEN');\n      }\n\n      var customHeaders = _CoreManager.default.get('REQUEST_HEADERS');\n\n      for (var key in customHeaders) {\n        headers[key] = customHeaders[key];\n      }\n\n      function handleProgress(type, event) {\n        if (options && typeof options.progress === 'function') {\n          if (event.lengthComputable) {\n            options.progress(event.loaded / event.total, event.loaded, event.total, {\n              type: type\n            });\n          } else {\n            options.progress(null, null, null, {\n              type: type\n            });\n          }\n        }\n      }\n\n      xhr.onprogress = function (event) {\n        handleProgress('download', event);\n      };\n\n      if (xhr.upload) {\n        xhr.upload.onprogress = function (event) {\n          handleProgress('upload', event);\n        };\n      }\n\n      xhr.open(method, url, true);\n\n      for (var h in headers) {\n        xhr.setRequestHeader(h, headers[h]);\n      }\n\n      xhr.onabort = function () {\n        promise.resolve({\n          response: {\n            results: []\n          },\n          status: 0,\n          xhr: xhr\n        });\n      };\n\n      xhr.send(data);\n\n      if (options && typeof options.requestTask === 'function') {\n        options.requestTask(xhr);\n      }\n    };\n\n    dispatch();\n    return promise;\n  },\n  request: function request(method\n  /*: string*/\n  , path\n  /*: string*/\n  , data\n  /*: mixed*/\n  , options\n  /*:: ?: RequestOptions*/\n  ) {\n    options = options || {};\n\n    var url = _CoreManager.default.get('SERVER_URL');\n\n    if (url[url.length - 1] !== '/') {\n      url += '/';\n    }\n\n    url += path;\n    var payload = {};\n\n    if (data && (0, _typeof2.default)(data) === 'object') {\n      for (var k in data) {\n        payload[k] = data[k];\n      }\n    } // Add context\n\n\n    var context = options.context;\n\n    if (context !== undefined) {\n      payload._context = context;\n    }\n\n    if (method !== 'POST') {\n      payload._method = method;\n      method = 'POST';\n    }\n\n    payload._ApplicationId = _CoreManager.default.get('APPLICATION_ID');\n\n    var jsKey = _CoreManager.default.get('JAVASCRIPT_KEY');\n\n    if (jsKey) {\n      payload._JavaScriptKey = jsKey;\n    }\n\n    payload._ClientVersion = _CoreManager.default.get('VERSION');\n    var useMasterKey = options.useMasterKey;\n\n    if (typeof useMasterKey === 'undefined') {\n      useMasterKey = _CoreManager.default.get('USE_MASTER_KEY');\n    }\n\n    if (useMasterKey) {\n      if (_CoreManager.default.get('MASTER_KEY')) {\n        delete payload._JavaScriptKey;\n        payload._MasterKey = _CoreManager.default.get('MASTER_KEY');\n      } else {\n        throw new Error('Cannot use the Master Key, it has not been provided.');\n      }\n    }\n\n    if (_CoreManager.default.get('FORCE_REVOCABLE_SESSION')) {\n      payload._RevocableSession = '1';\n    }\n\n    var installationId = options.installationId;\n    var installationIdPromise;\n\n    if (installationId && typeof installationId === 'string') {\n      installationIdPromise = _promise.default.resolve(installationId);\n    } else {\n      var installationController = _CoreManager.default.getInstallationController();\n\n      installationIdPromise = installationController.currentInstallationId();\n    }\n\n    return installationIdPromise.then(function (iid) {\n      payload._InstallationId = iid;\n\n      var userController = _CoreManager.default.getUserController();\n\n      if (options && typeof options.sessionToken === 'string') {\n        return _promise.default.resolve(options.sessionToken);\n      } else if (userController) {\n        return userController.currentUserAsync().then(function (user) {\n          if (user) {\n            return _promise.default.resolve(user.getSessionToken());\n          }\n\n          return _promise.default.resolve(null);\n        });\n      }\n\n      return _promise.default.resolve(null);\n    }).then(function (token) {\n      if (token) {\n        payload._SessionToken = token;\n      }\n\n      var payloadString = (0, _stringify.default)(payload);\n      return RESTController.ajax(method, url, payloadString, {}, options).then(function (_ref) {\n        var response = _ref.response,\n            status = _ref.status;\n\n        if (options.returnStatus) {\n          return _objectSpread(_objectSpread({}, response), {}, {\n            _status: status\n          });\n        } else {\n          return response;\n        }\n      });\n    }).catch(RESTController.handleError);\n  },\n  handleError: function handleError(response) {\n    // Transform the error into an instance of ParseError by trying to parse\n    // the error string as JSON\n    var error;\n\n    if (response && response.responseText) {\n      try {\n        var errorJSON = JSON.parse(response.responseText);\n        error = new _ParseError.default(errorJSON.code, errorJSON.error);\n      } catch (e) {\n        // If we fail to parse the error text, that's okay.\n        error = new _ParseError.default(_ParseError.default.INVALID_JSON, 'Received an error with invalid JSON from Parse: ' + response.responseText);\n      }\n    } else {\n      var message = response.message ? response.message : response;\n      error = new _ParseError.default(_ParseError.default.CONNECTION_FAILED, 'XMLHttpRequest failed: ' + (0, _stringify.default)(message));\n    }\n\n    return _promise.default.reject(error);\n  },\n  _setXHR: function _setXHR(xhr\n  /*: any*/\n  ) {\n    XHR = xhr;\n  },\n  _getXHR: function _getXHR() {\n    return XHR;\n  }\n};\nmodule.exports = RESTController;","map":null,"metadata":{},"sourceType":"script"}