{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs3/helpers/interopRequireDefault\");\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs3/core-js-stable/object/define-property\");\n\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = void 0;\n\nvar _isArray = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/array/is-array\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/createClass\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/defineProperty\"));\n\nvar _ParseOp = require(\"./ParseOp\");\n\nvar _ParseObject = _interopRequireDefault(require(\"./ParseObject\"));\n\nvar _ParseQuery = _interopRequireDefault(require(\"./ParseQuery\"));\n/**\n * Copyright (c) 2015-present, Parse, LLC.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @flow\n */\n\n/**\n * Creates a new Relation for the given parent object and key. This\n * constructor should rarely be used directly, but rather created by\n * Parse.Object.relation.\n *\n * <p>\n * A class that is used to access all of the children of a many-to-many\n * relationship.  Each instance of Parse.Relation is associated with a\n * particular parent object and key.\n * </p>\n *\n * @alias Parse.Relation\n */\n\n\nvar ParseRelation = /*#__PURE__*/function () {\n  /**\n   * @param {Parse.Object} parent The parent of this relation.\n   * @param {string} key The key for this relation on the parent.\n   */\n  function ParseRelation(parent\n  /*: ?ParseObject*/\n  , key\n  /*: ?string*/\n  ) {\n    (0, _classCallCheck2.default)(this, ParseRelation);\n    (0, _defineProperty2.default)(this, \"parent\", void 0);\n    (0, _defineProperty2.default)(this, \"key\", void 0);\n    (0, _defineProperty2.default)(this, \"targetClassName\", void 0);\n    this.parent = parent;\n    this.key = key;\n    this.targetClassName = null;\n  }\n  /*\n   * Makes sure that this relation has the right parent and key.\n   */\n\n\n  (0, _createClass2.default)(ParseRelation, [{\n    key: \"_ensureParentAndKey\",\n    value: function value(parent\n    /*: ParseObject*/\n    , key\n    /*: string*/\n    ) {\n      this.key = this.key || key;\n\n      if (this.key !== key) {\n        throw new Error('Internal Error. Relation retrieved from two different keys.');\n      }\n\n      if (this.parent) {\n        if (this.parent.className !== parent.className) {\n          throw new Error('Internal Error. Relation retrieved from two different Objects.');\n        }\n\n        if (this.parent.id) {\n          if (this.parent.id !== parent.id) {\n            throw new Error('Internal Error. Relation retrieved from two different Objects.');\n          }\n        } else if (parent.id) {\n          this.parent = parent;\n        }\n      } else {\n        this.parent = parent;\n      }\n    }\n    /**\n     * Adds a Parse.Object or an array of Parse.Objects to the relation.\n     *\n     * @param {(Parse.Object|Array)} objects The item or items to add.\n     * @returns {Parse.Object} The parent of the relation.\n     */\n\n  }, {\n    key: \"add\",\n    value: function value(objects\n    /*: ParseObject | Array<ParseObject | string>*/\n    )\n    /*: ParseObject*/\n    {\n      if (!(0, _isArray.default)(objects)) {\n        objects = [objects];\n      }\n\n      var change = new _ParseOp.RelationOp(objects, []);\n      var parent = this.parent;\n\n      if (!parent) {\n        throw new Error('Cannot add to a Relation without a parent');\n      }\n\n      if (objects.length === 0) {\n        return parent;\n      }\n\n      parent.set(this.key, change);\n      this.targetClassName = change._targetClassName;\n      return parent;\n    }\n    /**\n     * Removes a Parse.Object or an array of Parse.Objects from this relation.\n     *\n     * @param {(Parse.Object|Array)} objects The item or items to remove.\n     */\n\n  }, {\n    key: \"remove\",\n    value: function value(objects\n    /*: ParseObject | Array<ParseObject | string>*/\n    ) {\n      if (!(0, _isArray.default)(objects)) {\n        objects = [objects];\n      }\n\n      var change = new _ParseOp.RelationOp([], objects);\n\n      if (!this.parent) {\n        throw new Error('Cannot remove from a Relation without a parent');\n      }\n\n      if (objects.length === 0) {\n        return;\n      }\n\n      this.parent.set(this.key, change);\n      this.targetClassName = change._targetClassName;\n    }\n    /**\n     * Returns a JSON version of the object suitable for saving to disk.\n     *\n     * @returns {object} JSON representation of Relation\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function value()\n    /*: { __type: 'Relation', className: ?string }*/\n    {\n      return {\n        __type: 'Relation',\n        className: this.targetClassName\n      };\n    }\n    /**\n     * Returns a Parse.Query that is limited to objects in this\n     * relation.\n     *\n     * @returns {Parse.Query} Relation Query\n     */\n\n  }, {\n    key: \"query\",\n    value: function query()\n    /*: ParseQuery*/\n    {\n      var query;\n      var parent = this.parent;\n\n      if (!parent) {\n        throw new Error('Cannot construct a query for a Relation without a parent');\n      }\n\n      if (!this.targetClassName) {\n        query = new _ParseQuery.default(parent.className);\n        query._extraOptions.redirectClassNameForKey = this.key;\n      } else {\n        query = new _ParseQuery.default(this.targetClassName);\n      }\n\n      query._addCondition('$relatedTo', 'object', {\n        __type: 'Pointer',\n        className: parent.className,\n        objectId: parent.id\n      });\n\n      query._addCondition('$relatedTo', 'key', this.key);\n\n      return query;\n    }\n  }]);\n  return ParseRelation;\n}();\n\nvar _default = ParseRelation;\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}