{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs3/helpers/interopRequireDefault\");\n\nvar _Object$defineProperty2 = require(\"@babel/runtime-corejs3/core-js-stable/object/define-property\");\n\nvar _Reflect$construct = require(\"@babel/runtime-corejs3/core-js-stable/reflect/construct\");\n\n_Object$defineProperty2(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = void 0;\n\nvar _stringify = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/json/stringify\"));\n\nvar _defineProperty = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/object/define-property\"));\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime-corejs3/regenerator\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/asyncToGenerator\"));\n\nvar _promise = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/promise\"));\n\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/typeof\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/createClass\"));\n\nvar _get2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/get\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/getPrototypeOf\"));\n\nvar _CoreManager = _interopRequireDefault(require(\"./CoreManager\"));\n\nvar _isRevocableSession = _interopRequireDefault(require(\"./isRevocableSession\"));\n\nvar _ParseError = _interopRequireDefault(require(\"./ParseError\"));\n\nvar _ParseObject2 = _interopRequireDefault(require(\"./ParseObject\"));\n\nvar _ParseSession = _interopRequireDefault(require(\"./ParseSession\"));\n\nvar _Storage = _interopRequireDefault(require(\"./Storage\"));\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function () {\n    var Super = (0, _getPrototypeOf2.default)(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;\n      result = _Reflect$construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return (0, _possibleConstructorReturn2.default)(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !_Reflect$construct) return false;\n  if (_Reflect$construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(_Reflect$construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nvar CURRENT_USER_KEY = 'currentUser';\nvar canUseCurrentUser = !_CoreManager.default.get('IS_NODE');\nvar currentUserCacheMatchesDisk = false;\nvar currentUserCache = null;\nvar authProviders = {};\n/**\n * <p>A Parse.User object is a local representation of a user persisted to the\n * Parse cloud. This class is a subclass of a Parse.Object, and retains the\n * same functionality of a Parse.Object, but also extends it with various\n * user specific methods, like authentication, signing up, and validation of\n * uniqueness.</p>\n *\n * @alias Parse.User\n * @augments Parse.Object\n */\n\nvar ParseUser = /*#__PURE__*/function (_ParseObject) {\n  (0, _inherits2.default)(ParseUser, _ParseObject);\n\n  var _super = _createSuper(ParseUser);\n  /**\n   * @param {object} attributes The initial set of data to store in the user.\n   */\n\n\n  function ParseUser(attributes\n  /*: ?AttributeMap*/\n  ) {\n    var _this;\n\n    (0, _classCallCheck2.default)(this, ParseUser);\n    _this = _super.call(this, '_User');\n\n    if (attributes && (0, _typeof2.default)(attributes) === 'object') {\n      if (!_this.set(attributes || {})) {\n        throw new Error(\"Can't create an invalid Parse User\");\n      }\n    }\n\n    return _this;\n  }\n  /**\n   * Request a revocable session token to replace the older style of token.\n   *\n   * @param {object} options\n   * @returns {Promise} A promise that is resolved when the replacement\n   *   token has been fetched.\n   */\n\n\n  (0, _createClass2.default)(ParseUser, [{\n    key: \"_upgradeToRevocableSession\",\n    value: function (options\n    /*: RequestOptions*/\n    )\n    /*: Promise<void>*/\n    {\n      options = options || {};\n      var upgradeOptions = {};\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        upgradeOptions.useMasterKey = options.useMasterKey;\n      }\n\n      var controller = _CoreManager.default.getUserController();\n\n      return controller.upgradeToRevocableSession(this, upgradeOptions);\n    }\n    /**\n     * Parse allows you to link your users with {@link https://docs.parseplatform.org/parse-server/guide/#oauth-and-3rd-party-authentication 3rd party authentication}, enabling\n     * your users to sign up or log into your application using their existing identities.\n     * Since 2.9.0\n     *\n     * @see {@link https://docs.parseplatform.org/js/guide/#linking-users Linking Users}\n     * @param {string | AuthProvider} provider Name of auth provider or {@link https://parseplatform.org/Parse-SDK-JS/api/master/AuthProvider.html AuthProvider}\n     * @param {object} options\n     * <ul>\n     *   <li>If provider is string, options is {@link http://docs.parseplatform.org/parse-server/guide/#supported-3rd-party-authentications authData}\n     *   <li>If provider is AuthProvider, options is saveOpts\n     * </ul>\n     * @param {object} saveOpts useMasterKey / sessionToken\n     * @returns {Promise} A promise that is fulfilled with the user is linked\n     */\n\n  }, {\n    key: \"linkWith\",\n    value: function (provider\n    /*: any*/\n    , options\n    /*: { authData?: AuthData }*/\n    )\n    /*: Promise<ParseUser>*/\n    {\n      var _this2 = this;\n\n      var saveOpts\n      /*:: ?: FullOptions*/\n      = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      saveOpts.sessionToken = saveOpts.sessionToken || this.getSessionToken() || '';\n      var authType;\n\n      if (typeof provider === 'string') {\n        authType = provider;\n\n        if (authProviders[provider]) {\n          provider = authProviders[provider];\n        } else {\n          var authProvider = {\n            restoreAuthentication: function () {\n              return true;\n            },\n            getAuthType: function () {\n              return authType;\n            }\n          };\n          authProviders[authProvider.getAuthType()] = authProvider;\n          provider = authProvider;\n        }\n      } else {\n        authType = provider.getAuthType();\n      }\n\n      if (options && options.hasOwnProperty('authData')) {\n        var authData = this.get('authData') || {};\n\n        if ((0, _typeof2.default)(authData) !== 'object') {\n          throw new Error('Invalid type: authData field should be an object');\n        }\n\n        authData[authType] = options.authData;\n\n        var controller = _CoreManager.default.getUserController();\n\n        return controller.linkWith(this, authData, saveOpts);\n      } else {\n        return new _promise.default(function (resolve, reject) {\n          provider.authenticate({\n            success: function (provider, result) {\n              var opts = {};\n              opts.authData = result;\n\n              _this2.linkWith(provider, opts, saveOpts).then(function () {\n                resolve(_this2);\n              }, function (error) {\n                reject(error);\n              });\n            },\n            error: function (provider, _error) {\n              reject(_error);\n            }\n          });\n        });\n      }\n    }\n    /**\n     * @param provider\n     * @param options\n     * @param saveOpts\n     * @deprecated since 2.9.0 see {@link https://parseplatform.org/Parse-SDK-JS/api/master/Parse.User.html#linkWith linkWith}\n     * @returns {Promise}\n     */\n\n  }, {\n    key: \"_linkWith\",\n    value: function (provider\n    /*: any*/\n    , options\n    /*: { authData?: AuthData }*/\n    )\n    /*: Promise<ParseUser>*/\n    {\n      var saveOpts\n      /*:: ?: FullOptions*/\n      = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      return this.linkWith(provider, options, saveOpts);\n    }\n    /**\n     * Synchronizes auth data for a provider (e.g. puts the access token in the\n     * right place to be used by the Facebook SDK).\n     *\n     * @param provider\n     */\n\n  }, {\n    key: \"_synchronizeAuthData\",\n    value: function (provider\n    /*: string*/\n    ) {\n      if (!this.isCurrent() || !provider) {\n        return;\n      }\n\n      var authType;\n\n      if (typeof provider === 'string') {\n        authType = provider;\n        provider = authProviders[authType];\n      } else {\n        authType = provider.getAuthType();\n      }\n\n      var authData = this.get('authData');\n\n      if (!provider || !authData || (0, _typeof2.default)(authData) !== 'object') {\n        return;\n      }\n\n      var success = provider.restoreAuthentication(authData[authType]);\n\n      if (!success) {\n        this._unlinkFrom(provider);\n      }\n    }\n    /**\n     * Synchronizes authData for all providers.\n     */\n\n  }, {\n    key: \"_synchronizeAllAuthData\",\n    value: function () {\n      var authData = this.get('authData');\n\n      if ((0, _typeof2.default)(authData) !== 'object') {\n        return;\n      }\n\n      for (var _key in authData) {\n        this._synchronizeAuthData(_key);\n      }\n    }\n    /**\n     * Removes null values from authData (which exist temporarily for unlinking)\n     */\n\n  }, {\n    key: \"_cleanupAuthData\",\n    value: function () {\n      if (!this.isCurrent()) {\n        return;\n      }\n\n      var authData = this.get('authData');\n\n      if ((0, _typeof2.default)(authData) !== 'object') {\n        return;\n      }\n\n      for (var _key2 in authData) {\n        if (!authData[_key2]) {\n          delete authData[_key2];\n        }\n      }\n    }\n    /**\n     * Unlinks a user from a service.\n     *\n     * @param {string | AuthProvider} provider Name of auth provider or {@link https://parseplatform.org/Parse-SDK-JS/api/master/AuthProvider.html AuthProvider}\n     * @param {object} options MasterKey / SessionToken\n     * @returns {Promise} A promise that is fulfilled when the unlinking\n     *     finishes.\n     */\n\n  }, {\n    key: \"_unlinkFrom\",\n    value: function (provider\n    /*: any*/\n    , options\n    /*:: ?: FullOptions*/\n    )\n    /*: Promise<ParseUser>*/\n    {\n      var _this3 = this;\n\n      return this.linkWith(provider, {\n        authData: null\n      }, options).then(function () {\n        _this3._synchronizeAuthData(provider);\n\n        return _promise.default.resolve(_this3);\n      });\n    }\n    /**\n     * Checks whether a user is linked to a service.\n     *\n     * @param {object} provider service to link to\n     * @returns {boolean} true if link was successful\n     */\n\n  }, {\n    key: \"_isLinked\",\n    value: function (provider\n    /*: any*/\n    )\n    /*: boolean*/\n    {\n      var authType;\n\n      if (typeof provider === 'string') {\n        authType = provider;\n      } else {\n        authType = provider.getAuthType();\n      }\n\n      var authData = this.get('authData') || {};\n\n      if ((0, _typeof2.default)(authData) !== 'object') {\n        return false;\n      }\n\n      return !!authData[authType];\n    }\n    /**\n     * Deauthenticates all providers.\n     */\n\n  }, {\n    key: \"_logOutWithAll\",\n    value: function () {\n      var authData = this.get('authData');\n\n      if ((0, _typeof2.default)(authData) !== 'object') {\n        return;\n      }\n\n      for (var _key3 in authData) {\n        this._logOutWith(_key3);\n      }\n    }\n    /**\n     * Deauthenticates a single provider (e.g. removing access tokens from the\n     * Facebook SDK).\n     *\n     * @param {object} provider service to logout of\n     */\n\n  }, {\n    key: \"_logOutWith\",\n    value: function (provider\n    /*: any*/\n    ) {\n      if (!this.isCurrent()) {\n        return;\n      }\n\n      if (typeof provider === 'string') {\n        provider = authProviders[provider];\n      }\n\n      if (provider && provider.deauthenticate) {\n        provider.deauthenticate();\n      }\n    }\n    /**\n     * Class instance method used to maintain specific keys when a fetch occurs.\n     * Used to ensure that the session token is not lost.\n     *\n     * @returns {object} sessionToken\n     */\n\n  }, {\n    key: \"_preserveFieldsOnFetch\",\n    value: function ()\n    /*: AttributeMap*/\n    {\n      return {\n        sessionToken: this.get('sessionToken')\n      };\n    }\n    /**\n     * Returns true if <code>current</code> would return this user.\n     *\n     * @returns {boolean} true if user is cached on disk\n     */\n\n  }, {\n    key: \"isCurrent\",\n    value: function ()\n    /*: boolean*/\n    {\n      var current = ParseUser.current();\n      return !!current && current.id === this.id;\n    }\n    /**\n     * Returns true if <code>current</code> would return this user.\n     *\n     * @returns {Promise<boolean>} true if user is cached on disk\n     */\n\n  }, {\n    key: \"isCurrentAsync\",\n    value: function () {\n      var _isCurrentAsync = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee() {\n        var current;\n        return _regenerator.default.wrap(function (_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return ParseUser.currentAsync();\n\n              case 2:\n                current = _context.sent;\n                return _context.abrupt(\"return\", !!current && current.id === this.id);\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function () {\n        return _isCurrentAsync.apply(this, arguments);\n      };\n    }()\n    /**\n     * Returns get(\"username\").\n     *\n     * @returns {string}\n     */\n\n  }, {\n    key: \"getUsername\",\n    value: function ()\n    /*: ?string*/\n    {\n      var username = this.get('username');\n\n      if (username == null || typeof username === 'string') {\n        return username;\n      }\n\n      return '';\n    }\n    /**\n     * Calls set(\"username\", username, options) and returns the result.\n     *\n     * @param {string} username\n     */\n\n  }, {\n    key: \"setUsername\",\n    value: function (username\n    /*: string*/\n    ) {\n      // Strip anonymity\n      var authData = this.get('authData');\n\n      if (authData && (0, _typeof2.default)(authData) === 'object' && authData.hasOwnProperty('anonymous')) {\n        // We need to set anonymous to null instead of deleting it in order to remove it from Parse.\n        authData.anonymous = null;\n      }\n\n      this.set('username', username);\n    }\n    /**\n     * Calls set(\"password\", password, options) and returns the result.\n     *\n     * @param {string} password User's Password\n     */\n\n  }, {\n    key: \"setPassword\",\n    value: function (password\n    /*: string*/\n    ) {\n      this.set('password', password);\n    }\n    /**\n     * Returns get(\"email\").\n     *\n     * @returns {string} User's Email\n     */\n\n  }, {\n    key: \"getEmail\",\n    value: function ()\n    /*: ?string*/\n    {\n      var email = this.get('email');\n\n      if (email == null || typeof email === 'string') {\n        return email;\n      }\n\n      return '';\n    }\n    /**\n     * Calls set(\"email\", email) and returns the result.\n     *\n     * @param {string} email\n     * @returns {boolean}\n     */\n\n  }, {\n    key: \"setEmail\",\n    value: function (email\n    /*: string*/\n    ) {\n      return this.set('email', email);\n    }\n    /**\n     * Returns the session token for this user, if the user has been logged in,\n     * or if it is the result of a query with the master key. Otherwise, returns\n     * undefined.\n     *\n     * @returns {string} the session token, or undefined\n     */\n\n  }, {\n    key: \"getSessionToken\",\n    value: function ()\n    /*: ?string*/\n    {\n      var token = this.get('sessionToken');\n\n      if (token == null || typeof token === 'string') {\n        return token;\n      }\n\n      return '';\n    }\n    /**\n     * Checks whether this user is the current user and has been authenticated.\n     *\n     * @returns {boolean} whether this user is the current user and is logged in.\n     */\n\n  }, {\n    key: \"authenticated\",\n    value: function ()\n    /*: boolean*/\n    {\n      var current = ParseUser.current();\n      return !!this.get('sessionToken') && !!current && current.id === this.id;\n    }\n    /**\n     * Signs up a new user. You should call this instead of save for\n     * new Parse.Users. This will create a new Parse.User on the server, and\n     * also persist the session on disk so that you can access the user using\n     * <code>current</code>.\n     *\n     * <p>A username and password must be set before calling signUp.</p>\n     *\n     * @param {object} attrs Extra fields to set on the new user, or null.\n     * @param {object} options\n     * @returns {Promise} A promise that is fulfilled when the signup\n     *     finishes.\n     */\n\n  }, {\n    key: \"signUp\",\n    value: function (attrs\n    /*: AttributeMap*/\n    , options\n    /*:: ?: FullOptions*/\n    )\n    /*: Promise<ParseUser>*/\n    {\n      options = options || {};\n      var signupOptions = {};\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        signupOptions.useMasterKey = options.useMasterKey;\n      }\n\n      if (options.hasOwnProperty('installationId')) {\n        signupOptions.installationId = options.installationId;\n      }\n\n      var controller = _CoreManager.default.getUserController();\n\n      return controller.signUp(this, attrs, signupOptions);\n    }\n    /**\n     * Logs in a Parse.User. On success, this saves the session to disk,\n     * so you can retrieve the currently logged in user using\n     * <code>current</code>.\n     *\n     * <p>A username and password must be set before calling logIn.</p>\n     *\n     * @param {object} options\n     * @returns {Promise} A promise that is fulfilled with the user when\n     *     the login is complete.\n     */\n\n  }, {\n    key: \"logIn\",\n    value: function (options\n    /*:: ?: FullOptions*/\n    )\n    /*: Promise<ParseUser>*/\n    {\n      options = options || {};\n      var loginOptions = {\n        usePost: true\n      };\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        loginOptions.useMasterKey = options.useMasterKey;\n      }\n\n      if (options.hasOwnProperty('installationId')) {\n        loginOptions.installationId = options.installationId;\n      }\n\n      if (options.hasOwnProperty('usePost')) {\n        loginOptions.usePost = options.usePost;\n      }\n\n      var controller = _CoreManager.default.getUserController();\n\n      return controller.logIn(this, loginOptions);\n    }\n    /**\n     * Wrap the default save behavior with functionality to save to local\n     * storage if this is current user.\n     *\n     * @param {...any} args\n     * @returns {Promise}\n     */\n\n  }, {\n    key: \"save\",\n    value: function () {\n      var _save = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee2() {\n        var _len,\n            args,\n            _key4,\n            current,\n            _args2 = arguments;\n\n        return _regenerator.default.wrap(function (_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                for (_len = _args2.length, args = new Array(_len), _key4 = 0; _key4 < _len; _key4++) {\n                  args[_key4] = _args2[_key4];\n                }\n\n                _context2.next = 3;\n                return (0, _get2.default)((0, _getPrototypeOf2.default)(ParseUser.prototype), \"save\", this).apply(this, args);\n\n              case 3:\n                _context2.next = 5;\n                return this.isCurrentAsync();\n\n              case 5:\n                current = _context2.sent;\n\n                if (!current) {\n                  _context2.next = 8;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\", _CoreManager.default.getUserController().updateUserOnDisk(this));\n\n              case 8:\n                return _context2.abrupt(\"return\", this);\n\n              case 9:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function () {\n        return _save.apply(this, arguments);\n      };\n    }()\n    /**\n     * Wrap the default destroy behavior with functionality that logs out\n     * the current user when it is destroyed\n     *\n     * @param {...any} args\n     * @returns {Parse.User}\n     */\n\n  }, {\n    key: \"destroy\",\n    value: function () {\n      var _destroy = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee3() {\n        var _len2,\n            args,\n            _key5,\n            current,\n            _args3 = arguments;\n\n        return _regenerator.default.wrap(function (_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                for (_len2 = _args3.length, args = new Array(_len2), _key5 = 0; _key5 < _len2; _key5++) {\n                  args[_key5] = _args3[_key5];\n                }\n\n                _context3.next = 3;\n                return (0, _get2.default)((0, _getPrototypeOf2.default)(ParseUser.prototype), \"destroy\", this).apply(this, args);\n\n              case 3:\n                _context3.next = 5;\n                return this.isCurrentAsync();\n\n              case 5:\n                current = _context3.sent;\n\n                if (!current) {\n                  _context3.next = 8;\n                  break;\n                }\n\n                return _context3.abrupt(\"return\", _CoreManager.default.getUserController().removeUserFromDisk());\n\n              case 8:\n                return _context3.abrupt(\"return\", this);\n\n              case 9:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      return function () {\n        return _destroy.apply(this, arguments);\n      };\n    }()\n    /**\n     * Wrap the default fetch behavior with functionality to save to local\n     * storage if this is current user.\n     *\n     * @param {...any} args\n     * @returns {Parse.User}\n     */\n\n  }, {\n    key: \"fetch\",\n    value: function () {\n      var _fetch = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee4() {\n        var _len3,\n            args,\n            _key6,\n            current,\n            _args4 = arguments;\n\n        return _regenerator.default.wrap(function (_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                for (_len3 = _args4.length, args = new Array(_len3), _key6 = 0; _key6 < _len3; _key6++) {\n                  args[_key6] = _args4[_key6];\n                }\n\n                _context4.next = 3;\n                return (0, _get2.default)((0, _getPrototypeOf2.default)(ParseUser.prototype), \"fetch\", this).apply(this, args);\n\n              case 3:\n                _context4.next = 5;\n                return this.isCurrentAsync();\n\n              case 5:\n                current = _context4.sent;\n\n                if (!current) {\n                  _context4.next = 8;\n                  break;\n                }\n\n                return _context4.abrupt(\"return\", _CoreManager.default.getUserController().updateUserOnDisk(this));\n\n              case 8:\n                return _context4.abrupt(\"return\", this);\n\n              case 9:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      return function () {\n        return _fetch.apply(this, arguments);\n      };\n    }()\n    /**\n     * Wrap the default fetchWithInclude behavior with functionality to save to local\n     * storage if this is current user.\n     *\n     * @param {...any} args\n     * @returns {Parse.User}\n     */\n\n  }, {\n    key: \"fetchWithInclude\",\n    value: function () {\n      var _fetchWithInclude = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee5() {\n        var _len4,\n            args,\n            _key7,\n            current,\n            _args5 = arguments;\n\n        return _regenerator.default.wrap(function (_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                for (_len4 = _args5.length, args = new Array(_len4), _key7 = 0; _key7 < _len4; _key7++) {\n                  args[_key7] = _args5[_key7];\n                }\n\n                _context5.next = 3;\n                return (0, _get2.default)((0, _getPrototypeOf2.default)(ParseUser.prototype), \"fetchWithInclude\", this).apply(this, args);\n\n              case 3:\n                _context5.next = 5;\n                return this.isCurrentAsync();\n\n              case 5:\n                current = _context5.sent;\n\n                if (!current) {\n                  _context5.next = 8;\n                  break;\n                }\n\n                return _context5.abrupt(\"return\", _CoreManager.default.getUserController().updateUserOnDisk(this));\n\n              case 8:\n                return _context5.abrupt(\"return\", this);\n\n              case 9:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      return function () {\n        return _fetchWithInclude.apply(this, arguments);\n      };\n    }()\n    /**\n     * Verify whether a given password is the password of the current user.\n     *\n     * @param {string} password A password to be verified\n     * @param {object} options\n     * @returns {Promise} A promise that is fulfilled with a user\n     *  when the password is correct.\n     */\n\n  }, {\n    key: \"verifyPassword\",\n    value: function (password\n    /*: string*/\n    , options\n    /*:: ?: RequestOptions*/\n    )\n    /*: Promise<ParseUser>*/\n    {\n      var username = this.getUsername() || '';\n      return ParseUser.verifyPassword(username, password, options);\n    }\n  }], [{\n    key: \"readOnlyAttributes\",\n    value: function () {\n      return ['sessionToken'];\n    }\n    /**\n     * Adds functionality to the existing Parse.User class.\n     *\n     * @param {object} protoProps A set of properties to add to the prototype\n     * @param {object} classProps A set of static properties to add to the class\n     * @static\n     * @returns {Parse.User} The newly extended Parse.User class\n     */\n\n  }, {\n    key: \"extend\",\n    value: function (protoProps\n    /*: { [prop: string]: any }*/\n    , classProps\n    /*: { [prop: string]: any }*/\n    ) {\n      if (protoProps) {\n        for (var _prop in protoProps) {\n          if (_prop !== 'className') {\n            (0, _defineProperty.default)(ParseUser.prototype, _prop, {\n              value: protoProps[_prop],\n              enumerable: false,\n              writable: true,\n              configurable: true\n            });\n          }\n        }\n      }\n\n      if (classProps) {\n        for (var _prop2 in classProps) {\n          if (_prop2 !== 'className') {\n            (0, _defineProperty.default)(ParseUser, _prop2, {\n              value: classProps[_prop2],\n              enumerable: false,\n              writable: true,\n              configurable: true\n            });\n          }\n        }\n      }\n\n      return ParseUser;\n    }\n    /**\n     * Retrieves the currently logged in ParseUser with a valid session,\n     * either from memory or localStorage, if necessary.\n     *\n     * @static\n     * @returns {Parse.Object} The currently logged in Parse.User.\n     */\n\n  }, {\n    key: \"current\",\n    value: function ()\n    /*: ?ParseUser*/\n    {\n      if (!canUseCurrentUser) {\n        return null;\n      }\n\n      var controller = _CoreManager.default.getUserController();\n\n      return controller.currentUser();\n    }\n    /**\n     * Retrieves the currently logged in ParseUser from asynchronous Storage.\n     *\n     * @static\n     * @returns {Promise} A Promise that is resolved with the currently\n     *   logged in Parse User\n     */\n\n  }, {\n    key: \"currentAsync\",\n    value: function ()\n    /*: Promise<?ParseUser>*/\n    {\n      if (!canUseCurrentUser) {\n        return _promise.default.resolve(null);\n      }\n\n      var controller = _CoreManager.default.getUserController();\n\n      return controller.currentUserAsync();\n    }\n    /**\n     * Signs up a new user with a username (or email) and password.\n     * This will create a new Parse.User on the server, and also persist the\n     * session in localStorage so that you can access the user using\n     * {@link #current}.\n     *\n     * @param {string} username The username (or email) to sign up with.\n     * @param {string} password The password to sign up with.\n     * @param {object} attrs Extra fields to set on the new user.\n     * @param {object} options\n     * @static\n     * @returns {Promise} A promise that is fulfilled with the user when\n     *     the signup completes.\n     */\n\n  }, {\n    key: \"signUp\",\n    value: function (username\n    /*: string*/\n    , password\n    /*: string*/\n    , attrs\n    /*: AttributeMap*/\n    , options\n    /*:: ?: FullOptions*/\n    ) {\n      attrs = attrs || {};\n      attrs.username = username;\n      attrs.password = password;\n      var user = new this(attrs);\n      return user.signUp({}, options);\n    }\n    /**\n     * Logs in a user with a username (or email) and password. On success, this\n     * saves the session to disk, so you can retrieve the currently logged in\n     * user using <code>current</code>.\n     *\n     * @param {string} username The username (or email) to log in with.\n     * @param {string} password The password to log in with.\n     * @param {object} options\n     * @static\n     * @returns {Promise} A promise that is fulfilled with the user when\n     *     the login completes.\n     */\n\n  }, {\n    key: \"logIn\",\n    value: function (username\n    /*: string*/\n    , password\n    /*: string*/\n    , options\n    /*:: ?: FullOptions*/\n    ) {\n      if (typeof username !== 'string') {\n        return _promise.default.reject(new _ParseError.default(_ParseError.default.OTHER_CAUSE, 'Username must be a string.'));\n      } else if (typeof password !== 'string') {\n        return _promise.default.reject(new _ParseError.default(_ParseError.default.OTHER_CAUSE, 'Password must be a string.'));\n      }\n\n      var user = new this();\n\n      user._finishFetch({\n        username: username,\n        password: password\n      });\n\n      return user.logIn(options);\n    }\n    /**\n     * Logs in a user with a session token. On success, this saves the session\n     * to disk, so you can retrieve the currently logged in user using\n     * <code>current</code>.\n     *\n     * @param {string} sessionToken The sessionToken to log in with.\n     * @param {object} options\n     * @static\n     * @returns {Promise} A promise that is fulfilled with the user when\n     *     the login completes.\n     */\n\n  }, {\n    key: \"become\",\n    value: function (sessionToken\n    /*: string*/\n    , options\n    /*:: ?: RequestOptions*/\n    ) {\n      if (!canUseCurrentUser) {\n        throw new Error('It is not memory-safe to become a user in a server environment');\n      }\n\n      options = options || {};\n      var becomeOptions\n      /*: RequestOptions*/\n      = {\n        sessionToken: sessionToken\n      };\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        becomeOptions.useMasterKey = options.useMasterKey;\n      }\n\n      var controller = _CoreManager.default.getUserController();\n\n      var user = new this();\n      return controller.become(user, becomeOptions);\n    }\n    /**\n     * Retrieves a user with a session token.\n     *\n     * @param {string} sessionToken The sessionToken to get user with.\n     * @param {object} options\n     * @static\n     * @returns {Promise} A promise that is fulfilled with the user is fetched.\n     */\n\n  }, {\n    key: \"me\",\n    value: function (sessionToken\n    /*: string*/\n    ) {\n      var options\n      /*:: ?: RequestOptions*/\n      = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      var controller = _CoreManager.default.getUserController();\n\n      var meOptions\n      /*: RequestOptions*/\n      = {\n        sessionToken: sessionToken\n      };\n\n      if (options.useMasterKey) {\n        meOptions.useMasterKey = options.useMasterKey;\n      }\n\n      var user = new this();\n      return controller.me(user, meOptions);\n    }\n    /**\n     * Logs in a user with a session token. On success, this saves the session\n     * to disk, so you can retrieve the currently logged in user using\n     * <code>current</code>. If there is no session token the user will not logged in.\n     *\n     * @param {object} userJSON The JSON map of the User's data\n     * @static\n     * @returns {Promise} A promise that is fulfilled with the user when\n     *     the login completes.\n     */\n\n  }, {\n    key: \"hydrate\",\n    value: function (userJSON\n    /*: AttributeMap*/\n    ) {\n      var controller = _CoreManager.default.getUserController();\n\n      var user = new this();\n      return controller.hydrate(user, userJSON);\n    }\n    /**\n     * Static version of {@link https://parseplatform.org/Parse-SDK-JS/api/master/Parse.User.html#linkWith linkWith}\n     *\n     * @param provider\n     * @param options\n     * @param saveOpts\n     * @static\n     * @returns {Promise}\n     */\n\n  }, {\n    key: \"logInWith\",\n    value: function (provider\n    /*: any*/\n    , options\n    /*: { authData?: AuthData }*/\n    , saveOpts\n    /*:: ?: FullOptions*/\n    )\n    /*: Promise<ParseUser>*/\n    {\n      var user = new this();\n      return user.linkWith(provider, options, saveOpts);\n    }\n    /**\n     * Logs out the currently logged in user session. This will remove the\n     * session from disk, log out of linked services, and future calls to\n     * <code>current</code> will return <code>null</code>.\n     *\n     * @param {object} options\n     * @static\n     * @returns {Promise} A promise that is resolved when the session is\n     *   destroyed on the server.\n     */\n\n  }, {\n    key: \"logOut\",\n    value: function () {\n      var options\n      /*: RequestOptions*/\n      = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      var controller = _CoreManager.default.getUserController();\n\n      return controller.logOut(options);\n    }\n    /**\n     * Requests a password reset email to be sent to the specified email address\n     * associated with the user account. This email allows the user to securely\n     * reset their password on the Parse site.\n     *\n     * @param {string} email The email address associated with the user that\n     *     forgot their password.\n     * @param {object} options\n     * @static\n     * @returns {Promise}\n     */\n\n  }, {\n    key: \"requestPasswordReset\",\n    value: function (email\n    /*: string*/\n    , options\n    /*:: ?: RequestOptions*/\n    ) {\n      options = options || {};\n      var requestOptions = {};\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        requestOptions.useMasterKey = options.useMasterKey;\n      }\n\n      var controller = _CoreManager.default.getUserController();\n\n      return controller.requestPasswordReset(email, requestOptions);\n    }\n    /**\n     * Request an email verification.\n     *\n     * @param {string} email The email address associated with the user that\n     *     forgot their password.\n     * @param {object} options\n     * @static\n     * @returns {Promise}\n     */\n\n  }, {\n    key: \"requestEmailVerification\",\n    value: function (email\n    /*: string*/\n    , options\n    /*:: ?: RequestOptions*/\n    ) {\n      options = options || {};\n      var requestOptions = {};\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        requestOptions.useMasterKey = options.useMasterKey;\n      }\n\n      var controller = _CoreManager.default.getUserController();\n\n      return controller.requestEmailVerification(email, requestOptions);\n    }\n    /**\n     * Verify whether a given password is the password of the current user.\n     *\n     * @param {string} username  A username to be used for identificaiton\n     * @param {string} password A password to be verified\n     * @param {object} options\n     * @static\n     * @returns {Promise} A promise that is fulfilled with a user\n     *  when the password is correct.\n     */\n\n  }, {\n    key: \"verifyPassword\",\n    value: function (username\n    /*: string*/\n    , password\n    /*: string*/\n    , options\n    /*:: ?: RequestOptions*/\n    ) {\n      if (typeof username !== 'string') {\n        return _promise.default.reject(new _ParseError.default(_ParseError.default.OTHER_CAUSE, 'Username must be a string.'));\n      }\n\n      if (typeof password !== 'string') {\n        return _promise.default.reject(new _ParseError.default(_ParseError.default.OTHER_CAUSE, 'Password must be a string.'));\n      }\n\n      options = options || {};\n      var verificationOption = {};\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        verificationOption.useMasterKey = options.useMasterKey;\n      }\n\n      var controller = _CoreManager.default.getUserController();\n\n      return controller.verifyPassword(username, password, verificationOption);\n    }\n    /**\n     * Allow someone to define a custom User class without className\n     * being rewritten to _User. The default behavior is to rewrite\n     * User to _User for legacy reasons. This allows developers to\n     * override that behavior.\n     *\n     * @param {boolean} isAllowed Whether or not to allow custom User class\n     * @static\n     */\n\n  }, {\n    key: \"allowCustomUserClass\",\n    value: function (isAllowed\n    /*: boolean*/\n    ) {\n      _CoreManager.default.set('PERFORM_USER_REWRITE', !isAllowed);\n    }\n    /**\n     * Allows a legacy application to start using revocable sessions. If the\n     * current session token is not revocable, a request will be made for a new,\n     * revocable session.\n     * It is not necessary to call this method from cloud code unless you are\n     * handling user signup or login from the server side. In a cloud code call,\n     * this function will not attempt to upgrade the current token.\n     *\n     * @param {object} options\n     * @static\n     * @returns {Promise} A promise that is resolved when the process has\n     *   completed. If a replacement session token is requested, the promise\n     *   will be resolved after a new token has been fetched.\n     */\n\n  }, {\n    key: \"enableRevocableSession\",\n    value: function (options\n    /*:: ?: RequestOptions*/\n    ) {\n      options = options || {};\n\n      _CoreManager.default.set('FORCE_REVOCABLE_SESSION', true);\n\n      if (canUseCurrentUser) {\n        var current = ParseUser.current();\n\n        if (current) {\n          return current._upgradeToRevocableSession(options);\n        }\n      }\n\n      return _promise.default.resolve();\n    }\n    /**\n     * Enables the use of become or the current user in a server\n     * environment. These features are disabled by default, since they depend on\n     * global objects that are not memory-safe for most servers.\n     *\n     * @static\n     */\n\n  }, {\n    key: \"enableUnsafeCurrentUser\",\n    value: function () {\n      canUseCurrentUser = true;\n    }\n    /**\n     * Disables the use of become or the current user in any environment.\n     * These features are disabled on servers by default, since they depend on\n     * global objects that are not memory-safe for most servers.\n     *\n     * @static\n     */\n\n  }, {\n    key: \"disableUnsafeCurrentUser\",\n    value: function () {\n      canUseCurrentUser = false;\n    }\n    /**\n     * When registering users with {@link https://parseplatform.org/Parse-SDK-JS/api/master/Parse.User.html#linkWith linkWith} a basic auth provider\n     * is automatically created for you.\n     *\n     * For advanced authentication, you can register an Auth provider to\n     * implement custom authentication, deauthentication.\n     *\n     * @param provider\n     * @see {@link https://parseplatform.org/Parse-SDK-JS/api/master/AuthProvider.html AuthProvider}\n     * @see {@link https://docs.parseplatform.org/js/guide/#custom-authentication-module Custom Authentication Module}\n     * @static\n     */\n\n  }, {\n    key: \"_registerAuthenticationProvider\",\n    value: function (provider\n    /*: any*/\n    ) {\n      authProviders[provider.getAuthType()] = provider; // Synchronize the current user with the auth provider.\n\n      ParseUser.currentAsync().then(function (current) {\n        if (current) {\n          current._synchronizeAuthData(provider.getAuthType());\n        }\n      });\n    }\n    /**\n     * @param provider\n     * @param options\n     * @param saveOpts\n     * @deprecated since 2.9.0 see {@link https://parseplatform.org/Parse-SDK-JS/api/master/Parse.User.html#logInWith logInWith}\n     * @static\n     * @returns {Promise}\n     */\n\n  }, {\n    key: \"_logInWith\",\n    value: function (provider\n    /*: any*/\n    , options\n    /*: { authData?: AuthData }*/\n    , saveOpts\n    /*:: ?: FullOptions*/\n    ) {\n      var user = new this();\n      return user.linkWith(provider, options, saveOpts);\n    }\n  }, {\n    key: \"_clearCache\",\n    value: function () {\n      currentUserCache = null;\n      currentUserCacheMatchesDisk = false;\n    }\n  }, {\n    key: \"_setCurrentUserCache\",\n    value: function (user\n    /*: ParseUser*/\n    ) {\n      currentUserCache = user;\n    }\n  }]);\n  return ParseUser;\n}(_ParseObject2.default);\n\n_ParseObject2.default.registerSubclass('_User', ParseUser);\n\nvar DefaultController = {\n  updateUserOnDisk: function (user) {\n    var path = _Storage.default.generatePath(CURRENT_USER_KEY);\n\n    var json = user.toJSON();\n    delete json.password;\n    json.className = '_User';\n    var userData = (0, _stringify.default)(json);\n\n    if (_CoreManager.default.get('ENCRYPTED_USER')) {\n      var crypto = _CoreManager.default.getCryptoController();\n\n      userData = crypto.encrypt(json, _CoreManager.default.get('ENCRYPTED_KEY'));\n    }\n\n    return _Storage.default.setItemAsync(path, userData).then(function () {\n      return user;\n    });\n  },\n  removeUserFromDisk: function () {\n    var path = _Storage.default.generatePath(CURRENT_USER_KEY);\n\n    currentUserCacheMatchesDisk = true;\n    currentUserCache = null;\n    return _Storage.default.removeItemAsync(path);\n  },\n  setCurrentUser: function (user) {\n    currentUserCache = user;\n\n    user._cleanupAuthData();\n\n    user._synchronizeAllAuthData();\n\n    return DefaultController.updateUserOnDisk(user);\n  },\n  currentUser: function ()\n  /*: ?ParseUser*/\n  {\n    if (currentUserCache) {\n      return currentUserCache;\n    }\n\n    if (currentUserCacheMatchesDisk) {\n      return null;\n    }\n\n    if (_Storage.default.async()) {\n      throw new Error('Cannot call currentUser() when using a platform with an async ' + 'storage system. Call currentUserAsync() instead.');\n    }\n\n    var path = _Storage.default.generatePath(CURRENT_USER_KEY);\n\n    var userData = _Storage.default.getItem(path);\n\n    currentUserCacheMatchesDisk = true;\n\n    if (!userData) {\n      currentUserCache = null;\n      return null;\n    }\n\n    if (_CoreManager.default.get('ENCRYPTED_USER')) {\n      var crypto = _CoreManager.default.getCryptoController();\n\n      userData = crypto.decrypt(userData, _CoreManager.default.get('ENCRYPTED_KEY'));\n    }\n\n    userData = JSON.parse(userData);\n\n    if (!userData.className) {\n      userData.className = '_User';\n    }\n\n    if (userData._id) {\n      if (userData.objectId !== userData._id) {\n        userData.objectId = userData._id;\n      }\n\n      delete userData._id;\n    }\n\n    if (userData._sessionToken) {\n      userData.sessionToken = userData._sessionToken;\n      delete userData._sessionToken;\n    }\n\n    var current = _ParseObject2.default.fromJSON(userData);\n\n    currentUserCache = current;\n\n    current._synchronizeAllAuthData();\n\n    return current;\n  },\n  currentUserAsync: function ()\n  /*: Promise<?ParseUser>*/\n  {\n    if (currentUserCache) {\n      return _promise.default.resolve(currentUserCache);\n    }\n\n    if (currentUserCacheMatchesDisk) {\n      return _promise.default.resolve(null);\n    }\n\n    var path = _Storage.default.generatePath(CURRENT_USER_KEY);\n\n    return _Storage.default.getItemAsync(path).then(function (userData) {\n      currentUserCacheMatchesDisk = true;\n\n      if (!userData) {\n        currentUserCache = null;\n        return _promise.default.resolve(null);\n      }\n\n      if (_CoreManager.default.get('ENCRYPTED_USER')) {\n        var crypto = _CoreManager.default.getCryptoController();\n\n        userData = crypto.decrypt(userData.toString(), _CoreManager.default.get('ENCRYPTED_KEY'));\n      }\n\n      userData = JSON.parse(userData);\n\n      if (!userData.className) {\n        userData.className = '_User';\n      }\n\n      if (userData._id) {\n        if (userData.objectId !== userData._id) {\n          userData.objectId = userData._id;\n        }\n\n        delete userData._id;\n      }\n\n      if (userData._sessionToken) {\n        userData.sessionToken = userData._sessionToken;\n        delete userData._sessionToken;\n      }\n\n      var current = _ParseObject2.default.fromJSON(userData);\n\n      currentUserCache = current;\n\n      current._synchronizeAllAuthData();\n\n      return _promise.default.resolve(current);\n    });\n  },\n  signUp: function (user\n  /*: ParseUser*/\n  , attrs\n  /*: AttributeMap*/\n  , options\n  /*: RequestOptions*/\n  )\n  /*: Promise<ParseUser>*/\n  {\n    var username = attrs && attrs.username || user.get('username');\n    var password = attrs && attrs.password || user.get('password');\n\n    if (!username || !username.length) {\n      return _promise.default.reject(new _ParseError.default(_ParseError.default.OTHER_CAUSE, 'Cannot sign up user with an empty username.'));\n    }\n\n    if (!password || !password.length) {\n      return _promise.default.reject(new _ParseError.default(_ParseError.default.OTHER_CAUSE, 'Cannot sign up user with an empty password.'));\n    }\n\n    return user.save(attrs, options).then(function () {\n      // Clear the password field\n      user._finishFetch({\n        password: undefined\n      });\n\n      if (canUseCurrentUser) {\n        return DefaultController.setCurrentUser(user);\n      }\n\n      return user;\n    });\n  },\n  logIn: function (user\n  /*: ParseUser*/\n  , options\n  /*: RequestOptions*/\n  )\n  /*: Promise<ParseUser>*/\n  {\n    var RESTController = _CoreManager.default.getRESTController();\n\n    var stateController = _CoreManager.default.getObjectStateController();\n\n    var auth = {\n      username: user.get('username'),\n      password: user.get('password')\n    };\n    return RESTController.request(options.usePost ? 'POST' : 'GET', 'login', auth, options).then(function (response) {\n      user._migrateId(response.objectId);\n\n      user._setExisted(true);\n\n      stateController.setPendingOp(user._getStateIdentifier(), 'username', undefined);\n      stateController.setPendingOp(user._getStateIdentifier(), 'password', undefined);\n      response.password = undefined;\n\n      user._finishFetch(response);\n\n      if (!canUseCurrentUser) {\n        // We can't set the current user, so just return the one we logged in\n        return _promise.default.resolve(user);\n      }\n\n      return DefaultController.setCurrentUser(user);\n    });\n  },\n  become: function (user\n  /*: ParseUser*/\n  , options\n  /*: RequestOptions*/\n  )\n  /*: Promise<ParseUser>*/\n  {\n    var RESTController = _CoreManager.default.getRESTController();\n\n    return RESTController.request('GET', 'users/me', {}, options).then(function (response) {\n      user._finishFetch(response);\n\n      user._setExisted(true);\n\n      return DefaultController.setCurrentUser(user);\n    });\n  },\n  hydrate: function (user\n  /*: ParseUser*/\n  , userJSON\n  /*: AttributeMap*/\n  )\n  /*: Promise<ParseUser>*/\n  {\n    user._finishFetch(userJSON);\n\n    user._setExisted(true);\n\n    if (userJSON.sessionToken && canUseCurrentUser) {\n      return DefaultController.setCurrentUser(user);\n    } else {\n      return _promise.default.resolve(user);\n    }\n  },\n  me: function (user\n  /*: ParseUser*/\n  , options\n  /*: RequestOptions*/\n  )\n  /*: Promise<ParseUser>*/\n  {\n    var RESTController = _CoreManager.default.getRESTController();\n\n    return RESTController.request('GET', 'users/me', {}, options).then(function (response) {\n      user._finishFetch(response);\n\n      user._setExisted(true);\n\n      return user;\n    });\n  },\n  logOut: function (options\n  /*: RequestOptions*/\n  )\n  /*: Promise<ParseUser>*/\n  {\n    var RESTController = _CoreManager.default.getRESTController();\n\n    if (options.sessionToken) {\n      return RESTController.request('POST', 'logout', {}, options);\n    }\n\n    return DefaultController.currentUserAsync().then(function (currentUser) {\n      var path = _Storage.default.generatePath(CURRENT_USER_KEY);\n\n      var promise = _Storage.default.removeItemAsync(path);\n\n      if (currentUser !== null) {\n        var currentSession = currentUser.getSessionToken();\n\n        if (currentSession && (0, _isRevocableSession.default)(currentSession)) {\n          promise = promise.then(function () {\n            return RESTController.request('POST', 'logout', {}, {\n              sessionToken: currentSession\n            });\n          });\n        }\n\n        currentUser._logOutWithAll();\n\n        currentUser._finishFetch({\n          sessionToken: undefined\n        });\n      }\n\n      currentUserCacheMatchesDisk = true;\n      currentUserCache = null;\n      return promise;\n    });\n  },\n  requestPasswordReset: function (email\n  /*: string*/\n  , options\n  /*: RequestOptions*/\n  ) {\n    var RESTController = _CoreManager.default.getRESTController();\n\n    return RESTController.request('POST', 'requestPasswordReset', {\n      email: email\n    }, options);\n  },\n  upgradeToRevocableSession: function (user\n  /*: ParseUser*/\n  , options\n  /*: RequestOptions*/\n  ) {\n    return (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee6() {\n      var token, RESTController, result, session, current;\n      return _regenerator.default.wrap(function (_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              token = user.getSessionToken();\n\n              if (token) {\n                _context6.next = 3;\n                break;\n              }\n\n              return _context6.abrupt(\"return\", _promise.default.reject(new _ParseError.default(_ParseError.default.SESSION_MISSING, 'Cannot upgrade a user with no session token')));\n\n            case 3:\n              options.sessionToken = token;\n              RESTController = _CoreManager.default.getRESTController();\n              _context6.next = 7;\n              return RESTController.request('POST', 'upgradeToRevocableSession', {}, options);\n\n            case 7:\n              result = _context6.sent;\n              session = new _ParseSession.default();\n\n              session._finishFetch(result);\n\n              user._finishFetch({\n                sessionToken: session.getSessionToken()\n              });\n\n              _context6.next = 13;\n              return user.isCurrentAsync();\n\n            case 13:\n              current = _context6.sent;\n\n              if (!current) {\n                _context6.next = 16;\n                break;\n              }\n\n              return _context6.abrupt(\"return\", DefaultController.setCurrentUser(user));\n\n            case 16:\n              return _context6.abrupt(\"return\", _promise.default.resolve(user));\n\n            case 17:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6);\n    }))();\n  },\n  linkWith: function (user\n  /*: ParseUser*/\n  , authData\n  /*: AuthData*/\n  , options\n  /*: FullOptions*/\n  ) {\n    return user.save({\n      authData: authData\n    }, options).then(function () {\n      if (canUseCurrentUser) {\n        return DefaultController.setCurrentUser(user);\n      }\n\n      return user;\n    });\n  },\n  verifyPassword: function (username\n  /*: string*/\n  , password\n  /*: string*/\n  , options\n  /*: RequestOptions*/\n  ) {\n    var RESTController = _CoreManager.default.getRESTController();\n\n    return RESTController.request('GET', 'verifyPassword', {\n      username: username,\n      password: password\n    }, options);\n  },\n  requestEmailVerification: function (email\n  /*: string*/\n  , options\n  /*: RequestOptions*/\n  ) {\n    var RESTController = _CoreManager.default.getRESTController();\n\n    return RESTController.request('POST', 'verificationEmailRequest', {\n      email: email\n    }, options);\n  }\n};\n\n_CoreManager.default.setUserController(DefaultController);\n\nvar _default = ParseUser;\nexports.default = _default;","map":{"version":3,"names":["_interopRequireDefault","require","_Object$defineProperty2","_Reflect$construct","exports","value","default","_stringify","_defineProperty","_regenerator","_asyncToGenerator2","_promise","_typeof2","_classCallCheck2","_createClass2","_get2","_inherits2","_possibleConstructorReturn2","_getPrototypeOf2","_CoreManager","_isRevocableSession","_ParseError","_ParseObject2","_ParseSession","_Storage","_createSuper","Derived","hasNativeReflectConstruct","_isNativeReflectConstruct","Super","result","NewTarget","constructor","arguments","apply","Reflect","sham","Proxy","Boolean","prototype","valueOf","call","e","CURRENT_USER_KEY","canUseCurrentUser","get","currentUserCacheMatchesDisk","currentUserCache","authProviders","ParseUser","_ParseObject","_super","attributes","_this","set","Error","key","options","upgradeOptions","hasOwnProperty","useMasterKey","controller","getUserController","upgradeToRevocableSession","provider","_this2","saveOpts","length","undefined","sessionToken","getSessionToken","authType","authProvider","restoreAuthentication","getAuthType","authData","linkWith","resolve","reject","authenticate","success","opts","then","error","_error","isCurrent","_unlinkFrom","_key","_synchronizeAuthData","_key2","_this3","_key3","_logOutWith","deauthenticate","current","id","_isCurrentAsync","mark","_callee","wrap","_context","prev","next","currentAsync","sent","abrupt","stop","username","anonymous","password","email","token","attrs","signupOptions","installationId","signUp","loginOptions","usePost","logIn","_save","_callee2","_len","args","_key4","_args2","_context2","Array","isCurrentAsync","updateUserOnDisk","_destroy","_callee3","_len2","_key5","_args3","_context3","removeUserFromDisk","_fetch","_callee4","_len3","_key6","_args4","_context4","_fetchWithInclude","_callee5","_len4","_key7","_args5","_context5","getUsername","verifyPassword","protoProps","classProps","_prop","enumerable","writable","configurable","_prop2","currentUser","currentUserAsync","user","OTHER_CAUSE","_finishFetch","becomeOptions","become","meOptions","me","userJSON","hydrate","logOut","requestOptions","requestPasswordReset","requestEmailVerification","verificationOption","isAllowed","_upgradeToRevocableSession","registerSubclass","DefaultController","path","generatePath","json","toJSON","className","userData","crypto","getCryptoController","encrypt","setItemAsync","removeItemAsync","setCurrentUser","_cleanupAuthData","_synchronizeAllAuthData","async","getItem","decrypt","JSON","parse","_id","objectId","_sessionToken","fromJSON","getItemAsync","toString","save","RESTController","getRESTController","stateController","getObjectStateController","auth","request","response","_migrateId","_setExisted","setPendingOp","_getStateIdentifier","promise","currentSession","_logOutWithAll","_callee6","session","_context6","SESSION_MISSING","setUserController","_default"],"sources":["/Users/NikitaMac/Desktop/Modern Web Development/Homework/modern-web-development-project/project/node_modules/parse/lib/browser/ParseUser.js"],"sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs3/helpers/interopRequireDefault\");\n\nvar _Object$defineProperty2 = require(\"@babel/runtime-corejs3/core-js-stable/object/define-property\");\n\nvar _Reflect$construct = require(\"@babel/runtime-corejs3/core-js-stable/reflect/construct\");\n\n_Object$defineProperty2(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = void 0;\n\nvar _stringify = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/json/stringify\"));\n\nvar _defineProperty = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/object/define-property\"));\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime-corejs3/regenerator\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/asyncToGenerator\"));\n\nvar _promise = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/promise\"));\n\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/typeof\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/createClass\"));\n\nvar _get2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/get\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/getPrototypeOf\"));\n\nvar _CoreManager = _interopRequireDefault(require(\"./CoreManager\"));\n\nvar _isRevocableSession = _interopRequireDefault(require(\"./isRevocableSession\"));\n\nvar _ParseError = _interopRequireDefault(require(\"./ParseError\"));\n\nvar _ParseObject2 = _interopRequireDefault(require(\"./ParseObject\"));\n\nvar _ParseSession = _interopRequireDefault(require(\"./ParseSession\"));\n\nvar _Storage = _interopRequireDefault(require(\"./Storage\"));\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function () {\n    var Super = (0, _getPrototypeOf2.default)(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;\n      result = _Reflect$construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return (0, _possibleConstructorReturn2.default)(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !_Reflect$construct) return false;\n  if (_Reflect$construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(_Reflect$construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nvar CURRENT_USER_KEY = 'currentUser';\nvar canUseCurrentUser = !_CoreManager.default.get('IS_NODE');\nvar currentUserCacheMatchesDisk = false;\nvar currentUserCache = null;\nvar authProviders = {};\n/**\n * <p>A Parse.User object is a local representation of a user persisted to the\n * Parse cloud. This class is a subclass of a Parse.Object, and retains the\n * same functionality of a Parse.Object, but also extends it with various\n * user specific methods, like authentication, signing up, and validation of\n * uniqueness.</p>\n *\n * @alias Parse.User\n * @augments Parse.Object\n */\n\nvar ParseUser = /*#__PURE__*/function (_ParseObject) {\n  (0, _inherits2.default)(ParseUser, _ParseObject);\n\n  var _super = _createSuper(ParseUser);\n  /**\n   * @param {object} attributes The initial set of data to store in the user.\n   */\n\n\n  function ParseUser(attributes\n  /*: ?AttributeMap*/\n  ) {\n    var _this;\n\n    (0, _classCallCheck2.default)(this, ParseUser);\n    _this = _super.call(this, '_User');\n\n    if (attributes && (0, _typeof2.default)(attributes) === 'object') {\n      if (!_this.set(attributes || {})) {\n        throw new Error(\"Can't create an invalid Parse User\");\n      }\n    }\n\n    return _this;\n  }\n  /**\n   * Request a revocable session token to replace the older style of token.\n   *\n   * @param {object} options\n   * @returns {Promise} A promise that is resolved when the replacement\n   *   token has been fetched.\n   */\n\n\n  (0, _createClass2.default)(ParseUser, [{\n    key: \"_upgradeToRevocableSession\",\n    value: function (options\n    /*: RequestOptions*/\n    )\n    /*: Promise<void>*/\n    {\n      options = options || {};\n      var upgradeOptions = {};\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        upgradeOptions.useMasterKey = options.useMasterKey;\n      }\n\n      var controller = _CoreManager.default.getUserController();\n\n      return controller.upgradeToRevocableSession(this, upgradeOptions);\n    }\n    /**\n     * Parse allows you to link your users with {@link https://docs.parseplatform.org/parse-server/guide/#oauth-and-3rd-party-authentication 3rd party authentication}, enabling\n     * your users to sign up or log into your application using their existing identities.\n     * Since 2.9.0\n     *\n     * @see {@link https://docs.parseplatform.org/js/guide/#linking-users Linking Users}\n     * @param {string | AuthProvider} provider Name of auth provider or {@link https://parseplatform.org/Parse-SDK-JS/api/master/AuthProvider.html AuthProvider}\n     * @param {object} options\n     * <ul>\n     *   <li>If provider is string, options is {@link http://docs.parseplatform.org/parse-server/guide/#supported-3rd-party-authentications authData}\n     *   <li>If provider is AuthProvider, options is saveOpts\n     * </ul>\n     * @param {object} saveOpts useMasterKey / sessionToken\n     * @returns {Promise} A promise that is fulfilled with the user is linked\n     */\n\n  }, {\n    key: \"linkWith\",\n    value: function (provider\n    /*: any*/\n    , options\n    /*: { authData?: AuthData }*/\n    )\n    /*: Promise<ParseUser>*/\n    {\n      var _this2 = this;\n\n      var saveOpts\n      /*:: ?: FullOptions*/\n      = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      saveOpts.sessionToken = saveOpts.sessionToken || this.getSessionToken() || '';\n      var authType;\n\n      if (typeof provider === 'string') {\n        authType = provider;\n\n        if (authProviders[provider]) {\n          provider = authProviders[provider];\n        } else {\n          var authProvider = {\n            restoreAuthentication: function () {\n              return true;\n            },\n            getAuthType: function () {\n              return authType;\n            }\n          };\n          authProviders[authProvider.getAuthType()] = authProvider;\n          provider = authProvider;\n        }\n      } else {\n        authType = provider.getAuthType();\n      }\n\n      if (options && options.hasOwnProperty('authData')) {\n        var authData = this.get('authData') || {};\n\n        if ((0, _typeof2.default)(authData) !== 'object') {\n          throw new Error('Invalid type: authData field should be an object');\n        }\n\n        authData[authType] = options.authData;\n\n        var controller = _CoreManager.default.getUserController();\n\n        return controller.linkWith(this, authData, saveOpts);\n      } else {\n        return new _promise.default(function (resolve, reject) {\n          provider.authenticate({\n            success: function (provider, result) {\n              var opts = {};\n              opts.authData = result;\n\n              _this2.linkWith(provider, opts, saveOpts).then(function () {\n                resolve(_this2);\n              }, function (error) {\n                reject(error);\n              });\n            },\n            error: function (provider, _error) {\n              reject(_error);\n            }\n          });\n        });\n      }\n    }\n    /**\n     * @param provider\n     * @param options\n     * @param saveOpts\n     * @deprecated since 2.9.0 see {@link https://parseplatform.org/Parse-SDK-JS/api/master/Parse.User.html#linkWith linkWith}\n     * @returns {Promise}\n     */\n\n  }, {\n    key: \"_linkWith\",\n    value: function (provider\n    /*: any*/\n    , options\n    /*: { authData?: AuthData }*/\n    )\n    /*: Promise<ParseUser>*/\n    {\n      var saveOpts\n      /*:: ?: FullOptions*/\n      = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      return this.linkWith(provider, options, saveOpts);\n    }\n    /**\n     * Synchronizes auth data for a provider (e.g. puts the access token in the\n     * right place to be used by the Facebook SDK).\n     *\n     * @param provider\n     */\n\n  }, {\n    key: \"_synchronizeAuthData\",\n    value: function (provider\n    /*: string*/\n    ) {\n      if (!this.isCurrent() || !provider) {\n        return;\n      }\n\n      var authType;\n\n      if (typeof provider === 'string') {\n        authType = provider;\n        provider = authProviders[authType];\n      } else {\n        authType = provider.getAuthType();\n      }\n\n      var authData = this.get('authData');\n\n      if (!provider || !authData || (0, _typeof2.default)(authData) !== 'object') {\n        return;\n      }\n\n      var success = provider.restoreAuthentication(authData[authType]);\n\n      if (!success) {\n        this._unlinkFrom(provider);\n      }\n    }\n    /**\n     * Synchronizes authData for all providers.\n     */\n\n  }, {\n    key: \"_synchronizeAllAuthData\",\n    value: function () {\n      var authData = this.get('authData');\n\n      if ((0, _typeof2.default)(authData) !== 'object') {\n        return;\n      }\n\n      for (var _key in authData) {\n        this._synchronizeAuthData(_key);\n      }\n    }\n    /**\n     * Removes null values from authData (which exist temporarily for unlinking)\n     */\n\n  }, {\n    key: \"_cleanupAuthData\",\n    value: function () {\n      if (!this.isCurrent()) {\n        return;\n      }\n\n      var authData = this.get('authData');\n\n      if ((0, _typeof2.default)(authData) !== 'object') {\n        return;\n      }\n\n      for (var _key2 in authData) {\n        if (!authData[_key2]) {\n          delete authData[_key2];\n        }\n      }\n    }\n    /**\n     * Unlinks a user from a service.\n     *\n     * @param {string | AuthProvider} provider Name of auth provider or {@link https://parseplatform.org/Parse-SDK-JS/api/master/AuthProvider.html AuthProvider}\n     * @param {object} options MasterKey / SessionToken\n     * @returns {Promise} A promise that is fulfilled when the unlinking\n     *     finishes.\n     */\n\n  }, {\n    key: \"_unlinkFrom\",\n    value: function (provider\n    /*: any*/\n    , options\n    /*:: ?: FullOptions*/\n    )\n    /*: Promise<ParseUser>*/\n    {\n      var _this3 = this;\n\n      return this.linkWith(provider, {\n        authData: null\n      }, options).then(function () {\n        _this3._synchronizeAuthData(provider);\n\n        return _promise.default.resolve(_this3);\n      });\n    }\n    /**\n     * Checks whether a user is linked to a service.\n     *\n     * @param {object} provider service to link to\n     * @returns {boolean} true if link was successful\n     */\n\n  }, {\n    key: \"_isLinked\",\n    value: function (provider\n    /*: any*/\n    )\n    /*: boolean*/\n    {\n      var authType;\n\n      if (typeof provider === 'string') {\n        authType = provider;\n      } else {\n        authType = provider.getAuthType();\n      }\n\n      var authData = this.get('authData') || {};\n\n      if ((0, _typeof2.default)(authData) !== 'object') {\n        return false;\n      }\n\n      return !!authData[authType];\n    }\n    /**\n     * Deauthenticates all providers.\n     */\n\n  }, {\n    key: \"_logOutWithAll\",\n    value: function () {\n      var authData = this.get('authData');\n\n      if ((0, _typeof2.default)(authData) !== 'object') {\n        return;\n      }\n\n      for (var _key3 in authData) {\n        this._logOutWith(_key3);\n      }\n    }\n    /**\n     * Deauthenticates a single provider (e.g. removing access tokens from the\n     * Facebook SDK).\n     *\n     * @param {object} provider service to logout of\n     */\n\n  }, {\n    key: \"_logOutWith\",\n    value: function (provider\n    /*: any*/\n    ) {\n      if (!this.isCurrent()) {\n        return;\n      }\n\n      if (typeof provider === 'string') {\n        provider = authProviders[provider];\n      }\n\n      if (provider && provider.deauthenticate) {\n        provider.deauthenticate();\n      }\n    }\n    /**\n     * Class instance method used to maintain specific keys when a fetch occurs.\n     * Used to ensure that the session token is not lost.\n     *\n     * @returns {object} sessionToken\n     */\n\n  }, {\n    key: \"_preserveFieldsOnFetch\",\n    value: function ()\n    /*: AttributeMap*/\n    {\n      return {\n        sessionToken: this.get('sessionToken')\n      };\n    }\n    /**\n     * Returns true if <code>current</code> would return this user.\n     *\n     * @returns {boolean} true if user is cached on disk\n     */\n\n  }, {\n    key: \"isCurrent\",\n    value: function ()\n    /*: boolean*/\n    {\n      var current = ParseUser.current();\n      return !!current && current.id === this.id;\n    }\n    /**\n     * Returns true if <code>current</code> would return this user.\n     *\n     * @returns {Promise<boolean>} true if user is cached on disk\n     */\n\n  }, {\n    key: \"isCurrentAsync\",\n    value: function () {\n      var _isCurrentAsync = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee() {\n        var current;\n        return _regenerator.default.wrap(function (_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return ParseUser.currentAsync();\n\n              case 2:\n                current = _context.sent;\n                return _context.abrupt(\"return\", !!current && current.id === this.id);\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function () {\n        return _isCurrentAsync.apply(this, arguments);\n      };\n    }()\n    /**\n     * Returns get(\"username\").\n     *\n     * @returns {string}\n     */\n\n  }, {\n    key: \"getUsername\",\n    value: function ()\n    /*: ?string*/\n    {\n      var username = this.get('username');\n\n      if (username == null || typeof username === 'string') {\n        return username;\n      }\n\n      return '';\n    }\n    /**\n     * Calls set(\"username\", username, options) and returns the result.\n     *\n     * @param {string} username\n     */\n\n  }, {\n    key: \"setUsername\",\n    value: function (username\n    /*: string*/\n    ) {\n      // Strip anonymity\n      var authData = this.get('authData');\n\n      if (authData && (0, _typeof2.default)(authData) === 'object' && authData.hasOwnProperty('anonymous')) {\n        // We need to set anonymous to null instead of deleting it in order to remove it from Parse.\n        authData.anonymous = null;\n      }\n\n      this.set('username', username);\n    }\n    /**\n     * Calls set(\"password\", password, options) and returns the result.\n     *\n     * @param {string} password User's Password\n     */\n\n  }, {\n    key: \"setPassword\",\n    value: function (password\n    /*: string*/\n    ) {\n      this.set('password', password);\n    }\n    /**\n     * Returns get(\"email\").\n     *\n     * @returns {string} User's Email\n     */\n\n  }, {\n    key: \"getEmail\",\n    value: function ()\n    /*: ?string*/\n    {\n      var email = this.get('email');\n\n      if (email == null || typeof email === 'string') {\n        return email;\n      }\n\n      return '';\n    }\n    /**\n     * Calls set(\"email\", email) and returns the result.\n     *\n     * @param {string} email\n     * @returns {boolean}\n     */\n\n  }, {\n    key: \"setEmail\",\n    value: function (email\n    /*: string*/\n    ) {\n      return this.set('email', email);\n    }\n    /**\n     * Returns the session token for this user, if the user has been logged in,\n     * or if it is the result of a query with the master key. Otherwise, returns\n     * undefined.\n     *\n     * @returns {string} the session token, or undefined\n     */\n\n  }, {\n    key: \"getSessionToken\",\n    value: function ()\n    /*: ?string*/\n    {\n      var token = this.get('sessionToken');\n\n      if (token == null || typeof token === 'string') {\n        return token;\n      }\n\n      return '';\n    }\n    /**\n     * Checks whether this user is the current user and has been authenticated.\n     *\n     * @returns {boolean} whether this user is the current user and is logged in.\n     */\n\n  }, {\n    key: \"authenticated\",\n    value: function ()\n    /*: boolean*/\n    {\n      var current = ParseUser.current();\n      return !!this.get('sessionToken') && !!current && current.id === this.id;\n    }\n    /**\n     * Signs up a new user. You should call this instead of save for\n     * new Parse.Users. This will create a new Parse.User on the server, and\n     * also persist the session on disk so that you can access the user using\n     * <code>current</code>.\n     *\n     * <p>A username and password must be set before calling signUp.</p>\n     *\n     * @param {object} attrs Extra fields to set on the new user, or null.\n     * @param {object} options\n     * @returns {Promise} A promise that is fulfilled when the signup\n     *     finishes.\n     */\n\n  }, {\n    key: \"signUp\",\n    value: function (attrs\n    /*: AttributeMap*/\n    , options\n    /*:: ?: FullOptions*/\n    )\n    /*: Promise<ParseUser>*/\n    {\n      options = options || {};\n      var signupOptions = {};\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        signupOptions.useMasterKey = options.useMasterKey;\n      }\n\n      if (options.hasOwnProperty('installationId')) {\n        signupOptions.installationId = options.installationId;\n      }\n\n      var controller = _CoreManager.default.getUserController();\n\n      return controller.signUp(this, attrs, signupOptions);\n    }\n    /**\n     * Logs in a Parse.User. On success, this saves the session to disk,\n     * so you can retrieve the currently logged in user using\n     * <code>current</code>.\n     *\n     * <p>A username and password must be set before calling logIn.</p>\n     *\n     * @param {object} options\n     * @returns {Promise} A promise that is fulfilled with the user when\n     *     the login is complete.\n     */\n\n  }, {\n    key: \"logIn\",\n    value: function (options\n    /*:: ?: FullOptions*/\n    )\n    /*: Promise<ParseUser>*/\n    {\n      options = options || {};\n      var loginOptions = {\n        usePost: true\n      };\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        loginOptions.useMasterKey = options.useMasterKey;\n      }\n\n      if (options.hasOwnProperty('installationId')) {\n        loginOptions.installationId = options.installationId;\n      }\n\n      if (options.hasOwnProperty('usePost')) {\n        loginOptions.usePost = options.usePost;\n      }\n\n      var controller = _CoreManager.default.getUserController();\n\n      return controller.logIn(this, loginOptions);\n    }\n    /**\n     * Wrap the default save behavior with functionality to save to local\n     * storage if this is current user.\n     *\n     * @param {...any} args\n     * @returns {Promise}\n     */\n\n  }, {\n    key: \"save\",\n    value: function () {\n      var _save = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee2() {\n        var _len,\n            args,\n            _key4,\n            current,\n            _args2 = arguments;\n\n        return _regenerator.default.wrap(function (_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                for (_len = _args2.length, args = new Array(_len), _key4 = 0; _key4 < _len; _key4++) {\n                  args[_key4] = _args2[_key4];\n                }\n\n                _context2.next = 3;\n                return (0, _get2.default)((0, _getPrototypeOf2.default)(ParseUser.prototype), \"save\", this).apply(this, args);\n\n              case 3:\n                _context2.next = 5;\n                return this.isCurrentAsync();\n\n              case 5:\n                current = _context2.sent;\n\n                if (!current) {\n                  _context2.next = 8;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\", _CoreManager.default.getUserController().updateUserOnDisk(this));\n\n              case 8:\n                return _context2.abrupt(\"return\", this);\n\n              case 9:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function () {\n        return _save.apply(this, arguments);\n      };\n    }()\n    /**\n     * Wrap the default destroy behavior with functionality that logs out\n     * the current user when it is destroyed\n     *\n     * @param {...any} args\n     * @returns {Parse.User}\n     */\n\n  }, {\n    key: \"destroy\",\n    value: function () {\n      var _destroy = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee3() {\n        var _len2,\n            args,\n            _key5,\n            current,\n            _args3 = arguments;\n\n        return _regenerator.default.wrap(function (_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                for (_len2 = _args3.length, args = new Array(_len2), _key5 = 0; _key5 < _len2; _key5++) {\n                  args[_key5] = _args3[_key5];\n                }\n\n                _context3.next = 3;\n                return (0, _get2.default)((0, _getPrototypeOf2.default)(ParseUser.prototype), \"destroy\", this).apply(this, args);\n\n              case 3:\n                _context3.next = 5;\n                return this.isCurrentAsync();\n\n              case 5:\n                current = _context3.sent;\n\n                if (!current) {\n                  _context3.next = 8;\n                  break;\n                }\n\n                return _context3.abrupt(\"return\", _CoreManager.default.getUserController().removeUserFromDisk());\n\n              case 8:\n                return _context3.abrupt(\"return\", this);\n\n              case 9:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      return function () {\n        return _destroy.apply(this, arguments);\n      };\n    }()\n    /**\n     * Wrap the default fetch behavior with functionality to save to local\n     * storage if this is current user.\n     *\n     * @param {...any} args\n     * @returns {Parse.User}\n     */\n\n  }, {\n    key: \"fetch\",\n    value: function () {\n      var _fetch = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee4() {\n        var _len3,\n            args,\n            _key6,\n            current,\n            _args4 = arguments;\n\n        return _regenerator.default.wrap(function (_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                for (_len3 = _args4.length, args = new Array(_len3), _key6 = 0; _key6 < _len3; _key6++) {\n                  args[_key6] = _args4[_key6];\n                }\n\n                _context4.next = 3;\n                return (0, _get2.default)((0, _getPrototypeOf2.default)(ParseUser.prototype), \"fetch\", this).apply(this, args);\n\n              case 3:\n                _context4.next = 5;\n                return this.isCurrentAsync();\n\n              case 5:\n                current = _context4.sent;\n\n                if (!current) {\n                  _context4.next = 8;\n                  break;\n                }\n\n                return _context4.abrupt(\"return\", _CoreManager.default.getUserController().updateUserOnDisk(this));\n\n              case 8:\n                return _context4.abrupt(\"return\", this);\n\n              case 9:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      return function () {\n        return _fetch.apply(this, arguments);\n      };\n    }()\n    /**\n     * Wrap the default fetchWithInclude behavior with functionality to save to local\n     * storage if this is current user.\n     *\n     * @param {...any} args\n     * @returns {Parse.User}\n     */\n\n  }, {\n    key: \"fetchWithInclude\",\n    value: function () {\n      var _fetchWithInclude = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee5() {\n        var _len4,\n            args,\n            _key7,\n            current,\n            _args5 = arguments;\n\n        return _regenerator.default.wrap(function (_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                for (_len4 = _args5.length, args = new Array(_len4), _key7 = 0; _key7 < _len4; _key7++) {\n                  args[_key7] = _args5[_key7];\n                }\n\n                _context5.next = 3;\n                return (0, _get2.default)((0, _getPrototypeOf2.default)(ParseUser.prototype), \"fetchWithInclude\", this).apply(this, args);\n\n              case 3:\n                _context5.next = 5;\n                return this.isCurrentAsync();\n\n              case 5:\n                current = _context5.sent;\n\n                if (!current) {\n                  _context5.next = 8;\n                  break;\n                }\n\n                return _context5.abrupt(\"return\", _CoreManager.default.getUserController().updateUserOnDisk(this));\n\n              case 8:\n                return _context5.abrupt(\"return\", this);\n\n              case 9:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      return function () {\n        return _fetchWithInclude.apply(this, arguments);\n      };\n    }()\n    /**\n     * Verify whether a given password is the password of the current user.\n     *\n     * @param {string} password A password to be verified\n     * @param {object} options\n     * @returns {Promise} A promise that is fulfilled with a user\n     *  when the password is correct.\n     */\n\n  }, {\n    key: \"verifyPassword\",\n    value: function (password\n    /*: string*/\n    , options\n    /*:: ?: RequestOptions*/\n    )\n    /*: Promise<ParseUser>*/\n    {\n      var username = this.getUsername() || '';\n      return ParseUser.verifyPassword(username, password, options);\n    }\n  }], [{\n    key: \"readOnlyAttributes\",\n    value: function () {\n      return ['sessionToken'];\n    }\n    /**\n     * Adds functionality to the existing Parse.User class.\n     *\n     * @param {object} protoProps A set of properties to add to the prototype\n     * @param {object} classProps A set of static properties to add to the class\n     * @static\n     * @returns {Parse.User} The newly extended Parse.User class\n     */\n\n  }, {\n    key: \"extend\",\n    value: function (protoProps\n    /*: { [prop: string]: any }*/\n    , classProps\n    /*: { [prop: string]: any }*/\n    ) {\n      if (protoProps) {\n        for (var _prop in protoProps) {\n          if (_prop !== 'className') {\n            (0, _defineProperty.default)(ParseUser.prototype, _prop, {\n              value: protoProps[_prop],\n              enumerable: false,\n              writable: true,\n              configurable: true\n            });\n          }\n        }\n      }\n\n      if (classProps) {\n        for (var _prop2 in classProps) {\n          if (_prop2 !== 'className') {\n            (0, _defineProperty.default)(ParseUser, _prop2, {\n              value: classProps[_prop2],\n              enumerable: false,\n              writable: true,\n              configurable: true\n            });\n          }\n        }\n      }\n\n      return ParseUser;\n    }\n    /**\n     * Retrieves the currently logged in ParseUser with a valid session,\n     * either from memory or localStorage, if necessary.\n     *\n     * @static\n     * @returns {Parse.Object} The currently logged in Parse.User.\n     */\n\n  }, {\n    key: \"current\",\n    value: function ()\n    /*: ?ParseUser*/\n    {\n      if (!canUseCurrentUser) {\n        return null;\n      }\n\n      var controller = _CoreManager.default.getUserController();\n\n      return controller.currentUser();\n    }\n    /**\n     * Retrieves the currently logged in ParseUser from asynchronous Storage.\n     *\n     * @static\n     * @returns {Promise} A Promise that is resolved with the currently\n     *   logged in Parse User\n     */\n\n  }, {\n    key: \"currentAsync\",\n    value: function ()\n    /*: Promise<?ParseUser>*/\n    {\n      if (!canUseCurrentUser) {\n        return _promise.default.resolve(null);\n      }\n\n      var controller = _CoreManager.default.getUserController();\n\n      return controller.currentUserAsync();\n    }\n    /**\n     * Signs up a new user with a username (or email) and password.\n     * This will create a new Parse.User on the server, and also persist the\n     * session in localStorage so that you can access the user using\n     * {@link #current}.\n     *\n     * @param {string} username The username (or email) to sign up with.\n     * @param {string} password The password to sign up with.\n     * @param {object} attrs Extra fields to set on the new user.\n     * @param {object} options\n     * @static\n     * @returns {Promise} A promise that is fulfilled with the user when\n     *     the signup completes.\n     */\n\n  }, {\n    key: \"signUp\",\n    value: function (username\n    /*: string*/\n    , password\n    /*: string*/\n    , attrs\n    /*: AttributeMap*/\n    , options\n    /*:: ?: FullOptions*/\n    ) {\n      attrs = attrs || {};\n      attrs.username = username;\n      attrs.password = password;\n      var user = new this(attrs);\n      return user.signUp({}, options);\n    }\n    /**\n     * Logs in a user with a username (or email) and password. On success, this\n     * saves the session to disk, so you can retrieve the currently logged in\n     * user using <code>current</code>.\n     *\n     * @param {string} username The username (or email) to log in with.\n     * @param {string} password The password to log in with.\n     * @param {object} options\n     * @static\n     * @returns {Promise} A promise that is fulfilled with the user when\n     *     the login completes.\n     */\n\n  }, {\n    key: \"logIn\",\n    value: function (username\n    /*: string*/\n    , password\n    /*: string*/\n    , options\n    /*:: ?: FullOptions*/\n    ) {\n      if (typeof username !== 'string') {\n        return _promise.default.reject(new _ParseError.default(_ParseError.default.OTHER_CAUSE, 'Username must be a string.'));\n      } else if (typeof password !== 'string') {\n        return _promise.default.reject(new _ParseError.default(_ParseError.default.OTHER_CAUSE, 'Password must be a string.'));\n      }\n\n      var user = new this();\n\n      user._finishFetch({\n        username: username,\n        password: password\n      });\n\n      return user.logIn(options);\n    }\n    /**\n     * Logs in a user with a session token. On success, this saves the session\n     * to disk, so you can retrieve the currently logged in user using\n     * <code>current</code>.\n     *\n     * @param {string} sessionToken The sessionToken to log in with.\n     * @param {object} options\n     * @static\n     * @returns {Promise} A promise that is fulfilled with the user when\n     *     the login completes.\n     */\n\n  }, {\n    key: \"become\",\n    value: function (sessionToken\n    /*: string*/\n    , options\n    /*:: ?: RequestOptions*/\n    ) {\n      if (!canUseCurrentUser) {\n        throw new Error('It is not memory-safe to become a user in a server environment');\n      }\n\n      options = options || {};\n      var becomeOptions\n      /*: RequestOptions*/\n      = {\n        sessionToken: sessionToken\n      };\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        becomeOptions.useMasterKey = options.useMasterKey;\n      }\n\n      var controller = _CoreManager.default.getUserController();\n\n      var user = new this();\n      return controller.become(user, becomeOptions);\n    }\n    /**\n     * Retrieves a user with a session token.\n     *\n     * @param {string} sessionToken The sessionToken to get user with.\n     * @param {object} options\n     * @static\n     * @returns {Promise} A promise that is fulfilled with the user is fetched.\n     */\n\n  }, {\n    key: \"me\",\n    value: function (sessionToken\n    /*: string*/\n    ) {\n      var options\n      /*:: ?: RequestOptions*/\n      = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      var controller = _CoreManager.default.getUserController();\n\n      var meOptions\n      /*: RequestOptions*/\n      = {\n        sessionToken: sessionToken\n      };\n\n      if (options.useMasterKey) {\n        meOptions.useMasterKey = options.useMasterKey;\n      }\n\n      var user = new this();\n      return controller.me(user, meOptions);\n    }\n    /**\n     * Logs in a user with a session token. On success, this saves the session\n     * to disk, so you can retrieve the currently logged in user using\n     * <code>current</code>. If there is no session token the user will not logged in.\n     *\n     * @param {object} userJSON The JSON map of the User's data\n     * @static\n     * @returns {Promise} A promise that is fulfilled with the user when\n     *     the login completes.\n     */\n\n  }, {\n    key: \"hydrate\",\n    value: function (userJSON\n    /*: AttributeMap*/\n    ) {\n      var controller = _CoreManager.default.getUserController();\n\n      var user = new this();\n      return controller.hydrate(user, userJSON);\n    }\n    /**\n     * Static version of {@link https://parseplatform.org/Parse-SDK-JS/api/master/Parse.User.html#linkWith linkWith}\n     *\n     * @param provider\n     * @param options\n     * @param saveOpts\n     * @static\n     * @returns {Promise}\n     */\n\n  }, {\n    key: \"logInWith\",\n    value: function (provider\n    /*: any*/\n    , options\n    /*: { authData?: AuthData }*/\n    , saveOpts\n    /*:: ?: FullOptions*/\n    )\n    /*: Promise<ParseUser>*/\n    {\n      var user = new this();\n      return user.linkWith(provider, options, saveOpts);\n    }\n    /**\n     * Logs out the currently logged in user session. This will remove the\n     * session from disk, log out of linked services, and future calls to\n     * <code>current</code> will return <code>null</code>.\n     *\n     * @param {object} options\n     * @static\n     * @returns {Promise} A promise that is resolved when the session is\n     *   destroyed on the server.\n     */\n\n  }, {\n    key: \"logOut\",\n    value: function () {\n      var options\n      /*: RequestOptions*/\n      = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      var controller = _CoreManager.default.getUserController();\n\n      return controller.logOut(options);\n    }\n    /**\n     * Requests a password reset email to be sent to the specified email address\n     * associated with the user account. This email allows the user to securely\n     * reset their password on the Parse site.\n     *\n     * @param {string} email The email address associated with the user that\n     *     forgot their password.\n     * @param {object} options\n     * @static\n     * @returns {Promise}\n     */\n\n  }, {\n    key: \"requestPasswordReset\",\n    value: function (email\n    /*: string*/\n    , options\n    /*:: ?: RequestOptions*/\n    ) {\n      options = options || {};\n      var requestOptions = {};\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        requestOptions.useMasterKey = options.useMasterKey;\n      }\n\n      var controller = _CoreManager.default.getUserController();\n\n      return controller.requestPasswordReset(email, requestOptions);\n    }\n    /**\n     * Request an email verification.\n     *\n     * @param {string} email The email address associated with the user that\n     *     forgot their password.\n     * @param {object} options\n     * @static\n     * @returns {Promise}\n     */\n\n  }, {\n    key: \"requestEmailVerification\",\n    value: function (email\n    /*: string*/\n    , options\n    /*:: ?: RequestOptions*/\n    ) {\n      options = options || {};\n      var requestOptions = {};\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        requestOptions.useMasterKey = options.useMasterKey;\n      }\n\n      var controller = _CoreManager.default.getUserController();\n\n      return controller.requestEmailVerification(email, requestOptions);\n    }\n    /**\n     * Verify whether a given password is the password of the current user.\n     *\n     * @param {string} username  A username to be used for identificaiton\n     * @param {string} password A password to be verified\n     * @param {object} options\n     * @static\n     * @returns {Promise} A promise that is fulfilled with a user\n     *  when the password is correct.\n     */\n\n  }, {\n    key: \"verifyPassword\",\n    value: function (username\n    /*: string*/\n    , password\n    /*: string*/\n    , options\n    /*:: ?: RequestOptions*/\n    ) {\n      if (typeof username !== 'string') {\n        return _promise.default.reject(new _ParseError.default(_ParseError.default.OTHER_CAUSE, 'Username must be a string.'));\n      }\n\n      if (typeof password !== 'string') {\n        return _promise.default.reject(new _ParseError.default(_ParseError.default.OTHER_CAUSE, 'Password must be a string.'));\n      }\n\n      options = options || {};\n      var verificationOption = {};\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        verificationOption.useMasterKey = options.useMasterKey;\n      }\n\n      var controller = _CoreManager.default.getUserController();\n\n      return controller.verifyPassword(username, password, verificationOption);\n    }\n    /**\n     * Allow someone to define a custom User class without className\n     * being rewritten to _User. The default behavior is to rewrite\n     * User to _User for legacy reasons. This allows developers to\n     * override that behavior.\n     *\n     * @param {boolean} isAllowed Whether or not to allow custom User class\n     * @static\n     */\n\n  }, {\n    key: \"allowCustomUserClass\",\n    value: function (isAllowed\n    /*: boolean*/\n    ) {\n      _CoreManager.default.set('PERFORM_USER_REWRITE', !isAllowed);\n    }\n    /**\n     * Allows a legacy application to start using revocable sessions. If the\n     * current session token is not revocable, a request will be made for a new,\n     * revocable session.\n     * It is not necessary to call this method from cloud code unless you are\n     * handling user signup or login from the server side. In a cloud code call,\n     * this function will not attempt to upgrade the current token.\n     *\n     * @param {object} options\n     * @static\n     * @returns {Promise} A promise that is resolved when the process has\n     *   completed. If a replacement session token is requested, the promise\n     *   will be resolved after a new token has been fetched.\n     */\n\n  }, {\n    key: \"enableRevocableSession\",\n    value: function (options\n    /*:: ?: RequestOptions*/\n    ) {\n      options = options || {};\n\n      _CoreManager.default.set('FORCE_REVOCABLE_SESSION', true);\n\n      if (canUseCurrentUser) {\n        var current = ParseUser.current();\n\n        if (current) {\n          return current._upgradeToRevocableSession(options);\n        }\n      }\n\n      return _promise.default.resolve();\n    }\n    /**\n     * Enables the use of become or the current user in a server\n     * environment. These features are disabled by default, since they depend on\n     * global objects that are not memory-safe for most servers.\n     *\n     * @static\n     */\n\n  }, {\n    key: \"enableUnsafeCurrentUser\",\n    value: function () {\n      canUseCurrentUser = true;\n    }\n    /**\n     * Disables the use of become or the current user in any environment.\n     * These features are disabled on servers by default, since they depend on\n     * global objects that are not memory-safe for most servers.\n     *\n     * @static\n     */\n\n  }, {\n    key: \"disableUnsafeCurrentUser\",\n    value: function () {\n      canUseCurrentUser = false;\n    }\n    /**\n     * When registering users with {@link https://parseplatform.org/Parse-SDK-JS/api/master/Parse.User.html#linkWith linkWith} a basic auth provider\n     * is automatically created for you.\n     *\n     * For advanced authentication, you can register an Auth provider to\n     * implement custom authentication, deauthentication.\n     *\n     * @param provider\n     * @see {@link https://parseplatform.org/Parse-SDK-JS/api/master/AuthProvider.html AuthProvider}\n     * @see {@link https://docs.parseplatform.org/js/guide/#custom-authentication-module Custom Authentication Module}\n     * @static\n     */\n\n  }, {\n    key: \"_registerAuthenticationProvider\",\n    value: function (provider\n    /*: any*/\n    ) {\n      authProviders[provider.getAuthType()] = provider; // Synchronize the current user with the auth provider.\n\n      ParseUser.currentAsync().then(function (current) {\n        if (current) {\n          current._synchronizeAuthData(provider.getAuthType());\n        }\n      });\n    }\n    /**\n     * @param provider\n     * @param options\n     * @param saveOpts\n     * @deprecated since 2.9.0 see {@link https://parseplatform.org/Parse-SDK-JS/api/master/Parse.User.html#logInWith logInWith}\n     * @static\n     * @returns {Promise}\n     */\n\n  }, {\n    key: \"_logInWith\",\n    value: function (provider\n    /*: any*/\n    , options\n    /*: { authData?: AuthData }*/\n    , saveOpts\n    /*:: ?: FullOptions*/\n    ) {\n      var user = new this();\n      return user.linkWith(provider, options, saveOpts);\n    }\n  }, {\n    key: \"_clearCache\",\n    value: function () {\n      currentUserCache = null;\n      currentUserCacheMatchesDisk = false;\n    }\n  }, {\n    key: \"_setCurrentUserCache\",\n    value: function (user\n    /*: ParseUser*/\n    ) {\n      currentUserCache = user;\n    }\n  }]);\n  return ParseUser;\n}(_ParseObject2.default);\n\n_ParseObject2.default.registerSubclass('_User', ParseUser);\n\nvar DefaultController = {\n  updateUserOnDisk: function (user) {\n    var path = _Storage.default.generatePath(CURRENT_USER_KEY);\n\n    var json = user.toJSON();\n    delete json.password;\n    json.className = '_User';\n    var userData = (0, _stringify.default)(json);\n\n    if (_CoreManager.default.get('ENCRYPTED_USER')) {\n      var crypto = _CoreManager.default.getCryptoController();\n\n      userData = crypto.encrypt(json, _CoreManager.default.get('ENCRYPTED_KEY'));\n    }\n\n    return _Storage.default.setItemAsync(path, userData).then(function () {\n      return user;\n    });\n  },\n  removeUserFromDisk: function () {\n    var path = _Storage.default.generatePath(CURRENT_USER_KEY);\n\n    currentUserCacheMatchesDisk = true;\n    currentUserCache = null;\n    return _Storage.default.removeItemAsync(path);\n  },\n  setCurrentUser: function (user) {\n    currentUserCache = user;\n\n    user._cleanupAuthData();\n\n    user._synchronizeAllAuthData();\n\n    return DefaultController.updateUserOnDisk(user);\n  },\n  currentUser: function ()\n  /*: ?ParseUser*/\n  {\n    if (currentUserCache) {\n      return currentUserCache;\n    }\n\n    if (currentUserCacheMatchesDisk) {\n      return null;\n    }\n\n    if (_Storage.default.async()) {\n      throw new Error('Cannot call currentUser() when using a platform with an async ' + 'storage system. Call currentUserAsync() instead.');\n    }\n\n    var path = _Storage.default.generatePath(CURRENT_USER_KEY);\n\n    var userData = _Storage.default.getItem(path);\n\n    currentUserCacheMatchesDisk = true;\n\n    if (!userData) {\n      currentUserCache = null;\n      return null;\n    }\n\n    if (_CoreManager.default.get('ENCRYPTED_USER')) {\n      var crypto = _CoreManager.default.getCryptoController();\n\n      userData = crypto.decrypt(userData, _CoreManager.default.get('ENCRYPTED_KEY'));\n    }\n\n    userData = JSON.parse(userData);\n\n    if (!userData.className) {\n      userData.className = '_User';\n    }\n\n    if (userData._id) {\n      if (userData.objectId !== userData._id) {\n        userData.objectId = userData._id;\n      }\n\n      delete userData._id;\n    }\n\n    if (userData._sessionToken) {\n      userData.sessionToken = userData._sessionToken;\n      delete userData._sessionToken;\n    }\n\n    var current = _ParseObject2.default.fromJSON(userData);\n\n    currentUserCache = current;\n\n    current._synchronizeAllAuthData();\n\n    return current;\n  },\n  currentUserAsync: function ()\n  /*: Promise<?ParseUser>*/\n  {\n    if (currentUserCache) {\n      return _promise.default.resolve(currentUserCache);\n    }\n\n    if (currentUserCacheMatchesDisk) {\n      return _promise.default.resolve(null);\n    }\n\n    var path = _Storage.default.generatePath(CURRENT_USER_KEY);\n\n    return _Storage.default.getItemAsync(path).then(function (userData) {\n      currentUserCacheMatchesDisk = true;\n\n      if (!userData) {\n        currentUserCache = null;\n        return _promise.default.resolve(null);\n      }\n\n      if (_CoreManager.default.get('ENCRYPTED_USER')) {\n        var crypto = _CoreManager.default.getCryptoController();\n\n        userData = crypto.decrypt(userData.toString(), _CoreManager.default.get('ENCRYPTED_KEY'));\n      }\n\n      userData = JSON.parse(userData);\n\n      if (!userData.className) {\n        userData.className = '_User';\n      }\n\n      if (userData._id) {\n        if (userData.objectId !== userData._id) {\n          userData.objectId = userData._id;\n        }\n\n        delete userData._id;\n      }\n\n      if (userData._sessionToken) {\n        userData.sessionToken = userData._sessionToken;\n        delete userData._sessionToken;\n      }\n\n      var current = _ParseObject2.default.fromJSON(userData);\n\n      currentUserCache = current;\n\n      current._synchronizeAllAuthData();\n\n      return _promise.default.resolve(current);\n    });\n  },\n  signUp: function (user\n  /*: ParseUser*/\n  , attrs\n  /*: AttributeMap*/\n  , options\n  /*: RequestOptions*/\n  )\n  /*: Promise<ParseUser>*/\n  {\n    var username = attrs && attrs.username || user.get('username');\n    var password = attrs && attrs.password || user.get('password');\n\n    if (!username || !username.length) {\n      return _promise.default.reject(new _ParseError.default(_ParseError.default.OTHER_CAUSE, 'Cannot sign up user with an empty username.'));\n    }\n\n    if (!password || !password.length) {\n      return _promise.default.reject(new _ParseError.default(_ParseError.default.OTHER_CAUSE, 'Cannot sign up user with an empty password.'));\n    }\n\n    return user.save(attrs, options).then(function () {\n      // Clear the password field\n      user._finishFetch({\n        password: undefined\n      });\n\n      if (canUseCurrentUser) {\n        return DefaultController.setCurrentUser(user);\n      }\n\n      return user;\n    });\n  },\n  logIn: function (user\n  /*: ParseUser*/\n  , options\n  /*: RequestOptions*/\n  )\n  /*: Promise<ParseUser>*/\n  {\n    var RESTController = _CoreManager.default.getRESTController();\n\n    var stateController = _CoreManager.default.getObjectStateController();\n\n    var auth = {\n      username: user.get('username'),\n      password: user.get('password')\n    };\n    return RESTController.request(options.usePost ? 'POST' : 'GET', 'login', auth, options).then(function (response) {\n      user._migrateId(response.objectId);\n\n      user._setExisted(true);\n\n      stateController.setPendingOp(user._getStateIdentifier(), 'username', undefined);\n      stateController.setPendingOp(user._getStateIdentifier(), 'password', undefined);\n      response.password = undefined;\n\n      user._finishFetch(response);\n\n      if (!canUseCurrentUser) {\n        // We can't set the current user, so just return the one we logged in\n        return _promise.default.resolve(user);\n      }\n\n      return DefaultController.setCurrentUser(user);\n    });\n  },\n  become: function (user\n  /*: ParseUser*/\n  , options\n  /*: RequestOptions*/\n  )\n  /*: Promise<ParseUser>*/\n  {\n    var RESTController = _CoreManager.default.getRESTController();\n\n    return RESTController.request('GET', 'users/me', {}, options).then(function (response) {\n      user._finishFetch(response);\n\n      user._setExisted(true);\n\n      return DefaultController.setCurrentUser(user);\n    });\n  },\n  hydrate: function (user\n  /*: ParseUser*/\n  , userJSON\n  /*: AttributeMap*/\n  )\n  /*: Promise<ParseUser>*/\n  {\n    user._finishFetch(userJSON);\n\n    user._setExisted(true);\n\n    if (userJSON.sessionToken && canUseCurrentUser) {\n      return DefaultController.setCurrentUser(user);\n    } else {\n      return _promise.default.resolve(user);\n    }\n  },\n  me: function (user\n  /*: ParseUser*/\n  , options\n  /*: RequestOptions*/\n  )\n  /*: Promise<ParseUser>*/\n  {\n    var RESTController = _CoreManager.default.getRESTController();\n\n    return RESTController.request('GET', 'users/me', {}, options).then(function (response) {\n      user._finishFetch(response);\n\n      user._setExisted(true);\n\n      return user;\n    });\n  },\n  logOut: function (options\n  /*: RequestOptions*/\n  )\n  /*: Promise<ParseUser>*/\n  {\n    var RESTController = _CoreManager.default.getRESTController();\n\n    if (options.sessionToken) {\n      return RESTController.request('POST', 'logout', {}, options);\n    }\n\n    return DefaultController.currentUserAsync().then(function (currentUser) {\n      var path = _Storage.default.generatePath(CURRENT_USER_KEY);\n\n      var promise = _Storage.default.removeItemAsync(path);\n\n      if (currentUser !== null) {\n        var currentSession = currentUser.getSessionToken();\n\n        if (currentSession && (0, _isRevocableSession.default)(currentSession)) {\n          promise = promise.then(function () {\n            return RESTController.request('POST', 'logout', {}, {\n              sessionToken: currentSession\n            });\n          });\n        }\n\n        currentUser._logOutWithAll();\n\n        currentUser._finishFetch({\n          sessionToken: undefined\n        });\n      }\n\n      currentUserCacheMatchesDisk = true;\n      currentUserCache = null;\n      return promise;\n    });\n  },\n  requestPasswordReset: function (email\n  /*: string*/\n  , options\n  /*: RequestOptions*/\n  ) {\n    var RESTController = _CoreManager.default.getRESTController();\n\n    return RESTController.request('POST', 'requestPasswordReset', {\n      email: email\n    }, options);\n  },\n  upgradeToRevocableSession: function (user\n  /*: ParseUser*/\n  , options\n  /*: RequestOptions*/\n  ) {\n    return (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee6() {\n      var token, RESTController, result, session, current;\n      return _regenerator.default.wrap(function (_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              token = user.getSessionToken();\n\n              if (token) {\n                _context6.next = 3;\n                break;\n              }\n\n              return _context6.abrupt(\"return\", _promise.default.reject(new _ParseError.default(_ParseError.default.SESSION_MISSING, 'Cannot upgrade a user with no session token')));\n\n            case 3:\n              options.sessionToken = token;\n              RESTController = _CoreManager.default.getRESTController();\n              _context6.next = 7;\n              return RESTController.request('POST', 'upgradeToRevocableSession', {}, options);\n\n            case 7:\n              result = _context6.sent;\n              session = new _ParseSession.default();\n\n              session._finishFetch(result);\n\n              user._finishFetch({\n                sessionToken: session.getSessionToken()\n              });\n\n              _context6.next = 13;\n              return user.isCurrentAsync();\n\n            case 13:\n              current = _context6.sent;\n\n              if (!current) {\n                _context6.next = 16;\n                break;\n              }\n\n              return _context6.abrupt(\"return\", DefaultController.setCurrentUser(user));\n\n            case 16:\n              return _context6.abrupt(\"return\", _promise.default.resolve(user));\n\n            case 17:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6);\n    }))();\n  },\n  linkWith: function (user\n  /*: ParseUser*/\n  , authData\n  /*: AuthData*/\n  , options\n  /*: FullOptions*/\n  ) {\n    return user.save({\n      authData: authData\n    }, options).then(function () {\n      if (canUseCurrentUser) {\n        return DefaultController.setCurrentUser(user);\n      }\n\n      return user;\n    });\n  },\n  verifyPassword: function (username\n  /*: string*/\n  , password\n  /*: string*/\n  , options\n  /*: RequestOptions*/\n  ) {\n    var RESTController = _CoreManager.default.getRESTController();\n\n    return RESTController.request('GET', 'verifyPassword', {\n      username: username,\n      password: password\n    }, options);\n  },\n  requestEmailVerification: function (email\n  /*: string*/\n  , options\n  /*: RequestOptions*/\n  ) {\n    var RESTController = _CoreManager.default.getRESTController();\n\n    return RESTController.request('POST', 'verificationEmailRequest', {\n      email: email\n    }, options);\n  }\n};\n\n_CoreManager.default.setUserController(DefaultController);\n\nvar _default = ParseUser;\nexports.default = _default;"],"mappings":"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"},"metadata":{},"sourceType":"script"}